

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 28 20:20:00 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	cinit,global,class=CODE,merge=1,delta=2
    26                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    30                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    31                           	psect	inittext,global,class=CODE,delta=2
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,merge=1,delta=2
    38                           	psect	text2,local,class=CODE,merge=1,delta=2
    39                           	psect	text3,local,class=CODE,merge=1,delta=2
    40                           	psect	text4,local,class=CODE,merge=1,delta=2
    41                           	psect	text5,local,class=CODE,merge=1,delta=2
    42                           	psect	text6,local,class=CODE,merge=1,delta=2
    43                           	psect	text7,local,class=CODE,merge=1,delta=2
    44                           	psect	text8,local,class=CODE,merge=1,delta=2
    45                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text12,local,class=CODE,merge=1,delta=2
    49                           	psect	text13,local,class=CODE,merge=1,delta=2
    50                           	psect	text14,local,class=CODE,merge=1,delta=2
    51                           	psect	text15,local,class=CODE,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,merge=1,delta=2
    53                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text19,local,class=CODE,merge=1,delta=2
    56                           	psect	text20,local,class=CODE,merge=1,delta=2
    57                           	psect	text21,local,class=CODE,merge=1,delta=2
    58                           	psect	text22,local,class=CODE,merge=1,delta=2
    59                           	psect	text23,local,class=CODE,merge=1,delta=2
    60                           	psect	text24,local,class=CODE,merge=1,delta=2
    61                           	psect	text25,local,class=CODE,merge=1,delta=2
    62                           	psect	text26,local,class=CODE,merge=1,delta=2
    63                           	psect	text27,local,class=CODE,merge=1,delta=2
    64                           	psect	text28,local,class=CODE,merge=1,delta=2
    65                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text30,local,class=CODE,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,merge=1,delta=2
    69                           	psect	text33,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text35,local,class=CODE,merge=1,delta=2
    72                           	psect	swtext1,local,class=CONST,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	dabs	1,0x620,48
    77                           	dabs	1,0x5A0,80
    78                           	dabs	1,0x2370,0,_aPatchMemory
    79                           	dabs	1,0x7E,2
    80  0000                     
    81                           ; Version 1.45
    82                           ; Generated 16/11/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC16F18855 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  001C                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  008C                     	;# 
   144  008C                     	;# 
   145  008D                     	;# 
   146  008E                     	;# 
   147  008E                     	;# 
   148  008F                     	;# 
   149  0090                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  0110                     	;# 
   170  0110                     	;# 
   171  0111                     	;# 
   172  0112                     	;# 
   173  0112                     	;# 
   174  0113                     	;# 
   175  0114                     	;# 
   176  0114                     	;# 
   177  0115                     	;# 
   178  0116                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0119                     	;# 
   182  0119                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011A                     	;# 
   186  011A                     	;# 
   187  011B                     	;# 
   188  011B                     	;# 
   189  011B                     	;# 
   190  011B                     	;# 
   191  011B                     	;# 
   192  011C                     	;# 
   193  011C                     	;# 
   194  011C                     	;# 
   195  011D                     	;# 
   196  011D                     	;# 
   197  011D                     	;# 
   198  011E                     	;# 
   199  011E                     	;# 
   200  011E                     	;# 
   201  011F                     	;# 
   202  011F                     	;# 
   203  011F                     	;# 
   204  011F                     	;# 
   205  011F                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  018F                     	;# 
   210  0190                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0196                     	;# 
   214  0197                     	;# 
   215  0198                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  020C                     	;# 
   221  020C                     	;# 
   222  020D                     	;# 
   223  020E                     	;# 
   224  020F                     	;# 
   225  020F                     	;# 
   226  0210                     	;# 
   227  0210                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0216                     	;# 
   237  0216                     	;# 
   238  0217                     	;# 
   239  0217                     	;# 
   240  0218                     	;# 
   241  0218                     	;# 
   242  0219                     	;# 
   243  021A                     	;# 
   244  021B                     	;# 
   245  021B                     	;# 
   246  021C                     	;# 
   247  021C                     	;# 
   248  021D                     	;# 
   249  021D                     	;# 
   250  021E                     	;# 
   251  021F                     	;# 
   252  028C                     	;# 
   253  028C                     	;# 
   254  028D                     	;# 
   255  028D                     	;# 
   256  028E                     	;# 
   257  028F                     	;# 
   258  0290                     	;# 
   259  0290                     	;# 
   260  0291                     	;# 
   261  0292                     	;# 
   262  0292                     	;# 
   263  0293                     	;# 
   264  0293                     	;# 
   265  0294                     	;# 
   266  0295                     	;# 
   267  0296                     	;# 
   268  0296                     	;# 
   269  0297                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  0299                     	;# 
   274  029A                     	;# 
   275  029B                     	;# 
   276  029C                     	;# 
   277  029C                     	;# 
   278  029D                     	;# 
   279  030C                     	;# 
   280  030C                     	;# 
   281  030D                     	;# 
   282  030E                     	;# 
   283  030F                     	;# 
   284  0310                     	;# 
   285  0310                     	;# 
   286  0311                     	;# 
   287  0312                     	;# 
   288  0313                     	;# 
   289  0314                     	;# 
   290  0314                     	;# 
   291  0315                     	;# 
   292  0316                     	;# 
   293  0317                     	;# 
   294  0318                     	;# 
   295  0318                     	;# 
   296  0319                     	;# 
   297  031A                     	;# 
   298  031B                     	;# 
   299  031C                     	;# 
   300  031C                     	;# 
   301  031D                     	;# 
   302  031E                     	;# 
   303  031F                     	;# 
   304  038C                     	;# 
   305  038D                     	;# 
   306  038E                     	;# 
   307  0390                     	;# 
   308  0391                     	;# 
   309  0392                     	;# 
   310  040C                     	;# 
   311  040D                     	;# 
   312  040E                     	;# 
   313  040F                     	;# 
   314  0410                     	;# 
   315  0411                     	;# 
   316  0416                     	;# 
   317  0416                     	;# 
   318  0417                     	;# 
   319  0418                     	;# 
   320  0418                     	;# 
   321  0419                     	;# 
   322  041A                     	;# 
   323  041A                     	;# 
   324  041B                     	;# 
   325  041C                     	;# 
   326  041C                     	;# 
   327  041D                     	;# 
   328  041E                     	;# 
   329  041F                     	;# 
   330  048C                     	;# 
   331  048C                     	;# 
   332  048D                     	;# 
   333  048E                     	;# 
   334  048F                     	;# 
   335  048F                     	;# 
   336  0490                     	;# 
   337  0491                     	;# 
   338  0492                     	;# 
   339  0492                     	;# 
   340  0493                     	;# 
   341  0494                     	;# 
   342  0495                     	;# 
   343  0495                     	;# 
   344  0496                     	;# 
   345  0497                     	;# 
   346  0498                     	;# 
   347  0499                     	;# 
   348  049A                     	;# 
   349  049B                     	;# 
   350  049C                     	;# 
   351  049D                     	;# 
   352  050C                     	;# 
   353  050C                     	;# 
   354  050D                     	;# 
   355  050E                     	;# 
   356  050F                     	;# 
   357  050F                     	;# 
   358  0510                     	;# 
   359  0511                     	;# 
   360  0512                     	;# 
   361  0512                     	;# 
   362  0513                     	;# 
   363  0514                     	;# 
   364  0515                     	;# 
   365  0515                     	;# 
   366  0516                     	;# 
   367  0517                     	;# 
   368  0518                     	;# 
   369  0519                     	;# 
   370  051A                     	;# 
   371  051B                     	;# 
   372  051C                     	;# 
   373  051D                     	;# 
   374  058C                     	;# 
   375  058C                     	;# 
   376  058D                     	;# 
   377  058E                     	;# 
   378  058F                     	;# 
   379  058F                     	;# 
   380  0590                     	;# 
   381  0591                     	;# 
   382  0592                     	;# 
   383  0593                     	;# 
   384  060C                     	;# 
   385  060D                     	;# 
   386  060E                     	;# 
   387  060F                     	;# 
   388  0610                     	;# 
   389  0611                     	;# 
   390  0612                     	;# 
   391  0613                     	;# 
   392  0614                     	;# 
   393  0616                     	;# 
   394  0617                     	;# 
   395  0618                     	;# 
   396  0619                     	;# 
   397  061A                     	;# 
   398  061B                     	;# 
   399  061C                     	;# 
   400  061D                     	;# 
   401  061E                     	;# 
   402  068C                     	;# 
   403  068D                     	;# 
   404  068E                     	;# 
   405  068F                     	;# 
   406  0690                     	;# 
   407  0691                     	;# 
   408  0692                     	;# 
   409  0693                     	;# 
   410  0694                     	;# 
   411  070C                     	;# 
   412  070D                     	;# 
   413  070E                     	;# 
   414  070F                     	;# 
   415  0710                     	;# 
   416  0711                     	;# 
   417  0712                     	;# 
   418  0713                     	;# 
   419  0714                     	;# 
   420  0716                     	;# 
   421  0717                     	;# 
   422  0718                     	;# 
   423  0719                     	;# 
   424  071A                     	;# 
   425  071B                     	;# 
   426  071C                     	;# 
   427  071D                     	;# 
   428  071E                     	;# 
   429  0796                     	;# 
   430  0797                     	;# 
   431  0798                     	;# 
   432  0799                     	;# 
   433  079A                     	;# 
   434  079B                     	;# 
   435  080C                     	;# 
   436  080D                     	;# 
   437  080E                     	;# 
   438  080F                     	;# 
   439  0810                     	;# 
   440  0811                     	;# 
   441  0812                     	;# 
   442  0813                     	;# 
   443  0814                     	;# 
   444  081A                     	;# 
   445  081B                     	;# 
   446  081C                     	;# 
   447  081D                     	;# 
   448  081E                     	;# 
   449  081F                     	;# 
   450  088C                     	;# 
   451  088D                     	;# 
   452  088E                     	;# 
   453  088F                     	;# 
   454  0890                     	;# 
   455  0891                     	;# 
   456  0892                     	;# 
   457  0893                     	;# 
   458  0895                     	;# 
   459  0896                     	;# 
   460  0897                     	;# 
   461  0898                     	;# 
   462  0899                     	;# 
   463  089A                     	;# 
   464  089B                     	;# 
   465  090C                     	;# 
   466  090E                     	;# 
   467  090F                     	;# 
   468  091F                     	;# 
   469  091F                     	;# 
   470  098F                     	;# 
   471  098F                     	;# 
   472  0990                     	;# 
   473  0991                     	;# 
   474  0992                     	;# 
   475  0993                     	;# 
   476  0994                     	;# 
   477  0995                     	;# 
   478  0996                     	;# 
   479  0997                     	;# 
   480  0E0F                     	;# 
   481  0E10                     	;# 
   482  0E11                     	;# 
   483  0E12                     	;# 
   484  0E13                     	;# 
   485  0E14                     	;# 
   486  0E15                     	;# 
   487  0E16                     	;# 
   488  0E17                     	;# 
   489  0E18                     	;# 
   490  0E19                     	;# 
   491  0E1A                     	;# 
   492  0E1B                     	;# 
   493  0E1C                     	;# 
   494  0E1D                     	;# 
   495  0E1E                     	;# 
   496  0E1F                     	;# 
   497  0E20                     	;# 
   498  0E21                     	;# 
   499  0E22                     	;# 
   500  0E23                     	;# 
   501  0E24                     	;# 
   502  0E25                     	;# 
   503  0E26                     	;# 
   504  0E27                     	;# 
   505  0E28                     	;# 
   506  0E29                     	;# 
   507  0E2A                     	;# 
   508  0E2B                     	;# 
   509  0E2C                     	;# 
   510  0E2D                     	;# 
   511  0E2E                     	;# 
   512  0E2F                     	;# 
   513  0E30                     	;# 
   514  0E31                     	;# 
   515  0E32                     	;# 
   516  0E33                     	;# 
   517  0E34                     	;# 
   518  0E35                     	;# 
   519  0E36                     	;# 
   520  0E37                     	;# 
   521  0E8F                     	;# 
   522  0E90                     	;# 
   523  0E91                     	;# 
   524  0E92                     	;# 
   525  0E93                     	;# 
   526  0E94                     	;# 
   527  0E95                     	;# 
   528  0E96                     	;# 
   529  0E97                     	;# 
   530  0E9C                     	;# 
   531  0E9D                     	;# 
   532  0E9E                     	;# 
   533  0EA1                     	;# 
   534  0EA2                     	;# 
   535  0EA3                     	;# 
   536  0EA4                     	;# 
   537  0EA5                     	;# 
   538  0EA9                     	;# 
   539  0EAA                     	;# 
   540  0EAB                     	;# 
   541  0EAC                     	;# 
   542  0EB1                     	;# 
   543  0EB2                     	;# 
   544  0EB3                     	;# 
   545  0EB8                     	;# 
   546  0EB9                     	;# 
   547  0EBA                     	;# 
   548  0EBB                     	;# 
   549  0EBC                     	;# 
   550  0EBD                     	;# 
   551  0EBE                     	;# 
   552  0EC3                     	;# 
   553  0EC5                     	;# 
   554  0EC6                     	;# 
   555  0EC7                     	;# 
   556  0EC8                     	;# 
   557  0EC9                     	;# 
   558  0ECA                     	;# 
   559  0ECB                     	;# 
   560  0ECC                     	;# 
   561  0F10                     	;# 
   562  0F11                     	;# 
   563  0F12                     	;# 
   564  0F13                     	;# 
   565  0F14                     	;# 
   566  0F15                     	;# 
   567  0F16                     	;# 
   568  0F17                     	;# 
   569  0F18                     	;# 
   570  0F19                     	;# 
   571  0F1A                     	;# 
   572  0F1B                     	;# 
   573  0F1C                     	;# 
   574  0F1D                     	;# 
   575  0F1E                     	;# 
   576  0F1F                     	;# 
   577  0F20                     	;# 
   578  0F21                     	;# 
   579  0F22                     	;# 
   580  0F23                     	;# 
   581  0F24                     	;# 
   582  0F25                     	;# 
   583  0F26                     	;# 
   584  0F27                     	;# 
   585  0F38                     	;# 
   586  0F39                     	;# 
   587  0F3A                     	;# 
   588  0F3B                     	;# 
   589  0F3C                     	;# 
   590  0F3D                     	;# 
   591  0F3E                     	;# 
   592  0F3F                     	;# 
   593  0F40                     	;# 
   594  0F41                     	;# 
   595  0F43                     	;# 
   596  0F44                     	;# 
   597  0F45                     	;# 
   598  0F46                     	;# 
   599  0F47                     	;# 
   600  0F48                     	;# 
   601  0F49                     	;# 
   602  0F4A                     	;# 
   603  0F4B                     	;# 
   604  0F4C                     	;# 
   605  0F4E                     	;# 
   606  0F4F                     	;# 
   607  0F50                     	;# 
   608  0F51                     	;# 
   609  0F52                     	;# 
   610  0F53                     	;# 
   611  0F54                     	;# 
   612  0F55                     	;# 
   613  0F56                     	;# 
   614  0F57                     	;# 
   615  0F65                     	;# 
   616  0F68                     	;# 
   617  0F69                     	;# 
   618  0F6A                     	;# 
   619  0F6B                     	;# 
   620  0FE4                     	;# 
   621  0FE5                     	;# 
   622  0FE6                     	;# 
   623  0FE7                     	;# 
   624  0FE8                     	;# 
   625  0FE9                     	;# 
   626  0FEA                     	;# 
   627  0FEB                     	;# 
   628  0FED                     	;# 
   629  0FEE                     	;# 
   630  0FEF                     	;# 
   631  0000                     	;# 
   632  0001                     	;# 
   633  0002                     	;# 
   634  0003                     	;# 
   635  0004                     	;# 
   636  0005                     	;# 
   637  0006                     	;# 
   638  0007                     	;# 
   639  0008                     	;# 
   640  0009                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0016                     	;# 
   651  0017                     	;# 
   652  0018                     	;# 
   653  001C                     	;# 
   654  001C                     	;# 
   655  001D                     	;# 
   656  001D                     	;# 
   657  001E                     	;# 
   658  001F                     	;# 
   659  008C                     	;# 
   660  008C                     	;# 
   661  008D                     	;# 
   662  008E                     	;# 
   663  008E                     	;# 
   664  008F                     	;# 
   665  0090                     	;# 
   666  0090                     	;# 
   667  0091                     	;# 
   668  0093                     	;# 
   669  0094                     	;# 
   670  0095                     	;# 
   671  0096                     	;# 
   672  0097                     	;# 
   673  0098                     	;# 
   674  0099                     	;# 
   675  009A                     	;# 
   676  009B                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009E                     	;# 
   680  010C                     	;# 
   681  010D                     	;# 
   682  010E                     	;# 
   683  010E                     	;# 
   684  010F                     	;# 
   685  0110                     	;# 
   686  0110                     	;# 
   687  0111                     	;# 
   688  0112                     	;# 
   689  0112                     	;# 
   690  0113                     	;# 
   691  0114                     	;# 
   692  0114                     	;# 
   693  0115                     	;# 
   694  0116                     	;# 
   695  0116                     	;# 
   696  0117                     	;# 
   697  0119                     	;# 
   698  0119                     	;# 
   699  0119                     	;# 
   700  011A                     	;# 
   701  011A                     	;# 
   702  011A                     	;# 
   703  011B                     	;# 
   704  011B                     	;# 
   705  011B                     	;# 
   706  011B                     	;# 
   707  011B                     	;# 
   708  011C                     	;# 
   709  011C                     	;# 
   710  011C                     	;# 
   711  011D                     	;# 
   712  011D                     	;# 
   713  011D                     	;# 
   714  011E                     	;# 
   715  011E                     	;# 
   716  011E                     	;# 
   717  011F                     	;# 
   718  011F                     	;# 
   719  011F                     	;# 
   720  011F                     	;# 
   721  011F                     	;# 
   722  018C                     	;# 
   723  018D                     	;# 
   724  018E                     	;# 
   725  018F                     	;# 
   726  0190                     	;# 
   727  0191                     	;# 
   728  0192                     	;# 
   729  0196                     	;# 
   730  0197                     	;# 
   731  0198                     	;# 
   732  0199                     	;# 
   733  019A                     	;# 
   734  019B                     	;# 
   735  019C                     	;# 
   736  020C                     	;# 
   737  020C                     	;# 
   738  020D                     	;# 
   739  020E                     	;# 
   740  020F                     	;# 
   741  020F                     	;# 
   742  0210                     	;# 
   743  0210                     	;# 
   744  0211                     	;# 
   745  0211                     	;# 
   746  0212                     	;# 
   747  0212                     	;# 
   748  0213                     	;# 
   749  0214                     	;# 
   750  0215                     	;# 
   751  0215                     	;# 
   752  0216                     	;# 
   753  0216                     	;# 
   754  0217                     	;# 
   755  0217                     	;# 
   756  0218                     	;# 
   757  0218                     	;# 
   758  0219                     	;# 
   759  021A                     	;# 
   760  021B                     	;# 
   761  021B                     	;# 
   762  021C                     	;# 
   763  021C                     	;# 
   764  021D                     	;# 
   765  021D                     	;# 
   766  021E                     	;# 
   767  021F                     	;# 
   768  028C                     	;# 
   769  028C                     	;# 
   770  028D                     	;# 
   771  028D                     	;# 
   772  028E                     	;# 
   773  028F                     	;# 
   774  0290                     	;# 
   775  0290                     	;# 
   776  0291                     	;# 
   777  0292                     	;# 
   778  0292                     	;# 
   779  0293                     	;# 
   780  0293                     	;# 
   781  0294                     	;# 
   782  0295                     	;# 
   783  0296                     	;# 
   784  0296                     	;# 
   785  0297                     	;# 
   786  0298                     	;# 
   787  0298                     	;# 
   788  0299                     	;# 
   789  0299                     	;# 
   790  029A                     	;# 
   791  029B                     	;# 
   792  029C                     	;# 
   793  029C                     	;# 
   794  029D                     	;# 
   795  030C                     	;# 
   796  030C                     	;# 
   797  030D                     	;# 
   798  030E                     	;# 
   799  030F                     	;# 
   800  0310                     	;# 
   801  0310                     	;# 
   802  0311                     	;# 
   803  0312                     	;# 
   804  0313                     	;# 
   805  0314                     	;# 
   806  0314                     	;# 
   807  0315                     	;# 
   808  0316                     	;# 
   809  0317                     	;# 
   810  0318                     	;# 
   811  0318                     	;# 
   812  0319                     	;# 
   813  031A                     	;# 
   814  031B                     	;# 
   815  031C                     	;# 
   816  031C                     	;# 
   817  031D                     	;# 
   818  031E                     	;# 
   819  031F                     	;# 
   820  038C                     	;# 
   821  038D                     	;# 
   822  038E                     	;# 
   823  0390                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  040C                     	;# 
   827  040D                     	;# 
   828  040E                     	;# 
   829  040F                     	;# 
   830  0410                     	;# 
   831  0411                     	;# 
   832  0416                     	;# 
   833  0416                     	;# 
   834  0417                     	;# 
   835  0418                     	;# 
   836  0418                     	;# 
   837  0419                     	;# 
   838  041A                     	;# 
   839  041A                     	;# 
   840  041B                     	;# 
   841  041C                     	;# 
   842  041C                     	;# 
   843  041D                     	;# 
   844  041E                     	;# 
   845  041F                     	;# 
   846  048C                     	;# 
   847  048C                     	;# 
   848  048D                     	;# 
   849  048E                     	;# 
   850  048F                     	;# 
   851  048F                     	;# 
   852  0490                     	;# 
   853  0491                     	;# 
   854  0492                     	;# 
   855  0492                     	;# 
   856  0493                     	;# 
   857  0494                     	;# 
   858  0495                     	;# 
   859  0495                     	;# 
   860  0496                     	;# 
   861  0497                     	;# 
   862  0498                     	;# 
   863  0499                     	;# 
   864  049A                     	;# 
   865  049B                     	;# 
   866  049C                     	;# 
   867  049D                     	;# 
   868  050C                     	;# 
   869  050C                     	;# 
   870  050D                     	;# 
   871  050E                     	;# 
   872  050F                     	;# 
   873  050F                     	;# 
   874  0510                     	;# 
   875  0511                     	;# 
   876  0512                     	;# 
   877  0512                     	;# 
   878  0513                     	;# 
   879  0514                     	;# 
   880  0515                     	;# 
   881  0515                     	;# 
   882  0516                     	;# 
   883  0517                     	;# 
   884  0518                     	;# 
   885  0519                     	;# 
   886  051A                     	;# 
   887  051B                     	;# 
   888  051C                     	;# 
   889  051D                     	;# 
   890  058C                     	;# 
   891  058C                     	;# 
   892  058D                     	;# 
   893  058E                     	;# 
   894  058F                     	;# 
   895  058F                     	;# 
   896  0590                     	;# 
   897  0591                     	;# 
   898  0592                     	;# 
   899  0593                     	;# 
   900  060C                     	;# 
   901  060D                     	;# 
   902  060E                     	;# 
   903  060F                     	;# 
   904  0610                     	;# 
   905  0611                     	;# 
   906  0612                     	;# 
   907  0613                     	;# 
   908  0614                     	;# 
   909  0616                     	;# 
   910  0617                     	;# 
   911  0618                     	;# 
   912  0619                     	;# 
   913  061A                     	;# 
   914  061B                     	;# 
   915  061C                     	;# 
   916  061D                     	;# 
   917  061E                     	;# 
   918  068C                     	;# 
   919  068D                     	;# 
   920  068E                     	;# 
   921  068F                     	;# 
   922  0690                     	;# 
   923  0691                     	;# 
   924  0692                     	;# 
   925  0693                     	;# 
   926  0694                     	;# 
   927  070C                     	;# 
   928  070D                     	;# 
   929  070E                     	;# 
   930  070F                     	;# 
   931  0710                     	;# 
   932  0711                     	;# 
   933  0712                     	;# 
   934  0713                     	;# 
   935  0714                     	;# 
   936  0716                     	;# 
   937  0717                     	;# 
   938  0718                     	;# 
   939  0719                     	;# 
   940  071A                     	;# 
   941  071B                     	;# 
   942  071C                     	;# 
   943  071D                     	;# 
   944  071E                     	;# 
   945  0796                     	;# 
   946  0797                     	;# 
   947  0798                     	;# 
   948  0799                     	;# 
   949  079A                     	;# 
   950  079B                     	;# 
   951  080C                     	;# 
   952  080D                     	;# 
   953  080E                     	;# 
   954  080F                     	;# 
   955  0810                     	;# 
   956  0811                     	;# 
   957  0812                     	;# 
   958  0813                     	;# 
   959  0814                     	;# 
   960  081A                     	;# 
   961  081B                     	;# 
   962  081C                     	;# 
   963  081D                     	;# 
   964  081E                     	;# 
   965  081F                     	;# 
   966  088C                     	;# 
   967  088D                     	;# 
   968  088E                     	;# 
   969  088F                     	;# 
   970  0890                     	;# 
   971  0891                     	;# 
   972  0892                     	;# 
   973  0893                     	;# 
   974  0895                     	;# 
   975  0896                     	;# 
   976  0897                     	;# 
   977  0898                     	;# 
   978  0899                     	;# 
   979  089A                     	;# 
   980  089B                     	;# 
   981  090C                     	;# 
   982  090E                     	;# 
   983  090F                     	;# 
   984  091F                     	;# 
   985  091F                     	;# 
   986  098F                     	;# 
   987  098F                     	;# 
   988  0990                     	;# 
   989  0991                     	;# 
   990  0992                     	;# 
   991  0993                     	;# 
   992  0994                     	;# 
   993  0995                     	;# 
   994  0996                     	;# 
   995  0997                     	;# 
   996  0E0F                     	;# 
   997  0E10                     	;# 
   998  0E11                     	;# 
   999  0E12                     	;# 
  1000  0E13                     	;# 
  1001  0E14                     	;# 
  1002  0E15                     	;# 
  1003  0E16                     	;# 
  1004  0E17                     	;# 
  1005  0E18                     	;# 
  1006  0E19                     	;# 
  1007  0E1A                     	;# 
  1008  0E1B                     	;# 
  1009  0E1C                     	;# 
  1010  0E1D                     	;# 
  1011  0E1E                     	;# 
  1012  0E1F                     	;# 
  1013  0E20                     	;# 
  1014  0E21                     	;# 
  1015  0E22                     	;# 
  1016  0E23                     	;# 
  1017  0E24                     	;# 
  1018  0E25                     	;# 
  1019  0E26                     	;# 
  1020  0E27                     	;# 
  1021  0E28                     	;# 
  1022  0E29                     	;# 
  1023  0E2A                     	;# 
  1024  0E2B                     	;# 
  1025  0E2C                     	;# 
  1026  0E2D                     	;# 
  1027  0E2E                     	;# 
  1028  0E2F                     	;# 
  1029  0E30                     	;# 
  1030  0E31                     	;# 
  1031  0E32                     	;# 
  1032  0E33                     	;# 
  1033  0E34                     	;# 
  1034  0E35                     	;# 
  1035  0E36                     	;# 
  1036  0E37                     	;# 
  1037  0E8F                     	;# 
  1038  0E90                     	;# 
  1039  0E91                     	;# 
  1040  0E92                     	;# 
  1041  0E93                     	;# 
  1042  0E94                     	;# 
  1043  0E95                     	;# 
  1044  0E96                     	;# 
  1045  0E97                     	;# 
  1046  0E9C                     	;# 
  1047  0E9D                     	;# 
  1048  0E9E                     	;# 
  1049  0EA1                     	;# 
  1050  0EA2                     	;# 
  1051  0EA3                     	;# 
  1052  0EA4                     	;# 
  1053  0EA5                     	;# 
  1054  0EA9                     	;# 
  1055  0EAA                     	;# 
  1056  0EAB                     	;# 
  1057  0EAC                     	;# 
  1058  0EB1                     	;# 
  1059  0EB2                     	;# 
  1060  0EB3                     	;# 
  1061  0EB8                     	;# 
  1062  0EB9                     	;# 
  1063  0EBA                     	;# 
  1064  0EBB                     	;# 
  1065  0EBC                     	;# 
  1066  0EBD                     	;# 
  1067  0EBE                     	;# 
  1068  0EC3                     	;# 
  1069  0EC5                     	;# 
  1070  0EC6                     	;# 
  1071  0EC7                     	;# 
  1072  0EC8                     	;# 
  1073  0EC9                     	;# 
  1074  0ECA                     	;# 
  1075  0ECB                     	;# 
  1076  0ECC                     	;# 
  1077  0F10                     	;# 
  1078  0F11                     	;# 
  1079  0F12                     	;# 
  1080  0F13                     	;# 
  1081  0F14                     	;# 
  1082  0F15                     	;# 
  1083  0F16                     	;# 
  1084  0F17                     	;# 
  1085  0F18                     	;# 
  1086  0F19                     	;# 
  1087  0F1A                     	;# 
  1088  0F1B                     	;# 
  1089  0F1C                     	;# 
  1090  0F1D                     	;# 
  1091  0F1E                     	;# 
  1092  0F1F                     	;# 
  1093  0F20                     	;# 
  1094  0F21                     	;# 
  1095  0F22                     	;# 
  1096  0F23                     	;# 
  1097  0F24                     	;# 
  1098  0F25                     	;# 
  1099  0F26                     	;# 
  1100  0F27                     	;# 
  1101  0F38                     	;# 
  1102  0F39                     	;# 
  1103  0F3A                     	;# 
  1104  0F3B                     	;# 
  1105  0F3C                     	;# 
  1106  0F3D                     	;# 
  1107  0F3E                     	;# 
  1108  0F3F                     	;# 
  1109  0F40                     	;# 
  1110  0F41                     	;# 
  1111  0F43                     	;# 
  1112  0F44                     	;# 
  1113  0F45                     	;# 
  1114  0F46                     	;# 
  1115  0F47                     	;# 
  1116  0F48                     	;# 
  1117  0F49                     	;# 
  1118  0F4A                     	;# 
  1119  0F4B                     	;# 
  1120  0F4C                     	;# 
  1121  0F4E                     	;# 
  1122  0F4F                     	;# 
  1123  0F50                     	;# 
  1124  0F51                     	;# 
  1125  0F52                     	;# 
  1126  0F53                     	;# 
  1127  0F54                     	;# 
  1128  0F55                     	;# 
  1129  0F56                     	;# 
  1130  0F57                     	;# 
  1131  0F65                     	;# 
  1132  0F68                     	;# 
  1133  0F69                     	;# 
  1134  0F6A                     	;# 
  1135  0F6B                     	;# 
  1136  0FE4                     	;# 
  1137  0FE5                     	;# 
  1138  0FE6                     	;# 
  1139  0FE7                     	;# 
  1140  0FE8                     	;# 
  1141  0FE9                     	;# 
  1142  0FEA                     	;# 
  1143  0FEB                     	;# 
  1144  0FED                     	;# 
  1145  0FEE                     	;# 
  1146  0FEF                     	;# 
  1147  0000                     	;# 
  1148  0001                     	;# 
  1149  0002                     	;# 
  1150  0003                     	;# 
  1151  0004                     	;# 
  1152  0005                     	;# 
  1153  0006                     	;# 
  1154  0007                     	;# 
  1155  0008                     	;# 
  1156  0009                     	;# 
  1157  000A                     	;# 
  1158  000B                     	;# 
  1159  000C                     	;# 
  1160  000D                     	;# 
  1161  000E                     	;# 
  1162  0010                     	;# 
  1163  0011                     	;# 
  1164  0012                     	;# 
  1165  0013                     	;# 
  1166  0016                     	;# 
  1167  0017                     	;# 
  1168  0018                     	;# 
  1169  001C                     	;# 
  1170  001C                     	;# 
  1171  001D                     	;# 
  1172  001D                     	;# 
  1173  001E                     	;# 
  1174  001F                     	;# 
  1175  008C                     	;# 
  1176  008C                     	;# 
  1177  008D                     	;# 
  1178  008E                     	;# 
  1179  008E                     	;# 
  1180  008F                     	;# 
  1181  0090                     	;# 
  1182  0090                     	;# 
  1183  0091                     	;# 
  1184  0093                     	;# 
  1185  0094                     	;# 
  1186  0095                     	;# 
  1187  0096                     	;# 
  1188  0097                     	;# 
  1189  0098                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010D                     	;# 
  1198  010E                     	;# 
  1199  010E                     	;# 
  1200  010F                     	;# 
  1201  0110                     	;# 
  1202  0110                     	;# 
  1203  0111                     	;# 
  1204  0112                     	;# 
  1205  0112                     	;# 
  1206  0113                     	;# 
  1207  0114                     	;# 
  1208  0114                     	;# 
  1209  0115                     	;# 
  1210  0116                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  0119                     	;# 
  1214  0119                     	;# 
  1215  0119                     	;# 
  1216  011A                     	;# 
  1217  011A                     	;# 
  1218  011A                     	;# 
  1219  011B                     	;# 
  1220  011B                     	;# 
  1221  011B                     	;# 
  1222  011B                     	;# 
  1223  011B                     	;# 
  1224  011C                     	;# 
  1225  011C                     	;# 
  1226  011C                     	;# 
  1227  011D                     	;# 
  1228  011D                     	;# 
  1229  011D                     	;# 
  1230  011E                     	;# 
  1231  011E                     	;# 
  1232  011E                     	;# 
  1233  011F                     	;# 
  1234  011F                     	;# 
  1235  011F                     	;# 
  1236  011F                     	;# 
  1237  011F                     	;# 
  1238  018C                     	;# 
  1239  018D                     	;# 
  1240  018E                     	;# 
  1241  018F                     	;# 
  1242  0190                     	;# 
  1243  0191                     	;# 
  1244  0192                     	;# 
  1245  0196                     	;# 
  1246  0197                     	;# 
  1247  0198                     	;# 
  1248  0199                     	;# 
  1249  019A                     	;# 
  1250  019B                     	;# 
  1251  019C                     	;# 
  1252  020C                     	;# 
  1253  020C                     	;# 
  1254  020D                     	;# 
  1255  020E                     	;# 
  1256  020F                     	;# 
  1257  020F                     	;# 
  1258  0210                     	;# 
  1259  0210                     	;# 
  1260  0211                     	;# 
  1261  0211                     	;# 
  1262  0212                     	;# 
  1263  0212                     	;# 
  1264  0213                     	;# 
  1265  0214                     	;# 
  1266  0215                     	;# 
  1267  0215                     	;# 
  1268  0216                     	;# 
  1269  0216                     	;# 
  1270  0217                     	;# 
  1271  0217                     	;# 
  1272  0218                     	;# 
  1273  0218                     	;# 
  1274  0219                     	;# 
  1275  021A                     	;# 
  1276  021B                     	;# 
  1277  021B                     	;# 
  1278  021C                     	;# 
  1279  021C                     	;# 
  1280  021D                     	;# 
  1281  021D                     	;# 
  1282  021E                     	;# 
  1283  021F                     	;# 
  1284  028C                     	;# 
  1285  028C                     	;# 
  1286  028D                     	;# 
  1287  028D                     	;# 
  1288  028E                     	;# 
  1289  028F                     	;# 
  1290  0290                     	;# 
  1291  0290                     	;# 
  1292  0291                     	;# 
  1293  0292                     	;# 
  1294  0292                     	;# 
  1295  0293                     	;# 
  1296  0293                     	;# 
  1297  0294                     	;# 
  1298  0295                     	;# 
  1299  0296                     	;# 
  1300  0296                     	;# 
  1301  0297                     	;# 
  1302  0298                     	;# 
  1303  0298                     	;# 
  1304  0299                     	;# 
  1305  0299                     	;# 
  1306  029A                     	;# 
  1307  029B                     	;# 
  1308  029C                     	;# 
  1309  029C                     	;# 
  1310  029D                     	;# 
  1311  030C                     	;# 
  1312  030C                     	;# 
  1313  030D                     	;# 
  1314  030E                     	;# 
  1315  030F                     	;# 
  1316  0310                     	;# 
  1317  0310                     	;# 
  1318  0311                     	;# 
  1319  0312                     	;# 
  1320  0313                     	;# 
  1321  0314                     	;# 
  1322  0314                     	;# 
  1323  0315                     	;# 
  1324  0316                     	;# 
  1325  0317                     	;# 
  1326  0318                     	;# 
  1327  0318                     	;# 
  1328  0319                     	;# 
  1329  031A                     	;# 
  1330  031B                     	;# 
  1331  031C                     	;# 
  1332  031C                     	;# 
  1333  031D                     	;# 
  1334  031E                     	;# 
  1335  031F                     	;# 
  1336  038C                     	;# 
  1337  038D                     	;# 
  1338  038E                     	;# 
  1339  0390                     	;# 
  1340  0391                     	;# 
  1341  0392                     	;# 
  1342  040C                     	;# 
  1343  040D                     	;# 
  1344  040E                     	;# 
  1345  040F                     	;# 
  1346  0410                     	;# 
  1347  0411                     	;# 
  1348  0416                     	;# 
  1349  0416                     	;# 
  1350  0417                     	;# 
  1351  0418                     	;# 
  1352  0418                     	;# 
  1353  0419                     	;# 
  1354  041A                     	;# 
  1355  041A                     	;# 
  1356  041B                     	;# 
  1357  041C                     	;# 
  1358  041C                     	;# 
  1359  041D                     	;# 
  1360  041E                     	;# 
  1361  041F                     	;# 
  1362  048C                     	;# 
  1363  048C                     	;# 
  1364  048D                     	;# 
  1365  048E                     	;# 
  1366  048F                     	;# 
  1367  048F                     	;# 
  1368  0490                     	;# 
  1369  0491                     	;# 
  1370  0492                     	;# 
  1371  0492                     	;# 
  1372  0493                     	;# 
  1373  0494                     	;# 
  1374  0495                     	;# 
  1375  0495                     	;# 
  1376  0496                     	;# 
  1377  0497                     	;# 
  1378  0498                     	;# 
  1379  0499                     	;# 
  1380  049A                     	;# 
  1381  049B                     	;# 
  1382  049C                     	;# 
  1383  049D                     	;# 
  1384  050C                     	;# 
  1385  050C                     	;# 
  1386  050D                     	;# 
  1387  050E                     	;# 
  1388  050F                     	;# 
  1389  050F                     	;# 
  1390  0510                     	;# 
  1391  0511                     	;# 
  1392  0512                     	;# 
  1393  0512                     	;# 
  1394  0513                     	;# 
  1395  0514                     	;# 
  1396  0515                     	;# 
  1397  0515                     	;# 
  1398  0516                     	;# 
  1399  0517                     	;# 
  1400  0518                     	;# 
  1401  0519                     	;# 
  1402  051A                     	;# 
  1403  051B                     	;# 
  1404  051C                     	;# 
  1405  051D                     	;# 
  1406  058C                     	;# 
  1407  058C                     	;# 
  1408  058D                     	;# 
  1409  058E                     	;# 
  1410  058F                     	;# 
  1411  058F                     	;# 
  1412  0590                     	;# 
  1413  0591                     	;# 
  1414  0592                     	;# 
  1415  0593                     	;# 
  1416  060C                     	;# 
  1417  060D                     	;# 
  1418  060E                     	;# 
  1419  060F                     	;# 
  1420  0610                     	;# 
  1421  0611                     	;# 
  1422  0612                     	;# 
  1423  0613                     	;# 
  1424  0614                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061D                     	;# 
  1433  061E                     	;# 
  1434  068C                     	;# 
  1435  068D                     	;# 
  1436  068E                     	;# 
  1437  068F                     	;# 
  1438  0690                     	;# 
  1439  0691                     	;# 
  1440  0692                     	;# 
  1441  0693                     	;# 
  1442  0694                     	;# 
  1443  070C                     	;# 
  1444  070D                     	;# 
  1445  070E                     	;# 
  1446  070F                     	;# 
  1447  0710                     	;# 
  1448  0711                     	;# 
  1449  0712                     	;# 
  1450  0713                     	;# 
  1451  0714                     	;# 
  1452  0716                     	;# 
  1453  0717                     	;# 
  1454  0718                     	;# 
  1455  0719                     	;# 
  1456  071A                     	;# 
  1457  071B                     	;# 
  1458  071C                     	;# 
  1459  071D                     	;# 
  1460  071E                     	;# 
  1461  0796                     	;# 
  1462  0797                     	;# 
  1463  0798                     	;# 
  1464  0799                     	;# 
  1465  079A                     	;# 
  1466  079B                     	;# 
  1467  080C                     	;# 
  1468  080D                     	;# 
  1469  080E                     	;# 
  1470  080F                     	;# 
  1471  0810                     	;# 
  1472  0811                     	;# 
  1473  0812                     	;# 
  1474  0813                     	;# 
  1475  0814                     	;# 
  1476  081A                     	;# 
  1477  081B                     	;# 
  1478  081C                     	;# 
  1479  081D                     	;# 
  1480  081E                     	;# 
  1481  081F                     	;# 
  1482  088C                     	;# 
  1483  088D                     	;# 
  1484  088E                     	;# 
  1485  088F                     	;# 
  1486  0890                     	;# 
  1487  0891                     	;# 
  1488  0892                     	;# 
  1489  0893                     	;# 
  1490  0895                     	;# 
  1491  0896                     	;# 
  1492  0897                     	;# 
  1493  0898                     	;# 
  1494  0899                     	;# 
  1495  089A                     	;# 
  1496  089B                     	;# 
  1497  090C                     	;# 
  1498  090E                     	;# 
  1499  090F                     	;# 
  1500  091F                     	;# 
  1501  091F                     	;# 
  1502  098F                     	;# 
  1503  098F                     	;# 
  1504  0990                     	;# 
  1505  0991                     	;# 
  1506  0992                     	;# 
  1507  0993                     	;# 
  1508  0994                     	;# 
  1509  0995                     	;# 
  1510  0996                     	;# 
  1511  0997                     	;# 
  1512  0E0F                     	;# 
  1513  0E10                     	;# 
  1514  0E11                     	;# 
  1515  0E12                     	;# 
  1516  0E13                     	;# 
  1517  0E14                     	;# 
  1518  0E15                     	;# 
  1519  0E16                     	;# 
  1520  0E17                     	;# 
  1521  0E18                     	;# 
  1522  0E19                     	;# 
  1523  0E1A                     	;# 
  1524  0E1B                     	;# 
  1525  0E1C                     	;# 
  1526  0E1D                     	;# 
  1527  0E1E                     	;# 
  1528  0E1F                     	;# 
  1529  0E20                     	;# 
  1530  0E21                     	;# 
  1531  0E22                     	;# 
  1532  0E23                     	;# 
  1533  0E24                     	;# 
  1534  0E25                     	;# 
  1535  0E26                     	;# 
  1536  0E27                     	;# 
  1537  0E28                     	;# 
  1538  0E29                     	;# 
  1539  0E2A                     	;# 
  1540  0E2B                     	;# 
  1541  0E2C                     	;# 
  1542  0E2D                     	;# 
  1543  0E2E                     	;# 
  1544  0E2F                     	;# 
  1545  0E30                     	;# 
  1546  0E31                     	;# 
  1547  0E32                     	;# 
  1548  0E33                     	;# 
  1549  0E34                     	;# 
  1550  0E35                     	;# 
  1551  0E36                     	;# 
  1552  0E37                     	;# 
  1553  0E8F                     	;# 
  1554  0E90                     	;# 
  1555  0E91                     	;# 
  1556  0E92                     	;# 
  1557  0E93                     	;# 
  1558  0E94                     	;# 
  1559  0E95                     	;# 
  1560  0E96                     	;# 
  1561  0E97                     	;# 
  1562  0E9C                     	;# 
  1563  0E9D                     	;# 
  1564  0E9E                     	;# 
  1565  0EA1                     	;# 
  1566  0EA2                     	;# 
  1567  0EA3                     	;# 
  1568  0EA4                     	;# 
  1569  0EA5                     	;# 
  1570  0EA9                     	;# 
  1571  0EAA                     	;# 
  1572  0EAB                     	;# 
  1573  0EAC                     	;# 
  1574  0EB1                     	;# 
  1575  0EB2                     	;# 
  1576  0EB3                     	;# 
  1577  0EB8                     	;# 
  1578  0EB9                     	;# 
  1579  0EBA                     	;# 
  1580  0EBB                     	;# 
  1581  0EBC                     	;# 
  1582  0EBD                     	;# 
  1583  0EBE                     	;# 
  1584  0EC3                     	;# 
  1585  0EC5                     	;# 
  1586  0EC6                     	;# 
  1587  0EC7                     	;# 
  1588  0EC8                     	;# 
  1589  0EC9                     	;# 
  1590  0ECA                     	;# 
  1591  0ECB                     	;# 
  1592  0ECC                     	;# 
  1593  0F10                     	;# 
  1594  0F11                     	;# 
  1595  0F12                     	;# 
  1596  0F13                     	;# 
  1597  0F14                     	;# 
  1598  0F15                     	;# 
  1599  0F16                     	;# 
  1600  0F17                     	;# 
  1601  0F18                     	;# 
  1602  0F19                     	;# 
  1603  0F1A                     	;# 
  1604  0F1B                     	;# 
  1605  0F1C                     	;# 
  1606  0F1D                     	;# 
  1607  0F1E                     	;# 
  1608  0F1F                     	;# 
  1609  0F20                     	;# 
  1610  0F21                     	;# 
  1611  0F22                     	;# 
  1612  0F23                     	;# 
  1613  0F24                     	;# 
  1614  0F25                     	;# 
  1615  0F26                     	;# 
  1616  0F27                     	;# 
  1617  0F38                     	;# 
  1618  0F39                     	;# 
  1619  0F3A                     	;# 
  1620  0F3B                     	;# 
  1621  0F3C                     	;# 
  1622  0F3D                     	;# 
  1623  0F3E                     	;# 
  1624  0F3F                     	;# 
  1625  0F40                     	;# 
  1626  0F41                     	;# 
  1627  0F43                     	;# 
  1628  0F44                     	;# 
  1629  0F45                     	;# 
  1630  0F46                     	;# 
  1631  0F47                     	;# 
  1632  0F48                     	;# 
  1633  0F49                     	;# 
  1634  0F4A                     	;# 
  1635  0F4B                     	;# 
  1636  0F4C                     	;# 
  1637  0F4E                     	;# 
  1638  0F4F                     	;# 
  1639  0F50                     	;# 
  1640  0F51                     	;# 
  1641  0F52                     	;# 
  1642  0F53                     	;# 
  1643  0F54                     	;# 
  1644  0F55                     	;# 
  1645  0F56                     	;# 
  1646  0F57                     	;# 
  1647  0F65                     	;# 
  1648  0F68                     	;# 
  1649  0F69                     	;# 
  1650  0F6A                     	;# 
  1651  0F6B                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE9                     	;# 
  1658  0FEA                     	;# 
  1659  0FEB                     	;# 
  1660  0FED                     	;# 
  1661  0FEE                     	;# 
  1662  0FEF                     	;# 
  1663  0000                     	;# 
  1664  0001                     	;# 
  1665  0002                     	;# 
  1666  0003                     	;# 
  1667  0004                     	;# 
  1668  0005                     	;# 
  1669  0006                     	;# 
  1670  0007                     	;# 
  1671  0008                     	;# 
  1672  0009                     	;# 
  1673  000A                     	;# 
  1674  000B                     	;# 
  1675  000C                     	;# 
  1676  000D                     	;# 
  1677  000E                     	;# 
  1678  0010                     	;# 
  1679  0011                     	;# 
  1680  0012                     	;# 
  1681  0013                     	;# 
  1682  0016                     	;# 
  1683  0017                     	;# 
  1684  0018                     	;# 
  1685  001C                     	;# 
  1686  001C                     	;# 
  1687  001D                     	;# 
  1688  001D                     	;# 
  1689  001E                     	;# 
  1690  001F                     	;# 
  1691  008C                     	;# 
  1692  008C                     	;# 
  1693  008D                     	;# 
  1694  008E                     	;# 
  1695  008E                     	;# 
  1696  008F                     	;# 
  1697  0090                     	;# 
  1698  0090                     	;# 
  1699  0091                     	;# 
  1700  0093                     	;# 
  1701  0094                     	;# 
  1702  0095                     	;# 
  1703  0096                     	;# 
  1704  0097                     	;# 
  1705  0098                     	;# 
  1706  0099                     	;# 
  1707  009A                     	;# 
  1708  009B                     	;# 
  1709  009C                     	;# 
  1710  009D                     	;# 
  1711  009E                     	;# 
  1712  010C                     	;# 
  1713  010D                     	;# 
  1714  010E                     	;# 
  1715  010E                     	;# 
  1716  010F                     	;# 
  1717  0110                     	;# 
  1718  0110                     	;# 
  1719  0111                     	;# 
  1720  0112                     	;# 
  1721  0112                     	;# 
  1722  0113                     	;# 
  1723  0114                     	;# 
  1724  0114                     	;# 
  1725  0115                     	;# 
  1726  0116                     	;# 
  1727  0116                     	;# 
  1728  0117                     	;# 
  1729  0119                     	;# 
  1730  0119                     	;# 
  1731  0119                     	;# 
  1732  011A                     	;# 
  1733  011A                     	;# 
  1734  011A                     	;# 
  1735  011B                     	;# 
  1736  011B                     	;# 
  1737  011B                     	;# 
  1738  011B                     	;# 
  1739  011B                     	;# 
  1740  011C                     	;# 
  1741  011C                     	;# 
  1742  011C                     	;# 
  1743  011D                     	;# 
  1744  011D                     	;# 
  1745  011D                     	;# 
  1746  011E                     	;# 
  1747  011E                     	;# 
  1748  011E                     	;# 
  1749  011F                     	;# 
  1750  011F                     	;# 
  1751  011F                     	;# 
  1752  011F                     	;# 
  1753  011F                     	;# 
  1754  018C                     	;# 
  1755  018D                     	;# 
  1756  018E                     	;# 
  1757  018F                     	;# 
  1758  0190                     	;# 
  1759  0191                     	;# 
  1760  0192                     	;# 
  1761  0196                     	;# 
  1762  0197                     	;# 
  1763  0198                     	;# 
  1764  0199                     	;# 
  1765  019A                     	;# 
  1766  019B                     	;# 
  1767  019C                     	;# 
  1768  020C                     	;# 
  1769  020C                     	;# 
  1770  020D                     	;# 
  1771  020E                     	;# 
  1772  020F                     	;# 
  1773  020F                     	;# 
  1774  0210                     	;# 
  1775  0210                     	;# 
  1776  0211                     	;# 
  1777  0211                     	;# 
  1778  0212                     	;# 
  1779  0212                     	;# 
  1780  0213                     	;# 
  1781  0214                     	;# 
  1782  0215                     	;# 
  1783  0215                     	;# 
  1784  0216                     	;# 
  1785  0216                     	;# 
  1786  0217                     	;# 
  1787  0217                     	;# 
  1788  0218                     	;# 
  1789  0218                     	;# 
  1790  0219                     	;# 
  1791  021A                     	;# 
  1792  021B                     	;# 
  1793  021B                     	;# 
  1794  021C                     	;# 
  1795  021C                     	;# 
  1796  021D                     	;# 
  1797  021D                     	;# 
  1798  021E                     	;# 
  1799  021F                     	;# 
  1800  028C                     	;# 
  1801  028C                     	;# 
  1802  028D                     	;# 
  1803  028D                     	;# 
  1804  028E                     	;# 
  1805  028F                     	;# 
  1806  0290                     	;# 
  1807  0290                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0293                     	;# 
  1813  0294                     	;# 
  1814  0295                     	;# 
  1815  0296                     	;# 
  1816  0296                     	;# 
  1817  0297                     	;# 
  1818  0298                     	;# 
  1819  0298                     	;# 
  1820  0299                     	;# 
  1821  0299                     	;# 
  1822  029A                     	;# 
  1823  029B                     	;# 
  1824  029C                     	;# 
  1825  029C                     	;# 
  1826  029D                     	;# 
  1827  030C                     	;# 
  1828  030C                     	;# 
  1829  030D                     	;# 
  1830  030E                     	;# 
  1831  030F                     	;# 
  1832  0310                     	;# 
  1833  0310                     	;# 
  1834  0311                     	;# 
  1835  0312                     	;# 
  1836  0313                     	;# 
  1837  0314                     	;# 
  1838  0314                     	;# 
  1839  0315                     	;# 
  1840  0316                     	;# 
  1841  0317                     	;# 
  1842  0318                     	;# 
  1843  0318                     	;# 
  1844  0319                     	;# 
  1845  031A                     	;# 
  1846  031B                     	;# 
  1847  031C                     	;# 
  1848  031C                     	;# 
  1849  031D                     	;# 
  1850  031E                     	;# 
  1851  031F                     	;# 
  1852  038C                     	;# 
  1853  038D                     	;# 
  1854  038E                     	;# 
  1855  0390                     	;# 
  1856  0391                     	;# 
  1857  0392                     	;# 
  1858  040C                     	;# 
  1859  040D                     	;# 
  1860  040E                     	;# 
  1861  040F                     	;# 
  1862  0410                     	;# 
  1863  0411                     	;# 
  1864  0416                     	;# 
  1865  0416                     	;# 
  1866  0417                     	;# 
  1867  0418                     	;# 
  1868  0418                     	;# 
  1869  0419                     	;# 
  1870  041A                     	;# 
  1871  041A                     	;# 
  1872  041B                     	;# 
  1873  041C                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  041F                     	;# 
  1878  048C                     	;# 
  1879  048C                     	;# 
  1880  048D                     	;# 
  1881  048E                     	;# 
  1882  048F                     	;# 
  1883  048F                     	;# 
  1884  0490                     	;# 
  1885  0491                     	;# 
  1886  0492                     	;# 
  1887  0492                     	;# 
  1888  0493                     	;# 
  1889  0494                     	;# 
  1890  0495                     	;# 
  1891  0495                     	;# 
  1892  0496                     	;# 
  1893  0497                     	;# 
  1894  0498                     	;# 
  1895  0499                     	;# 
  1896  049A                     	;# 
  1897  049B                     	;# 
  1898  049C                     	;# 
  1899  049D                     	;# 
  1900  050C                     	;# 
  1901  050C                     	;# 
  1902  050D                     	;# 
  1903  050E                     	;# 
  1904  050F                     	;# 
  1905  050F                     	;# 
  1906  0510                     	;# 
  1907  0511                     	;# 
  1908  0512                     	;# 
  1909  0512                     	;# 
  1910  0513                     	;# 
  1911  0514                     	;# 
  1912  0515                     	;# 
  1913  0515                     	;# 
  1914  0516                     	;# 
  1915  0517                     	;# 
  1916  0518                     	;# 
  1917  0519                     	;# 
  1918  051A                     	;# 
  1919  051B                     	;# 
  1920  051C                     	;# 
  1921  051D                     	;# 
  1922  058C                     	;# 
  1923  058C                     	;# 
  1924  058D                     	;# 
  1925  058E                     	;# 
  1926  058F                     	;# 
  1927  058F                     	;# 
  1928  0590                     	;# 
  1929  0591                     	;# 
  1930  0592                     	;# 
  1931  0593                     	;# 
  1932  060C                     	;# 
  1933  060D                     	;# 
  1934  060E                     	;# 
  1935  060F                     	;# 
  1936  0610                     	;# 
  1937  0611                     	;# 
  1938  0612                     	;# 
  1939  0613                     	;# 
  1940  0614                     	;# 
  1941  0616                     	;# 
  1942  0617                     	;# 
  1943  0618                     	;# 
  1944  0619                     	;# 
  1945  061A                     	;# 
  1946  061B                     	;# 
  1947  061C                     	;# 
  1948  061D                     	;# 
  1949  061E                     	;# 
  1950  068C                     	;# 
  1951  068D                     	;# 
  1952  068E                     	;# 
  1953  068F                     	;# 
  1954  0690                     	;# 
  1955  0691                     	;# 
  1956  0692                     	;# 
  1957  0693                     	;# 
  1958  0694                     	;# 
  1959  070C                     	;# 
  1960  070D                     	;# 
  1961  070E                     	;# 
  1962  070F                     	;# 
  1963  0710                     	;# 
  1964  0711                     	;# 
  1965  0712                     	;# 
  1966  0713                     	;# 
  1967  0714                     	;# 
  1968  0716                     	;# 
  1969  0717                     	;# 
  1970  0718                     	;# 
  1971  0719                     	;# 
  1972  071A                     	;# 
  1973  071B                     	;# 
  1974  071C                     	;# 
  1975  071D                     	;# 
  1976  071E                     	;# 
  1977  0796                     	;# 
  1978  0797                     	;# 
  1979  0798                     	;# 
  1980  0799                     	;# 
  1981  079A                     	;# 
  1982  079B                     	;# 
  1983  080C                     	;# 
  1984  080D                     	;# 
  1985  080E                     	;# 
  1986  080F                     	;# 
  1987  0810                     	;# 
  1988  0811                     	;# 
  1989  0812                     	;# 
  1990  0813                     	;# 
  1991  0814                     	;# 
  1992  081A                     	;# 
  1993  081B                     	;# 
  1994  081C                     	;# 
  1995  081D                     	;# 
  1996  081E                     	;# 
  1997  081F                     	;# 
  1998  088C                     	;# 
  1999  088D                     	;# 
  2000  088E                     	;# 
  2001  088F                     	;# 
  2002  0890                     	;# 
  2003  0891                     	;# 
  2004  0892                     	;# 
  2005  0893                     	;# 
  2006  0895                     	;# 
  2007  0896                     	;# 
  2008  0897                     	;# 
  2009  0898                     	;# 
  2010  0899                     	;# 
  2011  089A                     	;# 
  2012  089B                     	;# 
  2013  090C                     	;# 
  2014  090E                     	;# 
  2015  090F                     	;# 
  2016  091F                     	;# 
  2017  091F                     	;# 
  2018  098F                     	;# 
  2019  098F                     	;# 
  2020  0990                     	;# 
  2021  0991                     	;# 
  2022  0992                     	;# 
  2023  0993                     	;# 
  2024  0994                     	;# 
  2025  0995                     	;# 
  2026  0996                     	;# 
  2027  0997                     	;# 
  2028  0E0F                     	;# 
  2029  0E10                     	;# 
  2030  0E11                     	;# 
  2031  0E12                     	;# 
  2032  0E13                     	;# 
  2033  0E14                     	;# 
  2034  0E15                     	;# 
  2035  0E16                     	;# 
  2036  0E17                     	;# 
  2037  0E18                     	;# 
  2038  0E19                     	;# 
  2039  0E1A                     	;# 
  2040  0E1B                     	;# 
  2041  0E1C                     	;# 
  2042  0E1D                     	;# 
  2043  0E1E                     	;# 
  2044  0E1F                     	;# 
  2045  0E20                     	;# 
  2046  0E21                     	;# 
  2047  0E22                     	;# 
  2048  0E23                     	;# 
  2049  0E24                     	;# 
  2050  0E25                     	;# 
  2051  0E26                     	;# 
  2052  0E27                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E30                     	;# 
  2062  0E31                     	;# 
  2063  0E32                     	;# 
  2064  0E33                     	;# 
  2065  0E34                     	;# 
  2066  0E35                     	;# 
  2067  0E36                     	;# 
  2068  0E37                     	;# 
  2069  0E8F                     	;# 
  2070  0E90                     	;# 
  2071  0E91                     	;# 
  2072  0E92                     	;# 
  2073  0E93                     	;# 
  2074  0E94                     	;# 
  2075  0E95                     	;# 
  2076  0E96                     	;# 
  2077  0E97                     	;# 
  2078  0E9C                     	;# 
  2079  0E9D                     	;# 
  2080  0E9E                     	;# 
  2081  0EA1                     	;# 
  2082  0EA2                     	;# 
  2083  0EA3                     	;# 
  2084  0EA4                     	;# 
  2085  0EA5                     	;# 
  2086  0EA9                     	;# 
  2087  0EAA                     	;# 
  2088  0EAB                     	;# 
  2089  0EAC                     	;# 
  2090  0EB1                     	;# 
  2091  0EB2                     	;# 
  2092  0EB3                     	;# 
  2093  0EB8                     	;# 
  2094  0EB9                     	;# 
  2095  0EBA                     	;# 
  2096  0EBB                     	;# 
  2097  0EBC                     	;# 
  2098  0EBD                     	;# 
  2099  0EBE                     	;# 
  2100  0EC3                     	;# 
  2101  0EC5                     	;# 
  2102  0EC6                     	;# 
  2103  0EC7                     	;# 
  2104  0EC8                     	;# 
  2105  0EC9                     	;# 
  2106  0ECA                     	;# 
  2107  0ECB                     	;# 
  2108  0ECC                     	;# 
  2109  0F10                     	;# 
  2110  0F11                     	;# 
  2111  0F12                     	;# 
  2112  0F13                     	;# 
  2113  0F14                     	;# 
  2114  0F15                     	;# 
  2115  0F16                     	;# 
  2116  0F17                     	;# 
  2117  0F18                     	;# 
  2118  0F19                     	;# 
  2119  0F1A                     	;# 
  2120  0F1B                     	;# 
  2121  0F1C                     	;# 
  2122  0F1D                     	;# 
  2123  0F1E                     	;# 
  2124  0F1F                     	;# 
  2125  0F20                     	;# 
  2126  0F21                     	;# 
  2127  0F22                     	;# 
  2128  0F23                     	;# 
  2129  0F24                     	;# 
  2130  0F25                     	;# 
  2131  0F26                     	;# 
  2132  0F27                     	;# 
  2133  0F38                     	;# 
  2134  0F39                     	;# 
  2135  0F3A                     	;# 
  2136  0F3B                     	;# 
  2137  0F3C                     	;# 
  2138  0F3D                     	;# 
  2139  0F3E                     	;# 
  2140  0F3F                     	;# 
  2141  0F40                     	;# 
  2142  0F41                     	;# 
  2143  0F43                     	;# 
  2144  0F44                     	;# 
  2145  0F45                     	;# 
  2146  0F46                     	;# 
  2147  0F47                     	;# 
  2148  0F48                     	;# 
  2149  0F49                     	;# 
  2150  0F4A                     	;# 
  2151  0F4B                     	;# 
  2152  0F4C                     	;# 
  2153  0F4E                     	;# 
  2154  0F4F                     	;# 
  2155  0F50                     	;# 
  2156  0F51                     	;# 
  2157  0F52                     	;# 
  2158  0F53                     	;# 
  2159  0F54                     	;# 
  2160  0F55                     	;# 
  2161  0F56                     	;# 
  2162  0F57                     	;# 
  2163  0F65                     	;# 
  2164  0F68                     	;# 
  2165  0F69                     	;# 
  2166  0F6A                     	;# 
  2167  0F6B                     	;# 
  2168  0FE4                     	;# 
  2169  0FE5                     	;# 
  2170  0FE6                     	;# 
  2171  0FE7                     	;# 
  2172  0FE8                     	;# 
  2173  0FE9                     	;# 
  2174  0FEA                     	;# 
  2175  0FEB                     	;# 
  2176  0FED                     	;# 
  2177  0FEE                     	;# 
  2178  0FEF                     	;# 
  2179  0000                     	;# 
  2180  0001                     	;# 
  2181  0002                     	;# 
  2182  0003                     	;# 
  2183  0004                     	;# 
  2184  0005                     	;# 
  2185  0006                     	;# 
  2186  0007                     	;# 
  2187  0008                     	;# 
  2188  0009                     	;# 
  2189  000A                     	;# 
  2190  000B                     	;# 
  2191  000C                     	;# 
  2192  000D                     	;# 
  2193  000E                     	;# 
  2194  0010                     	;# 
  2195  0011                     	;# 
  2196  0012                     	;# 
  2197  0013                     	;# 
  2198  0016                     	;# 
  2199  0017                     	;# 
  2200  0018                     	;# 
  2201  001C                     	;# 
  2202  001C                     	;# 
  2203  001D                     	;# 
  2204  001D                     	;# 
  2205  001E                     	;# 
  2206  001F                     	;# 
  2207  008C                     	;# 
  2208  008C                     	;# 
  2209  008D                     	;# 
  2210  008E                     	;# 
  2211  008E                     	;# 
  2212  008F                     	;# 
  2213  0090                     	;# 
  2214  0090                     	;# 
  2215  0091                     	;# 
  2216  0093                     	;# 
  2217  0094                     	;# 
  2218  0095                     	;# 
  2219  0096                     	;# 
  2220  0097                     	;# 
  2221  0098                     	;# 
  2222  0099                     	;# 
  2223  009A                     	;# 
  2224  009B                     	;# 
  2225  009C                     	;# 
  2226  009D                     	;# 
  2227  009E                     	;# 
  2228  010C                     	;# 
  2229  010D                     	;# 
  2230  010E                     	;# 
  2231  010E                     	;# 
  2232  010F                     	;# 
  2233  0110                     	;# 
  2234  0110                     	;# 
  2235  0111                     	;# 
  2236  0112                     	;# 
  2237  0112                     	;# 
  2238  0113                     	;# 
  2239  0114                     	;# 
  2240  0114                     	;# 
  2241  0115                     	;# 
  2242  0116                     	;# 
  2243  0116                     	;# 
  2244  0117                     	;# 
  2245  0119                     	;# 
  2246  0119                     	;# 
  2247  0119                     	;# 
  2248  011A                     	;# 
  2249  011A                     	;# 
  2250  011A                     	;# 
  2251  011B                     	;# 
  2252  011B                     	;# 
  2253  011B                     	;# 
  2254  011B                     	;# 
  2255  011B                     	;# 
  2256  011C                     	;# 
  2257  011C                     	;# 
  2258  011C                     	;# 
  2259  011D                     	;# 
  2260  011D                     	;# 
  2261  011D                     	;# 
  2262  011E                     	;# 
  2263  011E                     	;# 
  2264  011E                     	;# 
  2265  011F                     	;# 
  2266  011F                     	;# 
  2267  011F                     	;# 
  2268  011F                     	;# 
  2269  011F                     	;# 
  2270  018C                     	;# 
  2271  018D                     	;# 
  2272  018E                     	;# 
  2273  018F                     	;# 
  2274  0190                     	;# 
  2275  0191                     	;# 
  2276  0192                     	;# 
  2277  0196                     	;# 
  2278  0197                     	;# 
  2279  0198                     	;# 
  2280  0199                     	;# 
  2281  019A                     	;# 
  2282  019B                     	;# 
  2283  019C                     	;# 
  2284  020C                     	;# 
  2285  020C                     	;# 
  2286  020D                     	;# 
  2287  020E                     	;# 
  2288  020F                     	;# 
  2289  020F                     	;# 
  2290  0210                     	;# 
  2291  0210                     	;# 
  2292  0211                     	;# 
  2293  0211                     	;# 
  2294  0212                     	;# 
  2295  0212                     	;# 
  2296  0213                     	;# 
  2297  0214                     	;# 
  2298  0215                     	;# 
  2299  0215                     	;# 
  2300  0216                     	;# 
  2301  0216                     	;# 
  2302  0217                     	;# 
  2303  0217                     	;# 
  2304  0218                     	;# 
  2305  0218                     	;# 
  2306  0219                     	;# 
  2307  021A                     	;# 
  2308  021B                     	;# 
  2309  021B                     	;# 
  2310  021C                     	;# 
  2311  021C                     	;# 
  2312  021D                     	;# 
  2313  021D                     	;# 
  2314  021E                     	;# 
  2315  021F                     	;# 
  2316  028C                     	;# 
  2317  028C                     	;# 
  2318  028D                     	;# 
  2319  028D                     	;# 
  2320  028E                     	;# 
  2321  028F                     	;# 
  2322  0290                     	;# 
  2323  0290                     	;# 
  2324  0291                     	;# 
  2325  0292                     	;# 
  2326  0292                     	;# 
  2327  0293                     	;# 
  2328  0293                     	;# 
  2329  0294                     	;# 
  2330  0295                     	;# 
  2331  0296                     	;# 
  2332  0296                     	;# 
  2333  0297                     	;# 
  2334  0298                     	;# 
  2335  0298                     	;# 
  2336  0299                     	;# 
  2337  0299                     	;# 
  2338  029A                     	;# 
  2339  029B                     	;# 
  2340  029C                     	;# 
  2341  029C                     	;# 
  2342  029D                     	;# 
  2343  030C                     	;# 
  2344  030C                     	;# 
  2345  030D                     	;# 
  2346  030E                     	;# 
  2347  030F                     	;# 
  2348  0310                     	;# 
  2349  0310                     	;# 
  2350  0311                     	;# 
  2351  0312                     	;# 
  2352  0313                     	;# 
  2353  0314                     	;# 
  2354  0314                     	;# 
  2355  0315                     	;# 
  2356  0316                     	;# 
  2357  0317                     	;# 
  2358  0318                     	;# 
  2359  0318                     	;# 
  2360  0319                     	;# 
  2361  031A                     	;# 
  2362  031B                     	;# 
  2363  031C                     	;# 
  2364  031C                     	;# 
  2365  031D                     	;# 
  2366  031E                     	;# 
  2367  031F                     	;# 
  2368  038C                     	;# 
  2369  038D                     	;# 
  2370  038E                     	;# 
  2371  0390                     	;# 
  2372  0391                     	;# 
  2373  0392                     	;# 
  2374  040C                     	;# 
  2375  040D                     	;# 
  2376  040E                     	;# 
  2377  040F                     	;# 
  2378  0410                     	;# 
  2379  0411                     	;# 
  2380  0416                     	;# 
  2381  0416                     	;# 
  2382  0417                     	;# 
  2383  0418                     	;# 
  2384  0418                     	;# 
  2385  0419                     	;# 
  2386  041A                     	;# 
  2387  041A                     	;# 
  2388  041B                     	;# 
  2389  041C                     	;# 
  2390  041C                     	;# 
  2391  041D                     	;# 
  2392  041E                     	;# 
  2393  041F                     	;# 
  2394  048C                     	;# 
  2395  048C                     	;# 
  2396  048D                     	;# 
  2397  048E                     	;# 
  2398  048F                     	;# 
  2399  048F                     	;# 
  2400  0490                     	;# 
  2401  0491                     	;# 
  2402  0492                     	;# 
  2403  0492                     	;# 
  2404  0493                     	;# 
  2405  0494                     	;# 
  2406  0495                     	;# 
  2407  0495                     	;# 
  2408  0496                     	;# 
  2409  0497                     	;# 
  2410  0498                     	;# 
  2411  0499                     	;# 
  2412  049A                     	;# 
  2413  049B                     	;# 
  2414  049C                     	;# 
  2415  049D                     	;# 
  2416  050C                     	;# 
  2417  050C                     	;# 
  2418  050D                     	;# 
  2419  050E                     	;# 
  2420  050F                     	;# 
  2421  050F                     	;# 
  2422  0510                     	;# 
  2423  0511                     	;# 
  2424  0512                     	;# 
  2425  0512                     	;# 
  2426  0513                     	;# 
  2427  0514                     	;# 
  2428  0515                     	;# 
  2429  0515                     	;# 
  2430  0516                     	;# 
  2431  0517                     	;# 
  2432  0518                     	;# 
  2433  0519                     	;# 
  2434  051A                     	;# 
  2435  051B                     	;# 
  2436  051C                     	;# 
  2437  051D                     	;# 
  2438  058C                     	;# 
  2439  058C                     	;# 
  2440  058D                     	;# 
  2441  058E                     	;# 
  2442  058F                     	;# 
  2443  058F                     	;# 
  2444  0590                     	;# 
  2445  0591                     	;# 
  2446  0592                     	;# 
  2447  0593                     	;# 
  2448  060C                     	;# 
  2449  060D                     	;# 
  2450  060E                     	;# 
  2451  060F                     	;# 
  2452  0610                     	;# 
  2453  0611                     	;# 
  2454  0612                     	;# 
  2455  0613                     	;# 
  2456  0614                     	;# 
  2457  0616                     	;# 
  2458  0617                     	;# 
  2459  0618                     	;# 
  2460  0619                     	;# 
  2461  061A                     	;# 
  2462  061B                     	;# 
  2463  061C                     	;# 
  2464  061D                     	;# 
  2465  061E                     	;# 
  2466  068C                     	;# 
  2467  068D                     	;# 
  2468  068E                     	;# 
  2469  068F                     	;# 
  2470  0690                     	;# 
  2471  0691                     	;# 
  2472  0692                     	;# 
  2473  0693                     	;# 
  2474  0694                     	;# 
  2475  070C                     	;# 
  2476  070D                     	;# 
  2477  070E                     	;# 
  2478  070F                     	;# 
  2479  0710                     	;# 
  2480  0711                     	;# 
  2481  0712                     	;# 
  2482  0713                     	;# 
  2483  0714                     	;# 
  2484  0716                     	;# 
  2485  0717                     	;# 
  2486  0718                     	;# 
  2487  0719                     	;# 
  2488  071A                     	;# 
  2489  071B                     	;# 
  2490  071C                     	;# 
  2491  071D                     	;# 
  2492  071E                     	;# 
  2493  0796                     	;# 
  2494  0797                     	;# 
  2495  0798                     	;# 
  2496  0799                     	;# 
  2497  079A                     	;# 
  2498  079B                     	;# 
  2499  080C                     	;# 
  2500  080D                     	;# 
  2501  080E                     	;# 
  2502  080F                     	;# 
  2503  0810                     	;# 
  2504  0811                     	;# 
  2505  0812                     	;# 
  2506  0813                     	;# 
  2507  0814                     	;# 
  2508  081A                     	;# 
  2509  081B                     	;# 
  2510  081C                     	;# 
  2511  081D                     	;# 
  2512  081E                     	;# 
  2513  081F                     	;# 
  2514  088C                     	;# 
  2515  088D                     	;# 
  2516  088E                     	;# 
  2517  088F                     	;# 
  2518  0890                     	;# 
  2519  0891                     	;# 
  2520  0892                     	;# 
  2521  0893                     	;# 
  2522  0895                     	;# 
  2523  0896                     	;# 
  2524  0897                     	;# 
  2525  0898                     	;# 
  2526  0899                     	;# 
  2527  089A                     	;# 
  2528  089B                     	;# 
  2529  090C                     	;# 
  2530  090E                     	;# 
  2531  090F                     	;# 
  2532  091F                     	;# 
  2533  091F                     	;# 
  2534  098F                     	;# 
  2535  098F                     	;# 
  2536  0990                     	;# 
  2537  0991                     	;# 
  2538  0992                     	;# 
  2539  0993                     	;# 
  2540  0994                     	;# 
  2541  0995                     	;# 
  2542  0996                     	;# 
  2543  0997                     	;# 
  2544  0E0F                     	;# 
  2545  0E10                     	;# 
  2546  0E11                     	;# 
  2547  0E12                     	;# 
  2548  0E13                     	;# 
  2549  0E14                     	;# 
  2550  0E15                     	;# 
  2551  0E16                     	;# 
  2552  0E17                     	;# 
  2553  0E18                     	;# 
  2554  0E19                     	;# 
  2555  0E1A                     	;# 
  2556  0E1B                     	;# 
  2557  0E1C                     	;# 
  2558  0E1D                     	;# 
  2559  0E1E                     	;# 
  2560  0E1F                     	;# 
  2561  0E20                     	;# 
  2562  0E21                     	;# 
  2563  0E22                     	;# 
  2564  0E23                     	;# 
  2565  0E24                     	;# 
  2566  0E25                     	;# 
  2567  0E26                     	;# 
  2568  0E27                     	;# 
  2569  0E28                     	;# 
  2570  0E29                     	;# 
  2571  0E2A                     	;# 
  2572  0E2B                     	;# 
  2573  0E2C                     	;# 
  2574  0E2D                     	;# 
  2575  0E2E                     	;# 
  2576  0E2F                     	;# 
  2577  0E30                     	;# 
  2578  0E31                     	;# 
  2579  0E32                     	;# 
  2580  0E33                     	;# 
  2581  0E34                     	;# 
  2582  0E35                     	;# 
  2583  0E36                     	;# 
  2584  0E37                     	;# 
  2585  0E8F                     	;# 
  2586  0E90                     	;# 
  2587  0E91                     	;# 
  2588  0E92                     	;# 
  2589  0E93                     	;# 
  2590  0E94                     	;# 
  2591  0E95                     	;# 
  2592  0E96                     	;# 
  2593  0E97                     	;# 
  2594  0E9C                     	;# 
  2595  0E9D                     	;# 
  2596  0E9E                     	;# 
  2597  0EA1                     	;# 
  2598  0EA2                     	;# 
  2599  0EA3                     	;# 
  2600  0EA4                     	;# 
  2601  0EA5                     	;# 
  2602  0EA9                     	;# 
  2603  0EAA                     	;# 
  2604  0EAB                     	;# 
  2605  0EAC                     	;# 
  2606  0EB1                     	;# 
  2607  0EB2                     	;# 
  2608  0EB3                     	;# 
  2609  0EB8                     	;# 
  2610  0EB9                     	;# 
  2611  0EBA                     	;# 
  2612  0EBB                     	;# 
  2613  0EBC                     	;# 
  2614  0EBD                     	;# 
  2615  0EBE                     	;# 
  2616  0EC3                     	;# 
  2617  0EC5                     	;# 
  2618  0EC6                     	;# 
  2619  0EC7                     	;# 
  2620  0EC8                     	;# 
  2621  0EC9                     	;# 
  2622  0ECA                     	;# 
  2623  0ECB                     	;# 
  2624  0ECC                     	;# 
  2625  0F10                     	;# 
  2626  0F11                     	;# 
  2627  0F12                     	;# 
  2628  0F13                     	;# 
  2629  0F14                     	;# 
  2630  0F15                     	;# 
  2631  0F16                     	;# 
  2632  0F17                     	;# 
  2633  0F18                     	;# 
  2634  0F19                     	;# 
  2635  0F1A                     	;# 
  2636  0F1B                     	;# 
  2637  0F1C                     	;# 
  2638  0F1D                     	;# 
  2639  0F1E                     	;# 
  2640  0F1F                     	;# 
  2641  0F20                     	;# 
  2642  0F21                     	;# 
  2643  0F22                     	;# 
  2644  0F23                     	;# 
  2645  0F24                     	;# 
  2646  0F25                     	;# 
  2647  0F26                     	;# 
  2648  0F27                     	;# 
  2649  0F38                     	;# 
  2650  0F39                     	;# 
  2651  0F3A                     	;# 
  2652  0F3B                     	;# 
  2653  0F3C                     	;# 
  2654  0F3D                     	;# 
  2655  0F3E                     	;# 
  2656  0F3F                     	;# 
  2657  0F40                     	;# 
  2658  0F41                     	;# 
  2659  0F43                     	;# 
  2660  0F44                     	;# 
  2661  0F45                     	;# 
  2662  0F46                     	;# 
  2663  0F47                     	;# 
  2664  0F48                     	;# 
  2665  0F49                     	;# 
  2666  0F4A                     	;# 
  2667  0F4B                     	;# 
  2668  0F4C                     	;# 
  2669  0F4E                     	;# 
  2670  0F4F                     	;# 
  2671  0F50                     	;# 
  2672  0F51                     	;# 
  2673  0F52                     	;# 
  2674  0F53                     	;# 
  2675  0F54                     	;# 
  2676  0F55                     	;# 
  2677  0F56                     	;# 
  2678  0F57                     	;# 
  2679  0F65                     	;# 
  2680  0F68                     	;# 
  2681  0F69                     	;# 
  2682  0F6A                     	;# 
  2683  0F6B                     	;# 
  2684  0FE4                     	;# 
  2685  0FE5                     	;# 
  2686  0FE6                     	;# 
  2687  0FE7                     	;# 
  2688  0FE8                     	;# 
  2689  0FE9                     	;# 
  2690  0FEA                     	;# 
  2691  0FEB                     	;# 
  2692  0FED                     	;# 
  2693  0FEE                     	;# 
  2694  0FEF                     	;# 
  2695  0000                     	;# 
  2696  0001                     	;# 
  2697  0002                     	;# 
  2698  0003                     	;# 
  2699  0004                     	;# 
  2700  0005                     	;# 
  2701  0006                     	;# 
  2702  0007                     	;# 
  2703  0008                     	;# 
  2704  0009                     	;# 
  2705  000A                     	;# 
  2706  000B                     	;# 
  2707  000C                     	;# 
  2708  000D                     	;# 
  2709  000E                     	;# 
  2710  0010                     	;# 
  2711  0011                     	;# 
  2712  0012                     	;# 
  2713  0013                     	;# 
  2714  0016                     	;# 
  2715  0017                     	;# 
  2716  0018                     	;# 
  2717  001C                     	;# 
  2718  001C                     	;# 
  2719  001D                     	;# 
  2720  001D                     	;# 
  2721  001E                     	;# 
  2722  001F                     	;# 
  2723  008C                     	;# 
  2724  008C                     	;# 
  2725  008D                     	;# 
  2726  008E                     	;# 
  2727  008E                     	;# 
  2728  008F                     	;# 
  2729  0090                     	;# 
  2730  0090                     	;# 
  2731  0091                     	;# 
  2732  0093                     	;# 
  2733  0094                     	;# 
  2734  0095                     	;# 
  2735  0096                     	;# 
  2736  0097                     	;# 
  2737  0098                     	;# 
  2738  0099                     	;# 
  2739  009A                     	;# 
  2740  009B                     	;# 
  2741  009C                     	;# 
  2742  009D                     	;# 
  2743  009E                     	;# 
  2744  010C                     	;# 
  2745  010D                     	;# 
  2746  010E                     	;# 
  2747  010E                     	;# 
  2748  010F                     	;# 
  2749  0110                     	;# 
  2750  0110                     	;# 
  2751  0111                     	;# 
  2752  0112                     	;# 
  2753  0112                     	;# 
  2754  0113                     	;# 
  2755  0114                     	;# 
  2756  0114                     	;# 
  2757  0115                     	;# 
  2758  0116                     	;# 
  2759  0116                     	;# 
  2760  0117                     	;# 
  2761  0119                     	;# 
  2762  0119                     	;# 
  2763  0119                     	;# 
  2764  011A                     	;# 
  2765  011A                     	;# 
  2766  011A                     	;# 
  2767  011B                     	;# 
  2768  011B                     	;# 
  2769  011B                     	;# 
  2770  011B                     	;# 
  2771  011B                     	;# 
  2772  011C                     	;# 
  2773  011C                     	;# 
  2774  011C                     	;# 
  2775  011D                     	;# 
  2776  011D                     	;# 
  2777  011D                     	;# 
  2778  011E                     	;# 
  2779  011E                     	;# 
  2780  011E                     	;# 
  2781  011F                     	;# 
  2782  011F                     	;# 
  2783  011F                     	;# 
  2784  011F                     	;# 
  2785  011F                     	;# 
  2786  018C                     	;# 
  2787  018D                     	;# 
  2788  018E                     	;# 
  2789  018F                     	;# 
  2790  0190                     	;# 
  2791  0191                     	;# 
  2792  0192                     	;# 
  2793  0196                     	;# 
  2794  0197                     	;# 
  2795  0198                     	;# 
  2796  0199                     	;# 
  2797  019A                     	;# 
  2798  019B                     	;# 
  2799  019C                     	;# 
  2800  020C                     	;# 
  2801  020C                     	;# 
  2802  020D                     	;# 
  2803  020E                     	;# 
  2804  020F                     	;# 
  2805  020F                     	;# 
  2806  0210                     	;# 
  2807  0210                     	;# 
  2808  0211                     	;# 
  2809  0211                     	;# 
  2810  0212                     	;# 
  2811  0212                     	;# 
  2812  0213                     	;# 
  2813  0214                     	;# 
  2814  0215                     	;# 
  2815  0215                     	;# 
  2816  0216                     	;# 
  2817  0216                     	;# 
  2818  0217                     	;# 
  2819  0217                     	;# 
  2820  0218                     	;# 
  2821  0218                     	;# 
  2822  0219                     	;# 
  2823  021A                     	;# 
  2824  021B                     	;# 
  2825  021B                     	;# 
  2826  021C                     	;# 
  2827  021C                     	;# 
  2828  021D                     	;# 
  2829  021D                     	;# 
  2830  021E                     	;# 
  2831  021F                     	;# 
  2832  028C                     	;# 
  2833  028C                     	;# 
  2834  028D                     	;# 
  2835  028D                     	;# 
  2836  028E                     	;# 
  2837  028F                     	;# 
  2838  0290                     	;# 
  2839  0290                     	;# 
  2840  0291                     	;# 
  2841  0292                     	;# 
  2842  0292                     	;# 
  2843  0293                     	;# 
  2844  0293                     	;# 
  2845  0294                     	;# 
  2846  0295                     	;# 
  2847  0296                     	;# 
  2848  0296                     	;# 
  2849  0297                     	;# 
  2850  0298                     	;# 
  2851  0298                     	;# 
  2852  0299                     	;# 
  2853  0299                     	;# 
  2854  029A                     	;# 
  2855  029B                     	;# 
  2856  029C                     	;# 
  2857  029C                     	;# 
  2858  029D                     	;# 
  2859  030C                     	;# 
  2860  030C                     	;# 
  2861  030D                     	;# 
  2862  030E                     	;# 
  2863  030F                     	;# 
  2864  0310                     	;# 
  2865  0310                     	;# 
  2866  0311                     	;# 
  2867  0312                     	;# 
  2868  0313                     	;# 
  2869  0314                     	;# 
  2870  0314                     	;# 
  2871  0315                     	;# 
  2872  0316                     	;# 
  2873  0317                     	;# 
  2874  0318                     	;# 
  2875  0318                     	;# 
  2876  0319                     	;# 
  2877  031A                     	;# 
  2878  031B                     	;# 
  2879  031C                     	;# 
  2880  031C                     	;# 
  2881  031D                     	;# 
  2882  031E                     	;# 
  2883  031F                     	;# 
  2884  038C                     	;# 
  2885  038D                     	;# 
  2886  038E                     	;# 
  2887  0390                     	;# 
  2888  0391                     	;# 
  2889  0392                     	;# 
  2890  040C                     	;# 
  2891  040D                     	;# 
  2892  040E                     	;# 
  2893  040F                     	;# 
  2894  0410                     	;# 
  2895  0411                     	;# 
  2896  0416                     	;# 
  2897  0416                     	;# 
  2898  0417                     	;# 
  2899  0418                     	;# 
  2900  0418                     	;# 
  2901  0419                     	;# 
  2902  041A                     	;# 
  2903  041A                     	;# 
  2904  041B                     	;# 
  2905  041C                     	;# 
  2906  041C                     	;# 
  2907  041D                     	;# 
  2908  041E                     	;# 
  2909  041F                     	;# 
  2910  048C                     	;# 
  2911  048C                     	;# 
  2912  048D                     	;# 
  2913  048E                     	;# 
  2914  048F                     	;# 
  2915  048F                     	;# 
  2916  0490                     	;# 
  2917  0491                     	;# 
  2918  0492                     	;# 
  2919  0492                     	;# 
  2920  0493                     	;# 
  2921  0494                     	;# 
  2922  0495                     	;# 
  2923  0495                     	;# 
  2924  0496                     	;# 
  2925  0497                     	;# 
  2926  0498                     	;# 
  2927  0499                     	;# 
  2928  049A                     	;# 
  2929  049B                     	;# 
  2930  049C                     	;# 
  2931  049D                     	;# 
  2932  050C                     	;# 
  2933  050C                     	;# 
  2934  050D                     	;# 
  2935  050E                     	;# 
  2936  050F                     	;# 
  2937  050F                     	;# 
  2938  0510                     	;# 
  2939  0511                     	;# 
  2940  0512                     	;# 
  2941  0512                     	;# 
  2942  0513                     	;# 
  2943  0514                     	;# 
  2944  0515                     	;# 
  2945  0515                     	;# 
  2946  0516                     	;# 
  2947  0517                     	;# 
  2948  0518                     	;# 
  2949  0519                     	;# 
  2950  051A                     	;# 
  2951  051B                     	;# 
  2952  051C                     	;# 
  2953  051D                     	;# 
  2954  058C                     	;# 
  2955  058C                     	;# 
  2956  058D                     	;# 
  2957  058E                     	;# 
  2958  058F                     	;# 
  2959  058F                     	;# 
  2960  0590                     	;# 
  2961  0591                     	;# 
  2962  0592                     	;# 
  2963  0593                     	;# 
  2964  060C                     	;# 
  2965  060D                     	;# 
  2966  060E                     	;# 
  2967  060F                     	;# 
  2968  0610                     	;# 
  2969  0611                     	;# 
  2970  0612                     	;# 
  2971  0613                     	;# 
  2972  0614                     	;# 
  2973  0616                     	;# 
  2974  0617                     	;# 
  2975  0618                     	;# 
  2976  0619                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061D                     	;# 
  2981  061E                     	;# 
  2982  068C                     	;# 
  2983  068D                     	;# 
  2984  068E                     	;# 
  2985  068F                     	;# 
  2986  0690                     	;# 
  2987  0691                     	;# 
  2988  0692                     	;# 
  2989  0693                     	;# 
  2990  0694                     	;# 
  2991  070C                     	;# 
  2992  070D                     	;# 
  2993  070E                     	;# 
  2994  070F                     	;# 
  2995  0710                     	;# 
  2996  0711                     	;# 
  2997  0712                     	;# 
  2998  0713                     	;# 
  2999  0714                     	;# 
  3000  0716                     	;# 
  3001  0717                     	;# 
  3002  0718                     	;# 
  3003  0719                     	;# 
  3004  071A                     	;# 
  3005  071B                     	;# 
  3006  071C                     	;# 
  3007  071D                     	;# 
  3008  071E                     	;# 
  3009  0796                     	;# 
  3010  0797                     	;# 
  3011  0798                     	;# 
  3012  0799                     	;# 
  3013  079A                     	;# 
  3014  079B                     	;# 
  3015  080C                     	;# 
  3016  080D                     	;# 
  3017  080E                     	;# 
  3018  080F                     	;# 
  3019  0810                     	;# 
  3020  0811                     	;# 
  3021  0812                     	;# 
  3022  0813                     	;# 
  3023  0814                     	;# 
  3024  081A                     	;# 
  3025  081B                     	;# 
  3026  081C                     	;# 
  3027  081D                     	;# 
  3028  081E                     	;# 
  3029  081F                     	;# 
  3030  088C                     	;# 
  3031  088D                     	;# 
  3032  088E                     	;# 
  3033  088F                     	;# 
  3034  0890                     	;# 
  3035  0891                     	;# 
  3036  0892                     	;# 
  3037  0893                     	;# 
  3038  0895                     	;# 
  3039  0896                     	;# 
  3040  0897                     	;# 
  3041  0898                     	;# 
  3042  0899                     	;# 
  3043  089A                     	;# 
  3044  089B                     	;# 
  3045  090C                     	;# 
  3046  090E                     	;# 
  3047  090F                     	;# 
  3048  091F                     	;# 
  3049  091F                     	;# 
  3050  098F                     	;# 
  3051  098F                     	;# 
  3052  0990                     	;# 
  3053  0991                     	;# 
  3054  0992                     	;# 
  3055  0993                     	;# 
  3056  0994                     	;# 
  3057  0995                     	;# 
  3058  0996                     	;# 
  3059  0997                     	;# 
  3060  0E0F                     	;# 
  3061  0E10                     	;# 
  3062  0E11                     	;# 
  3063  0E12                     	;# 
  3064  0E13                     	;# 
  3065  0E14                     	;# 
  3066  0E15                     	;# 
  3067  0E16                     	;# 
  3068  0E17                     	;# 
  3069  0E18                     	;# 
  3070  0E19                     	;# 
  3071  0E1A                     	;# 
  3072  0E1B                     	;# 
  3073  0E1C                     	;# 
  3074  0E1D                     	;# 
  3075  0E1E                     	;# 
  3076  0E1F                     	;# 
  3077  0E20                     	;# 
  3078  0E21                     	;# 
  3079  0E22                     	;# 
  3080  0E23                     	;# 
  3081  0E24                     	;# 
  3082  0E25                     	;# 
  3083  0E26                     	;# 
  3084  0E27                     	;# 
  3085  0E28                     	;# 
  3086  0E29                     	;# 
  3087  0E2A                     	;# 
  3088  0E2B                     	;# 
  3089  0E2C                     	;# 
  3090  0E2D                     	;# 
  3091  0E2E                     	;# 
  3092  0E2F                     	;# 
  3093  0E30                     	;# 
  3094  0E31                     	;# 
  3095  0E32                     	;# 
  3096  0E33                     	;# 
  3097  0E34                     	;# 
  3098  0E35                     	;# 
  3099  0E36                     	;# 
  3100  0E37                     	;# 
  3101  0E8F                     	;# 
  3102  0E90                     	;# 
  3103  0E91                     	;# 
  3104  0E92                     	;# 
  3105  0E93                     	;# 
  3106  0E94                     	;# 
  3107  0E95                     	;# 
  3108  0E96                     	;# 
  3109  0E97                     	;# 
  3110  0E9C                     	;# 
  3111  0E9D                     	;# 
  3112  0E9E                     	;# 
  3113  0EA1                     	;# 
  3114  0EA2                     	;# 
  3115  0EA3                     	;# 
  3116  0EA4                     	;# 
  3117  0EA5                     	;# 
  3118  0EA9                     	;# 
  3119  0EAA                     	;# 
  3120  0EAB                     	;# 
  3121  0EAC                     	;# 
  3122  0EB1                     	;# 
  3123  0EB2                     	;# 
  3124  0EB3                     	;# 
  3125  0EB8                     	;# 
  3126  0EB9                     	;# 
  3127  0EBA                     	;# 
  3128  0EBB                     	;# 
  3129  0EBC                     	;# 
  3130  0EBD                     	;# 
  3131  0EBE                     	;# 
  3132  0EC3                     	;# 
  3133  0EC5                     	;# 
  3134  0EC6                     	;# 
  3135  0EC7                     	;# 
  3136  0EC8                     	;# 
  3137  0EC9                     	;# 
  3138  0ECA                     	;# 
  3139  0ECB                     	;# 
  3140  0ECC                     	;# 
  3141  0F10                     	;# 
  3142  0F11                     	;# 
  3143  0F12                     	;# 
  3144  0F13                     	;# 
  3145  0F14                     	;# 
  3146  0F15                     	;# 
  3147  0F16                     	;# 
  3148  0F17                     	;# 
  3149  0F18                     	;# 
  3150  0F19                     	;# 
  3151  0F1A                     	;# 
  3152  0F1B                     	;# 
  3153  0F1C                     	;# 
  3154  0F1D                     	;# 
  3155  0F1E                     	;# 
  3156  0F1F                     	;# 
  3157  0F20                     	;# 
  3158  0F21                     	;# 
  3159  0F22                     	;# 
  3160  0F23                     	;# 
  3161  0F24                     	;# 
  3162  0F25                     	;# 
  3163  0F26                     	;# 
  3164  0F27                     	;# 
  3165  0F38                     	;# 
  3166  0F39                     	;# 
  3167  0F3A                     	;# 
  3168  0F3B                     	;# 
  3169  0F3C                     	;# 
  3170  0F3D                     	;# 
  3171  0F3E                     	;# 
  3172  0F3F                     	;# 
  3173  0F40                     	;# 
  3174  0F41                     	;# 
  3175  0F43                     	;# 
  3176  0F44                     	;# 
  3177  0F45                     	;# 
  3178  0F46                     	;# 
  3179  0F47                     	;# 
  3180  0F48                     	;# 
  3181  0F49                     	;# 
  3182  0F4A                     	;# 
  3183  0F4B                     	;# 
  3184  0F4C                     	;# 
  3185  0F4E                     	;# 
  3186  0F4F                     	;# 
  3187  0F50                     	;# 
  3188  0F51                     	;# 
  3189  0F52                     	;# 
  3190  0F53                     	;# 
  3191  0F54                     	;# 
  3192  0F55                     	;# 
  3193  0F56                     	;# 
  3194  0F57                     	;# 
  3195  0F65                     	;# 
  3196  0F68                     	;# 
  3197  0F69                     	;# 
  3198  0F6A                     	;# 
  3199  0F6B                     	;# 
  3200  0FE4                     	;# 
  3201  0FE5                     	;# 
  3202  0FE6                     	;# 
  3203  0FE7                     	;# 
  3204  0FE8                     	;# 
  3205  0FE9                     	;# 
  3206  0FEA                     	;# 
  3207  0FEB                     	;# 
  3208  0FED                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0000                     	;# 
  3212  0001                     	;# 
  3213  0002                     	;# 
  3214  0003                     	;# 
  3215  0004                     	;# 
  3216  0005                     	;# 
  3217  0006                     	;# 
  3218  0007                     	;# 
  3219  0008                     	;# 
  3220  0009                     	;# 
  3221  000A                     	;# 
  3222  000B                     	;# 
  3223  000C                     	;# 
  3224  000D                     	;# 
  3225  000E                     	;# 
  3226  0010                     	;# 
  3227  0011                     	;# 
  3228  0012                     	;# 
  3229  0013                     	;# 
  3230  0016                     	;# 
  3231  0017                     	;# 
  3232  0018                     	;# 
  3233  001C                     	;# 
  3234  001C                     	;# 
  3235  001D                     	;# 
  3236  001D                     	;# 
  3237  001E                     	;# 
  3238  001F                     	;# 
  3239  008C                     	;# 
  3240  008C                     	;# 
  3241  008D                     	;# 
  3242  008E                     	;# 
  3243  008E                     	;# 
  3244  008F                     	;# 
  3245  0090                     	;# 
  3246  0090                     	;# 
  3247  0091                     	;# 
  3248  0093                     	;# 
  3249  0094                     	;# 
  3250  0095                     	;# 
  3251  0096                     	;# 
  3252  0097                     	;# 
  3253  0098                     	;# 
  3254  0099                     	;# 
  3255  009A                     	;# 
  3256  009B                     	;# 
  3257  009C                     	;# 
  3258  009D                     	;# 
  3259  009E                     	;# 
  3260  010C                     	;# 
  3261  010D                     	;# 
  3262  010E                     	;# 
  3263  010E                     	;# 
  3264  010F                     	;# 
  3265  0110                     	;# 
  3266  0110                     	;# 
  3267  0111                     	;# 
  3268  0112                     	;# 
  3269  0112                     	;# 
  3270  0113                     	;# 
  3271  0114                     	;# 
  3272  0114                     	;# 
  3273  0115                     	;# 
  3274  0116                     	;# 
  3275  0116                     	;# 
  3276  0117                     	;# 
  3277  0119                     	;# 
  3278  0119                     	;# 
  3279  0119                     	;# 
  3280  011A                     	;# 
  3281  011A                     	;# 
  3282  011A                     	;# 
  3283  011B                     	;# 
  3284  011B                     	;# 
  3285  011B                     	;# 
  3286  011B                     	;# 
  3287  011B                     	;# 
  3288  011C                     	;# 
  3289  011C                     	;# 
  3290  011C                     	;# 
  3291  011D                     	;# 
  3292  011D                     	;# 
  3293  011D                     	;# 
  3294  011E                     	;# 
  3295  011E                     	;# 
  3296  011E                     	;# 
  3297  011F                     	;# 
  3298  011F                     	;# 
  3299  011F                     	;# 
  3300  011F                     	;# 
  3301  011F                     	;# 
  3302  018C                     	;# 
  3303  018D                     	;# 
  3304  018E                     	;# 
  3305  018F                     	;# 
  3306  0190                     	;# 
  3307  0191                     	;# 
  3308  0192                     	;# 
  3309  0196                     	;# 
  3310  0197                     	;# 
  3311  0198                     	;# 
  3312  0199                     	;# 
  3313  019A                     	;# 
  3314  019B                     	;# 
  3315  019C                     	;# 
  3316  020C                     	;# 
  3317  020C                     	;# 
  3318  020D                     	;# 
  3319  020E                     	;# 
  3320  020F                     	;# 
  3321  020F                     	;# 
  3322  0210                     	;# 
  3323  0210                     	;# 
  3324  0211                     	;# 
  3325  0211                     	;# 
  3326  0212                     	;# 
  3327  0212                     	;# 
  3328  0213                     	;# 
  3329  0214                     	;# 
  3330  0215                     	;# 
  3331  0215                     	;# 
  3332  0216                     	;# 
  3333  0216                     	;# 
  3334  0217                     	;# 
  3335  0217                     	;# 
  3336  0218                     	;# 
  3337  0218                     	;# 
  3338  0219                     	;# 
  3339  021A                     	;# 
  3340  021B                     	;# 
  3341  021B                     	;# 
  3342  021C                     	;# 
  3343  021C                     	;# 
  3344  021D                     	;# 
  3345  021D                     	;# 
  3346  021E                     	;# 
  3347  021F                     	;# 
  3348  028C                     	;# 
  3349  028C                     	;# 
  3350  028D                     	;# 
  3351  028D                     	;# 
  3352  028E                     	;# 
  3353  028F                     	;# 
  3354  0290                     	;# 
  3355  0290                     	;# 
  3356  0291                     	;# 
  3357  0292                     	;# 
  3358  0292                     	;# 
  3359  0293                     	;# 
  3360  0293                     	;# 
  3361  0294                     	;# 
  3362  0295                     	;# 
  3363  0296                     	;# 
  3364  0296                     	;# 
  3365  0297                     	;# 
  3366  0298                     	;# 
  3367  0298                     	;# 
  3368  0299                     	;# 
  3369  0299                     	;# 
  3370  029A                     	;# 
  3371  029B                     	;# 
  3372  029C                     	;# 
  3373  029C                     	;# 
  3374  029D                     	;# 
  3375  030C                     	;# 
  3376  030C                     	;# 
  3377  030D                     	;# 
  3378  030E                     	;# 
  3379  030F                     	;# 
  3380  0310                     	;# 
  3381  0310                     	;# 
  3382  0311                     	;# 
  3383  0312                     	;# 
  3384  0313                     	;# 
  3385  0314                     	;# 
  3386  0314                     	;# 
  3387  0315                     	;# 
  3388  0316                     	;# 
  3389  0317                     	;# 
  3390  0318                     	;# 
  3391  0318                     	;# 
  3392  0319                     	;# 
  3393  031A                     	;# 
  3394  031B                     	;# 
  3395  031C                     	;# 
  3396  031C                     	;# 
  3397  031D                     	;# 
  3398  031E                     	;# 
  3399  031F                     	;# 
  3400  038C                     	;# 
  3401  038D                     	;# 
  3402  038E                     	;# 
  3403  0390                     	;# 
  3404  0391                     	;# 
  3405  0392                     	;# 
  3406  040C                     	;# 
  3407  040D                     	;# 
  3408  040E                     	;# 
  3409  040F                     	;# 
  3410  0410                     	;# 
  3411  0411                     	;# 
  3412  0416                     	;# 
  3413  0416                     	;# 
  3414  0417                     	;# 
  3415  0418                     	;# 
  3416  0418                     	;# 
  3417  0419                     	;# 
  3418  041A                     	;# 
  3419  041A                     	;# 
  3420  041B                     	;# 
  3421  041C                     	;# 
  3422  041C                     	;# 
  3423  041D                     	;# 
  3424  041E                     	;# 
  3425  041F                     	;# 
  3426  048C                     	;# 
  3427  048C                     	;# 
  3428  048D                     	;# 
  3429  048E                     	;# 
  3430  048F                     	;# 
  3431  048F                     	;# 
  3432  0490                     	;# 
  3433  0491                     	;# 
  3434  0492                     	;# 
  3435  0492                     	;# 
  3436  0493                     	;# 
  3437  0494                     	;# 
  3438  0495                     	;# 
  3439  0495                     	;# 
  3440  0496                     	;# 
  3441  0497                     	;# 
  3442  0498                     	;# 
  3443  0499                     	;# 
  3444  049A                     	;# 
  3445  049B                     	;# 
  3446  049C                     	;# 
  3447  049D                     	;# 
  3448  050C                     	;# 
  3449  050C                     	;# 
  3450  050D                     	;# 
  3451  050E                     	;# 
  3452  050F                     	;# 
  3453  050F                     	;# 
  3454  0510                     	;# 
  3455  0511                     	;# 
  3456  0512                     	;# 
  3457  0512                     	;# 
  3458  0513                     	;# 
  3459  0514                     	;# 
  3460  0515                     	;# 
  3461  0515                     	;# 
  3462  0516                     	;# 
  3463  0517                     	;# 
  3464  0518                     	;# 
  3465  0519                     	;# 
  3466  051A                     	;# 
  3467  051B                     	;# 
  3468  051C                     	;# 
  3469  051D                     	;# 
  3470  058C                     	;# 
  3471  058C                     	;# 
  3472  058D                     	;# 
  3473  058E                     	;# 
  3474  058F                     	;# 
  3475  058F                     	;# 
  3476  0590                     	;# 
  3477  0591                     	;# 
  3478  0592                     	;# 
  3479  0593                     	;# 
  3480  060C                     	;# 
  3481  060D                     	;# 
  3482  060E                     	;# 
  3483  060F                     	;# 
  3484  0610                     	;# 
  3485  0611                     	;# 
  3486  0612                     	;# 
  3487  0613                     	;# 
  3488  0614                     	;# 
  3489  0616                     	;# 
  3490  0617                     	;# 
  3491  0618                     	;# 
  3492  0619                     	;# 
  3493  061A                     	;# 
  3494  061B                     	;# 
  3495  061C                     	;# 
  3496  061D                     	;# 
  3497  061E                     	;# 
  3498  068C                     	;# 
  3499  068D                     	;# 
  3500  068E                     	;# 
  3501  068F                     	;# 
  3502  0690                     	;# 
  3503  0691                     	;# 
  3504  0692                     	;# 
  3505  0693                     	;# 
  3506  0694                     	;# 
  3507  070C                     	;# 
  3508  070D                     	;# 
  3509  070E                     	;# 
  3510  070F                     	;# 
  3511  0710                     	;# 
  3512  0711                     	;# 
  3513  0712                     	;# 
  3514  0713                     	;# 
  3515  0714                     	;# 
  3516  0716                     	;# 
  3517  0717                     	;# 
  3518  0718                     	;# 
  3519  0719                     	;# 
  3520  071A                     	;# 
  3521  071B                     	;# 
  3522  071C                     	;# 
  3523  071D                     	;# 
  3524  071E                     	;# 
  3525  0796                     	;# 
  3526  0797                     	;# 
  3527  0798                     	;# 
  3528  0799                     	;# 
  3529  079A                     	;# 
  3530  079B                     	;# 
  3531  080C                     	;# 
  3532  080D                     	;# 
  3533  080E                     	;# 
  3534  080F                     	;# 
  3535  0810                     	;# 
  3536  0811                     	;# 
  3537  0812                     	;# 
  3538  0813                     	;# 
  3539  0814                     	;# 
  3540  081A                     	;# 
  3541  081B                     	;# 
  3542  081C                     	;# 
  3543  081D                     	;# 
  3544  081E                     	;# 
  3545  081F                     	;# 
  3546  088C                     	;# 
  3547  088D                     	;# 
  3548  088E                     	;# 
  3549  088F                     	;# 
  3550  0890                     	;# 
  3551  0891                     	;# 
  3552  0892                     	;# 
  3553  0893                     	;# 
  3554  0895                     	;# 
  3555  0896                     	;# 
  3556  0897                     	;# 
  3557  0898                     	;# 
  3558  0899                     	;# 
  3559  089A                     	;# 
  3560  089B                     	;# 
  3561  090C                     	;# 
  3562  090E                     	;# 
  3563  090F                     	;# 
  3564  091F                     	;# 
  3565  091F                     	;# 
  3566  098F                     	;# 
  3567  098F                     	;# 
  3568  0990                     	;# 
  3569  0991                     	;# 
  3570  0992                     	;# 
  3571  0993                     	;# 
  3572  0994                     	;# 
  3573  0995                     	;# 
  3574  0996                     	;# 
  3575  0997                     	;# 
  3576  0E0F                     	;# 
  3577  0E10                     	;# 
  3578  0E11                     	;# 
  3579  0E12                     	;# 
  3580  0E13                     	;# 
  3581  0E14                     	;# 
  3582  0E15                     	;# 
  3583  0E16                     	;# 
  3584  0E17                     	;# 
  3585  0E18                     	;# 
  3586  0E19                     	;# 
  3587  0E1A                     	;# 
  3588  0E1B                     	;# 
  3589  0E1C                     	;# 
  3590  0E1D                     	;# 
  3591  0E1E                     	;# 
  3592  0E1F                     	;# 
  3593  0E20                     	;# 
  3594  0E21                     	;# 
  3595  0E22                     	;# 
  3596  0E23                     	;# 
  3597  0E24                     	;# 
  3598  0E25                     	;# 
  3599  0E26                     	;# 
  3600  0E27                     	;# 
  3601  0E28                     	;# 
  3602  0E29                     	;# 
  3603  0E2A                     	;# 
  3604  0E2B                     	;# 
  3605  0E2C                     	;# 
  3606  0E2D                     	;# 
  3607  0E2E                     	;# 
  3608  0E2F                     	;# 
  3609  0E30                     	;# 
  3610  0E31                     	;# 
  3611  0E32                     	;# 
  3612  0E33                     	;# 
  3613  0E34                     	;# 
  3614  0E35                     	;# 
  3615  0E36                     	;# 
  3616  0E37                     	;# 
  3617  0E8F                     	;# 
  3618  0E90                     	;# 
  3619  0E91                     	;# 
  3620  0E92                     	;# 
  3621  0E93                     	;# 
  3622  0E94                     	;# 
  3623  0E95                     	;# 
  3624  0E96                     	;# 
  3625  0E97                     	;# 
  3626  0E9C                     	;# 
  3627  0E9D                     	;# 
  3628  0E9E                     	;# 
  3629  0EA1                     	;# 
  3630  0EA2                     	;# 
  3631  0EA3                     	;# 
  3632  0EA4                     	;# 
  3633  0EA5                     	;# 
  3634  0EA9                     	;# 
  3635  0EAA                     	;# 
  3636  0EAB                     	;# 
  3637  0EAC                     	;# 
  3638  0EB1                     	;# 
  3639  0EB2                     	;# 
  3640  0EB3                     	;# 
  3641  0EB8                     	;# 
  3642  0EB9                     	;# 
  3643  0EBA                     	;# 
  3644  0EBB                     	;# 
  3645  0EBC                     	;# 
  3646  0EBD                     	;# 
  3647  0EBE                     	;# 
  3648  0EC3                     	;# 
  3649  0EC5                     	;# 
  3650  0EC6                     	;# 
  3651  0EC7                     	;# 
  3652  0EC8                     	;# 
  3653  0EC9                     	;# 
  3654  0ECA                     	;# 
  3655  0ECB                     	;# 
  3656  0ECC                     	;# 
  3657  0F10                     	;# 
  3658  0F11                     	;# 
  3659  0F12                     	;# 
  3660  0F13                     	;# 
  3661  0F14                     	;# 
  3662  0F15                     	;# 
  3663  0F16                     	;# 
  3664  0F17                     	;# 
  3665  0F18                     	;# 
  3666  0F19                     	;# 
  3667  0F1A                     	;# 
  3668  0F1B                     	;# 
  3669  0F1C                     	;# 
  3670  0F1D                     	;# 
  3671  0F1E                     	;# 
  3672  0F1F                     	;# 
  3673  0F20                     	;# 
  3674  0F21                     	;# 
  3675  0F22                     	;# 
  3676  0F23                     	;# 
  3677  0F24                     	;# 
  3678  0F25                     	;# 
  3679  0F26                     	;# 
  3680  0F27                     	;# 
  3681  0F38                     	;# 
  3682  0F39                     	;# 
  3683  0F3A                     	;# 
  3684  0F3B                     	;# 
  3685  0F3C                     	;# 
  3686  0F3D                     	;# 
  3687  0F3E                     	;# 
  3688  0F3F                     	;# 
  3689  0F40                     	;# 
  3690  0F41                     	;# 
  3691  0F43                     	;# 
  3692  0F44                     	;# 
  3693  0F45                     	;# 
  3694  0F46                     	;# 
  3695  0F47                     	;# 
  3696  0F48                     	;# 
  3697  0F49                     	;# 
  3698  0F4A                     	;# 
  3699  0F4B                     	;# 
  3700  0F4C                     	;# 
  3701  0F4E                     	;# 
  3702  0F4F                     	;# 
  3703  0F50                     	;# 
  3704  0F51                     	;# 
  3705  0F52                     	;# 
  3706  0F53                     	;# 
  3707  0F54                     	;# 
  3708  0F55                     	;# 
  3709  0F56                     	;# 
  3710  0F57                     	;# 
  3711  0F65                     	;# 
  3712  0F68                     	;# 
  3713  0F69                     	;# 
  3714  0F6A                     	;# 
  3715  0F6B                     	;# 
  3716  0FE4                     	;# 
  3717  0FE5                     	;# 
  3718  0FE6                     	;# 
  3719  0FE7                     	;# 
  3720  0FE8                     	;# 
  3721  0FE9                     	;# 
  3722  0FEA                     	;# 
  3723  0FEB                     	;# 
  3724  0FED                     	;# 
  3725  0FEE                     	;# 
  3726  0FEF                     	;# 
  3727  0000                     	;# 
  3728  0001                     	;# 
  3729  0002                     	;# 
  3730  0003                     	;# 
  3731  0004                     	;# 
  3732  0005                     	;# 
  3733  0006                     	;# 
  3734  0007                     	;# 
  3735  0008                     	;# 
  3736  0009                     	;# 
  3737  000A                     	;# 
  3738  000B                     	;# 
  3739  000C                     	;# 
  3740  000D                     	;# 
  3741  000E                     	;# 
  3742  0010                     	;# 
  3743  0011                     	;# 
  3744  0012                     	;# 
  3745  0013                     	;# 
  3746  0016                     	;# 
  3747  0017                     	;# 
  3748  0018                     	;# 
  3749  001C                     	;# 
  3750  001C                     	;# 
  3751  001D                     	;# 
  3752  001D                     	;# 
  3753  001E                     	;# 
  3754  001F                     	;# 
  3755  008C                     	;# 
  3756  008C                     	;# 
  3757  008D                     	;# 
  3758  008E                     	;# 
  3759  008E                     	;# 
  3760  008F                     	;# 
  3761  0090                     	;# 
  3762  0090                     	;# 
  3763  0091                     	;# 
  3764  0093                     	;# 
  3765  0094                     	;# 
  3766  0095                     	;# 
  3767  0096                     	;# 
  3768  0097                     	;# 
  3769  0098                     	;# 
  3770  0099                     	;# 
  3771  009A                     	;# 
  3772  009B                     	;# 
  3773  009C                     	;# 
  3774  009D                     	;# 
  3775  009E                     	;# 
  3776  010C                     	;# 
  3777  010D                     	;# 
  3778  010E                     	;# 
  3779  010E                     	;# 
  3780  010F                     	;# 
  3781  0110                     	;# 
  3782  0110                     	;# 
  3783  0111                     	;# 
  3784  0112                     	;# 
  3785  0112                     	;# 
  3786  0113                     	;# 
  3787  0114                     	;# 
  3788  0114                     	;# 
  3789  0115                     	;# 
  3790  0116                     	;# 
  3791  0116                     	;# 
  3792  0117                     	;# 
  3793  0119                     	;# 
  3794  0119                     	;# 
  3795  0119                     	;# 
  3796  011A                     	;# 
  3797  011A                     	;# 
  3798  011A                     	;# 
  3799  011B                     	;# 
  3800  011B                     	;# 
  3801  011B                     	;# 
  3802  011B                     	;# 
  3803  011B                     	;# 
  3804  011C                     	;# 
  3805  011C                     	;# 
  3806  011C                     	;# 
  3807  011D                     	;# 
  3808  011D                     	;# 
  3809  011D                     	;# 
  3810  011E                     	;# 
  3811  011E                     	;# 
  3812  011E                     	;# 
  3813  011F                     	;# 
  3814  011F                     	;# 
  3815  011F                     	;# 
  3816  011F                     	;# 
  3817  011F                     	;# 
  3818  018C                     	;# 
  3819  018D                     	;# 
  3820  018E                     	;# 
  3821  018F                     	;# 
  3822  0190                     	;# 
  3823  0191                     	;# 
  3824  0192                     	;# 
  3825  0196                     	;# 
  3826  0197                     	;# 
  3827  0198                     	;# 
  3828  0199                     	;# 
  3829  019A                     	;# 
  3830  019B                     	;# 
  3831  019C                     	;# 
  3832  020C                     	;# 
  3833  020C                     	;# 
  3834  020D                     	;# 
  3835  020E                     	;# 
  3836  020F                     	;# 
  3837  020F                     	;# 
  3838  0210                     	;# 
  3839  0210                     	;# 
  3840  0211                     	;# 
  3841  0211                     	;# 
  3842  0212                     	;# 
  3843  0212                     	;# 
  3844  0213                     	;# 
  3845  0214                     	;# 
  3846  0215                     	;# 
  3847  0215                     	;# 
  3848  0216                     	;# 
  3849  0216                     	;# 
  3850  0217                     	;# 
  3851  0217                     	;# 
  3852  0218                     	;# 
  3853  0218                     	;# 
  3854  0219                     	;# 
  3855  021A                     	;# 
  3856  021B                     	;# 
  3857  021B                     	;# 
  3858  021C                     	;# 
  3859  021C                     	;# 
  3860  021D                     	;# 
  3861  021D                     	;# 
  3862  021E                     	;# 
  3863  021F                     	;# 
  3864  028C                     	;# 
  3865  028C                     	;# 
  3866  028D                     	;# 
  3867  028D                     	;# 
  3868  028E                     	;# 
  3869  028F                     	;# 
  3870  0290                     	;# 
  3871  0290                     	;# 
  3872  0291                     	;# 
  3873  0292                     	;# 
  3874  0292                     	;# 
  3875  0293                     	;# 
  3876  0293                     	;# 
  3877  0294                     	;# 
  3878  0295                     	;# 
  3879  0296                     	;# 
  3880  0296                     	;# 
  3881  0297                     	;# 
  3882  0298                     	;# 
  3883  0298                     	;# 
  3884  0299                     	;# 
  3885  0299                     	;# 
  3886  029A                     	;# 
  3887  029B                     	;# 
  3888  029C                     	;# 
  3889  029C                     	;# 
  3890  029D                     	;# 
  3891  030C                     	;# 
  3892  030C                     	;# 
  3893  030D                     	;# 
  3894  030E                     	;# 
  3895  030F                     	;# 
  3896  0310                     	;# 
  3897  0310                     	;# 
  3898  0311                     	;# 
  3899  0312                     	;# 
  3900  0313                     	;# 
  3901  0314                     	;# 
  3902  0314                     	;# 
  3903  0315                     	;# 
  3904  0316                     	;# 
  3905  0317                     	;# 
  3906  0318                     	;# 
  3907  0318                     	;# 
  3908  0319                     	;# 
  3909  031A                     	;# 
  3910  031B                     	;# 
  3911  031C                     	;# 
  3912  031C                     	;# 
  3913  031D                     	;# 
  3914  031E                     	;# 
  3915  031F                     	;# 
  3916  038C                     	;# 
  3917  038D                     	;# 
  3918  038E                     	;# 
  3919  0390                     	;# 
  3920  0391                     	;# 
  3921  0392                     	;# 
  3922  040C                     	;# 
  3923  040D                     	;# 
  3924  040E                     	;# 
  3925  040F                     	;# 
  3926  0410                     	;# 
  3927  0411                     	;# 
  3928  0416                     	;# 
  3929  0416                     	;# 
  3930  0417                     	;# 
  3931  0418                     	;# 
  3932  0418                     	;# 
  3933  0419                     	;# 
  3934  041A                     	;# 
  3935  041A                     	;# 
  3936  041B                     	;# 
  3937  041C                     	;# 
  3938  041C                     	;# 
  3939  041D                     	;# 
  3940  041E                     	;# 
  3941  041F                     	;# 
  3942  048C                     	;# 
  3943  048C                     	;# 
  3944  048D                     	;# 
  3945  048E                     	;# 
  3946  048F                     	;# 
  3947  048F                     	;# 
  3948  0490                     	;# 
  3949  0491                     	;# 
  3950  0492                     	;# 
  3951  0492                     	;# 
  3952  0493                     	;# 
  3953  0494                     	;# 
  3954  0495                     	;# 
  3955  0495                     	;# 
  3956  0496                     	;# 
  3957  0497                     	;# 
  3958  0498                     	;# 
  3959  0499                     	;# 
  3960  049A                     	;# 
  3961  049B                     	;# 
  3962  049C                     	;# 
  3963  049D                     	;# 
  3964  050C                     	;# 
  3965  050C                     	;# 
  3966  050D                     	;# 
  3967  050E                     	;# 
  3968  050F                     	;# 
  3969  050F                     	;# 
  3970  0510                     	;# 
  3971  0511                     	;# 
  3972  0512                     	;# 
  3973  0512                     	;# 
  3974  0513                     	;# 
  3975  0514                     	;# 
  3976  0515                     	;# 
  3977  0515                     	;# 
  3978  0516                     	;# 
  3979  0517                     	;# 
  3980  0518                     	;# 
  3981  0519                     	;# 
  3982  051A                     	;# 
  3983  051B                     	;# 
  3984  051C                     	;# 
  3985  051D                     	;# 
  3986  058C                     	;# 
  3987  058C                     	;# 
  3988  058D                     	;# 
  3989  058E                     	;# 
  3990  058F                     	;# 
  3991  058F                     	;# 
  3992  0590                     	;# 
  3993  0591                     	;# 
  3994  0592                     	;# 
  3995  0593                     	;# 
  3996  060C                     	;# 
  3997  060D                     	;# 
  3998  060E                     	;# 
  3999  060F                     	;# 
  4000  0610                     	;# 
  4001  0611                     	;# 
  4002  0612                     	;# 
  4003  0613                     	;# 
  4004  0614                     	;# 
  4005  0616                     	;# 
  4006  0617                     	;# 
  4007  0618                     	;# 
  4008  0619                     	;# 
  4009  061A                     	;# 
  4010  061B                     	;# 
  4011  061C                     	;# 
  4012  061D                     	;# 
  4013  061E                     	;# 
  4014  068C                     	;# 
  4015  068D                     	;# 
  4016  068E                     	;# 
  4017  068F                     	;# 
  4018  0690                     	;# 
  4019  0691                     	;# 
  4020  0692                     	;# 
  4021  0693                     	;# 
  4022  0694                     	;# 
  4023  070C                     	;# 
  4024  070D                     	;# 
  4025  070E                     	;# 
  4026  070F                     	;# 
  4027  0710                     	;# 
  4028  0711                     	;# 
  4029  0712                     	;# 
  4030  0713                     	;# 
  4031  0714                     	;# 
  4032  0716                     	;# 
  4033  0717                     	;# 
  4034  0718                     	;# 
  4035  0719                     	;# 
  4036  071A                     	;# 
  4037  071B                     	;# 
  4038  071C                     	;# 
  4039  071D                     	;# 
  4040  071E                     	;# 
  4041  0796                     	;# 
  4042  0797                     	;# 
  4043  0798                     	;# 
  4044  0799                     	;# 
  4045  079A                     	;# 
  4046  079B                     	;# 
  4047  080C                     	;# 
  4048  080D                     	;# 
  4049  080E                     	;# 
  4050  080F                     	;# 
  4051  0810                     	;# 
  4052  0811                     	;# 
  4053  0812                     	;# 
  4054  0813                     	;# 
  4055  0814                     	;# 
  4056  081A                     	;# 
  4057  081B                     	;# 
  4058  081C                     	;# 
  4059  081D                     	;# 
  4060  081E                     	;# 
  4061  081F                     	;# 
  4062  088C                     	;# 
  4063  088D                     	;# 
  4064  088E                     	;# 
  4065  088F                     	;# 
  4066  0890                     	;# 
  4067  0891                     	;# 
  4068  0892                     	;# 
  4069  0893                     	;# 
  4070  0895                     	;# 
  4071  0896                     	;# 
  4072  0897                     	;# 
  4073  0898                     	;# 
  4074  0899                     	;# 
  4075  089A                     	;# 
  4076  089B                     	;# 
  4077  090C                     	;# 
  4078  090E                     	;# 
  4079  090F                     	;# 
  4080  091F                     	;# 
  4081  091F                     	;# 
  4082  098F                     	;# 
  4083  098F                     	;# 
  4084  0990                     	;# 
  4085  0991                     	;# 
  4086  0992                     	;# 
  4087  0993                     	;# 
  4088  0994                     	;# 
  4089  0995                     	;# 
  4090  0996                     	;# 
  4091  0997                     	;# 
  4092  0E0F                     	;# 
  4093  0E10                     	;# 
  4094  0E11                     	;# 
  4095  0E12                     	;# 
  4096  0E13                     	;# 
  4097  0E14                     	;# 
  4098  0E15                     	;# 
  4099  0E16                     	;# 
  4100  0E17                     	;# 
  4101  0E18                     	;# 
  4102  0E19                     	;# 
  4103  0E1A                     	;# 
  4104  0E1B                     	;# 
  4105  0E1C                     	;# 
  4106  0E1D                     	;# 
  4107  0E1E                     	;# 
  4108  0E1F                     	;# 
  4109  0E20                     	;# 
  4110  0E21                     	;# 
  4111  0E22                     	;# 
  4112  0E23                     	;# 
  4113  0E24                     	;# 
  4114  0E25                     	;# 
  4115  0E26                     	;# 
  4116  0E27                     	;# 
  4117  0E28                     	;# 
  4118  0E29                     	;# 
  4119  0E2A                     	;# 
  4120  0E2B                     	;# 
  4121  0E2C                     	;# 
  4122  0E2D                     	;# 
  4123  0E2E                     	;# 
  4124  0E2F                     	;# 
  4125  0E30                     	;# 
  4126  0E31                     	;# 
  4127  0E32                     	;# 
  4128  0E33                     	;# 
  4129  0E34                     	;# 
  4130  0E35                     	;# 
  4131  0E36                     	;# 
  4132  0E37                     	;# 
  4133  0E8F                     	;# 
  4134  0E90                     	;# 
  4135  0E91                     	;# 
  4136  0E92                     	;# 
  4137  0E93                     	;# 
  4138  0E94                     	;# 
  4139  0E95                     	;# 
  4140  0E96                     	;# 
  4141  0E97                     	;# 
  4142  0E9C                     	;# 
  4143  0E9D                     	;# 
  4144  0E9E                     	;# 
  4145  0EA1                     	;# 
  4146  0EA2                     	;# 
  4147  0EA3                     	;# 
  4148  0EA4                     	;# 
  4149  0EA5                     	;# 
  4150  0EA9                     	;# 
  4151  0EAA                     	;# 
  4152  0EAB                     	;# 
  4153  0EAC                     	;# 
  4154  0EB1                     	;# 
  4155  0EB2                     	;# 
  4156  0EB3                     	;# 
  4157  0EB8                     	;# 
  4158  0EB9                     	;# 
  4159  0EBA                     	;# 
  4160  0EBB                     	;# 
  4161  0EBC                     	;# 
  4162  0EBD                     	;# 
  4163  0EBE                     	;# 
  4164  0EC3                     	;# 
  4165  0EC5                     	;# 
  4166  0EC6                     	;# 
  4167  0EC7                     	;# 
  4168  0EC8                     	;# 
  4169  0EC9                     	;# 
  4170  0ECA                     	;# 
  4171  0ECB                     	;# 
  4172  0ECC                     	;# 
  4173  0F10                     	;# 
  4174  0F11                     	;# 
  4175  0F12                     	;# 
  4176  0F13                     	;# 
  4177  0F14                     	;# 
  4178  0F15                     	;# 
  4179  0F16                     	;# 
  4180  0F17                     	;# 
  4181  0F18                     	;# 
  4182  0F19                     	;# 
  4183  0F1A                     	;# 
  4184  0F1B                     	;# 
  4185  0F1C                     	;# 
  4186  0F1D                     	;# 
  4187  0F1E                     	;# 
  4188  0F1F                     	;# 
  4189  0F20                     	;# 
  4190  0F21                     	;# 
  4191  0F22                     	;# 
  4192  0F23                     	;# 
  4193  0F24                     	;# 
  4194  0F25                     	;# 
  4195  0F26                     	;# 
  4196  0F27                     	;# 
  4197  0F38                     	;# 
  4198  0F39                     	;# 
  4199  0F3A                     	;# 
  4200  0F3B                     	;# 
  4201  0F3C                     	;# 
  4202  0F3D                     	;# 
  4203  0F3E                     	;# 
  4204  0F3F                     	;# 
  4205  0F40                     	;# 
  4206  0F41                     	;# 
  4207  0F43                     	;# 
  4208  0F44                     	;# 
  4209  0F45                     	;# 
  4210  0F46                     	;# 
  4211  0F47                     	;# 
  4212  0F48                     	;# 
  4213  0F49                     	;# 
  4214  0F4A                     	;# 
  4215  0F4B                     	;# 
  4216  0F4C                     	;# 
  4217  0F4E                     	;# 
  4218  0F4F                     	;# 
  4219  0F50                     	;# 
  4220  0F51                     	;# 
  4221  0F52                     	;# 
  4222  0F53                     	;# 
  4223  0F54                     	;# 
  4224  0F55                     	;# 
  4225  0F56                     	;# 
  4226  0F57                     	;# 
  4227  0F65                     	;# 
  4228  0F68                     	;# 
  4229  0F69                     	;# 
  4230  0F6A                     	;# 
  4231  0F6B                     	;# 
  4232  0FE4                     	;# 
  4233  0FE5                     	;# 
  4234  0FE6                     	;# 
  4235  0FE7                     	;# 
  4236  0FE8                     	;# 
  4237  0FE9                     	;# 
  4238  0FEA                     	;# 
  4239  0FEB                     	;# 
  4240  0FED                     	;# 
  4241  0FEE                     	;# 
  4242  0FEF                     	;# 
  4243  0000                     	;# 
  4244  0001                     	;# 
  4245  0002                     	;# 
  4246  0003                     	;# 
  4247  0004                     	;# 
  4248  0005                     	;# 
  4249  0006                     	;# 
  4250  0007                     	;# 
  4251  0008                     	;# 
  4252  0009                     	;# 
  4253  000A                     	;# 
  4254  000B                     	;# 
  4255  000C                     	;# 
  4256  000D                     	;# 
  4257  000E                     	;# 
  4258  0010                     	;# 
  4259  0011                     	;# 
  4260  0012                     	;# 
  4261  0013                     	;# 
  4262  0016                     	;# 
  4263  0017                     	;# 
  4264  0018                     	;# 
  4265  001C                     	;# 
  4266  001C                     	;# 
  4267  001D                     	;# 
  4268  001D                     	;# 
  4269  001E                     	;# 
  4270  001F                     	;# 
  4271  008C                     	;# 
  4272  008C                     	;# 
  4273  008D                     	;# 
  4274  008E                     	;# 
  4275  008E                     	;# 
  4276  008F                     	;# 
  4277  0090                     	;# 
  4278  0090                     	;# 
  4279  0091                     	;# 
  4280  0093                     	;# 
  4281  0094                     	;# 
  4282  0095                     	;# 
  4283  0096                     	;# 
  4284  0097                     	;# 
  4285  0098                     	;# 
  4286  0099                     	;# 
  4287  009A                     	;# 
  4288  009B                     	;# 
  4289  009C                     	;# 
  4290  009D                     	;# 
  4291  009E                     	;# 
  4292  010C                     	;# 
  4293  010D                     	;# 
  4294  010E                     	;# 
  4295  010E                     	;# 
  4296  010F                     	;# 
  4297  0110                     	;# 
  4298  0110                     	;# 
  4299  0111                     	;# 
  4300  0112                     	;# 
  4301  0112                     	;# 
  4302  0113                     	;# 
  4303  0114                     	;# 
  4304  0114                     	;# 
  4305  0115                     	;# 
  4306  0116                     	;# 
  4307  0116                     	;# 
  4308  0117                     	;# 
  4309  0119                     	;# 
  4310  0119                     	;# 
  4311  0119                     	;# 
  4312  011A                     	;# 
  4313  011A                     	;# 
  4314  011A                     	;# 
  4315  011B                     	;# 
  4316  011B                     	;# 
  4317  011B                     	;# 
  4318  011B                     	;# 
  4319  011B                     	;# 
  4320  011C                     	;# 
  4321  011C                     	;# 
  4322  011C                     	;# 
  4323  011D                     	;# 
  4324  011D                     	;# 
  4325  011D                     	;# 
  4326  011E                     	;# 
  4327  011E                     	;# 
  4328  011E                     	;# 
  4329  011F                     	;# 
  4330  011F                     	;# 
  4331  011F                     	;# 
  4332  011F                     	;# 
  4333  011F                     	;# 
  4334  018C                     	;# 
  4335  018D                     	;# 
  4336  018E                     	;# 
  4337  018F                     	;# 
  4338  0190                     	;# 
  4339  0191                     	;# 
  4340  0192                     	;# 
  4341  0196                     	;# 
  4342  0197                     	;# 
  4343  0198                     	;# 
  4344  0199                     	;# 
  4345  019A                     	;# 
  4346  019B                     	;# 
  4347  019C                     	;# 
  4348  020C                     	;# 
  4349  020C                     	;# 
  4350  020D                     	;# 
  4351  020E                     	;# 
  4352  020F                     	;# 
  4353  020F                     	;# 
  4354  0210                     	;# 
  4355  0210                     	;# 
  4356  0211                     	;# 
  4357  0211                     	;# 
  4358  0212                     	;# 
  4359  0212                     	;# 
  4360  0213                     	;# 
  4361  0214                     	;# 
  4362  0215                     	;# 
  4363  0215                     	;# 
  4364  0216                     	;# 
  4365  0216                     	;# 
  4366  0217                     	;# 
  4367  0217                     	;# 
  4368  0218                     	;# 
  4369  0218                     	;# 
  4370  0219                     	;# 
  4371  021A                     	;# 
  4372  021B                     	;# 
  4373  021B                     	;# 
  4374  021C                     	;# 
  4375  021C                     	;# 
  4376  021D                     	;# 
  4377  021D                     	;# 
  4378  021E                     	;# 
  4379  021F                     	;# 
  4380  028C                     	;# 
  4381  028C                     	;# 
  4382  028D                     	;# 
  4383  028D                     	;# 
  4384  028E                     	;# 
  4385  028F                     	;# 
  4386  0290                     	;# 
  4387  0290                     	;# 
  4388  0291                     	;# 
  4389  0292                     	;# 
  4390  0292                     	;# 
  4391  0293                     	;# 
  4392  0293                     	;# 
  4393  0294                     	;# 
  4394  0295                     	;# 
  4395  0296                     	;# 
  4396  0296                     	;# 
  4397  0297                     	;# 
  4398  0298                     	;# 
  4399  0298                     	;# 
  4400  0299                     	;# 
  4401  0299                     	;# 
  4402  029A                     	;# 
  4403  029B                     	;# 
  4404  029C                     	;# 
  4405  029C                     	;# 
  4406  029D                     	;# 
  4407  030C                     	;# 
  4408  030C                     	;# 
  4409  030D                     	;# 
  4410  030E                     	;# 
  4411  030F                     	;# 
  4412  0310                     	;# 
  4413  0310                     	;# 
  4414  0311                     	;# 
  4415  0312                     	;# 
  4416  0313                     	;# 
  4417  0314                     	;# 
  4418  0314                     	;# 
  4419  0315                     	;# 
  4420  0316                     	;# 
  4421  0317                     	;# 
  4422  0318                     	;# 
  4423  0318                     	;# 
  4424  0319                     	;# 
  4425  031A                     	;# 
  4426  031B                     	;# 
  4427  031C                     	;# 
  4428  031C                     	;# 
  4429  031D                     	;# 
  4430  031E                     	;# 
  4431  031F                     	;# 
  4432  038C                     	;# 
  4433  038D                     	;# 
  4434  038E                     	;# 
  4435  0390                     	;# 
  4436  0391                     	;# 
  4437  0392                     	;# 
  4438  040C                     	;# 
  4439  040D                     	;# 
  4440  040E                     	;# 
  4441  040F                     	;# 
  4442  0410                     	;# 
  4443  0411                     	;# 
  4444  0416                     	;# 
  4445  0416                     	;# 
  4446  0417                     	;# 
  4447  0418                     	;# 
  4448  0418                     	;# 
  4449  0419                     	;# 
  4450  041A                     	;# 
  4451  041A                     	;# 
  4452  041B                     	;# 
  4453  041C                     	;# 
  4454  041C                     	;# 
  4455  041D                     	;# 
  4456  041E                     	;# 
  4457  041F                     	;# 
  4458  048C                     	;# 
  4459  048C                     	;# 
  4460  048D                     	;# 
  4461  048E                     	;# 
  4462  048F                     	;# 
  4463  048F                     	;# 
  4464  0490                     	;# 
  4465  0491                     	;# 
  4466  0492                     	;# 
  4467  0492                     	;# 
  4468  0493                     	;# 
  4469  0494                     	;# 
  4470  0495                     	;# 
  4471  0495                     	;# 
  4472  0496                     	;# 
  4473  0497                     	;# 
  4474  0498                     	;# 
  4475  0499                     	;# 
  4476  049A                     	;# 
  4477  049B                     	;# 
  4478  049C                     	;# 
  4479  049D                     	;# 
  4480  050C                     	;# 
  4481  050C                     	;# 
  4482  050D                     	;# 
  4483  050E                     	;# 
  4484  050F                     	;# 
  4485  050F                     	;# 
  4486  0510                     	;# 
  4487  0511                     	;# 
  4488  0512                     	;# 
  4489  0512                     	;# 
  4490  0513                     	;# 
  4491  0514                     	;# 
  4492  0515                     	;# 
  4493  0515                     	;# 
  4494  0516                     	;# 
  4495  0517                     	;# 
  4496  0518                     	;# 
  4497  0519                     	;# 
  4498  051A                     	;# 
  4499  051B                     	;# 
  4500  051C                     	;# 
  4501  051D                     	;# 
  4502  058C                     	;# 
  4503  058C                     	;# 
  4504  058D                     	;# 
  4505  058E                     	;# 
  4506  058F                     	;# 
  4507  058F                     	;# 
  4508  0590                     	;# 
  4509  0591                     	;# 
  4510  0592                     	;# 
  4511  0593                     	;# 
  4512  060C                     	;# 
  4513  060D                     	;# 
  4514  060E                     	;# 
  4515  060F                     	;# 
  4516  0610                     	;# 
  4517  0611                     	;# 
  4518  0612                     	;# 
  4519  0613                     	;# 
  4520  0614                     	;# 
  4521  0616                     	;# 
  4522  0617                     	;# 
  4523  0618                     	;# 
  4524  0619                     	;# 
  4525  061A                     	;# 
  4526  061B                     	;# 
  4527  061C                     	;# 
  4528  061D                     	;# 
  4529  061E                     	;# 
  4530  068C                     	;# 
  4531  068D                     	;# 
  4532  068E                     	;# 
  4533  068F                     	;# 
  4534  0690                     	;# 
  4535  0691                     	;# 
  4536  0692                     	;# 
  4537  0693                     	;# 
  4538  0694                     	;# 
  4539  070C                     	;# 
  4540  070D                     	;# 
  4541  070E                     	;# 
  4542  070F                     	;# 
  4543  0710                     	;# 
  4544  0711                     	;# 
  4545  0712                     	;# 
  4546  0713                     	;# 
  4547  0714                     	;# 
  4548  0716                     	;# 
  4549  0717                     	;# 
  4550  0718                     	;# 
  4551  0719                     	;# 
  4552  071A                     	;# 
  4553  071B                     	;# 
  4554  071C                     	;# 
  4555  071D                     	;# 
  4556  071E                     	;# 
  4557  0796                     	;# 
  4558  0797                     	;# 
  4559  0798                     	;# 
  4560  0799                     	;# 
  4561  079A                     	;# 
  4562  079B                     	;# 
  4563  080C                     	;# 
  4564  080D                     	;# 
  4565  080E                     	;# 
  4566  080F                     	;# 
  4567  0810                     	;# 
  4568  0811                     	;# 
  4569  0812                     	;# 
  4570  0813                     	;# 
  4571  0814                     	;# 
  4572  081A                     	;# 
  4573  081B                     	;# 
  4574  081C                     	;# 
  4575  081D                     	;# 
  4576  081E                     	;# 
  4577  081F                     	;# 
  4578  088C                     	;# 
  4579  088D                     	;# 
  4580  088E                     	;# 
  4581  088F                     	;# 
  4582  0890                     	;# 
  4583  0891                     	;# 
  4584  0892                     	;# 
  4585  0893                     	;# 
  4586  0895                     	;# 
  4587  0896                     	;# 
  4588  0897                     	;# 
  4589  0898                     	;# 
  4590  0899                     	;# 
  4591  089A                     	;# 
  4592  089B                     	;# 
  4593  090C                     	;# 
  4594  090E                     	;# 
  4595  090F                     	;# 
  4596  091F                     	;# 
  4597  091F                     	;# 
  4598  098F                     	;# 
  4599  098F                     	;# 
  4600  0990                     	;# 
  4601  0991                     	;# 
  4602  0992                     	;# 
  4603  0993                     	;# 
  4604  0994                     	;# 
  4605  0995                     	;# 
  4606  0996                     	;# 
  4607  0997                     	;# 
  4608  0E0F                     	;# 
  4609  0E10                     	;# 
  4610  0E11                     	;# 
  4611  0E12                     	;# 
  4612  0E13                     	;# 
  4613  0E14                     	;# 
  4614  0E15                     	;# 
  4615  0E16                     	;# 
  4616  0E17                     	;# 
  4617  0E18                     	;# 
  4618  0E19                     	;# 
  4619  0E1A                     	;# 
  4620  0E1B                     	;# 
  4621  0E1C                     	;# 
  4622  0E1D                     	;# 
  4623  0E1E                     	;# 
  4624  0E1F                     	;# 
  4625  0E20                     	;# 
  4626  0E21                     	;# 
  4627  0E22                     	;# 
  4628  0E23                     	;# 
  4629  0E24                     	;# 
  4630  0E25                     	;# 
  4631  0E26                     	;# 
  4632  0E27                     	;# 
  4633  0E28                     	;# 
  4634  0E29                     	;# 
  4635  0E2A                     	;# 
  4636  0E2B                     	;# 
  4637  0E2C                     	;# 
  4638  0E2D                     	;# 
  4639  0E2E                     	;# 
  4640  0E2F                     	;# 
  4641  0E30                     	;# 
  4642  0E31                     	;# 
  4643  0E32                     	;# 
  4644  0E33                     	;# 
  4645  0E34                     	;# 
  4646  0E35                     	;# 
  4647  0E36                     	;# 
  4648  0E37                     	;# 
  4649  0E8F                     	;# 
  4650  0E90                     	;# 
  4651  0E91                     	;# 
  4652  0E92                     	;# 
  4653  0E93                     	;# 
  4654  0E94                     	;# 
  4655  0E95                     	;# 
  4656  0E96                     	;# 
  4657  0E97                     	;# 
  4658  0E9C                     	;# 
  4659  0E9D                     	;# 
  4660  0E9E                     	;# 
  4661  0EA1                     	;# 
  4662  0EA2                     	;# 
  4663  0EA3                     	;# 
  4664  0EA4                     	;# 
  4665  0EA5                     	;# 
  4666  0EA9                     	;# 
  4667  0EAA                     	;# 
  4668  0EAB                     	;# 
  4669  0EAC                     	;# 
  4670  0EB1                     	;# 
  4671  0EB2                     	;# 
  4672  0EB3                     	;# 
  4673  0EB8                     	;# 
  4674  0EB9                     	;# 
  4675  0EBA                     	;# 
  4676  0EBB                     	;# 
  4677  0EBC                     	;# 
  4678  0EBD                     	;# 
  4679  0EBE                     	;# 
  4680  0EC3                     	;# 
  4681  0EC5                     	;# 
  4682  0EC6                     	;# 
  4683  0EC7                     	;# 
  4684  0EC8                     	;# 
  4685  0EC9                     	;# 
  4686  0ECA                     	;# 
  4687  0ECB                     	;# 
  4688  0ECC                     	;# 
  4689  0F10                     	;# 
  4690  0F11                     	;# 
  4691  0F12                     	;# 
  4692  0F13                     	;# 
  4693  0F14                     	;# 
  4694  0F15                     	;# 
  4695  0F16                     	;# 
  4696  0F17                     	;# 
  4697  0F18                     	;# 
  4698  0F19                     	;# 
  4699  0F1A                     	;# 
  4700  0F1B                     	;# 
  4701  0F1C                     	;# 
  4702  0F1D                     	;# 
  4703  0F1E                     	;# 
  4704  0F1F                     	;# 
  4705  0F20                     	;# 
  4706  0F21                     	;# 
  4707  0F22                     	;# 
  4708  0F23                     	;# 
  4709  0F24                     	;# 
  4710  0F25                     	;# 
  4711  0F26                     	;# 
  4712  0F27                     	;# 
  4713  0F38                     	;# 
  4714  0F39                     	;# 
  4715  0F3A                     	;# 
  4716  0F3B                     	;# 
  4717  0F3C                     	;# 
  4718  0F3D                     	;# 
  4719  0F3E                     	;# 
  4720  0F3F                     	;# 
  4721  0F40                     	;# 
  4722  0F41                     	;# 
  4723  0F43                     	;# 
  4724  0F44                     	;# 
  4725  0F45                     	;# 
  4726  0F46                     	;# 
  4727  0F47                     	;# 
  4728  0F48                     	;# 
  4729  0F49                     	;# 
  4730  0F4A                     	;# 
  4731  0F4B                     	;# 
  4732  0F4C                     	;# 
  4733  0F4E                     	;# 
  4734  0F4F                     	;# 
  4735  0F50                     	;# 
  4736  0F51                     	;# 
  4737  0F52                     	;# 
  4738  0F53                     	;# 
  4739  0F54                     	;# 
  4740  0F55                     	;# 
  4741  0F56                     	;# 
  4742  0F57                     	;# 
  4743  0F65                     	;# 
  4744  0F68                     	;# 
  4745  0F69                     	;# 
  4746  0F6A                     	;# 
  4747  0F6B                     	;# 
  4748  0FE4                     	;# 
  4749  0FE5                     	;# 
  4750  0FE6                     	;# 
  4751  0FE7                     	;# 
  4752  0FE8                     	;# 
  4753  0FE9                     	;# 
  4754  0FEA                     	;# 
  4755  0FEB                     	;# 
  4756  0FED                     	;# 
  4757  0FEE                     	;# 
  4758  0FEF                     	;_aPatchMemory
  4759                           
  4760                           	psect	idataBANK2
  4761  0A27                     __pidataBANK2:	
  4762                           
  4763                           ;initializer for _segdisp
  4764  0A27  3403               	retlw	3
  4765  0A28  3400               	retlw	0
  4766  0A29  349F               	retlw	159
  4767  0A2A  3400               	retlw	0
  4768  0A2B  3425               	retlw	37
  4769  0A2C  3400               	retlw	0
  4770  0A2D  340D               	retlw	13
  4771  0A2E  3400               	retlw	0
  4772  0A2F  3499               	retlw	153
  4773  0A30  3400               	retlw	0
  4774  0A31  3449               	retlw	73
  4775  0A32  3400               	retlw	0
  4776  0A33  3441               	retlw	65
  4777  0A34  3400               	retlw	0
  4778  0A35  341B               	retlw	27
  4779  0A36  3400               	retlw	0
  4780  0A37  3401               	retlw	1
  4781  0A38  3400               	retlw	0
  4782  0A39  3409               	retlw	9
  4783  0A3A  3400               	retlw	0
  4784                           
  4785                           	psect	stringtext1
  4786  1000                     __pstringtext1:	
  4787  1000                     _cPowerOfTwo:	
  4788  1000  3401               	retlw	1
  4789  1001  3400               	retlw	0
  4790  1002  3402               	retlw	2
  4791  1003  3400               	retlw	0
  4792  1004  3404               	retlw	4
  4793  1005  3400               	retlw	0
  4794  1006  3408               	retlw	8
  4795  1007  3400               	retlw	0
  4796  1008  3410               	retlw	16
  4797  1009  3400               	retlw	0
  4798  100A  3420               	retlw	32
  4799  100B  3400               	retlw	0
  4800  100C  3440               	retlw	64
  4801  100D  3400               	retlw	0
  4802  100E  3480               	retlw	128
  4803  100F  3400               	retlw	0
  4804  1010                     __end_of_cPowerOfTwo:	
  4805                           
  4806                           	psect	stringtext2
  4807  1010                     __pstringtext2:	
  4808  1010                     _maxBanks:	
  4809  1010  3401               	retlw	1
  4810  1011  3400               	retlw	0
  4811  1012                     __end_of_maxBanks:	
  4812                           
  4813                           	psect	stringtext3
  4814  1012                     __pstringtext3:	
  4815  1012                     _maxPatches:	
  4816  1012  3464               	retlw	100
  4817  1013  3400               	retlw	0
  4818  1014                     __end_of_maxPatches:	
  4819                           
  4820                           	psect	stringtext4
  4821  1014                     __pstringtext4:	
  4822  1014                     _MvcMaxValue:	
  4823  1014  34FF               	retlw	255
  4824  1015  3403               	retlw	3
  4825  1016                     __end_of_MvcMaxValue:	
  4826                           
  4827                           	psect	stringtext5
  4828  1016                     __pstringtext5:	
  4829  1016                     _MvcMinValue:	
  4830  1016  3400               	retlw	0
  4831  1017  3400               	retlw	0
  4832  1018                     __end_of_MvcMinValue:	
  4833                           
  4834                           	psect	stringtext6
  4835  1018                     __pstringtext6:	
  4836  1018                     _clockMicroTime:	
  4837  1018  34C8               	retlw	200
  4838  1019  3400               	retlw	0
  4839  101A                     __end_of_clockMicroTime:	
  4840                           
  4841                           	psect	stringtext7
  4842  101A                     __pstringtext7:	
  4843  101A                     _lineSettleMicroTime:	
  4844  101A  3490               	retlw	144
  4845  101B  3401               	retlw	1
  4846  101C                     __end_of_lineSettleMicroTime:	
  4847                           
  4848                           	psect	stringtext8
  4849  101C                     __pstringtext8:	
  4850  101C                     _toggleDly:	
  4851  101C  340A               	retlw	10
  4852  101D  3400               	retlw	0
  4853  101E                     __end_of_toggleDly:	
  4854                           
  4855                           	psect	stringtext9
  4856  101E                     __pstringtext9:	
  4857  101E                     _twoK:	
  4858  101E  3410               	retlw	16
  4859  101F  3427               	retlw	39
  4860  1020                     __end_of_twoK:	
  4861                           
  4862                           	psect	stringtext10
  4863  1020                     __pstringtext10:	
  4864  1020                     _speed:	
  4865  1020  3432               	retlw	50
  4866  1021  3400               	retlw	0
  4867  1022                     __end_of_speed:	
  4868                           
  4869                           	psect	stringtext11
  4870  1022                     __pstringtext11:	
  4871  1022                     _datapin:	
  4872  1022  3412               	retlw	18
  4873  1023  3400               	retlw	0
  4874  1024                     __end_of_datapin:	
  4875                           
  4876                           	psect	stringtext12
  4877  1024                     __pstringtext12:	
  4878  1024                     _clockpin:	
  4879  1024  3411               	retlw	17
  4880  1025  3400               	retlw	0
  4881  1026                     __end_of_clockpin:	
  4882                           
  4883                           	psect	stringtext13
  4884  1026                     __pstringtext13:	
  4885  1026                     _latchpin:	
  4886  1026  3410               	retlw	16
  4887  1027  3400               	retlw	0
  4888  1028                     __end_of_latchpin:	
  4889                           
  4890                           	psect	stringtext14
  4891  1028                     __pstringtext14:	
  4892  1028                     main@iResetValue:	
  4893  1028  3464               	retlw	100
  4894  1029  3400               	retlw	0
  4895  102A                     __end_ofmain@iResetValue:	
  4896                           
  4897                           	psect	stringtext15
  4898  102A                     __pstringtext15:	
  4899  102A                     _cMstrClkAdjust:	
  4900  102A  3420               	retlw	32
  4901  102B  3400               	retlw	0
  4902  102C                     __end_of_cMstrClkAdjust:	
  4903                           
  4904                           	psect	stringtext16
  4905  102C                     __pstringtext16:	
  4906  102C                     _i2c_addr_dualADSR1:	
  4907  102C  3469               	retlw	105
  4908  102D                     __end_of_i2c_addr_dualADSR1:	
  4909                           
  4910                           	psect	stringtext17
  4911  102D                     __pstringtext17:	
  4912  102D                     _i2c_addr_dualADSR0:	
  4913  102D  3468               	retlw	104
  4914  102E                     __end_of_i2c_addr_dualADSR0:	
  4915                           
  4916                           	psect	stringtext18
  4917  102E                     __pstringtext18:	
  4918  102E                     _cPointerByteWriteLED:	
  4919  102E  3410               	retlw	16
  4920  102F                     __end_of_cPointerByteWriteLED:	
  4921                           
  4922                           	psect	stringtext19
  4923  102F                     __pstringtext19:	
  4924  102F                     _cPointerByteReadFaders:	
  4925  102F  3420               	retlw	32
  4926  1030                     __end_of_cPointerByteReadFaders:	
  4927                           
  4928                           	psect	stringtext20
  4929  1030                     __pstringtext20:	
  4930  1030                     _cPointerByteWriteFaders:	
  4931  1030  3430               	retlw	48
  4932  1031                     __end_of_cPointerByteWriteFaders:	
  4933  0018                     _LATCbits	set	24
  4934  0013                     _TRISCbits	set	19
  4935  000D                     _PORTBbits	set	13
  4936  000E                     _PORTC	set	14
  4937  000D                     _PORTB	set	13
  4938  000B                     _INTCONbits	set	11
  4939  0013                     _TRISC	set	19
  4940  0012                     _TRISB	set	18
  4941  0011                     _TRISA	set	17
  4942  0018                     _LATC	set	24
  4943  0017                     _LATB	set	23
  4944  0016                     _LATA	set	22
  4945  005F                     _GIE	set	95
  4946  0094                     _ADCON1bits	set	148
  4947  008E                     _ADPREVL	set	142
  4948  008F                     _ADPREVH	set	143
  4949  0097                     _ADSTATbits	set	151
  4950  0090                     _ADACCL	set	144
  4951  0091                     _ADACCH	set	145
  4952  0095                     _ADCON2bits	set	149
  4953  0096                     _ADCON3bits	set	150
  4954  008C                     _ADRESL	set	140
  4955  008D                     _ADRESH	set	141
  4956  0093                     _ADCON0bits	set	147
  4957  0093                     _ADCON0	set	147
  4958  009E                     _ADPCH	set	158
  4959  009D                     _ADACQ	set	157
  4960  009C                     _ADPRE	set	156
  4961  009B                     _ADCAP	set	155
  4962  009A                     _ADREF	set	154
  4963  0098                     _ADCLK	set	152
  4964  0097                     _ADSTAT	set	151
  4965  0099                     _ADACT	set	153
  4966  0096                     _ADCON3	set	150
  4967  0095                     _ADCON2	set	149
  4968  0094                     _ADCON1	set	148
  4969  0116                     _ADERRL	set	278
  4970  0117                     _ADERRH	set	279
  4971  0114                     _ADFLTRL	set	276
  4972  0115                     _ADFLTRH	set	277
  4973  010C                     _ADCNT	set	268
  4974  0113                     _ADSTPTH	set	275
  4975  0112                     _ADSTPTL	set	274
  4976  0111                     _ADUTHH	set	273
  4977  0110                     _ADUTHL	set	272
  4978  010F                     _ADLTHH	set	271
  4979  010E                     _ADLTHL	set	270
  4980  010D                     _ADRPT	set	269
  4981  018C                     _SSP1BUF	set	396
  4982  0191                     _SSP1CON2bits	set	401
  4983  0190                     _SSP1CON1bits	set	400
  4984  018D                     _SSP1ADD	set	397
  4985  0192                     _SSP1CON3	set	402
  4986  0190                     _SSP1CON1	set	400
  4987  018F                     _SSP1STAT	set	399
  4988  0719                     _PIE3bits	set	1817
  4989  070F                     _PIR3bits	set	1807
  4990  0892                     _OSCTUNE	set	2194
  4991  0893                     _OSCFRQ	set	2195
  4992  0891                     _OSCEN	set	2193
  4993  088F                     _OSCCON3	set	2191
  4994  088D                     _OSCCON1	set	2189
  4995  0EC5                     _SSP1CLKPPSbits	set	3781
  4996  0EC6                     _SSP1DATPPSbits	set	3782
  4997  0E8F                     _PPSLOCKbits	set	3727
  4998  0E8F                     _PPSLOCK	set	3727
  4999  0F4E                     _ANSELCbits	set	3918
  5000  0F24                     _RC4PPS	set	3876
  5001  0F23                     _RC3PPS	set	3875
  5002  0F50                     _ODCONC	set	3920
  5003  0F45                     _ODCONB	set	3909
  5004  0F3A                     _ODCONA	set	3898
  5005  0F4F                     _WPUC	set	3919
  5006  0F39                     _WPUA	set	3897
  5007  0F44                     _WPUB	set	3908
  5008  0F65                     _WPUE	set	3941
  5009  0F38                     _ANSELA	set	3896
  5010  0F43                     _ANSELB	set	3907
  5011  0F4E                     _ANSELC	set	3918
  5012                           
  5013                           ; #config settings
  5014  0000                     
  5015                           	psect	cinit
  5016  0022                     start_initialization:	
  5017  0022                     __initialization:		;BIGRAM
  5018                           
  5019                           ; Initialize objects allocated to BANK2
  5020  0022  3027               	movlw	low __pidataBANK2
  5021  0023  0084               	movwf	4
  5022  0024  308A               	movlw	(high __pidataBANK2)| (0+128)
  5023  0025  0085               	movwf	5
  5024  0026  3020               	movlw	low __pdataBANK2
  5025  0027  0086               	movwf	6
  5026  0028  3001               	movlw	high __pdataBANK2
  5027  0029  0087               	movwf	7
  5028  002A  3000               	movlw	0
  5029  002B  00FF               	movwf	btemp+1
  5030  002C  3014               	movlw	20
  5031  002D  3189  21E8  3180   	fcall	init_ram
  5032                           
  5033                           ; Clear objects allocated to BIGRAM
  5034  0030  3070               	movlw	low (0+9072)
  5035  0031  0084               	movwf	4
  5036  0032  3023               	movlw	high (0+9072)
  5037  0033  0085               	movwf	5
  5038  0034  3080               	movlw	128
  5039  0035  00FE               	movwf	btemp
  5040  0036  3000               	movlw	0
  5041  0037  00FF               	movwf	btemp+1
  5042  0038  3189  21DC  3180   	fcall	clear_ram0
  5043                           
  5044                           ; Clear objects allocated to COMMON
  5045  003B  01F0               	clrf	__pbssCOMMON& (0+127)
  5046  003C  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5047  003D  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5048  003E  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5049  003F  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5050  0040  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5051  0041  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  5052                           
  5053                           ; Clear objects allocated to BANK0
  5054  0042  01E7               	clrf	__pbssBANK0& (0+127)
  5055  0043  01E8               	clrf	(__pbssBANK0+1)& (0+127)
  5056  0044  01E9               	clrf	(__pbssBANK0+2)& (0+127)
  5057  0045  01EA               	clrf	(__pbssBANK0+3)& (0+127)
  5058  0046  01EB               	clrf	(__pbssBANK0+4)& (0+127)
  5059  0047  01EC               	clrf	(__pbssBANK0+5)& (0+127)
  5060  0048  01ED               	clrf	(__pbssBANK0+6)& (0+127)
  5061  0049  01EE               	clrf	(__pbssBANK0+7)& (0+127)
  5062  004A  01EF               	clrf	(__pbssBANK0+8)& (0+127)
  5063                           
  5064                           ; Clear objects allocated to BANK1
  5065  004B  30A0               	movlw	low __pbssBANK1
  5066  004C  0084               	movwf	4
  5067  004D  3000               	movlw	high __pbssBANK1
  5068  004E  0085               	movwf	5
  5069  004F  3038               	movlw	56
  5070  0050  00FE               	movwf	btemp
  5071  0051  3000               	movlw	0
  5072  0052  00FF               	movwf	btemp+1
  5073  0053  3189  21DC  3180   	fcall	clear_ram0
  5074                           
  5075                           ; Clear objects allocated to BANK2
  5076  0056  3034               	movlw	low __pbssBANK2
  5077  0057  0084               	movwf	4
  5078  0058  3001               	movlw	high __pbssBANK2
  5079  0059  0085               	movwf	5
  5080  005A  3010               	movlw	16
  5081  005B  00FE               	movwf	btemp
  5082  005C  3000               	movlw	0
  5083  005D  00FF               	movwf	btemp+1
  5084  005E  3189  21DC         	fcall	clear_ram0
  5085  0060                     end_of_initialization:	
  5086                           ;End of C runtime variable initialization code
  5087                           
  5088  0060                     __end_of__initialization:	
  5089  0060  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5090  0061  0020               	movlb	0
  5091  0062  3180  2864         	ljmp	_main	;jump to C main() function
  5092                           
  5093                           	psect	bssCOMMON
  5094  0070                     __pbssCOMMON:	
  5095  0070                     I2C1_ISR@i2c_bytes_left:	
  5096  0070                     	ds	1
  5097  0071                     I2C1_ISR@pi2c_buf_ptr:	
  5098  0071                     	ds	1
  5099  0072                     _p_i2c1_current:	
  5100  0072                     	ds	1
  5101  0073                     _p_i2c1_trb_current:	
  5102  0073                     	ds	1
  5103  0074                     _i2c1_trb_count:	
  5104  0074                     	ds	1
  5105  0075                     I2C1_ISR@i2c_address:	
  5106  0075                     	ds	2
  5107                           
  5108                           	psect	bssBANK0
  5109  0067                     __pbssBANK0:	
  5110  0067                     _i2c1_object:	
  5111  0067                     	ds	5
  5112  006C                     _iLEDs0_MSB:	
  5113  006C                     	ds	1
  5114  006D                     _MY_CONSTS:	
  5115  006D                     	ds	1
  5116  006E                     I2C1_ISR@i2c_10bit_address_restart:	
  5117  006E                     	ds	1
  5118  006F                     _i2c1_state:	
  5119  006F                     	ds	1
  5120                           
  5121                           	psect	bssBANK1
  5122  00A0                     __pbssBANK1:	
  5123  00A0                     _prevPanelInChannels:	
  5124  00A0                     	ds	4
  5125  00A4                     _PanelInChannels:	
  5126  00A4                     	ds	4
  5127  00A8                     _faderActiveFlag:	
  5128  00A8                     	ds	4
  5129  00AC                     _d:	
  5130  00AC                     	ds	3
  5131  00AF                     _b:	
  5132  00AF                     	ds	3
  5133  00B2                     _wkFloat:	
  5134  00B2                     	ds	3
  5135  00B5                     _e:	
  5136  00B5                     	ds	2
  5137  00B7                     _c:	
  5138  00B7                     	ds	2
  5139  00B9                     _mvcPatchNumber:	
  5140  00B9                     	ds	2
  5141  00BB                     _wkByte:	
  5142  00BB                     	ds	1
  5143  00BC                     _wkMIDICC:	
  5144  00BC                     	ds	1
  5145  00BD                     _wkFaderValue:	
  5146  00BD                     	ds	1
  5147  00BE                     _iLEDs1_LSB:	
  5148  00BE                     	ds	1
  5149  00BF                     _iLEDs1_MSB:	
  5150  00BF                     	ds	1
  5151  00C0                     _iLEDs0_LSB:	
  5152  00C0                     	ds	1
  5153  00C1                     _iI2CFaderValue:	
  5154  00C1                     	ds	8
  5155  00C9                     _mvcChannels:	
  5156  00C9                     	ds	4
  5157  00CD                     I2C1_MasterRead@trBlock:	
  5158  00CD                     	ds	4
  5159  00D1                     I2C1_MasterWrite@trBlock:	
  5160  00D1                     	ds	4
  5161  00D5                     _i2c1_tr_queue:	
  5162  00D5                     	ds	3
  5163                           
  5164                           	psect	bssBANK2
  5165  0134                     __pbssBANK2:	
  5166  0134                     _dualADSRdata1:	
  5167  0134                     	ds	8
  5168  013C                     _dualADSRdata0:	
  5169  013C                     	ds	8
  5170                           
  5171                           	psect	dataBANK2
  5172  0120                     __pdataBANK2:	
  5173  0120                     _segdisp:	
  5174  0120                     	ds	20
  5175                           
  5176                           	psect	inittext
  5177  09E8                     init_ram:	
  5178  09E8  00FE               	movwf	126
  5179  09E9                     initloop:	
  5180  09E9  0012               	moviw fsr0++
  5181  09EA  001E               	movwi fsr1++
  5182  09EB  3001               	movlw	1
  5183  09EC  02FE               	subwf	126,f
  5184  09ED  3000               	movlw	0
  5185  09EE  3BFF               	subwfb	127,f
  5186  09EF  087F               	movf	127,w
  5187  09F0  047E               	iorwf	126,w
  5188  09F1  1903               	btfsc	3,2
  5189  09F2  3400               	retlw	0
  5190  09F3  29E9               	goto	initloop
  5191                           
  5192                           	psect	clrtext
  5193  09DC                     clear_ram0:	
  5194                           ;	Called with FSR0 containing the base address, and
  5195                           ;	btemp/btemp+1 has the size to clear
  5196                           
  5197  09DC  0064               	clrwdt	;clear the watchdog before getting into this loop
  5198  09DD                     clrloop0:	
  5199  09DD  0180               	clrf	0	;clear RAM location pointed to by FSR
  5200  09DE  3101               	addfsr 0,1
  5201  09DF  3001               	movlw	1
  5202  09E0  02FE               	subwf	126,f
  5203  09E1  3000               	movlw	0
  5204  09E2  3BFF               	subwfb	127,f
  5205  09E3  087F               	movf	127,w
  5206  09E4  047E               	iorwf	126,w
  5207  09E5  1903               	btfsc	3,2
  5208  09E6  3400               	retlw	0	;all done for this memory range, return
  5209  09E7  29DD               	goto	clrloop0	;have we reached the end yet?
  5210                           
  5211                           	psect	cstackBANK1
  5212  00D8                     __pcstackBANK1:	
  5213  00D8                     main@readStatus:	
  5214                           
  5215                           ; 1 bytes @ 0x0
  5216  00D8                     	ds	1
  5217  00D9                     main@iCounter:	
  5218                           
  5219                           ; 2 bytes @ 0x1
  5220  00D9                     	ds	2
  5221  00DB                     main@iChangeCount:	
  5222                           
  5223                           ; 1 bytes @ 0x3
  5224  00DB                     	ds	1
  5225  00DC                     main@prevFader8bitValue:	
  5226                           
  5227                           ; 1 bytes @ 0x4
  5228  00DC                     	ds	1
  5229  00DD                     main@iLoopCounter:	
  5230                           
  5231                           ; 2 bytes @ 0x5
  5232  00DD                     	ds	2
  5233  00DF                     main@POT0Value:	
  5234                           
  5235                           ; 1 bytes @ 0x7
  5236  00DF                     	ds	1
  5237  00E0                     main@POT1Value:	
  5238                           
  5239                           ; 1 bytes @ 0x8
  5240  00E0                     	ds	1
  5241  00E1                     main@LoadDebounceCount:	
  5242                           
  5243                           ; 2 bytes @ 0x9
  5244  00E1                     	ds	2
  5245  00E3                     main@SaveDebounceCount:	
  5246                           
  5247                           ; 2 bytes @ 0xB
  5248  00E3                     	ds	2
  5249  00E5                     main@fader8bitValue:	
  5250                           
  5251                           ; 1 bytes @ 0xD
  5252  00E5                     	ds	1
  5253  00E6                     main@fx:	
  5254                           
  5255                           ; 2 bytes @ 0xE
  5256  00E6                     	ds	2
  5257  00E8                     main@faderValue:	
  5258                           
  5259                           ; 2 bytes @ 0x10
  5260  00E8                     	ds	2
  5261  00EA                     main@fx_978:	
  5262                           
  5263                           ; 2 bytes @ 0x12
  5264  00EA                     	ds	2
  5265                           
  5266                           	psect	cstackCOMMON
  5267  0077                     __pcstackCOMMON:	
  5268  0077                     ?_OSCILLATOR_Initialize:	
  5269  0077                     ?_I2C1_Initialize:	
  5270                           ; 1 bytes @ 0x0
  5271                           
  5272  0077                     ?_ADCC_Initialize:	
  5273                           ; 1 bytes @ 0x0
  5274                           
  5275  0077                     ?_I2C1_Stop:	
  5276                           ; 1 bytes @ 0x0
  5277                           
  5278  0077                     ??_I2C1_Stop:	
  5279                           ; 1 bytes @ 0x0
  5280                           
  5281  0077                     ?_I2C1_FunctionComplete:	
  5282                           ; 1 bytes @ 0x0
  5283                           
  5284  0077                     ??_I2C1_FunctionComplete:	
  5285                           ; 1 bytes @ 0x0
  5286                           
  5287  0077                     ?_initDAC528:	
  5288                           ; 1 bytes @ 0x0
  5289                           
  5290  0077                     ?_LED7SegSetup:	
  5291                           ; 1 bytes @ 0x0
  5292                           
  5293  0077                     ?_PIN_MANAGER_Initialize:	
  5294                           ; 1 bytes @ 0x0
  5295                           
  5296  0077                     ?_SYSTEM_Initialize:	
  5297                           ; 1 bytes @ 0x0
  5298                           
  5299  0077                     ?_I2C1_ISR:	
  5300                           ; 1 bytes @ 0x0
  5301                           
  5302  0077                     ?_I2C1_BusCollisionISR:	
  5303                           ; 1 bytes @ 0x0
  5304                           
  5305  0077                     ??_I2C1_BusCollisionISR:	
  5306                           ; 1 bytes @ 0x0
  5307                           
  5308  0077                     ?_INTERRUPT_InterruptManager:	
  5309                           ; 1 bytes @ 0x0
  5310                           
  5311  0077                     ?_InitPanelInChannels:	
  5312                           ; 1 bytes @ 0x0
  5313                           
  5314  0077                     ?_InitmvcChannels:	
  5315                           ; 1 bytes @ 0x0
  5316                           
  5317  0077                     ?_main:	
  5318                           ; 1 bytes @ 0x0
  5319                           
  5320  0077                     ?_LED7SegPinWrite:	
  5321                           ; 1 bytes @ 0x0
  5322                           
  5323  0077                     ?_LED7SegPulseClock:	
  5324                           ; 1 bytes @ 0x0
  5325                           
  5326  0077                     ?_LED7SegShiftOutPulseClock:	
  5327                           ; 1 bytes @ 0x0
  5328                           
  5329                           
  5330                           ; 1 bytes @ 0x0
  5331  0077                     	ds	1
  5332  0078                     I2C1_Stop@completion_code:	
  5333                           
  5334                           ; 1 bytes @ 0x1
  5335  0078                     	ds	1
  5336  0079                     ??_I2C1_ISR:	
  5337                           
  5338                           ; 1 bytes @ 0x2
  5339  0079                     	ds	4
  5340  007D                     ??_INTERRUPT_InterruptManager:	
  5341                           
  5342                           ; 1 bytes @ 0x6
  5343  007D                     	ds	1
  5344                           
  5345                           	psect	cstackBANK0
  5346  0020                     __pcstackBANK0:	
  5347  0020                     ??_OSCILLATOR_Initialize:	
  5348  0020                     ??_I2C1_Initialize:	
  5349                           ; 1 bytes @ 0x0
  5350                           
  5351  0020                     ??_ADCC_Initialize:	
  5352                           ; 1 bytes @ 0x0
  5353                           
  5354  0020                     ?_I2C1_MasterWriteTRBBuild:	
  5355                           ; 1 bytes @ 0x0
  5356                           
  5357  0020                     ?_I2C1_MasterTRBInsert:	
  5358                           ; 1 bytes @ 0x0
  5359                           
  5360  0020                     ??_LED7SegSetup:	
  5361                           ; 1 bytes @ 0x0
  5362                           
  5363  0020                     ?_marshallPatchMemory:	
  5364                           ; 1 bytes @ 0x0
  5365                           
  5366  0020                     ?_updateModelFromPatchMemory:	
  5367                           ; 1 bytes @ 0x0
  5368                           
  5369  0020                     ??_PIN_MANAGER_Initialize:	
  5370                           ; 1 bytes @ 0x0
  5371                           
  5372  0020                     ??_InitPanelInChannels:	
  5373                           ; 1 bytes @ 0x0
  5374                           
  5375  0020                     ??_InitmvcChannels:	
  5376                           ; 1 bytes @ 0x0
  5377                           
  5378  0020                     ??_LED7SegPinWrite:	
  5379                           ; 1 bytes @ 0x0
  5380                           
  5381  0020                     ?_ADCC_GetSingleConversion:	
  5382                           ; 1 bytes @ 0x0
  5383                           
  5384  0020                     ?___wmul:	
  5385                           ; 2 bytes @ 0x0
  5386                           
  5387  0020                     ?___ftpack:	
  5388                           ; 2 bytes @ 0x0
  5389                           
  5390  0020                     PIN_MANAGER_Initialize@state:	
  5391                           ; 3 bytes @ 0x0
  5392                           
  5393  0020                     I2C1_MasterTRBInsert@ptrb_list:	
  5394                           ; 1 bytes @ 0x0
  5395                           
  5396  0020                     I2C1_MasterWriteTRBBuild@pdata:	
  5397                           ; 1 bytes @ 0x0
  5398                           
  5399  0020                     LED7SegPinWrite@val:	
  5400                           ; 1 bytes @ 0x0
  5401                           
  5402  0020                     marshallPatchMemory@dualADSRdata0:	
  5403                           ; 1 bytes @ 0x0
  5404                           
  5405  0020                     updateModelFromPatchMemory@dualADSRdata0:	
  5406                           ; 1 bytes @ 0x0
  5407                           
  5408  0020                     ___wmul@multiplier:	
  5409                           ; 1 bytes @ 0x0
  5410                           
  5411  0020                     ___ftpack@arg:	
  5412                           ; 2 bytes @ 0x0
  5413                           
  5414                           
  5415                           ; 3 bytes @ 0x0
  5416  0020                     	ds	1
  5417  0021                     ??_SYSTEM_Initialize:	
  5418  0021                     I2C1_MasterTRBInsert@pflag:	
  5419                           ; 1 bytes @ 0x1
  5420                           
  5421  0021                     I2C1_MasterWriteTRBBuild@length:	
  5422                           ; 1 bytes @ 0x1
  5423                           
  5424  0021                     marshallPatchMemory@dualADSRdata1:	
  5425                           ; 1 bytes @ 0x1
  5426                           
  5427  0021                     updateModelFromPatchMemory@dualADSRdata1:	
  5428                           ; 1 bytes @ 0x1
  5429                           
  5430  0021                     InitPanelInChannels@i:	
  5431                           ; 1 bytes @ 0x1
  5432                           
  5433  0021                     InitmvcChannels@i:	
  5434                           ; 2 bytes @ 0x1
  5435                           
  5436                           
  5437                           ; 2 bytes @ 0x1
  5438  0021                     	ds	1
  5439  0022                     ??_I2C1_MasterTRBInsert:	
  5440  0022                     ??_marshallPatchMemory:	
  5441                           ; 1 bytes @ 0x2
  5442                           
  5443  0022                     ??_updateModelFromPatchMemory:	
  5444                           ; 1 bytes @ 0x2
  5445                           
  5446  0022                     I2C1_MasterWriteTRBBuild@address:	
  5447                           ; 1 bytes @ 0x2
  5448                           
  5449  0022                     ___wmul@multiplicand:	
  5450                           ; 2 bytes @ 0x2
  5451                           
  5452                           
  5453                           ; 2 bytes @ 0x2
  5454  0022                     	ds	1
  5455  0023                     ??_ADCC_GetSingleConversion:	
  5456  0023                     ADCC_GetSingleConversion@channel:	
  5457                           ; 1 bytes @ 0x3
  5458                           
  5459  0023                     I2C1_MasterTRBInsert@count:	
  5460                           ; 1 bytes @ 0x3
  5461                           
  5462  0023                     ___ftpack@exp:	
  5463                           ; 1 bytes @ 0x3
  5464                           
  5465                           
  5466                           ; 1 bytes @ 0x3
  5467  0023                     	ds	1
  5468  0024                     ??_I2C1_MasterWriteTRBBuild:	
  5469  0024                     ??___wmul:	
  5470                           ; 1 bytes @ 0x4
  5471                           
  5472  0024                     ___ftpack@sign:	
  5473                           ; 1 bytes @ 0x4
  5474                           
  5475  0024                     ___wmul@product:	
  5476                           ; 1 bytes @ 0x4
  5477                           
  5478                           
  5479                           ; 2 bytes @ 0x4
  5480  0024                     	ds	1
  5481  0025                     ??___ftpack:	
  5482                           
  5483                           ; 1 bytes @ 0x5
  5484  0025                     	ds	1
  5485  0026                     ?_delay:	
  5486  0026                     I2C1_MasterWriteTRBBuild@ptrb:	
  5487                           ; 1 bytes @ 0x6
  5488                           
  5489  0026                     updateModelFromPatchMemory@mvcChannels:	
  5490                           ; 1 bytes @ 0x6
  5491                           
  5492  0026                     delay@delaytime:	
  5493                           ; 1 bytes @ 0x6
  5494                           
  5495                           
  5496                           ; 2 bytes @ 0x6
  5497  0026                     	ds	1
  5498  0027                     ?_I2C1_MasterWrite:	
  5499  0027                     I2C1_MasterWrite@length:	
  5500                           ; 1 bytes @ 0x7
  5501                           
  5502  0027                     updateModelFromPatchMemory@i_1229:	
  5503                           ; 1 bytes @ 0x7
  5504                           
  5505                           
  5506                           ; 2 bytes @ 0x7
  5507  0027                     	ds	1
  5508  0028                     ??_delay:	
  5509  0028                     ?___awtoft:	
  5510                           ; 1 bytes @ 0x8
  5511                           
  5512  0028                     marshallPatchMemory@mvcChannels:	
  5513                           ; 3 bytes @ 0x8
  5514                           
  5515  0028                     I2C1_MasterWrite@address:	
  5516                           ; 1 bytes @ 0x8
  5517                           
  5518  0028                     ___awtoft@c:	
  5519                           ; 2 bytes @ 0x8
  5520                           
  5521                           
  5522                           ; 2 bytes @ 0x8
  5523  0028                     	ds	1
  5524  0029                     marshallPatchMemory@i:	
  5525  0029                     updateModelFromPatchMemory@i_1230:	
  5526                           ; 2 bytes @ 0x9
  5527                           
  5528  0029                     delay@adjustedDelaytime:	
  5529                           ; 2 bytes @ 0x9
  5530                           
  5531                           
  5532                           ; 4 bytes @ 0x9
  5533  0029                     	ds	1
  5534  002A                     I2C1_MasterWrite@pflag:	
  5535                           
  5536                           ; 1 bytes @ 0xA
  5537  002A                     	ds	1
  5538  002B                     ??_I2C1_MasterWrite:	
  5539  002B                     ??___awtoft:	
  5540                           ; 1 bytes @ 0xB
  5541                           
  5542  002B                     marshallPatchMemory@i_1221:	
  5543                           ; 1 bytes @ 0xB
  5544                           
  5545  002B                     updateModelFromPatchMemory@iPatchMemoryNDX:	
  5546                           ; 2 bytes @ 0xB
  5547                           
  5548                           
  5549                           ; 2 bytes @ 0xB
  5550  002B                     	ds	2
  5551  002D                     I2C1_MasterWrite@pdata:	
  5552  002D                     ___awtoft@sign:	
  5553                           ; 1 bytes @ 0xD
  5554                           
  5555  002D                     marshallPatchMemory@i_1222:	
  5556                           ; 1 bytes @ 0xD
  5557                           
  5558  002D                     updateModelFromPatchMemory@i:	
  5559                           ; 2 bytes @ 0xD
  5560                           
  5561  002D                     delay@counter:	
  5562                           ; 2 bytes @ 0xD
  5563                           
  5564                           
  5565                           ; 4 bytes @ 0xD
  5566  002D                     	ds	1
  5567  002E                     ?_MYI2C_Write2LEDBytes:	
  5568  002E                     ?_MYI2C_Write16EEPROMBytes:	
  5569                           ; 1 bytes @ 0xE
  5570                           
  5571  002E                     ?___ftdiv:	
  5572                           ; 1 bytes @ 0xE
  5573                           
  5574  002E                     ?___ftmul:	
  5575                           ; 3 bytes @ 0xE
  5576                           
  5577  002E                     MYI2C_Write2LEDBytes@MSBWriteByte:	
  5578                           ; 3 bytes @ 0xE
  5579                           
  5580  002E                     MYI2C_Write16EEPROMBytes@writeAddress:	
  5581                           ; 1 bytes @ 0xE
  5582                           
  5583  002E                     ___ftdiv@f2:	
  5584                           ; 2 bytes @ 0xE
  5585                           
  5586  002E                     ___ftmul@f1:	
  5587                           ; 3 bytes @ 0xE
  5588                           
  5589                           
  5590                           ; 3 bytes @ 0xE
  5591  002E                     	ds	1
  5592  002F                     MYI2C_Write2LEDBytes@LSBWriteByte:	
  5593  002F                     marshallPatchMemory@iPatchMemoryNDX:	
  5594                           ; 1 bytes @ 0xF
  5595                           
  5596                           
  5597                           ; 2 bytes @ 0xF
  5598  002F                     	ds	1
  5599  0030                     ??_MYI2C_Write2LEDBytes:	
  5600  0030                     MYI2C_Write16EEPROMBytes@pData:	
  5601                           ; 1 bytes @ 0x10
  5602                           
  5603                           
  5604                           ; 2 bytes @ 0x10
  5605  0030                     	ds	1
  5606  0031                     ??_LED7SegPulseClock:	
  5607  0031                     ??_LED7SegShiftOutPulseClock:	
  5608                           ; 1 bytes @ 0x11
  5609                           
  5610  0031                     ___ftdiv@f1:	
  5611                           ; 1 bytes @ 0x11
  5612                           
  5613  0031                     ___ftmul@f2:	
  5614                           ; 3 bytes @ 0x11
  5615                           
  5616                           
  5617                           ; 3 bytes @ 0x11
  5618  0031                     	ds	1
  5619  0032                     ??_MYI2C_Write16EEPROMBytes:	
  5620  0032                     LED7SegShiftOutPulseClock@val:	
  5621                           ; 1 bytes @ 0x12
  5622                           
  5623                           
  5624                           ; 1 bytes @ 0x12
  5625  0032                     	ds	1
  5626  0033                     LED7SegShiftOutPulseClock@i:	
  5627                           
  5628                           ; 1 bytes @ 0x13
  5629  0033                     	ds	1
  5630  0034                     ?_LED7SegDisplayValueByDigit:	
  5631  0034                     ??___ftdiv:	
  5632                           ; 1 bytes @ 0x14
  5633                           
  5634  0034                     ??___ftmul:	
  5635                           ; 1 bytes @ 0x14
  5636                           
  5637  0034                     MYI2C_Write2LEDBytes@nCount:	
  5638                           ; 1 bytes @ 0x14
  5639                           
  5640  0034                     LED7SegDisplayValueByDigit@iTensDigit:	
  5641                           ; 2 bytes @ 0x14
  5642                           
  5643                           
  5644                           ; 2 bytes @ 0x14
  5645  0034                     	ds	2
  5646  0036                     MYI2C_Write2LEDBytes@slaveDeviceAddress:	
  5647  0036                     LED7SegDisplayValueByDigit@iUnitsDigit:	
  5648                           ; 1 bytes @ 0x16
  5649                           
  5650  0036                     MYI2C_Write16EEPROMBytes@writeBuffer:	
  5651                           ; 2 bytes @ 0x16
  5652                           
  5653                           
  5654                           ; 17 bytes @ 0x16
  5655  0036                     	ds	1
  5656  0037                     MYI2C_Write2LEDBytes@counter:	
  5657                           
  5658                           ; 2 bytes @ 0x17
  5659  0037                     	ds	1
  5660  0038                     ??_LED7SegDisplayValueByDigit:	
  5661  0038                     ___ftdiv@cntr:	
  5662                           ; 1 bytes @ 0x18
  5663                           
  5664  0038                     ___ftmul@exp:	
  5665                           ; 1 bytes @ 0x18
  5666                           
  5667  0038                     LED7SegDisplayValueByDigit@iTensCode:	
  5668                           ; 1 bytes @ 0x18
  5669                           
  5670                           
  5671                           ; 2 bytes @ 0x18
  5672  0038                     	ds	1
  5673  0039                     MYI2C_Write2LEDBytes@timeOut:	
  5674  0039                     ___ftdiv@f3:	
  5675                           ; 2 bytes @ 0x19
  5676                           
  5677  0039                     ___ftmul@f3_as_product:	
  5678                           ; 3 bytes @ 0x19
  5679                           
  5680                           
  5681                           ; 3 bytes @ 0x19
  5682  0039                     	ds	2
  5683  003B                     MYI2C_Write2LEDBytes@pointerByte:	
  5684                           
  5685                           ; 1 bytes @ 0x1B
  5686  003B                     	ds	1
  5687  003C                     ___ftdiv@exp:	
  5688  003C                     ___ftmul@cntr:	
  5689                           ; 1 bytes @ 0x1C
  5690                           
  5691  003C                     MYI2C_Write2LEDBytes@writeBuffer:	
  5692                           ; 1 bytes @ 0x1C
  5693                           
  5694                           
  5695                           ; 3 bytes @ 0x1C
  5696  003C                     	ds	1
  5697  003D                     ___ftdiv@sign:	
  5698  003D                     ___ftmul@sign:	
  5699                           ; 1 bytes @ 0x1D
  5700                           
  5701                           
  5702                           ; 1 bytes @ 0x1D
  5703  003D                     	ds	1
  5704  003E                     ?___fttol:	
  5705  003E                     ___fttol@f1:	
  5706                           ; 4 bytes @ 0x1E
  5707                           
  5708                           
  5709                           ; 3 bytes @ 0x1E
  5710  003E                     	ds	1
  5711  003F                     MYI2C_Write2LEDBytes@status:	
  5712                           
  5713                           ; 1 bytes @ 0x1F
  5714  003F                     	ds	1
  5715  0040                     ?_blinkyLoop:	
  5716  0040                     blinkyLoop@maxLoops:	
  5717                           ; 1 bytes @ 0x20
  5718                           
  5719                           
  5720                           ; 2 bytes @ 0x20
  5721  0040                     	ds	2
  5722  0042                     ??_blinkyLoop:	
  5723  0042                     ??___fttol:	
  5724                           ; 1 bytes @ 0x22
  5725                           
  5726                           
  5727                           ; 1 bytes @ 0x22
  5728  0042                     	ds	2
  5729  0044                     blinkyLoop@delayTime:	
  5730                           
  5731                           ; 2 bytes @ 0x24
  5732  0044                     	ds	2
  5733  0046                     ___fttol@sign1:	
  5734  0046                     blinkyLoop@loopCount:	
  5735                           ; 1 bytes @ 0x26
  5736                           
  5737                           
  5738                           ; 2 bytes @ 0x26
  5739  0046                     	ds	1
  5740  0047                     MYI2C_Write16EEPROMBytes@iPatchAddressLow:	
  5741  0047                     ___fttol@lval:	
  5742                           ; 1 bytes @ 0x27
  5743                           
  5744                           
  5745                           ; 4 bytes @ 0x27
  5746  0047                     	ds	1
  5747  0048                     MYI2C_Write16EEPROMBytes@nCount:	
  5748                           
  5749                           ; 2 bytes @ 0x28
  5750  0048                     	ds	2
  5751  004A                     MYI2C_Write16EEPROMBytes@timeOut:	
  5752                           
  5753                           ; 2 bytes @ 0x2A
  5754  004A                     	ds	1
  5755  004B                     ___fttol@exp1:	
  5756                           
  5757                           ; 1 bytes @ 0x2B
  5758  004B                     	ds	1
  5759  004C                     ?_putByte:	
  5760  004C                     MYI2C_Write16EEPROMBytes@pointerByte:	
  5761                           ; 1 bytes @ 0x2C
  5762                           
  5763  004C                     putByte@clockPin:	
  5764                           ; 1 bytes @ 0x2C
  5765                           
  5766                           
  5767                           ; 2 bytes @ 0x2C
  5768  004C                     	ds	1
  5769  004D                     MYI2C_Write16EEPROMBytes@slaveDeviceAddress:	
  5770                           
  5771                           ; 1 bytes @ 0x2D
  5772  004D                     	ds	1
  5773  004E                     ??_putByte:	
  5774  004E                     MYI2C_Write16EEPROMBytes@iPatchAddressHigh:	
  5775                           ; 1 bytes @ 0x2E
  5776                           
  5777                           
  5778                           ; 1 bytes @ 0x2E
  5779  004E                     	ds	1
  5780  004F                     MYI2C_Write16EEPROMBytes@counter:	
  5781                           
  5782                           ; 2 bytes @ 0x2F
  5783  004F                     	ds	2
  5784  0051                     MYI2C_Write16EEPROMBytes@i:	
  5785                           
  5786                           ; 2 bytes @ 0x31
  5787  0051                     	ds	1
  5788  0052                     putByte@data:	
  5789                           
  5790                           ; 1 bytes @ 0x32
  5791  0052                     	ds	1
  5792  0053                     putByte@mask:	
  5793  0053                     MYI2C_Write16EEPROMBytes@status:	
  5794                           ; 1 bytes @ 0x33
  5795                           
  5796                           
  5797                           ; 1 bytes @ 0x33
  5798  0053                     	ds	1
  5799  0054                     ?_savePatch:	
  5800  0054                     putByte@i:	
  5801                           ; 1 bytes @ 0x34
  5802                           
  5803  0054                     savePatch@PatchNumber:	
  5804                           ; 1 bytes @ 0x34
  5805                           
  5806                           
  5807                           ; 2 bytes @ 0x34
  5808  0054                     	ds	1
  5809  0055                     ??_initDAC528:	
  5810  0055                     ?_writeDAC528:	
  5811                           ; 1 bytes @ 0x35
  5812                           
  5813  0055                     writeDAC528@dacNumber:	
  5814                           ; 1 bytes @ 0x35
  5815                           
  5816                           
  5817                           ; 2 bytes @ 0x35
  5818  0055                     	ds	1
  5819  0056                     ??_savePatch:	
  5820                           
  5821                           ; 1 bytes @ 0x36
  5822  0056                     	ds	1
  5823  0057                     writeDAC528@dacData:	
  5824                           
  5825                           ; 1 bytes @ 0x37
  5826  0057                     	ds	1
  5827  0058                     ??_writeDAC528:	
  5828                           
  5829                           ; 1 bytes @ 0x38
  5830  0058                     	ds	1
  5831  0059                     savePatch@iPatchAddressHigh:	
  5832  0059                     writeDAC528@wkDacNumber:	
  5833                           ; 1 bytes @ 0x39
  5834                           
  5835                           
  5836                           ; 1 bytes @ 0x39
  5837  0059                     	ds	1
  5838  005A                     ?_loadPatch:	
  5839  005A                     savePatch@iPatchAddressLow:	
  5840                           ; 1 bytes @ 0x3A
  5841                           
  5842  005A                     loadPatch@PatchNumber:	
  5843                           ; 1 bytes @ 0x3A
  5844                           
  5845                           
  5846                           ; 2 bytes @ 0x3A
  5847  005A                     	ds	1
  5848  005B                     savePatch@pData:	
  5849                           
  5850                           ; 2 bytes @ 0x3B
  5851  005B                     	ds	1
  5852  005C                     ??_loadPatch:	
  5853                           
  5854                           ; 1 bytes @ 0x3C
  5855  005C                     	ds	1
  5856  005D                     savePatch@idx:	
  5857                           
  5858                           ; 2 bytes @ 0x3D
  5859  005D                     	ds	1
  5860  005E                     loadPatch@iPatchAddress:	
  5861                           
  5862                           ; 2 bytes @ 0x3E
  5863  005E                     	ds	1
  5864  005F                     savePatch@batchNum:	
  5865                           
  5866                           ; 2 bytes @ 0x3F
  5867  005F                     	ds	1
  5868  0060                     loadPatch@i:	
  5869                           
  5870                           ; 2 bytes @ 0x40
  5871  0060                     	ds	1
  5872  0061                     savePatch@iPatchAddress:	
  5873                           
  5874                           ; 2 bytes @ 0x41
  5875  0061                     	ds	2
  5876  0063                     ??_main:	
  5877                           
  5878                           ; 1 bytes @ 0x43
  5879  0063                     	ds	4
  5880                           
  5881                           	psect	maintext
  5882  0064                     __pmaintext:	
  5883 ;;
  5884 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  5885 ;;
  5886 ;; *************** function _main *****************
  5887 ;; Defined at:
  5888 ;;		line 250 in file "main.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;		None
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  fx              2   18[BANK1 ] int 
  5893 ;;  fx              2   14[BANK1 ] int 
  5894 ;;  dFader8bitVa    3    0        int 
  5895 ;;  faderValue      2   16[BANK1 ] int 
  5896 ;;  SaveDebounce    2   11[BANK1 ] int 
  5897 ;;  LoadDebounce    2    9[BANK1 ] int 
  5898 ;;  iLoopCounter    2    5[BANK1 ] unsigned int 
  5899 ;;  iCounter        2    1[BANK1 ] unsigned int 
  5900 ;;  iLSByte         2    0        unsigned int 
  5901 ;;  iMSByte         2    0        unsigned int 
  5902 ;;  fader8bitVal    1   13[BANK1 ] unsigned char 
  5903 ;;  POT1Value       1    8[BANK1 ] unsigned char 
  5904 ;;  POT0Value       1    7[BANK1 ] unsigned char 
  5905 ;;  prevFader8bi    1    4[BANK1 ] unsigned char 
  5906 ;;  iChangeCount    1    3[BANK1 ] unsigned char 
  5907 ;;  readStatus      1    0[BANK1 ] enum E14335
  5908 ;;  DACDataValue    1    0        unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : B1F/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;      Totals:         0       4      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;Total ram usage:       24 bytes
  5923 ;; Hardware stack levels required when called:    8
  5924 ;; This function calls:
  5925 ;;		_ADCC_GetSingleConversion
  5926 ;;		_InitPanelInChannels
  5927 ;;		_InitmvcChannels
  5928 ;;		_LED7SegDisplayValueByDigit
  5929 ;;		_LED7SegSetup
  5930 ;;		_SYSTEM_Initialize
  5931 ;;		___awtoft
  5932 ;;		___ftdiv
  5933 ;;		___fttol
  5934 ;;		___wmul
  5935 ;;		_blinkyLoop
  5936 ;;		_delay
  5937 ;;		_initDAC528
  5938 ;;		_loadPatch
  5939 ;;		_savePatch
  5940 ;;		_writeDAC528
  5941 ;; This function is called by:
  5942 ;;		Startup code after reset
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           
  5947                           ;psect for function _main
  5948  0064                     _main:	
  5949                           
  5950                           ;main.c: 252: uint16_t iCounter=0;
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5954  0064  0021               	movlb	1	; select bank1
  5955  0065  01D9               	clrf	main@iCounter^(0+128)
  5956  0066  01DA               	clrf	(main@iCounter+1)^(0+128)
  5957                           
  5958                           ;main.c: 253: uint16_t iMSByte;
  5959                           ;main.c: 254: uint16_t iLSByte;
  5960                           ;main.c: 255: const uint16_t iResetValue=100;
  5961                           ;main.c: 256: uint16_t iLoopCounter=0;
  5962  0067  01DD               	clrf	main@iLoopCounter^(0+128)
  5963  0068  01DE               	clrf	(main@iLoopCounter+1)^(0+128)
  5964                           
  5965                           ;main.c: 257: uint8_t iChangeCount=0;
  5966  0069  01DB               	clrf	main@iChangeCount^(0+128)
  5967                           
  5968                           ;main.c: 258: int faderValue;
  5969                           ;main.c: 259: uint8_t fader8bitValue;
  5970                           ;main.c: 260: uint8_t prevFader8bitValue;
  5971                           ;main.c: 261: uint8_t POT0Value;
  5972                           ;main.c: 262: uint8_t POT1Value;
  5973                           ;main.c: 263: uint8_t DACDataValue;
  5974                           ;main.c: 264: double dFader8bitValue;
  5975                           ;main.c: 265: int LoadDebounceCount=0;
  5976  006A  01E1               	clrf	main@LoadDebounceCount^(0+128)
  5977  006B  01E2               	clrf	(main@LoadDebounceCount+1)^(0+128)
  5978                           
  5979                           ;main.c: 266: int SaveDebounceCount=0;
  5980  006C  01E3               	clrf	main@SaveDebounceCount^(0+128)
  5981  006D  01E4               	clrf	(main@SaveDebounceCount+1)^(0+128)
  5982                           
  5983                           ;main.c: 268: I2C1_MESSAGE_STATUS readStatus=0;
  5984  006E  01D8               	clrf	main@readStatus^(0+128)
  5985                           
  5986                           ;main.c: 271: SYSTEM_Initialize();
  5987  006F  3189  21D0  3180   	fcall	_SYSTEM_Initialize
  5988                           
  5989                           ;main.c: 272: initDAC528();
  5990  0072  318A  223B  3180   	fcall	_initDAC528
  5991                           
  5992                           ;main.c: 273: LED7SegSetup();
  5993  0075  3189  21F4  3180   	fcall	_LED7SegSetup
  5994                           
  5995                           ;main.c: 275: InitPanelInChannels();
  5996  0078  318A  22EC  3180   	fcall	_InitPanelInChannels
  5997                           
  5998                           ;main.c: 276: InitmvcChannels();
  5999  007B  318A  2280  3180   	fcall	_InitmvcChannels
  6000                           
  6001                           ;main.c: 281: (INTCONbits.GIE = 1);
  6002  007E  178B               	bsf	11,7	;volatile
  6003                           
  6004                           ;main.c: 284: (INTCONbits.PEIE = 1);
  6005  007F  170B               	bsf	11,6	;volatile
  6006                           
  6007                           ;main.c: 295: for(int fx=0;fx<4;fx++){
  6008  0080  0021               	movlb	1	; select bank1
  6009  0081  01E6               	clrf	main@fx^(0+128)
  6010  0082  01E7               	clrf	(main@fx+1)^(0+128)
  6011  0083  0867               	movf	(main@fx+1)^(0+128),w
  6012  0084  3A80               	xorlw	128
  6013  0085  0020               	movlb	0	; select bank0
  6014  0086  00E3               	movwf	??_main
  6015  0087  3080               	movlw	128
  6016  0088  0263               	subwf	??_main,w
  6017  0089  1D03               	skipz
  6018  008A  288E               	goto	u4165
  6019  008B  3004               	movlw	4
  6020  008C  0021               	movlb	1	; select bank1
  6021  008D  0266               	subwf	main@fx^(0+128),w
  6022  008E                     u4165:	
  6023  008E  1803               	btfsc	3,0
  6024  008F  28D9               	goto	l4432
  6025  0090                     l4422:	
  6026                           
  6027                           ;main.c: 296: faderValue=ADCC_GetSingleConversion(fx);
  6028  0090  0021               	movlb	1	; select bank1
  6029  0091  0866               	movf	main@fx^(0+128),w
  6030  0092  318A  2213  3180   	fcall	_ADCC_GetSingleConversion
  6031  0095  0020               	movlb	0	; select bank0
  6032  0096  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6033  0097  0021               	movlb	1	; select bank1
  6034  0098  00E9               	movwf	(main@faderValue+1)^(0+128)
  6035  0099  0020               	movlb	0	; select bank0
  6036  009A  0820               	movf	?_ADCC_GetSingleConversion,w
  6037  009B  0021               	movlb	1	; select bank1
  6038  009C  00E8               	movwf	main@faderValue^(0+128)
  6039                           
  6040                           ;main.c: 297: PanelInChannels[fx]=255-(faderValue>>2);
  6041  009D  0869               	movf	(main@faderValue+1)^(0+128),w
  6042  009E  0020               	movlb	0	; select bank0
  6043  009F  00E4               	movwf	??_main+1
  6044  00A0  0021               	movlb	1	; select bank1
  6045  00A1  0868               	movf	main@faderValue^(0+128),w
  6046  00A2  0020               	movlb	0	; select bank0
  6047  00A3  00E3               	movwf	??_main
  6048  00A4  0D64               	rlf	??_main+1,w
  6049  00A5  0CE4               	rrf	??_main+1,f
  6050  00A6  0CE3               	rrf	??_main,f
  6051  00A7  0D64               	rlf	??_main+1,w
  6052  00A8  0CE4               	rrf	??_main+1,f
  6053  00A9  0CE3               	rrf	??_main,f
  6054  00AA  0863               	movf	??_main,w
  6055  00AB  3AFF               	xorlw	255
  6056  00AC  3E01               	addlw	1
  6057  00AD  3EFF               	addlw	255
  6058  00AE  00E5               	movwf	??_main+2
  6059  00AF  0021               	movlb	1	; select bank1
  6060  00B0  0866               	movf	main@fx^(0+128),w
  6061  00B1  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6062  00B2  0086               	movwf	6
  6063  00B3  0187               	clrf	7
  6064  00B4  0020               	movlb	0	; select bank0
  6065  00B5  0865               	movf	??_main+2,w
  6066  00B6  0081               	movwf	1
  6067                           
  6068                           ;main.c: 298: prevPanelInChannels[fx]= PanelInChannels[fx];
  6069  00B7  0021               	movlb	1	; select bank1
  6070  00B8  0866               	movf	main@fx^(0+128),w
  6071  00B9  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6072  00BA  0086               	movwf	6
  6073  00BB  0187               	clrf	7
  6074  00BC  0801               	movf	1,w
  6075  00BD  0020               	movlb	0	; select bank0
  6076  00BE  00E3               	movwf	??_main
  6077  00BF  0021               	movlb	1	; select bank1
  6078  00C0  0866               	movf	main@fx^(0+128),w
  6079  00C1  3EA0               	addlw	(low (_prevPanelInChannels| 0))& (0+255)
  6080  00C2  0086               	movwf	6
  6081  00C3  0187               	clrf	7
  6082  00C4  0020               	movlb	0	; select bank0
  6083  00C5  0863               	movf	??_main,w
  6084  00C6  0081               	movwf	1
  6085  00C7  3001               	movlw	1
  6086  00C8  0021               	movlb	1	; select bank1
  6087  00C9  07E6               	addwf	main@fx^(0+128),f
  6088  00CA  3000               	movlw	0
  6089  00CB  3DE7               	addwfc	(main@fx+1)^(0+128),f
  6090  00CC  0867               	movf	(main@fx+1)^(0+128),w
  6091  00CD  3A80               	xorlw	128
  6092  00CE  0020               	movlb	0	; select bank0
  6093  00CF  00E3               	movwf	??_main
  6094  00D0  3080               	movlw	128
  6095  00D1  0263               	subwf	??_main,w
  6096  00D2  1D03               	skipz
  6097  00D3  28D7               	goto	u4175
  6098  00D4  3004               	movlw	4
  6099  00D5  0021               	movlb	1	; select bank1
  6100  00D6  0266               	subwf	main@fx^(0+128),w
  6101  00D7                     u4175:	
  6102  00D7  1C03               	skipc
  6103  00D8  2890               	goto	l4422
  6104  00D9                     l4432:	
  6105                           
  6106                           ;main.c: 299: }
  6107                           ;main.c: 301: blinkyLoop(10);
  6108  00D9  300A               	movlw	10
  6109  00DA  0020               	movlb	0	; select bank0
  6110  00DB  00C0               	movwf	blinkyLoop@maxLoops
  6111  00DC  3000               	movlw	0
  6112  00DD  00C1               	movwf	blinkyLoop@maxLoops+1
  6113  00DE  318D  25BD  3180   	fcall	_blinkyLoop
  6114                           
  6115                           ;main.c: 306: PORTB |= 0x0F;
  6116  00E1  300F               	movlw	15
  6117  00E2  0020               	movlb	0	; select bank0
  6118  00E3  00E3               	movwf	??_main
  6119  00E4  0863               	movf	??_main,w
  6120  00E5  048D               	iorwf	13,f	;volatile
  6121                           
  6122                           ;main.c: 307: PORTC |= 0xE0;
  6123  00E6  30E0               	movlw	224
  6124  00E7  00E3               	movwf	??_main
  6125  00E8  0863               	movf	??_main,w
  6126  00E9  048E               	iorwf	14,f	;volatile
  6127                           
  6128                           ;main.c: 308: ODCONB &= 0xF0;
  6129  00EA  30F0               	movlw	240
  6130  00EB  00E3               	movwf	??_main
  6131  00EC  0863               	movf	??_main,w
  6132  00ED  003E               	movlb	30	; select bank30
  6133  00EE  05C5               	andwf	69,f	;volatile
  6134                           
  6135                           ;main.c: 309: ODCONC &= 0x1F;
  6136  00EF  301F               	movlw	31
  6137  00F0  0020               	movlb	0	; select bank0
  6138  00F1  00E3               	movwf	??_main
  6139  00F2  0863               	movf	??_main,w
  6140  00F3  003E               	movlb	30	; select bank30
  6141  00F4  05D0               	andwf	80,f	;volatile
  6142  00F5                     l4442:	
  6143                           ;main.c: 311: while (1) {
  6144                           
  6145                           
  6146                           ;main.c: 312: iLoopCounter++;
  6147  00F5  3001               	movlw	1
  6148  00F6  0021               	movlb	1	; select bank1
  6149  00F7  07DD               	addwf	main@iLoopCounter^(0+128),f
  6150  00F8  3000               	movlw	0
  6151  00F9  3DDE               	addwfc	(main@iLoopCounter+1)^(0+128),f
  6152                           
  6153                           ;main.c: 313: if (iResetValue<=iLoopCounter) iLoopCounter=0;
  6154  00FA  3028               	movlw	low (main@iResetValue| (0+32768))
  6155  00FB  0084               	movwf	4
  6156  00FC  3090               	movlw	high (main@iResetValue| (0+32768))
  6157  00FD  0085               	movwf	5
  6158  00FE  3F00               	moviw [0]fsr0
  6159  00FF  0020               	movlb	0	; select bank0
  6160  0100  00E3               	movwf	??_main
  6161  0101  3F01               	moviw [1]fsr0
  6162  0102  00E4               	movwf	??_main+1
  6163  0103  0864               	movf	??_main+1,w
  6164  0104  0021               	movlb	1	; select bank1
  6165  0105  025E               	subwf	(main@iLoopCounter+1)^(0+128),w
  6166  0106  1D03               	skipz
  6167  0107  290C               	goto	u4185
  6168  0108  0020               	movlb	0	; select bank0
  6169  0109  0863               	movf	??_main,w
  6170  010A  0021               	movlb	1	; select bank1
  6171  010B  025D               	subwf	main@iLoopCounter^(0+128),w
  6172  010C                     u4185:	
  6173  010C  1C03               	skipc
  6174  010D  2910               	goto	l523
  6175  010E  01DD               	clrf	main@iLoopCounter^(0+128)
  6176  010F  01DE               	clrf	(main@iLoopCounter+1)^(0+128)
  6177  0110                     l523:	
  6178                           
  6179                           ;main.c: 316: {
  6180                           ;main.c: 318: for(int fx=0;fx<cMixFaderCount;fx++){
  6181  0110  01EA               	clrf	main@fx_978^(0+128)
  6182  0111  01EB               	clrf	(main@fx_978+1)^(0+128)
  6183  0112  086B               	movf	(main@fx_978+1)^(0+128),w
  6184  0113  3A80               	xorlw	128
  6185  0114  0020               	movlb	0	; select bank0
  6186  0115  00E3               	movwf	??_main
  6187  0116  3080               	movlw	128
  6188  0117  0263               	subwf	??_main,w
  6189  0118  1D03               	skipz
  6190  0119  291D               	goto	u4195
  6191  011A  3004               	movlw	4
  6192  011B  0021               	movlb	1	; select bank1
  6193  011C  026A               	subwf	main@fx_978^(0+128),w
  6194  011D                     u4195:	
  6195  011D  1803               	btfsc	3,0
  6196  011E  29E6               	goto	l4478
  6197  011F                     l4452:	
  6198                           
  6199                           ;main.c: 319: faderValue=ADCC_GetSingleConversion(fx);
  6200  011F  0021               	movlb	1	; select bank1
  6201  0120  086A               	movf	main@fx_978^(0+128),w
  6202  0121  318A  2213  3180   	fcall	_ADCC_GetSingleConversion
  6203  0124  0020               	movlb	0	; select bank0
  6204  0125  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6205  0126  0021               	movlb	1	; select bank1
  6206  0127  00E9               	movwf	(main@faderValue+1)^(0+128)
  6207  0128  0020               	movlb	0	; select bank0
  6208  0129  0820               	movf	?_ADCC_GetSingleConversion,w
  6209  012A  0021               	movlb	1	; select bank1
  6210  012B  00E8               	movwf	main@faderValue^(0+128)
  6211                           
  6212                           ;main.c: 320: PanelInChannels[fx]=255-(faderValue>>2);
  6213  012C  0869               	movf	(main@faderValue+1)^(0+128),w
  6214  012D  0020               	movlb	0	; select bank0
  6215  012E  00E4               	movwf	??_main+1
  6216  012F  0021               	movlb	1	; select bank1
  6217  0130  0868               	movf	main@faderValue^(0+128),w
  6218  0131  0020               	movlb	0	; select bank0
  6219  0132  00E3               	movwf	??_main
  6220  0133  0D64               	rlf	??_main+1,w
  6221  0134  0CE4               	rrf	??_main+1,f
  6222  0135  0CE3               	rrf	??_main,f
  6223  0136  0D64               	rlf	??_main+1,w
  6224  0137  0CE4               	rrf	??_main+1,f
  6225  0138  0CE3               	rrf	??_main,f
  6226  0139  0863               	movf	??_main,w
  6227  013A  3AFF               	xorlw	255
  6228  013B  3E01               	addlw	1
  6229  013C  3EFF               	addlw	255
  6230  013D  00E5               	movwf	??_main+2
  6231  013E  0021               	movlb	1	; select bank1
  6232  013F  086A               	movf	main@fx_978^(0+128),w
  6233  0140  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6234  0141  0086               	movwf	6
  6235  0142  0187               	clrf	7
  6236  0143  0020               	movlb	0	; select bank0
  6237  0144  0865               	movf	??_main+2,w
  6238  0145  0081               	movwf	1
  6239                           
  6240                           ;main.c: 322: fader8bitValue=PanelInChannels[fx];
  6241  0146  0021               	movlb	1	; select bank1
  6242  0147  086A               	movf	main@fx_978^(0+128),w
  6243  0148  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6244  0149  0086               	movwf	6
  6245  014A  0187               	clrf	7
  6246  014B  0801               	movf	1,w
  6247  014C  0020               	movlb	0	; select bank0
  6248  014D  00E3               	movwf	??_main
  6249  014E  0863               	movf	??_main,w
  6250  014F  0021               	movlb	1	; select bank1
  6251  0150  00E5               	movwf	main@fader8bitValue^(0+128)
  6252                           
  6253                           ;main.c: 323: if( (PanelInChannels[fx]<(mvcChannels[fx]+4))
  6254                           ;main.c: 324: && (PanelInChannels[fx]>(mvcChannels[fx]-4)) ) {
  6255  0151  086A               	movf	main@fx_978^(0+128),w
  6256  0152  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6257  0153  0086               	movwf	6
  6258  0154  0187               	clrf	7
  6259  0155  0801               	movf	1,w
  6260  0156  3E04               	addlw	4
  6261  0157  0020               	movlb	0	; select bank0
  6262  0158  00E3               	movwf	??_main
  6263  0159  3000               	movlw	0
  6264  015A  1803               	skipnc
  6265  015B  3001               	movlw	1
  6266  015C  00E4               	movwf	??_main+1
  6267  015D  0021               	movlb	1	; select bank1
  6268  015E  086A               	movf	main@fx_978^(0+128),w
  6269  015F  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6270  0160  0086               	movwf	6
  6271  0161  0187               	clrf	7
  6272  0162  0020               	movlb	0	; select bank0
  6273  0163  0864               	movf	??_main+1,w
  6274  0164  3A80               	xorlw	128
  6275  0165  3C80               	sublw	128
  6276  0166  1D03               	skipz
  6277  0167  296A               	goto	u4205
  6278  0168  0863               	movf	??_main,w
  6279  0169  0201               	subwf	1,w
  6280  016A                     u4205:	
  6281  016A  1803               	skipnc
  6282  016B  2991               	goto	l526
  6283  016C  0021               	movlb	1	; select bank1
  6284  016D  086A               	movf	main@fx_978^(0+128),w
  6285  016E  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6286  016F  0086               	movwf	6
  6287  0170  0187               	clrf	7
  6288  0171  086A               	movf	main@fx_978^(0+128),w
  6289  0172  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6290  0173  0084               	movwf	4
  6291  0174  0185               	clrf	5
  6292  0175  0800               	movf	0,w
  6293  0176  3EFC               	addlw	252
  6294  0177  0020               	movlb	0	; select bank0
  6295  0178  00E3               	movwf	??_main
  6296  0179  30FF               	movlw	255
  6297  017A  1803               	skipnc
  6298  017B  3000               	movlw	0
  6299  017C  00E4               	movwf	??_main+1
  6300  017D  0864               	movf	??_main+1,w
  6301  017E  3A80               	xorlw	128
  6302  017F  00E5               	movwf	??_main+2
  6303  0180  3080               	movlw	128
  6304  0181  0265               	subwf	??_main+2,w
  6305  0182  1D03               	skipz
  6306  0183  2986               	goto	u4215
  6307  0184  0801               	movf	1,w
  6308  0185  0263               	subwf	??_main,w
  6309  0186                     u4215:	
  6310  0186  1803               	skipnc
  6311  0187  2991               	goto	l526
  6312                           
  6313                           ;main.c: 325: faderActiveFlag[fx]=1;
  6314  0188  0021               	movlb	1	; select bank1
  6315  0189  086A               	movf	main@fx_978^(0+128),w
  6316  018A  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  6317  018B  0086               	movwf	6
  6318  018C  0187               	clrf	7
  6319  018D  0181               	clrf	1
  6320  018E  0A81               	incf	1,f
  6321                           
  6322                           ;main.c: 326: LATB |= 0b00000010 ;
  6323  018F  0020               	movlb	0	; select bank0
  6324  0190  1497               	bsf	23,1	;volatile
  6325  0191                     l526:	
  6326                           
  6327                           ;main.c: 327: }
  6328                           ;main.c: 328: if(faderActiveFlag[fx]>0){
  6329  0191  0021               	movlb	1	; select bank1
  6330  0192  086A               	movf	main@fx_978^(0+128),w
  6331  0193  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  6332  0194  0086               	movwf	6
  6333  0195  0187               	clrf	7
  6334  0196  0801               	movf	1,w
  6335  0197  1903               	btfsc	3,2
  6336  0198  29BB               	goto	l4470
  6337                           
  6338                           ;main.c: 329: mvcChannels[fx]=PanelInChannels[fx];
  6339  0199  086A               	movf	main@fx_978^(0+128),w
  6340  019A  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6341  019B  0086               	movwf	6
  6342  019C  0187               	clrf	7
  6343  019D  0801               	movf	1,w
  6344  019E  0020               	movlb	0	; select bank0
  6345  019F  00E3               	movwf	??_main
  6346  01A0  0021               	movlb	1	; select bank1
  6347  01A1  086A               	movf	main@fx_978^(0+128),w
  6348  01A2  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6349  01A3  0086               	movwf	6
  6350  01A4  0187               	clrf	7
  6351  01A5  0020               	movlb	0	; select bank0
  6352  01A6  0863               	movf	??_main,w
  6353  01A7  0081               	movwf	1
  6354                           
  6355                           ;main.c: 330: writeDAC528(fx+4,fader8bitValue);
  6356  01A8  0021               	movlb	1	; select bank1
  6357  01A9  086A               	movf	main@fx_978^(0+128),w
  6358  01AA  3E04               	addlw	4
  6359  01AB  0020               	movlb	0	; select bank0
  6360  01AC  00D5               	movwf	writeDAC528@dacNumber
  6361  01AD  3000               	movlw	0
  6362  01AE  0021               	movlb	1	; select bank1
  6363  01AF  3D6B               	addwfc	(main@fx_978+1)^(0+128),w
  6364  01B0  0020               	movlb	0	; select bank0
  6365  01B1  00D6               	movwf	writeDAC528@dacNumber+1
  6366  01B2  0021               	movlb	1	; select bank1
  6367  01B3  0865               	movf	main@fader8bitValue^(0+128),w
  6368  01B4  0020               	movlb	0	; select bank0
  6369  01B5  00E3               	movwf	??_main
  6370  01B6  0863               	movf	??_main,w
  6371  01B7  00D7               	movwf	writeDAC528@dacData
  6372  01B8  318B  234C  3180   	fcall	_writeDAC528
  6373  01BB                     l4470:	
  6374                           
  6375                           ;main.c: 331: }
  6376                           ;main.c: 332: prevPanelInChannels[fx]=PanelInChannels[fx];
  6377  01BB  0021               	movlb	1	; select bank1
  6378  01BC  086A               	movf	main@fx_978^(0+128),w
  6379  01BD  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6380  01BE  0086               	movwf	6
  6381  01BF  0187               	clrf	7
  6382  01C0  0801               	movf	1,w
  6383  01C1  0020               	movlb	0	; select bank0
  6384  01C2  00E3               	movwf	??_main
  6385  01C3  0021               	movlb	1	; select bank1
  6386  01C4  086A               	movf	main@fx_978^(0+128),w
  6387  01C5  3EA0               	addlw	(low (_prevPanelInChannels| 0))& (0+255)
  6388  01C6  0086               	movwf	6
  6389  01C7  0187               	clrf	7
  6390  01C8  0020               	movlb	0	; select bank0
  6391  01C9  0863               	movf	??_main,w
  6392  01CA  0081               	movwf	1
  6393                           
  6394                           ;main.c: 333: _delay((unsigned long)((1)*(32000000/4000.0)));
  6395  01CB  300B               	movlw	11
  6396  01CC  0020               	movlb	0	; select bank0
  6397  01CD  00E3               	movwf	??_main
  6398  01CE  3062               	movlw	98
  6399  01CF                     u4407:	
  6400  01CF  0B89               	decfsz	9,f
  6401  01D0  29CF               	goto	u4407
  6402  01D1  0BE3               	decfsz	??_main,f
  6403  01D2  29CF               	goto	u4407
  6404  01D3  0000               	nop
  6405  01D4  3001               	movlw	1
  6406  01D5  0021               	movlb	1	; select bank1
  6407  01D6  07EA               	addwf	main@fx_978^(0+128),f
  6408  01D7  3000               	movlw	0
  6409  01D8  3DEB               	addwfc	(main@fx_978+1)^(0+128),f
  6410  01D9  086B               	movf	(main@fx_978+1)^(0+128),w
  6411  01DA  3A80               	xorlw	128
  6412  01DB  0020               	movlb	0	; select bank0
  6413  01DC  00E3               	movwf	??_main
  6414  01DD  3080               	movlw	128
  6415  01DE  0263               	subwf	??_main,w
  6416  01DF  1D03               	skipz
  6417  01E0  29E4               	goto	u4235
  6418  01E1  3004               	movlw	4
  6419  01E2  0021               	movlb	1	; select bank1
  6420  01E3  026A               	subwf	main@fx_978^(0+128),w
  6421  01E4                     u4235:	
  6422  01E4  1C03               	skipc
  6423  01E5  291F               	goto	l4452
  6424  01E6                     l4478:	
  6425                           
  6426                           ;main.c: 334: }
  6427                           ;main.c: 337: _delay((unsigned long)((1)*(32000000/4000.0)));
  6428  01E6  300B               	movlw	11
  6429  01E7  0020               	movlb	0	; select bank0
  6430  01E8  00E3               	movwf	??_main
  6431  01E9  3062               	movlw	98
  6432  01EA                     u4417:	
  6433  01EA  0B89               	decfsz	9,f
  6434  01EB  29EA               	goto	u4417
  6435  01EC  0BE3               	decfsz	??_main,f
  6436  01ED  29EA               	goto	u4417
  6437  01EE  0000               	nop
  6438                           
  6439                           ;main.c: 338: faderValue=ADCC_GetSingleConversion(POT0);
  6440  01EF  3004               	movlw	4
  6441  01F0  318A  2213  3180   	fcall	_ADCC_GetSingleConversion
  6442  01F3  0020               	movlb	0	; select bank0
  6443  01F4  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6444  01F5  0021               	movlb	1	; select bank1
  6445  01F6  00E9               	movwf	(main@faderValue+1)^(0+128)
  6446  01F7  0020               	movlb	0	; select bank0
  6447  01F8  0820               	movf	?_ADCC_GetSingleConversion,w
  6448  01F9  0021               	movlb	1	; select bank1
  6449  01FA  00E8               	movwf	main@faderValue^(0+128)
  6450                           
  6451                           ;main.c: 339: faderValue=1023-faderValue;
  6452  01FB  0968               	comf	main@faderValue^(0+128),w
  6453  01FC  0020               	movlb	0	; select bank0
  6454  01FD  00E3               	movwf	??_main
  6455  01FE  0021               	movlb	1	; select bank1
  6456  01FF  0969               	comf	(main@faderValue+1)^(0+128),w
  6457  0200  0020               	movlb	0	; select bank0
  6458  0201  00E4               	movwf	??_main+1
  6459  0202  0AE3               	incf	??_main,f
  6460  0203  1903               	skipnz
  6461  0204  0AE4               	incf	??_main+1,f
  6462  0205  0863               	movf	??_main,w
  6463  0206  3EFF               	addlw	255
  6464  0207  0021               	movlb	1	; select bank1
  6465  0208  00E8               	movwf	main@faderValue^(0+128)
  6466  0209  3003               	movlw	3
  6467  020A  0020               	movlb	0	; select bank0
  6468  020B  3D64               	addwfc	??_main+1,w
  6469  020C  0021               	movlb	1	; select bank1
  6470  020D  00E9               	movwf	(main@faderValue+1)^(0+128)
  6471                           
  6472                           ;main.c: 341: POT0Value=faderValue/102.3;
  6473  020E  0869               	movf	(main@faderValue+1)^(0+128),w
  6474  020F  0020               	movlb	0	; select bank0
  6475  0210  00A9               	movwf	___awtoft@c+1
  6476  0211  0021               	movlb	1	; select bank1
  6477  0212  0868               	movf	main@faderValue^(0+128),w
  6478  0213  0020               	movlb	0	; select bank0
  6479  0214  00A8               	movwf	___awtoft@c
  6480  0215  318B  232A  3180   	fcall	___awtoft
  6481  0218  0020               	movlb	0	; select bank0
  6482  0219  0828               	movf	?___awtoft,w
  6483  021A  00B1               	movwf	___ftdiv@f1
  6484  021B  0829               	movf	?___awtoft+1,w
  6485  021C  00B2               	movwf	___ftdiv@f1+1
  6486  021D  082A               	movf	?___awtoft+2,w
  6487  021E  00B3               	movwf	___ftdiv@f1+2
  6488  021F  309A               	movlw	154
  6489  0220  00AE               	movwf	___ftdiv@f2
  6490  0221  30CC               	movlw	204
  6491  0222  00AF               	movwf	___ftdiv@f2+1
  6492  0223  3042               	movlw	66
  6493  0224  00B0               	movwf	___ftdiv@f2+2
  6494  0225  3186  26EE  3180   	fcall	___ftdiv
  6495  0228  0020               	movlb	0	; select bank0
  6496  0229  082E               	movf	?___ftdiv,w
  6497  022A  00BE               	movwf	___fttol@f1
  6498  022B  082F               	movf	?___ftdiv+1,w
  6499  022C  00BF               	movwf	___fttol@f1+1
  6500  022D  0830               	movf	?___ftdiv+2,w
  6501  022E  00C0               	movwf	___fttol@f1+2
  6502  022F  318E  2640  3180   	fcall	___fttol
  6503  0232  0020               	movlb	0	; select bank0
  6504  0233  083E               	movf	?___fttol,w
  6505  0234  00E3               	movwf	??_main
  6506  0235  0863               	movf	??_main,w
  6507  0236  0021               	movlb	1	; select bank1
  6508  0237  00DF               	movwf	main@POT0Value^(0+128)
  6509                           
  6510                           ;main.c: 342: _delay((unsigned long)((1)*(32000000/4000.0)));
  6511  0238  300B               	movlw	11
  6512  0239  0020               	movlb	0	; select bank0
  6513  023A  00E3               	movwf	??_main
  6514  023B  3062               	movlw	98
  6515  023C                     u4427:	
  6516  023C  0B89               	decfsz	9,f
  6517  023D  2A3C               	goto	u4427
  6518  023E  0BE3               	decfsz	??_main,f
  6519  023F  2A3C               	goto	u4427
  6520  0240  0000               	nop
  6521                           
  6522                           ;main.c: 343: faderValue=ADCC_GetSingleConversion(POT1);
  6523  0241  3005               	movlw	5
  6524  0242  318A  2213  3180   	fcall	_ADCC_GetSingleConversion
  6525  0245  0020               	movlb	0	; select bank0
  6526  0246  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6527  0247  0021               	movlb	1	; select bank1
  6528  0248  00E9               	movwf	(main@faderValue+1)^(0+128)
  6529  0249  0020               	movlb	0	; select bank0
  6530  024A  0820               	movf	?_ADCC_GetSingleConversion,w
  6531  024B  0021               	movlb	1	; select bank1
  6532  024C  00E8               	movwf	main@faderValue^(0+128)
  6533                           
  6534                           ;main.c: 344: faderValue=1023-faderValue;
  6535  024D  0968               	comf	main@faderValue^(0+128),w
  6536  024E  0020               	movlb	0	; select bank0
  6537  024F  00E3               	movwf	??_main
  6538  0250  0021               	movlb	1	; select bank1
  6539  0251  0969               	comf	(main@faderValue+1)^(0+128),w
  6540  0252  0020               	movlb	0	; select bank0
  6541  0253  00E4               	movwf	??_main+1
  6542  0254  0AE3               	incf	??_main,f
  6543  0255  1903               	skipnz
  6544  0256  0AE4               	incf	??_main+1,f
  6545  0257  0863               	movf	??_main,w
  6546  0258  3EFF               	addlw	255
  6547  0259  0021               	movlb	1	; select bank1
  6548  025A  00E8               	movwf	main@faderValue^(0+128)
  6549  025B  3003               	movlw	3
  6550  025C  0020               	movlb	0	; select bank0
  6551  025D  3D64               	addwfc	??_main+1,w
  6552  025E  0021               	movlb	1	; select bank1
  6553  025F  00E9               	movwf	(main@faderValue+1)^(0+128)
  6554                           
  6555                           ;main.c: 345: POT1Value=faderValue/102.3;
  6556  0260  0869               	movf	(main@faderValue+1)^(0+128),w
  6557  0261  0020               	movlb	0	; select bank0
  6558  0262  00A9               	movwf	___awtoft@c+1
  6559  0263  0021               	movlb	1	; select bank1
  6560  0264  0868               	movf	main@faderValue^(0+128),w
  6561  0265  0020               	movlb	0	; select bank0
  6562  0266  00A8               	movwf	___awtoft@c
  6563  0267  318B  232A  3180   	fcall	___awtoft
  6564  026A  0020               	movlb	0	; select bank0
  6565  026B  0828               	movf	?___awtoft,w
  6566  026C  00B1               	movwf	___ftdiv@f1
  6567  026D  0829               	movf	?___awtoft+1,w
  6568  026E  00B2               	movwf	___ftdiv@f1+1
  6569  026F  082A               	movf	?___awtoft+2,w
  6570  0270  00B3               	movwf	___ftdiv@f1+2
  6571  0271  309A               	movlw	154
  6572  0272  00AE               	movwf	___ftdiv@f2
  6573  0273  30CC               	movlw	204
  6574  0274  00AF               	movwf	___ftdiv@f2+1
  6575  0275  3042               	movlw	66
  6576  0276  00B0               	movwf	___ftdiv@f2+2
  6577  0277  3186  26EE  3180   	fcall	___ftdiv
  6578  027A  0020               	movlb	0	; select bank0
  6579  027B  082E               	movf	?___ftdiv,w
  6580  027C  00BE               	movwf	___fttol@f1
  6581  027D  082F               	movf	?___ftdiv+1,w
  6582  027E  00BF               	movwf	___fttol@f1+1
  6583  027F  0830               	movf	?___ftdiv+2,w
  6584  0280  00C0               	movwf	___fttol@f1+2
  6585  0281  318E  2640  3180   	fcall	___fttol
  6586  0284  0020               	movlb	0	; select bank0
  6587  0285  083E               	movf	?___fttol,w
  6588  0286  00E3               	movwf	??_main
  6589  0287  0863               	movf	??_main,w
  6590  0288  0021               	movlb	1	; select bank1
  6591  0289  00E0               	movwf	main@POT1Value^(0+128)
  6592                           
  6593                           ;main.c: 346: }
  6594                           ;main.c: 409: if (prevFader8bitValue!=fader8bitValue) {
  6595  028A  085C               	movf	main@prevFader8bitValue^(0+128),w
  6596  028B  0665               	xorwf	main@fader8bitValue^(0+128),w
  6597  028C  1903               	skipnz
  6598  028D  2A94               	goto	l4494
  6599                           
  6600                           ;main.c: 410: iChangeCount++;
  6601  028E  3001               	movlw	1
  6602  028F  0020               	movlb	0	; select bank0
  6603  0290  00E3               	movwf	??_main
  6604  0291  0863               	movf	??_main,w
  6605  0292  0021               	movlb	1	; select bank1
  6606  0293  07DB               	addwf	main@iChangeCount^(0+128),f
  6607  0294                     l4494:	
  6608                           
  6609                           ;main.c: 412: }
  6610                           ;main.c: 413: prevFader8bitValue=fader8bitValue;
  6611  0294  0865               	movf	main@fader8bitValue^(0+128),w
  6612  0295  0020               	movlb	0	; select bank0
  6613  0296  00E3               	movwf	??_main
  6614  0297  0863               	movf	??_main,w
  6615  0298  0021               	movlb	1	; select bank1
  6616  0299  00DC               	movwf	main@prevFader8bitValue^(0+128)
  6617                           
  6618                           ;main.c: 416: iCounter++;
  6619  029A  3001               	movlw	1
  6620  029B  07D9               	addwf	main@iCounter^(0+128),f
  6621  029C  3000               	movlw	0
  6622  029D  3DDA               	addwfc	(main@iCounter+1)^(0+128),f
  6623                           
  6624                           ;main.c: 417: if (fader8bitValue<252)
  6625  029E  30FC               	movlw	252
  6626  029F  0265               	subwf	main@fader8bitValue^(0+128),w
  6627  02A0  1803               	skipnc
  6628  02A1  2AB4               	goto	l4502
  6629                           
  6630                           ;main.c: 418: delay(1*(255-fader8bitValue));
  6631  02A2  0865               	movf	main@fader8bitValue^(0+128),w
  6632  02A3  0020               	movlb	0	; select bank0
  6633  02A4  00E3               	movwf	??_main
  6634  02A5  01E4               	clrf	??_main+1
  6635  02A6  09E3               	comf	??_main,f
  6636  02A7  09E4               	comf	??_main+1,f
  6637  02A8  0AE3               	incf	??_main,f
  6638  02A9  1903               	skipnz
  6639  02AA  0AE4               	incf	??_main+1,f
  6640  02AB  0863               	movf	??_main,w
  6641  02AC  3EFF               	addlw	255
  6642  02AD  00A6               	movwf	delay@delaytime
  6643  02AE  3000               	movlw	0
  6644  02AF  3D64               	addwfc	??_main+1,w
  6645  02B0  00A7               	movwf	delay@delaytime+1
  6646  02B1  318C  2497  3180   	fcall	_delay
  6647  02B4                     l4502:	
  6648                           
  6649                           ;main.c: 424: mvcPatchNumber=(POT1Value*10)+POT0Value;
  6650  02B4  0021               	movlb	1	; select bank1
  6651  02B5  085F               	movf	main@POT0Value^(0+128),w
  6652  02B6  0020               	movlb	0	; select bank0
  6653  02B7  00E3               	movwf	??_main
  6654  02B8  01E4               	clrf	??_main+1
  6655  02B9  0021               	movlb	1	; select bank1
  6656  02BA  0860               	movf	main@POT1Value^(0+128),w
  6657  02BB  0020               	movlb	0	; select bank0
  6658  02BC  00E5               	movwf	??_main+2
  6659  02BD  01E6               	clrf	??_main+3
  6660  02BE  0865               	movf	??_main+2,w
  6661  02BF  00A0               	movwf	___wmul@multiplier
  6662  02C0  0866               	movf	??_main+3,w
  6663  02C1  00A1               	movwf	___wmul@multiplier+1
  6664  02C2  300A               	movlw	10
  6665  02C3  00A2               	movwf	___wmul@multiplicand
  6666  02C4  3000               	movlw	0
  6667  02C5  00A3               	movwf	___wmul@multiplicand+1
  6668  02C6  318A  22B4  3180   	fcall	___wmul
  6669  02C9  0020               	movlb	0	; select bank0
  6670  02CA  0863               	movf	??_main,w
  6671  02CB  0720               	addwf	?___wmul,w
  6672  02CC  0021               	movlb	1	; select bank1
  6673  02CD  00B9               	movwf	_mvcPatchNumber^(0+128)
  6674  02CE  0020               	movlb	0	; select bank0
  6675  02CF  0864               	movf	??_main+1,w
  6676  02D0  3D21               	addwfc	?___wmul+1,w
  6677  02D1  0021               	movlb	1	; select bank1
  6678  02D2  00BA               	movwf	(_mvcPatchNumber+1)^(0+128)
  6679                           
  6680                           ;main.c: 425: LED7SegDisplayValueByDigit(POT1Value,POT0Value);
  6681  02D3  0860               	movf	main@POT1Value^(0+128),w
  6682  02D4  0020               	movlb	0	; select bank0
  6683  02D5  00E3               	movwf	??_main
  6684  02D6  01E4               	clrf	??_main+1
  6685  02D7  0863               	movf	??_main,w
  6686  02D8  00B4               	movwf	LED7SegDisplayValueByDigit@iTensDigit
  6687  02D9  0864               	movf	??_main+1,w
  6688  02DA  00B5               	movwf	LED7SegDisplayValueByDigit@iTensDigit+1
  6689  02DB  0021               	movlb	1	; select bank1
  6690  02DC  085F               	movf	main@POT0Value^(0+128),w
  6691  02DD  0020               	movlb	0	; select bank0
  6692  02DE  00E5               	movwf	??_main+2
  6693  02DF  01E6               	clrf	??_main+3
  6694  02E0  0865               	movf	??_main+2,w
  6695  02E1  00B6               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit
  6696  02E2  0866               	movf	??_main+3,w
  6697  02E3  00B7               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit+1
  6698  02E4  318B  2399  3180   	fcall	_LED7SegDisplayValueByDigit
  6699                           
  6700                           ;main.c: 430: if (PORTBbits.RB4 == 0){
  6701  02E7  0020               	movlb	0	; select bank0
  6702  02E8  1A0D               	btfsc	13,4	;volatile
  6703  02E9  2B1F               	goto	l4518
  6704                           
  6705                           ;main.c: 432: LoadDebounceCount++;
  6706  02EA  3001               	movlw	1
  6707  02EB  0021               	movlb	1	; select bank1
  6708  02EC  07E1               	addwf	main@LoadDebounceCount^(0+128),f
  6709  02ED  3000               	movlw	0
  6710  02EE  3DE2               	addwfc	(main@LoadDebounceCount+1)^(0+128),f
  6711                           
  6712                           ;main.c: 433: if(5<LoadDebounceCount) {
  6713  02EF  0862               	movf	(main@LoadDebounceCount+1)^(0+128),w
  6714  02F0  3A80               	xorlw	128
  6715  02F1  0020               	movlb	0	; select bank0
  6716  02F2  00E3               	movwf	??_main
  6717  02F3  3080               	movlw	128
  6718  02F4  0263               	subwf	??_main,w
  6719  02F5  1D03               	skipz
  6720  02F6  2AFA               	goto	u4275
  6721  02F7  3006               	movlw	6
  6722  02F8  0021               	movlb	1	; select bank1
  6723  02F9  0261               	subwf	main@LoadDebounceCount^(0+128),w
  6724  02FA                     u4275:	
  6725  02FA  1C03               	skipc
  6726  02FB  2B32               	goto	l4524
  6727                           
  6728                           ;main.c: 434: LATB &= 0b10011110 ;
  6729  02FC  309E               	movlw	158
  6730  02FD  0020               	movlb	0	; select bank0
  6731  02FE  00E3               	movwf	??_main
  6732  02FF  0863               	movf	??_main,w
  6733  0300  0597               	andwf	23,f	;volatile
  6734                           
  6735                           ;main.c: 436: loadPatch(mvcPatchNumber);
  6736  0301  0021               	movlb	1	; select bank1
  6737  0302  083A               	movf	(_mvcPatchNumber+1)^(0+128),w
  6738  0303  0020               	movlb	0	; select bank0
  6739  0304  00DB               	movwf	loadPatch@PatchNumber+1
  6740  0305  0021               	movlb	1	; select bank1
  6741  0306  0839               	movf	_mvcPatchNumber^(0+128),w
  6742  0307  0020               	movlb	0	; select bank0
  6743  0308  00DA               	movwf	loadPatch@PatchNumber
  6744  0309  318C  2411  3180   	fcall	_loadPatch
  6745                           
  6746                           ;main.c: 438: LoadDebounceCount=1;
  6747  030C  3001               	movlw	1
  6748  030D  0021               	movlb	1	; select bank1
  6749  030E  00E1               	movwf	main@LoadDebounceCount^(0+128)
  6750  030F  3000               	movlw	0
  6751  0310  00E2               	movwf	(main@LoadDebounceCount^(0+128)+1)
  6752                           
  6753                           ;main.c: 439: _delay((unsigned long)((500)*(32000000/4000.0)));
  6754  0311  3015               	movlw	21
  6755  0312  0020               	movlb	0	; select bank0
  6756  0313  00E4               	movwf	??_main+1
  6757  0314  304B               	movlw	75
  6758  0315  00E3               	movwf	??_main
  6759  0316  30BE               	movlw	190
  6760  0317                     u4437:	
  6761  0317  0B89               	decfsz	9,f
  6762  0318  2B17               	goto	u4437
  6763  0319  0BE3               	decfsz	??_main,f
  6764  031A  2B17               	goto	u4437
  6765  031B  0BE4               	decfsz	??_main+1,f
  6766  031C  2B17               	goto	u4437
  6767  031D  0000               	nop
  6768                           
  6769                           ;main.c: 440: }
  6770                           ;main.c: 441: }else{
  6771  031E  2B32               	goto	l4524
  6772  031F                     l4518:	
  6773                           
  6774                           ;main.c: 442: if(0<LoadDebounceCount){
  6775  031F  0021               	movlb	1	; select bank1
  6776  0320  0862               	movf	(main@LoadDebounceCount+1)^(0+128),w
  6777  0321  3A80               	xorlw	128
  6778  0322  0020               	movlb	0	; select bank0
  6779  0323  00E3               	movwf	??_main
  6780  0324  3080               	movlw	128
  6781  0325  0263               	subwf	??_main,w
  6782  0326  1D03               	skipz
  6783  0327  2B2B               	goto	u4285
  6784  0328  3001               	movlw	1
  6785  0329  0021               	movlb	1	; select bank1
  6786  032A  0261               	subwf	main@LoadDebounceCount^(0+128),w
  6787  032B                     u4285:	
  6788  032B  1C03               	skipc
  6789  032C  2B32               	goto	l4524
  6790                           
  6791                           ;main.c: 443: LoadDebounceCount=0;
  6792  032D  0021               	movlb	1	; select bank1
  6793  032E  01E1               	clrf	main@LoadDebounceCount^(0+128)
  6794  032F  01E2               	clrf	(main@LoadDebounceCount+1)^(0+128)
  6795                           
  6796                           ;main.c: 444: LATB |= 0b00000001 ;
  6797  0330  0020               	movlb	0	; select bank0
  6798  0331  1417               	bsf	23,0	;volatile
  6799  0332                     l4524:	
  6800                           
  6801                           ;main.c: 445: }
  6802                           ;main.c: 446: }
  6803                           ;main.c: 447: if (PORTBbits.RB5 == 0){
  6804  0332  0020               	movlb	0	; select bank0
  6805  0333  1A8D               	btfsc	13,5	;volatile
  6806  0334  2B6A               	goto	l4536
  6807                           
  6808                           ;main.c: 449: SaveDebounceCount++;
  6809  0335  3001               	movlw	1
  6810  0336  0021               	movlb	1	; select bank1
  6811  0337  07E3               	addwf	main@SaveDebounceCount^(0+128),f
  6812  0338  3000               	movlw	0
  6813  0339  3DE4               	addwfc	(main@SaveDebounceCount+1)^(0+128),f
  6814                           
  6815                           ;main.c: 450: if(5<SaveDebounceCount) {
  6816  033A  0864               	movf	(main@SaveDebounceCount+1)^(0+128),w
  6817  033B  3A80               	xorlw	128
  6818  033C  0020               	movlb	0	; select bank0
  6819  033D  00E3               	movwf	??_main
  6820  033E  3080               	movlw	128
  6821  033F  0263               	subwf	??_main,w
  6822  0340  1D03               	skipz
  6823  0341  2B45               	goto	u4305
  6824  0342  3006               	movlw	6
  6825  0343  0021               	movlb	1	; select bank1
  6826  0344  0263               	subwf	main@SaveDebounceCount^(0+128),w
  6827  0345                     u4305:	
  6828  0345  1C03               	skipc
  6829  0346  28F5               	goto	l4442
  6830                           
  6831                           ;main.c: 451: LATB &= 0b10011101 ;
  6832  0347  309D               	movlw	157
  6833  0348  0020               	movlb	0	; select bank0
  6834  0349  00E3               	movwf	??_main
  6835  034A  0863               	movf	??_main,w
  6836  034B  0597               	andwf	23,f	;volatile
  6837                           
  6838                           ;main.c: 470: savePatch(mvcPatchNumber);
  6839  034C  0021               	movlb	1	; select bank1
  6840  034D  083A               	movf	(_mvcPatchNumber+1)^(0+128),w
  6841  034E  0020               	movlb	0	; select bank0
  6842  034F  00D5               	movwf	savePatch@PatchNumber+1
  6843  0350  0021               	movlb	1	; select bank1
  6844  0351  0839               	movf	_mvcPatchNumber^(0+128),w
  6845  0352  0020               	movlb	0	; select bank0
  6846  0353  00D4               	movwf	savePatch@PatchNumber
  6847  0354  318D  2544  3180   	fcall	_savePatch
  6848                           
  6849                           ;main.c: 475: SaveDebounceCount=1;
  6850  0357  3001               	movlw	1
  6851  0358  0021               	movlb	1	; select bank1
  6852  0359  00E3               	movwf	main@SaveDebounceCount^(0+128)
  6853  035A  3000               	movlw	0
  6854  035B  00E4               	movwf	(main@SaveDebounceCount^(0+128)+1)
  6855                           
  6856                           ;main.c: 476: _delay((unsigned long)((500)*(32000000/4000.0)));
  6857  035C  3015               	movlw	21
  6858  035D  0020               	movlb	0	; select bank0
  6859  035E  00E4               	movwf	??_main+1
  6860  035F  304B               	movlw	75
  6861  0360  00E3               	movwf	??_main
  6862  0361  30BE               	movlw	190
  6863  0362                     u4447:	
  6864  0362  0B89               	decfsz	9,f
  6865  0363  2B62               	goto	u4447
  6866  0364  0BE3               	decfsz	??_main,f
  6867  0365  2B62               	goto	u4447
  6868  0366  0BE4               	decfsz	??_main+1,f
  6869  0367  2B62               	goto	u4447
  6870  0368  0000               	nop
  6871                           
  6872                           ;main.c: 477: }
  6873                           ;main.c: 478: }else{
  6874  0369  28F5               	goto	l4442
  6875  036A                     l4536:	
  6876                           
  6877                           ;main.c: 479: if(0<SaveDebounceCount){
  6878  036A  0021               	movlb	1	; select bank1
  6879  036B  0864               	movf	(main@SaveDebounceCount+1)^(0+128),w
  6880  036C  3A80               	xorlw	128
  6881  036D  0020               	movlb	0	; select bank0
  6882  036E  00E3               	movwf	??_main
  6883  036F  3080               	movlw	128
  6884  0370  0263               	subwf	??_main,w
  6885  0371  1D03               	skipz
  6886  0372  2B76               	goto	u4315
  6887  0373  3001               	movlw	1
  6888  0374  0021               	movlb	1	; select bank1
  6889  0375  0263               	subwf	main@SaveDebounceCount^(0+128),w
  6890  0376                     u4315:	
  6891  0376  1C03               	skipc
  6892  0377  28F5               	goto	l4442
  6893                           
  6894                           ;main.c: 480: SaveDebounceCount=0;
  6895  0378  0021               	movlb	1	; select bank1
  6896  0379  01E3               	clrf	main@SaveDebounceCount^(0+128)
  6897  037A  01E4               	clrf	(main@SaveDebounceCount+1)^(0+128)
  6898                           
  6899                           ;main.c: 481: LATB |= 0b00000010;
  6900  037B  0020               	movlb	0	; select bank0
  6901  037C  1497               	bsf	23,1	;volatile
  6902  037D  28F5               	goto	l4442
  6903  037E                     __end_of_main:	
  6904                           
  6905                           	psect	text1
  6906  0D44                     __ptext1:	
  6907 ;; *************** function _savePatch *****************
  6908 ;; Defined at:
  6909 ;;		line 815 in file "main.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;  PatchNumber     2   52[BANK0 ] int 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  batchNum        2   63[BANK0 ] int 
  6914 ;;  iPatchAddres    2   65[BANK0 ] int 
  6915 ;;  idx             2   61[BANK0 ] int 
  6916 ;;  pData           2   59[BANK0 ] PTR unsigned char 
  6917 ;;		 -> aPatchMemory(128), 
  6918 ;;  iPatchAddres    1   58[BANK0 ] unsigned char 
  6919 ;;  iPatchAddres    1   57[BANK0 ] unsigned char 
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  1    wreg      void 
  6922 ;; Registers used:
  6923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6929 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;Total ram usage:       15 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    6
  6936 ;; This function calls:
  6937 ;;		_MYI2C_Write16EEPROMBytes
  6938 ;;		_marshallPatchMemory
  6939 ;; This function is called by:
  6940 ;;		_main
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           
  6945                           ;psect for function _savePatch
  6946  0D44                     _savePatch:	
  6947                           
  6948                           ;main.c: 816: int iPatchAddress=PatchNumber*cPatchSize;
  6949                           
  6950                           ;incstack = 0
  6951                           ; Regs used in _savePatch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6952  0D44  0020               	movlb	0	; select bank0
  6953  0D45  0855               	movf	savePatch@PatchNumber+1,w
  6954  0D46  00D7               	movwf	??_savePatch+1
  6955  0D47  0854               	movf	savePatch@PatchNumber,w
  6956  0D48  00D6               	movwf	??_savePatch
  6957  0D49  3007               	movlw	7
  6958  0D4A                     u3095:	
  6959  0D4A  35D6               	lslf	??_savePatch,f
  6960  0D4B  0DD7               	rlf	??_savePatch+1,f
  6961  0D4C  0B89               	decfsz	9,f
  6962  0D4D  2D4A               	goto	u3095
  6963  0D4E  0856               	movf	??_savePatch,w
  6964  0D4F  00E1               	movwf	savePatch@iPatchAddress
  6965  0D50  0857               	movf	??_savePatch+1,w
  6966  0D51  00E2               	movwf	savePatch@iPatchAddress+1
  6967                           
  6968                           ;main.c: 817: uint8_t iPatchAddressHigh=iPatchAddress>>8;
  6969  0D52  0862               	movf	savePatch@iPatchAddress+1,w
  6970  0D53  00D6               	movwf	??_savePatch
  6971  0D54  0856               	movf	??_savePatch,w
  6972  0D55  00D9               	movwf	savePatch@iPatchAddressHigh
  6973                           
  6974                           ;main.c: 818: uint8_t iPatchAddressLow=iPatchAddress&0xFF;
  6975  0D56  0861               	movf	savePatch@iPatchAddress,w
  6976  0D57  00D6               	movwf	??_savePatch
  6977  0D58  0856               	movf	??_savePatch,w
  6978  0D59  00DA               	movwf	savePatch@iPatchAddressLow
  6979                           
  6980                           ;main.c: 821: marshallPatchMemory(mvcChannels,dualADSRdata0,dualADSRdata1);
  6981  0D5A  303C               	movlw	(low (_dualADSRdata0| (0+256)))& (0+255)
  6982  0D5B  00D6               	movwf	??_savePatch
  6983  0D5C  0856               	movf	??_savePatch,w
  6984  0D5D  00A0               	movwf	marshallPatchMemory@dualADSRdata0
  6985  0D5E  3034               	movlw	(low (_dualADSRdata1| (0+256)))& (0+255)
  6986  0D5F  00D7               	movwf	??_savePatch+1
  6987  0D60  0857               	movf	??_savePatch+1,w
  6988  0D61  00A1               	movwf	marshallPatchMemory@dualADSRdata1
  6989  0D62  30C9               	movlw	(low (_mvcChannels| 0))& (0+255)
  6990  0D63  3184  24B9  318D   	fcall	_marshallPatchMemory
  6991                           
  6992                           ;main.c: 824: uint8_t *pData;
  6993                           ;main.c: 825: int idx;
  6994                           ;main.c: 828: for(int batchNum=0;(batchNum*ciBatchSize)<cPatchSize;batchNum++){
  6995  0D66  0020               	movlb	0	; select bank0
  6996  0D67  01DF               	clrf	savePatch@batchNum
  6997  0D68  01E0               	clrf	savePatch@batchNum+1
  6998  0D69                     l3604:	
  6999  0D69  0860               	movf	savePatch@batchNum+1,w
  7000  0D6A  00D7               	movwf	??_savePatch+1
  7001  0D6B  085F               	movf	savePatch@batchNum,w
  7002  0D6C  00D6               	movwf	??_savePatch
  7003  0D6D  0ED6               	swapf	??_savePatch,f
  7004  0D6E  0ED7               	swapf	??_savePatch+1,f
  7005  0D6F  30F0               	movlw	240
  7006  0D70  05D7               	andwf	??_savePatch+1,f
  7007  0D71  0856               	movf	??_savePatch,w
  7008  0D72  390F               	andlw	15
  7009  0D73  04D7               	iorwf	??_savePatch+1,f
  7010  0D74  30F0               	movlw	240
  7011  0D75  05D6               	andwf	??_savePatch,f
  7012  0D76  0857               	movf	??_savePatch+1,w
  7013  0D77  3A80               	xorlw	128
  7014  0D78  00D8               	movwf	??_savePatch+2
  7015  0D79  3080               	movlw	128
  7016  0D7A  0258               	subwf	??_savePatch+2,w
  7017  0D7B  1D03               	skipz
  7018  0D7C  2D7F               	goto	u3105
  7019  0D7D  3080               	movlw	128
  7020  0D7E  0256               	subwf	??_savePatch,w
  7021  0D7F                     u3105:	
  7022  0D7F  1803               	btfsc	3,0
  7023  0D80  0008               	return
  7024                           
  7025                           ;main.c: 830: idx=batchNum*ciBatchSize;
  7026  0D81  0020               	movlb	0	; select bank0
  7027  0D82  0860               	movf	savePatch@batchNum+1,w
  7028  0D83  00D7               	movwf	??_savePatch+1
  7029  0D84  085F               	movf	savePatch@batchNum,w
  7030  0D85  00D6               	movwf	??_savePatch
  7031  0D86  0ED6               	swapf	??_savePatch,f
  7032  0D87  0ED7               	swapf	??_savePatch+1,f
  7033  0D88  30F0               	movlw	240
  7034  0D89  05D7               	andwf	??_savePatch+1,f
  7035  0D8A  0856               	movf	??_savePatch,w
  7036  0D8B  390F               	andlw	15
  7037  0D8C  04D7               	iorwf	??_savePatch+1,f
  7038  0D8D  30F0               	movlw	240
  7039  0D8E  05D6               	andwf	??_savePatch,f
  7040  0D8F  0856               	movf	??_savePatch,w
  7041  0D90  00DD               	movwf	savePatch@idx
  7042  0D91  0857               	movf	??_savePatch+1,w
  7043  0D92  00DE               	movwf	savePatch@idx+1
  7044                           
  7045                           ;main.c: 831: pData=&aPatchMemory[idx];
  7046  0D93  3070               	movlw	112
  7047  0D94  00D6               	movwf	??_savePatch
  7048  0D95  3023               	movlw	35
  7049  0D96  00D7               	movwf	??_savePatch+1
  7050  0D97  085D               	movf	savePatch@idx,w
  7051  0D98  0756               	addwf	??_savePatch,w
  7052  0D99  00DB               	movwf	savePatch@pData
  7053  0D9A  085E               	movf	savePatch@idx+1,w
  7054  0D9B  3D57               	addwfc	??_savePatch+1,w
  7055  0D9C  00DC               	movwf	savePatch@pData+1
  7056                           
  7057                           ;main.c: 832: MYI2C_Write16EEPROMBytes(ciI2C_EEPROM_DEVICE_ADDRESS,iPatchAddress,pData);
  7058  0D9D  0862               	movf	savePatch@iPatchAddress+1,w
  7059  0D9E  00AF               	movwf	MYI2C_Write16EEPROMBytes@writeAddress+1
  7060  0D9F  0861               	movf	savePatch@iPatchAddress,w
  7061  0DA0  00AE               	movwf	MYI2C_Write16EEPROMBytes@writeAddress
  7062  0DA1  085C               	movf	savePatch@pData+1,w
  7063  0DA2  00B1               	movwf	MYI2C_Write16EEPROMBytes@pData+1
  7064  0DA3  085B               	movf	savePatch@pData,w
  7065  0DA4  00B0               	movwf	MYI2C_Write16EEPROMBytes@pData
  7066  0DA5  3050               	movlw	80
  7067  0DA6  318E  26C7  318D   	fcall	_MYI2C_Write16EEPROMBytes
  7068                           
  7069                           ;main.c: 834: iPatchAddress+=ciBatchSize;
  7070  0DA9  3010               	movlw	16
  7071  0DAA  0020               	movlb	0	; select bank0
  7072  0DAB  07E1               	addwf	savePatch@iPatchAddress,f
  7073  0DAC  3000               	movlw	0
  7074  0DAD  3DE2               	addwfc	savePatch@iPatchAddress+1,f
  7075                           
  7076                           ;main.c: 836: _delay((unsigned long)((5)*(32000000/4000.0)));
  7077  0DAE  3034               	movlw	52
  7078  0DAF  0020               	movlb	0	; select bank0
  7079  0DB0  00D6               	movwf	??_savePatch
  7080  0DB1  30F1               	movlw	241
  7081  0DB2                     u4457:	
  7082  0DB2  0B89               	decfsz	9,f
  7083  0DB3  2DB2               	goto	u4457
  7084  0DB4  0BD6               	decfsz	??_savePatch,f
  7085  0DB5  2DB2               	goto	u4457
  7086  0DB6  3200               	nop2
  7087  0DB7  3001               	movlw	1
  7088  0DB8  0020               	movlb	0	; select bank0
  7089  0DB9  07DF               	addwf	savePatch@batchNum,f
  7090  0DBA  3000               	movlw	0
  7091  0DBB  3DE0               	addwfc	savePatch@batchNum+1,f
  7092  0DBC  2D69               	goto	l3604
  7093  0DBD                     __end_of_savePatch:	
  7094                           
  7095                           	psect	text2
  7096  04B9                     __ptext2:	
  7097 ;; *************** function _marshallPatchMemory *****************
  7098 ;; Defined at:
  7099 ;;		line 22 in file "EEPROM_24LC256.c"
  7100 ;; Parameters:    Size  Location     Type
  7101 ;;  mvcChannels     1    wreg     PTR unsigned char 
  7102 ;;		 -> mvcChannels(4), 
  7103 ;;  dualADSRdata    1    0[BANK0 ] PTR unsigned char 
  7104 ;;		 -> dualADSRdata0(8), 
  7105 ;;  dualADSRdata    1    1[BANK0 ] PTR unsigned char 
  7106 ;;		 -> dualADSRdata1(8), 
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  mvcChannels     1    8[BANK0 ] PTR unsigned char 
  7109 ;;		 -> mvcChannels(4), 
  7110 ;;  i               2   13[BANK0 ] int 
  7111 ;;  i               2   11[BANK0 ] int 
  7112 ;;  i               2    9[BANK0 ] int 
  7113 ;;  iPatchMemory    2   15[BANK0 ] int 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1    wreg      void 
  7116 ;; Registers used:
  7117 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7123 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;Total ram usage:       17 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    3
  7130 ;; This function calls:
  7131 ;;		Nothing
  7132 ;; This function is called by:
  7133 ;;		_savePatch
  7134 ;; This function uses a non-reentrant model
  7135 ;;
  7136                           
  7137                           
  7138                           ;psect for function _marshallPatchMemory
  7139  04B9                     _marshallPatchMemory:	
  7140                           
  7141                           ;incstack = 0
  7142                           ; Regs used in _marshallPatchMemory: [wreg+fsr1l+fsr1h+status,2+status,0]
  7143                           ;marshallPatchMemory@mvcChannels stored from wreg
  7144  04B9  0020               	movlb	0	; select bank0
  7145  04BA  00A8               	movwf	marshallPatchMemory@mvcChannels
  7146                           
  7147                           ;EEPROM_24LC256.c: 23: int iPatchMemoryNDX=0;
  7148  04BB  01AF               	clrf	marshallPatchMemory@iPatchMemoryNDX
  7149  04BC  01B0               	clrf	marshallPatchMemory@iPatchMemoryNDX+1
  7150                           
  7151                           ;EEPROM_24LC256.c: 24: for(int i=0; i<cMixFaderCount;i++) {
  7152  04BD  01A9               	clrf	marshallPatchMemory@i
  7153  04BE  01AA               	clrf	marshallPatchMemory@i+1
  7154  04BF  082A               	movf	marshallPatchMemory@i+1,w
  7155  04C0  3A80               	xorlw	128
  7156  04C1  00A2               	movwf	??_marshallPatchMemory
  7157  04C2  3080               	movlw	128
  7158  04C3  0222               	subwf	??_marshallPatchMemory,w
  7159  04C4  1D03               	skipz
  7160  04C5  2CC8               	goto	u2545
  7161  04C6  3004               	movlw	4
  7162  04C7  0229               	subwf	marshallPatchMemory@i,w
  7163  04C8                     u2545:	
  7164  04C8  1803               	btfsc	3,0
  7165  04C9  2CF6               	goto	l3162
  7166  04CA                     l3154:	
  7167                           
  7168                           ;EEPROM_24LC256.c: 25: aPatchMemory[iPatchMemoryNDX++]=mvcChannels[i];
  7169  04CA  0020               	movlb	0	; select bank0
  7170  04CB  0829               	movf	marshallPatchMemory@i,w
  7171  04CC  0728               	addwf	marshallPatchMemory@mvcChannels,w
  7172  04CD  00A2               	movwf	??_marshallPatchMemory
  7173  04CE  0822               	movf	??_marshallPatchMemory,w
  7174  04CF  0086               	movwf	6
  7175  04D0  0187               	clrf	7
  7176  04D1  0801               	movf	1,w
  7177  04D2  00A3               	movwf	??_marshallPatchMemory+1
  7178  04D3  3070               	movlw	112
  7179  04D4  00A4               	movwf	??_marshallPatchMemory+2
  7180  04D5  3023               	movlw	35
  7181  04D6  00A5               	movwf	??_marshallPatchMemory+3
  7182  04D7  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7183  04D8  0724               	addwf	??_marshallPatchMemory+2,w
  7184  04D9  00A6               	movwf	??_marshallPatchMemory+4
  7185  04DA  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7186  04DB  3D25               	addwfc	??_marshallPatchMemory+3,w
  7187  04DC  00A7               	movwf	??_marshallPatchMemory+5
  7188  04DD  0826               	movf	??_marshallPatchMemory+4,w
  7189  04DE  0086               	movwf	6
  7190  04DF  0827               	movf	??_marshallPatchMemory+5,w
  7191  04E0  0087               	movwf	7
  7192  04E1  0823               	movf	??_marshallPatchMemory+1,w
  7193  04E2  0081               	movwf	1
  7194  04E3  3001               	movlw	1
  7195  04E4  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7196  04E5  3000               	movlw	0
  7197  04E6  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7198  04E7  3001               	movlw	1
  7199  04E8  07A9               	addwf	marshallPatchMemory@i,f
  7200  04E9  3000               	movlw	0
  7201  04EA  3DAA               	addwfc	marshallPatchMemory@i+1,f
  7202  04EB  082A               	movf	marshallPatchMemory@i+1,w
  7203  04EC  3A80               	xorlw	128
  7204  04ED  00A2               	movwf	??_marshallPatchMemory
  7205  04EE  3080               	movlw	128
  7206  04EF  0222               	subwf	??_marshallPatchMemory,w
  7207  04F0  1D03               	skipz
  7208  04F1  2CF4               	goto	u2555
  7209  04F2  3004               	movlw	4
  7210  04F3  0229               	subwf	marshallPatchMemory@i,w
  7211  04F4                     u2555:	
  7212  04F4  1C03               	skipc
  7213  04F5  2CCA               	goto	l3154
  7214  04F6                     l3162:	
  7215                           
  7216                           ;EEPROM_24LC256.c: 26: }
  7217                           ;EEPROM_24LC256.c: 27: for(int i=0; i<cADSRdataBytes;i++) {
  7218  04F6  0020               	movlb	0	; select bank0
  7219  04F7  01AB               	clrf	marshallPatchMemory@i_1221
  7220  04F8  01AC               	clrf	marshallPatchMemory@i_1221+1
  7221  04F9  082C               	movf	marshallPatchMemory@i_1221+1,w
  7222  04FA  3A80               	xorlw	128
  7223  04FB  00A2               	movwf	??_marshallPatchMemory
  7224  04FC  3080               	movlw	128
  7225  04FD  0222               	subwf	??_marshallPatchMemory,w
  7226  04FE  3008               	movlw	8
  7227  04FF  1903               	btfsc	3,2
  7228  0500  022B               	subwf	marshallPatchMemory@i_1221,w
  7229  0501  1803               	btfsc	3,0
  7230  0502  2D2F               	goto	l3176
  7231  0503                     l3168:	
  7232                           
  7233                           ;EEPROM_24LC256.c: 28: aPatchMemory[iPatchMemoryNDX++]=dualADSRdata0[i];
  7234  0503  0020               	movlb	0	; select bank0
  7235  0504  082B               	movf	marshallPatchMemory@i_1221,w
  7236  0505  0720               	addwf	marshallPatchMemory@dualADSRdata0,w
  7237  0506  00A2               	movwf	??_marshallPatchMemory
  7238  0507  0822               	movf	??_marshallPatchMemory,w
  7239  0508  0086               	movwf	6
  7240  0509  3001               	movlw	1	; select bank2/3
  7241  050A  0087               	movwf	7
  7242  050B  0801               	movf	1,w
  7243  050C  00A3               	movwf	??_marshallPatchMemory+1
  7244  050D  3070               	movlw	112
  7245  050E  00A4               	movwf	??_marshallPatchMemory+2
  7246  050F  3023               	movlw	35
  7247  0510  00A5               	movwf	??_marshallPatchMemory+3
  7248  0511  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7249  0512  0724               	addwf	??_marshallPatchMemory+2,w
  7250  0513  00A6               	movwf	??_marshallPatchMemory+4
  7251  0514  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7252  0515  3D25               	addwfc	??_marshallPatchMemory+3,w
  7253  0516  00A7               	movwf	??_marshallPatchMemory+5
  7254  0517  0826               	movf	??_marshallPatchMemory+4,w
  7255  0518  0086               	movwf	6
  7256  0519  0827               	movf	??_marshallPatchMemory+5,w
  7257  051A  0087               	movwf	7
  7258  051B  0823               	movf	??_marshallPatchMemory+1,w
  7259  051C  0081               	movwf	1
  7260  051D  3001               	movlw	1
  7261  051E  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7262  051F  3000               	movlw	0
  7263  0520  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7264  0521  3001               	movlw	1
  7265  0522  07AB               	addwf	marshallPatchMemory@i_1221,f
  7266  0523  3000               	movlw	0
  7267  0524  3DAC               	addwfc	marshallPatchMemory@i_1221+1,f
  7268  0525  082C               	movf	marshallPatchMemory@i_1221+1,w
  7269  0526  3A80               	xorlw	128
  7270  0527  00A2               	movwf	??_marshallPatchMemory
  7271  0528  3080               	movlw	128
  7272  0529  0222               	subwf	??_marshallPatchMemory,w
  7273  052A  3008               	movlw	8
  7274  052B  1903               	btfsc	3,2
  7275  052C  022B               	subwf	marshallPatchMemory@i_1221,w
  7276  052D  1C03               	skipc
  7277  052E  2D03               	goto	l3168
  7278  052F                     l3176:	
  7279                           
  7280                           ;EEPROM_24LC256.c: 29: }
  7281                           ;EEPROM_24LC256.c: 30: for(int i=0; i<cADSRdataBytes;i++) {
  7282  052F  0020               	movlb	0	; select bank0
  7283  0530  01AD               	clrf	marshallPatchMemory@i_1222
  7284  0531  01AE               	clrf	marshallPatchMemory@i_1222+1
  7285  0532  082E               	movf	marshallPatchMemory@i_1222+1,w
  7286  0533  3A80               	xorlw	128
  7287  0534  00A2               	movwf	??_marshallPatchMemory
  7288  0535  3080               	movlw	128
  7289  0536  0222               	subwf	??_marshallPatchMemory,w
  7290  0537  3008               	movlw	8
  7291  0538  1903               	btfsc	3,2
  7292  0539  022D               	subwf	marshallPatchMemory@i_1222,w
  7293  053A  1803               	btfsc	3,0
  7294  053B  2D68               	goto	l3190
  7295  053C                     l3182:	
  7296                           
  7297                           ;EEPROM_24LC256.c: 31: aPatchMemory[iPatchMemoryNDX++]=dualADSRdata1[i];
  7298  053C  0020               	movlb	0	; select bank0
  7299  053D  082D               	movf	marshallPatchMemory@i_1222,w
  7300  053E  0721               	addwf	marshallPatchMemory@dualADSRdata1,w
  7301  053F  00A2               	movwf	??_marshallPatchMemory
  7302  0540  0822               	movf	??_marshallPatchMemory,w
  7303  0541  0086               	movwf	6
  7304  0542  3001               	movlw	1	; select bank2/3
  7305  0543  0087               	movwf	7
  7306  0544  0801               	movf	1,w
  7307  0545  00A3               	movwf	??_marshallPatchMemory+1
  7308  0546  3070               	movlw	112
  7309  0547  00A4               	movwf	??_marshallPatchMemory+2
  7310  0548  3023               	movlw	35
  7311  0549  00A5               	movwf	??_marshallPatchMemory+3
  7312  054A  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7313  054B  0724               	addwf	??_marshallPatchMemory+2,w
  7314  054C  00A6               	movwf	??_marshallPatchMemory+4
  7315  054D  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7316  054E  3D25               	addwfc	??_marshallPatchMemory+3,w
  7317  054F  00A7               	movwf	??_marshallPatchMemory+5
  7318  0550  0826               	movf	??_marshallPatchMemory+4,w
  7319  0551  0086               	movwf	6
  7320  0552  0827               	movf	??_marshallPatchMemory+5,w
  7321  0553  0087               	movwf	7
  7322  0554  0823               	movf	??_marshallPatchMemory+1,w
  7323  0555  0081               	movwf	1
  7324  0556  3001               	movlw	1
  7325  0557  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7326  0558  3000               	movlw	0
  7327  0559  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7328  055A  3001               	movlw	1
  7329  055B  07AD               	addwf	marshallPatchMemory@i_1222,f
  7330  055C  3000               	movlw	0
  7331  055D  3DAE               	addwfc	marshallPatchMemory@i_1222+1,f
  7332  055E  082E               	movf	marshallPatchMemory@i_1222+1,w
  7333  055F  3A80               	xorlw	128
  7334  0560  00A2               	movwf	??_marshallPatchMemory
  7335  0561  3080               	movlw	128
  7336  0562  0222               	subwf	??_marshallPatchMemory,w
  7337  0563  3008               	movlw	8
  7338  0564  1903               	btfsc	3,2
  7339  0565  022D               	subwf	marshallPatchMemory@i_1222,w
  7340  0566  1C03               	skipc
  7341  0567  2D3C               	goto	l3182
  7342  0568                     l3190:	
  7343                           
  7344                           ;EEPROM_24LC256.c: 32: }
  7345                           ;EEPROM_24LC256.c: 34: for(;iPatchMemoryNDX<cPatchSize;iPatchMemoryNDX++){
  7346  0568  0020               	movlb	0	; select bank0
  7347  0569                     L1:	
  7348  0569  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7349  056A  3A80               	xorlw	128
  7350  056B  00A2               	movwf	??_marshallPatchMemory
  7351  056C  3080               	movlw	128
  7352  056D  0222               	subwf	??_marshallPatchMemory,w
  7353  056E  1D03               	skipz
  7354  056F  2D72               	goto	u2605
  7355  0570  3080               	movlw	128
  7356  0571  022F               	subwf	marshallPatchMemory@iPatchMemoryNDX,w
  7357  0572                     u2605:	
  7358  0572  1803               	btfsc	3,0
  7359  0573  0008               	return
  7360                           
  7361                           ;EEPROM_24LC256.c: 35: aPatchMemory[iPatchMemoryNDX]=0;
  7362  0574  3070               	movlw	112
  7363  0575  0020               	movlb	0	; select bank0
  7364  0576  00A2               	movwf	??_marshallPatchMemory
  7365  0577  3023               	movlw	35
  7366  0578  00A3               	movwf	??_marshallPatchMemory+1
  7367  0579  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7368  057A  0722               	addwf	??_marshallPatchMemory,w
  7369  057B  0086               	movwf	6
  7370  057C  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7371  057D  3D23               	addwfc	??_marshallPatchMemory+1,w
  7372  057E  0087               	movwf	7
  7373  057F  0181               	clrf	1
  7374  0580  3001               	movlw	1
  7375  0581  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7376  0582  3000               	movlw	0
  7377  0583  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7378  0584  2D69               	goto	L1
  7379  0585                     __end_of_marshallPatchMemory:	
  7380                           
  7381                           	psect	text3
  7382  0EC7                     __ptext3:	
  7383 ;; *************** function _MYI2C_Write16EEPROMBytes *****************
  7384 ;; Defined at:
  7385 ;;		line 73 in file "EEPROM_24LC256.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  slaveDeviceA    1    wreg     unsigned char 
  7388 ;;  writeAddress    2   14[BANK0 ] int 
  7389 ;;  pData           2   16[BANK0 ] PTR unsigned char 
  7390 ;;		 -> aPatchMemory(128), 
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;  slaveDeviceA    1   45[BANK0 ] unsigned char 
  7393 ;;  i               2   49[BANK0 ] int 
  7394 ;;  writeBuffer    17   22[BANK0 ] unsigned char [17]
  7395 ;;  counter         2   47[BANK0 ] unsigned int 
  7396 ;;  timeOut         2   42[BANK0 ] unsigned int 
  7397 ;;  nCount          2   40[BANK0 ] unsigned int 
  7398 ;;  status          1   51[BANK0 ] enum E14260
  7399 ;;  iPatchAddres    1   46[BANK0 ] unsigned char 
  7400 ;;  pointerByte     1   44[BANK0 ] unsigned char 
  7401 ;;  iPatchAddres    1   39[BANK0 ] unsigned char 
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  1    wreg      void 
  7404 ;; Registers used:
  7405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7411 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;Total ram usage:       38 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:    5
  7418 ;; This function calls:
  7419 ;;		_I2C1_MasterWrite
  7420 ;; This function is called by:
  7421 ;;		_savePatch
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           
  7426                           ;psect for function _MYI2C_Write16EEPROMBytes
  7427  0EC7                     _MYI2C_Write16EEPROMBytes:	
  7428                           
  7429                           ;incstack = 0
  7430                           ; Regs used in _MYI2C_Write16EEPROMBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7431                           ;MYI2C_Write16EEPROMBytes@slaveDeviceAddress stored from wreg
  7432  0EC7  0020               	movlb	0	; select bank0
  7433  0EC8  00CD               	movwf	MYI2C_Write16EEPROMBytes@slaveDeviceAddress
  7434                           
  7435                           ;EEPROM_24LC256.c: 75: uint8_t iPatchAddressHigh=writeAddress>>8;
  7436  0EC9  082F               	movf	MYI2C_Write16EEPROMBytes@writeAddress+1,w
  7437  0ECA  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7438  0ECB  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7439  0ECC  00CE               	movwf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh
  7440                           
  7441                           ;EEPROM_24LC256.c: 76: uint8_t iPatchAddressLow=writeAddress&0xFF;
  7442  0ECD  082E               	movf	MYI2C_Write16EEPROMBytes@writeAddress,w
  7443  0ECE  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7444  0ECF  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7445  0ED0  00C7               	movwf	MYI2C_Write16EEPROMBytes@iPatchAddressLow
  7446                           
  7447                           ;EEPROM_24LC256.c: 82: uint16_t nCount;
  7448                           ;EEPROM_24LC256.c: 83: uint8_t writeBuffer[ciBufferSize];
  7449                           ;EEPROM_24LC256.c: 84: uint16_t counter, timeOut;
  7450                           ;EEPROM_24LC256.c: 86: uint8_t pointerByte = 0b10100000;
  7451  0ED1  30A0               	movlw	160
  7452  0ED2  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7453  0ED3  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7454  0ED4  00CC               	movwf	MYI2C_Write16EEPROMBytes@pointerByte
  7455                           
  7456                           ;EEPROM_24LC256.c: 88: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
  7457  0ED5  3002               	movlw	2
  7458  0ED6  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7459  0ED7  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7460  0ED8  00D3               	movwf	MYI2C_Write16EEPROMBytes@status
  7461                           
  7462                           ;EEPROM_24LC256.c: 92: nCount = 2;
  7463  0ED9  3002               	movlw	2
  7464  0EDA  00C8               	movwf	MYI2C_Write16EEPROMBytes@nCount
  7465  0EDB  3000               	movlw	0
  7466  0EDC  00C9               	movwf	MYI2C_Write16EEPROMBytes@nCount+1
  7467                           
  7468                           ;EEPROM_24LC256.c: 95: for (counter = 0; counter < nCount; counter++)
  7469  0EDD  01CF               	clrf	MYI2C_Write16EEPROMBytes@counter
  7470  0EDE  01D0               	clrf	MYI2C_Write16EEPROMBytes@counter+1
  7471  0EDF                     l833:	
  7472  0EDF  0849               	movf	MYI2C_Write16EEPROMBytes@nCount+1,w
  7473  0EE0  0250               	subwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7474  0EE1  1D03               	skipz
  7475  0EE2  2EE5               	goto	u2715
  7476  0EE3  0848               	movf	MYI2C_Write16EEPROMBytes@nCount,w
  7477  0EE4  024F               	subwf	MYI2C_Write16EEPROMBytes@counter,w
  7478  0EE5                     u2715:	
  7479  0EE5  1803               	btfsc	3,0
  7480  0EE6  0008               	return
  7481                           
  7482                           ;EEPROM_24LC256.c: 96: {
  7483                           ;EEPROM_24LC256.c: 99: writeBuffer[0] = pointerByte;
  7484  0EE7  084C               	movf	MYI2C_Write16EEPROMBytes@pointerByte,w
  7485  0EE8  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7486  0EE9  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7487  0EEA  00B6               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer
  7488                           
  7489                           ;EEPROM_24LC256.c: 101: if(0==counter) {
  7490  0EEB  084F               	movf	MYI2C_Write16EEPROMBytes@counter,w
  7491  0EEC  0450               	iorwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7492  0EED  1D03               	btfss	3,2
  7493  0EEE  2EF8               	goto	l3218
  7494                           
  7495                           ;EEPROM_24LC256.c: 103: writeBuffer[1] = iPatchAddressHigh;
  7496  0EEF  084E               	movf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh,w
  7497  0EF0  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7498  0EF1  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7499  0EF2  00B7               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer+1
  7500                           
  7501                           ;EEPROM_24LC256.c: 104: writeBuffer[2] = iPatchAddressHigh;
  7502  0EF3  084E               	movf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh,w
  7503  0EF4  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7504  0EF5  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7505  0EF6  00B8               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer+2
  7506                           
  7507                           ;EEPROM_24LC256.c: 105: }
  7508  0EF7  2F27               	goto	l3230
  7509  0EF8                     l3218:	
  7510                           
  7511                           ;EEPROM_24LC256.c: 106: else
  7512                           ;EEPROM_24LC256.c: 107: {
  7513                           ;EEPROM_24LC256.c: 109: for(int i=1;i<ciBatchSize;i++){
  7514  0EF8  3001               	movlw	1
  7515  0EF9  00D1               	movwf	MYI2C_Write16EEPROMBytes@i
  7516  0EFA  3000               	movlw	0
  7517  0EFB  00D2               	movwf	MYI2C_Write16EEPROMBytes@i+1
  7518  0EFC  0852               	movf	MYI2C_Write16EEPROMBytes@i+1,w
  7519  0EFD  3A80               	xorlw	128
  7520  0EFE  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7521  0EFF  3080               	movlw	128
  7522  0F00  0232               	subwf	??_MYI2C_Write16EEPROMBytes,w
  7523  0F01  1D03               	skipz
  7524  0F02  2F05               	goto	u2635
  7525  0F03  3010               	movlw	16
  7526  0F04  0251               	subwf	MYI2C_Write16EEPROMBytes@i,w
  7527  0F05                     u2635:	
  7528  0F05  1803               	btfsc	3,0
  7529  0F06  2F27               	goto	l3230
  7530  0F07                     l3222:	
  7531                           
  7532                           ;EEPROM_24LC256.c: 110: writeBuffer[i]=(*pData++);
  7533  0F07  0020               	movlb	0	; select bank0
  7534  0F08  0830               	movf	MYI2C_Write16EEPROMBytes@pData,w
  7535  0F09  0086               	movwf	6
  7536  0F0A  0831               	movf	MYI2C_Write16EEPROMBytes@pData+1,w
  7537  0F0B  0087               	movwf	7
  7538  0F0C  0801               	movf	1,w
  7539  0F0D  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7540  0F0E  0851               	movf	MYI2C_Write16EEPROMBytes@i,w
  7541  0F0F  3E36               	addlw	(low (MYI2C_Write16EEPROMBytes@writeBuffer| 0))& (0+255)
  7542  0F10  0086               	movwf	6
  7543  0F11  0187               	clrf	7
  7544  0F12  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7545  0F13  0081               	movwf	1
  7546  0F14  3001               	movlw	1
  7547  0F15  07B0               	addwf	MYI2C_Write16EEPROMBytes@pData,f
  7548  0F16  3000               	movlw	0
  7549  0F17  3DB1               	addwfc	MYI2C_Write16EEPROMBytes@pData+1,f
  7550  0F18  3001               	movlw	1
  7551  0F19  07D1               	addwf	MYI2C_Write16EEPROMBytes@i,f
  7552  0F1A  3000               	movlw	0
  7553  0F1B  3DD2               	addwfc	MYI2C_Write16EEPROMBytes@i+1,f
  7554  0F1C  0852               	movf	MYI2C_Write16EEPROMBytes@i+1,w
  7555  0F1D  3A80               	xorlw	128
  7556  0F1E  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7557  0F1F  3080               	movlw	128
  7558  0F20  0232               	subwf	??_MYI2C_Write16EEPROMBytes,w
  7559  0F21  1D03               	skipz
  7560  0F22  2F25               	goto	u2645
  7561  0F23  3010               	movlw	16
  7562  0F24  0251               	subwf	MYI2C_Write16EEPROMBytes@i,w
  7563  0F25                     u2645:	
  7564  0F25  1C03               	skipc
  7565  0F26  2F07               	goto	l3222
  7566  0F27                     l3230:	
  7567                           
  7568                           ;EEPROM_24LC256.c: 111: }
  7569                           ;EEPROM_24LC256.c: 112: }
  7570                           ;EEPROM_24LC256.c: 117: timeOut = 0;
  7571  0F27  0020               	movlb	0	; select bank0
  7572  0F28  01CA               	clrf	MYI2C_Write16EEPROMBytes@timeOut
  7573  0F29  01CB               	clrf	MYI2C_Write16EEPROMBytes@timeOut+1
  7574  0F2A                     l3252:	
  7575                           ;EEPROM_24LC256.c: 118: while(status != I2C1_MESSAGE_FAIL)
  7576                           
  7577  0F2A  0353               	decf	MYI2C_Write16EEPROMBytes@status,w
  7578  0F2B  1903               	btfsc	3,2
  7579  0F2C  2F59               	goto	l3254
  7580                           
  7581                           ;EEPROM_24LC256.c: 119: {
  7582                           ;EEPROM_24LC256.c: 120: if(0==counter) {
  7583  0F2D  084F               	movf	MYI2C_Write16EEPROMBytes@counter,w
  7584  0F2E  0450               	iorwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7585  0F2F  1D03               	btfss	3,2
  7586  0F30  2F33               	goto	l3236
  7587                           
  7588                           ;EEPROM_24LC256.c: 122: I2C1_MasterWrite( writeBuffer,
  7589                           ;EEPROM_24LC256.c: 123: 3,
  7590                           ;EEPROM_24LC256.c: 124: slaveDeviceAddress,
  7591                           ;EEPROM_24LC256.c: 125: &status);
  7592  0F31  3003               	movlw	3
  7593  0F32  2F35               	goto	L2
  7594  0F33                     l3236:	
  7595                           ;EEPROM_24LC256.c: 126: } else {
  7596                           
  7597                           
  7598                           ;EEPROM_24LC256.c: 128: I2C1_MasterWrite( writeBuffer,
  7599                           ;EEPROM_24LC256.c: 129: ciBatchSize+1,
  7600                           ;EEPROM_24LC256.c: 130: slaveDeviceAddress,
  7601                           ;EEPROM_24LC256.c: 131: &status);
  7602  0F33  3011               	movlw	17
  7603  0F34  0020               	movlb	0	; select bank0
  7604  0F35                     L2:	
  7605  0F35  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7606  0F36  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7607  0F37  00A7               	movwf	I2C1_MasterWrite@length
  7608  0F38  084D               	movf	MYI2C_Write16EEPROMBytes@slaveDeviceAddress,w
  7609  0F39  00B3               	movwf	??_MYI2C_Write16EEPROMBytes+1
  7610  0F3A  01B4               	clrf	??_MYI2C_Write16EEPROMBytes+2
  7611  0F3B  0833               	movf	??_MYI2C_Write16EEPROMBytes+1,w
  7612  0F3C  00A8               	movwf	I2C1_MasterWrite@address
  7613  0F3D  0834               	movf	??_MYI2C_Write16EEPROMBytes+2,w
  7614  0F3E  00A9               	movwf	I2C1_MasterWrite@address+1
  7615  0F3F  3053               	movlw	(low (MYI2C_Write16EEPROMBytes@status| 0))& (0+255)
  7616  0F40  00B5               	movwf	??_MYI2C_Write16EEPROMBytes+3
  7617  0F41  0835               	movf	??_MYI2C_Write16EEPROMBytes+3,w
  7618  0F42  00AA               	movwf	I2C1_MasterWrite@pflag
  7619  0F43  3036               	movlw	(low (MYI2C_Write16EEPROMBytes@writeBuffer| 0))& (0+255)
  7620  0F44  318B  2371  318E   	fcall	_I2C1_MasterWrite
  7621  0F47                     l3238:	
  7622                           ;EEPROM_24LC256.c: 132: }
  7623                           ;EEPROM_24LC256.c: 135: while(status == I2C1_MESSAGE_PENDING);
  7624                           
  7625  0F47  3002               	movlw	2
  7626  0F48  0020               	movlb	0	; select bank0
  7627  0F49  0653               	xorwf	MYI2C_Write16EEPROMBytes@status,w
  7628  0F4A  1903               	btfsc	3,2
  7629  0F4B  2F47               	goto	l3238
  7630                           
  7631                           ;EEPROM_24LC256.c: 137: if (status == I2C1_MESSAGE_COMPLETE)
  7632  0F4C  0853               	movf	MYI2C_Write16EEPROMBytes@status,w
  7633  0F4D  1903               	btfsc	3,2
  7634  0F4E  2F59               	goto	l3254
  7635                           
  7636                           ;EEPROM_24LC256.c: 147: if (timeOut == 100)
  7637                           
  7638                           ;EEPROM_24LC256.c: 138: break;
  7639  0F4F  3064               	movlw	100
  7640  0F50  064A               	xorwf	MYI2C_Write16EEPROMBytes@timeOut,w
  7641  0F51  044B               	iorwf	MYI2C_Write16EEPROMBytes@timeOut+1,w
  7642  0F52  1903               	btfsc	3,2
  7643  0F53  2F59               	goto	l3254
  7644                           
  7645                           ;EEPROM_24LC256.c: 149: else
  7646                           ;EEPROM_24LC256.c: 150: timeOut++;
  7647                           
  7648                           ;EEPROM_24LC256.c: 148: break;
  7649  0F54  3001               	movlw	1
  7650  0F55  07CA               	addwf	MYI2C_Write16EEPROMBytes@timeOut,f
  7651  0F56  3000               	movlw	0
  7652  0F57  3DCB               	addwfc	MYI2C_Write16EEPROMBytes@timeOut+1,f
  7653  0F58  2F2A               	goto	l3252
  7654  0F59                     l3254:	
  7655                           
  7656                           ;EEPROM_24LC256.c: 151: }
  7657                           ;EEPROM_24LC256.c: 153: if (status == I2C1_MESSAGE_FAIL) { break; }
  7658  0F59  0353               	decf	MYI2C_Write16EEPROMBytes@status,w
  7659  0F5A  1903               	btfsc	3,2
  7660  0F5B  0008               	return
  7661  0F5C  3001               	movlw	1
  7662  0F5D  07CF               	addwf	MYI2C_Write16EEPROMBytes@counter,f
  7663  0F5E  3000               	movlw	0
  7664  0F5F  3DD0               	addwfc	MYI2C_Write16EEPROMBytes@counter+1,f
  7665  0F60  2EDF               	goto	l833
  7666  0F61                     __end_of_MYI2C_Write16EEPROMBytes:	
  7667                           
  7668                           	psect	text4
  7669  0C11                     __ptext4:	
  7670 ;; *************** function _loadPatch *****************
  7671 ;; Defined at:
  7672 ;;		line 854 in file "main.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;  PatchNumber     2   58[BANK0 ] int 
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;  i               2   64[BANK0 ] int 
  7677 ;;  iPatchAddres    2   62[BANK0 ] int 
  7678 ;;  idx             2    0        int 
  7679 ;;  pData           2    0        PTR unsigned char 
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  1    wreg      void 
  7682 ;; Registers used:
  7683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7684 ;; Tracked objects:
  7685 ;;		On entry : 0/0
  7686 ;;		On exit  : 0/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7689 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7691 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;Total ram usage:        8 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    7
  7696 ;; This function calls:
  7697 ;;		_updateModelFromPatchMemory
  7698 ;;		_writeDAC528
  7699 ;; This function is called by:
  7700 ;;		_main
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           
  7705                           ;psect for function _loadPatch
  7706  0C11                     _loadPatch:	
  7707                           
  7708                           ;main.c: 855: int iPatchAddress=PatchNumber*cPatchSize;
  7709                           
  7710                           ;incstack = 0
  7711                           ; Regs used in _loadPatch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7712  0C11  0020               	movlb	0	; select bank0
  7713  0C12  085B               	movf	loadPatch@PatchNumber+1,w
  7714  0C13  00DD               	movwf	??_loadPatch+1
  7715  0C14  085A               	movf	loadPatch@PatchNumber,w
  7716  0C15  00DC               	movwf	??_loadPatch
  7717  0C16  3007               	movlw	7
  7718  0C17                     u3065:	
  7719  0C17  35DC               	lslf	??_loadPatch,f
  7720  0C18  0DDD               	rlf	??_loadPatch+1,f
  7721  0C19  0B89               	decfsz	9,f
  7722  0C1A  2C17               	goto	u3065
  7723  0C1B  085C               	movf	??_loadPatch,w
  7724  0C1C  00DE               	movwf	loadPatch@iPatchAddress
  7725  0C1D  085D               	movf	??_loadPatch+1,w
  7726  0C1E  00DF               	movwf	loadPatch@iPatchAddress+1
  7727                           
  7728                           ;main.c: 858: uint8_t *pData;
  7729                           ;main.c: 859: int idx;
  7730                           ;main.c: 872: updateModelFromPatchMemory(mvcChannels,dualADSRdata0,dualADSRdata1);
  7731  0C1F  303C               	movlw	(low (_dualADSRdata0| (0+256)))& (0+255)
  7732  0C20  00DC               	movwf	??_loadPatch
  7733  0C21  085C               	movf	??_loadPatch,w
  7734  0C22  00A0               	movwf	updateModelFromPatchMemory@dualADSRdata0
  7735  0C23  3034               	movlw	(low (_dualADSRdata1| (0+256)))& (0+255)
  7736  0C24  00DD               	movwf	??_loadPatch+1
  7737  0C25  085D               	movf	??_loadPatch+1,w
  7738  0C26  00A1               	movwf	updateModelFromPatchMemory@dualADSRdata1
  7739  0C27  30C9               	movlw	(low (_mvcChannels| 0))& (0+255)
  7740  0C28  318F  2761  318C   	fcall	_updateModelFromPatchMemory
  7741                           
  7742                           ;main.c: 875: for(int i=0;i<cMixFaderCount;i++){
  7743  0C2B  0020               	movlb	0	; select bank0
  7744  0C2C  01E0               	clrf	loadPatch@i
  7745  0C2D  01E1               	clrf	loadPatch@i+1
  7746  0C2E                     L3:	
  7747  0C2E  0861               	movf	loadPatch@i+1,w
  7748  0C2F  3A80               	xorlw	128
  7749  0C30  00DC               	movwf	??_loadPatch
  7750  0C31  3080               	movlw	128
  7751  0C32  025C               	subwf	??_loadPatch,w
  7752  0C33  1D03               	skipz
  7753  0C34  2C37               	goto	u3075
  7754  0C35  3004               	movlw	4
  7755  0C36  0260               	subwf	loadPatch@i,w
  7756  0C37                     u3075:	
  7757  0C37  1803               	btfsc	3,0
  7758  0C38  0008               	return
  7759                           
  7760                           ;main.c: 876: writeDAC528(i+4,mvcChannels[i]);
  7761  0C39  0020               	movlb	0	; select bank0
  7762  0C3A  0860               	movf	loadPatch@i,w
  7763  0C3B  3E04               	addlw	4
  7764  0C3C  00D5               	movwf	writeDAC528@dacNumber
  7765  0C3D  3000               	movlw	0
  7766  0C3E  3D61               	addwfc	loadPatch@i+1,w
  7767  0C3F  00D6               	movwf	writeDAC528@dacNumber+1
  7768  0C40  0860               	movf	loadPatch@i,w
  7769  0C41  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  7770  0C42  0086               	movwf	6
  7771  0C43  0187               	clrf	7
  7772  0C44  0801               	movf	1,w
  7773  0C45  00DC               	movwf	??_loadPatch
  7774  0C46  085C               	movf	??_loadPatch,w
  7775  0C47  00D7               	movwf	writeDAC528@dacData
  7776  0C48  318B  234C  318C   	fcall	_writeDAC528
  7777  0C4B  3001               	movlw	1
  7778  0C4C  0020               	movlb	0	; select bank0
  7779  0C4D  07E0               	addwf	loadPatch@i,f
  7780  0C4E  3000               	movlw	0
  7781  0C4F  3DE1               	addwfc	loadPatch@i+1,f
  7782  0C50  2C2E               	goto	L3
  7783  0C51                     __end_of_loadPatch:	
  7784                           
  7785                           	psect	text5
  7786  0B4C                     __ptext5:	
  7787 ;; *************** function _writeDAC528 *****************
  7788 ;; Defined at:
  7789 ;;		line 57 in file "VCAMIX_SPI_Master.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;  dacNumber       2   53[BANK0 ] int 
  7792 ;;  dacData         1   55[BANK0 ] unsigned char 
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;  wkDacNumber     1   57[BANK0 ] unsigned char 
  7795 ;; Return value:  Size  Location     Type
  7796 ;;                  1    wreg      void 
  7797 ;; Registers used:
  7798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7799 ;; Tracked objects:
  7800 ;;		On entry : 0/0
  7801 ;;		On exit  : 0/0
  7802 ;;		Unchanged: 0/0
  7803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7804 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7807 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7808 ;;Total ram usage:        5 bytes
  7809 ;; Hardware stack levels used:    1
  7810 ;; Hardware stack levels required when called:    6
  7811 ;; This function calls:
  7812 ;;		_putByte
  7813 ;; This function is called by:
  7814 ;;		_main
  7815 ;;		_loadPatch
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           
  7820                           ;psect for function _writeDAC528
  7821  0B4C                     _writeDAC528:	
  7822                           
  7823                           ;VCAMIX_SPI_Master.c: 58: uint8_t wkDacNumber=0;
  7824                           
  7825                           ;incstack = 0
  7826                           ; Regs used in _writeDAC528: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7827  0B4C  0020               	movlb	0	; select bank0
  7828  0B4D  01D9               	clrf	writeDAC528@wkDacNumber
  7829                           
  7830                           ;VCAMIX_SPI_Master.c: 59: wkDacNumber=cPowerOfTwo[dacNumber];
  7831  0B4E  0856               	movf	writeDAC528@dacNumber+1,w
  7832  0B4F  0085               	movwf	5
  7833  0B50  0855               	movf	writeDAC528@dacNumber,w
  7834  0B51  0084               	movwf	4
  7835  0B52  3584               	lslf	4,f
  7836  0B53  0D85               	rlf	5,f
  7837  0B54  3000               	movlw	low (_cPowerOfTwo| (0+32768))
  7838  0B55  0784               	addwf	4,f
  7839  0B56  3090               	movlw	high (_cPowerOfTwo| (0+32768))
  7840  0B57  3D85               	addwfc	5,f
  7841  0B58  0800               	movf	0,w	;code access
  7842  0B59  00D8               	movwf	??_writeDAC528
  7843  0B5A  0858               	movf	??_writeDAC528,w
  7844  0B5B  00D9               	movwf	writeDAC528@wkDacNumber
  7845                           
  7846                           ;VCAMIX_SPI_Master.c: 61: LATA &= 0x7F ;
  7847  0B5C  307F               	movlw	127
  7848  0B5D  00D8               	movwf	??_writeDAC528
  7849  0B5E  0858               	movf	??_writeDAC528,w
  7850  0B5F  0596               	andwf	22,f	;volatile
  7851                           
  7852                           ;VCAMIX_SPI_Master.c: 63: putByte(wkDacNumber,0);
  7853  0B60  3000               	movlw	0
  7854  0B61  00CC               	movwf	putByte@clockPin
  7855  0B62  00CD               	movwf	putByte@clockPin+1
  7856  0B63  0859               	movf	writeDAC528@wkDacNumber,w
  7857  0B64  3185  2585  318B   	fcall	_putByte
  7858                           
  7859                           ;VCAMIX_SPI_Master.c: 65: putByte(dacData,0);
  7860  0B67  3000               	movlw	0
  7861  0B68  0020               	movlb	0	; select bank0
  7862  0B69  00CC               	movwf	putByte@clockPin
  7863  0B6A  00CD               	movwf	putByte@clockPin+1
  7864  0B6B  0857               	movf	writeDAC528@dacData,w
  7865  0B6C  3185  2585         	fcall	_putByte
  7866                           
  7867                           ;VCAMIX_SPI_Master.c: 67: LATA |= 0x80 ;
  7868  0B6E  0020               	movlb	0	; select bank0
  7869  0B6F  1796               	bsf	22,7	;volatile
  7870  0B70  0008               	return
  7871  0B71                     __end_of_writeDAC528:	
  7872                           
  7873                           	psect	text6
  7874  0F61                     __ptext6:	
  7875 ;; *************** function _updateModelFromPatchMemory *****************
  7876 ;; Defined at:
  7877 ;;		line 39 in file "EEPROM_24LC256.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  mvcChannels     1    wreg     PTR unsigned char 
  7880 ;;		 -> mvcChannels(4), 
  7881 ;;  dualADSRdata    1    0[BANK0 ] PTR unsigned char 
  7882 ;;		 -> dualADSRdata0(8), 
  7883 ;;  dualADSRdata    1    1[BANK0 ] PTR unsigned char 
  7884 ;;		 -> dualADSRdata1(8), 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  mvcChannels     1    6[BANK0 ] PTR unsigned char 
  7887 ;;		 -> mvcChannels(4), 
  7888 ;;  i               2    9[BANK0 ] int 
  7889 ;;  i               2    7[BANK0 ] int 
  7890 ;;  i               2   13[BANK0 ] int 
  7891 ;;  iPatchMemory    2   11[BANK0 ] int 
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      void 
  7894 ;; Registers used:
  7895 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7901 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;Total ram usage:       15 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    3
  7908 ;; This function calls:
  7909 ;;		Nothing
  7910 ;; This function is called by:
  7911 ;;		_loadPatch
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           
  7916                           ;psect for function _updateModelFromPatchMemory
  7917  0F61                     _updateModelFromPatchMemory:	
  7918                           
  7919                           ;incstack = 0
  7920                           ; Regs used in _updateModelFromPatchMemory: [wreg+fsr1l+fsr1h+status,2+status,0]
  7921                           ;updateModelFromPatchMemory@mvcChannels stored from wreg
  7922  0F61  0020               	movlb	0	; select bank0
  7923  0F62  00A6               	movwf	updateModelFromPatchMemory@mvcChannels
  7924                           
  7925                           ;EEPROM_24LC256.c: 40: int iPatchMemoryNDX=0;
  7926  0F63  01AB               	clrf	updateModelFromPatchMemory@iPatchMemoryNDX
  7927  0F64  01AC               	clrf	updateModelFromPatchMemory@iPatchMemoryNDX+1
  7928                           
  7929                           ;EEPROM_24LC256.c: 41: for(int i=0; i<cMixFaderCount;i++) {
  7930  0F65  01AD               	clrf	updateModelFromPatchMemory@i
  7931  0F66  01AE               	clrf	updateModelFromPatchMemory@i+1
  7932  0F67  082E               	movf	updateModelFromPatchMemory@i+1,w
  7933  0F68  3A80               	xorlw	128
  7934  0F69  00A2               	movwf	??_updateModelFromPatchMemory
  7935  0F6A  3080               	movlw	128
  7936  0F6B  0222               	subwf	??_updateModelFromPatchMemory,w
  7937  0F6C  1D03               	skipz
  7938  0F6D  2F70               	goto	u2725
  7939  0F6E  3004               	movlw	4
  7940  0F6F  022D               	subwf	updateModelFromPatchMemory@i,w
  7941  0F70                     u2725:	
  7942  0F70  1803               	btfsc	3,0
  7943  0F71  2F9F               	goto	l3272
  7944  0F72                     l3266:	
  7945                           
  7946                           ;EEPROM_24LC256.c: 42: mvcChannels[i]=aPatchMemory[iPatchMemoryNDX++];
  7947  0F72  3070               	movlw	112
  7948  0F73  0020               	movlb	0	; select bank0
  7949  0F74  00A2               	movwf	??_updateModelFromPatchMemory
  7950  0F75  3023               	movlw	35
  7951  0F76  00A3               	movwf	??_updateModelFromPatchMemory+1
  7952  0F77  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  7953  0F78  0722               	addwf	??_updateModelFromPatchMemory,w
  7954  0F79  0086               	movwf	6
  7955  0F7A  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  7956  0F7B  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  7957  0F7C  0087               	movwf	7
  7958  0F7D  0801               	movf	1,w
  7959  0F7E  00A4               	movwf	??_updateModelFromPatchMemory+2
  7960  0F7F  082D               	movf	updateModelFromPatchMemory@i,w
  7961  0F80  0726               	addwf	updateModelFromPatchMemory@mvcChannels,w
  7962  0F81  00A5               	movwf	??_updateModelFromPatchMemory+3
  7963  0F82  0825               	movf	??_updateModelFromPatchMemory+3,w
  7964  0F83  0086               	movwf	6
  7965  0F84  0187               	clrf	7
  7966  0F85  0824               	movf	??_updateModelFromPatchMemory+2,w
  7967  0F86  0081               	movwf	1
  7968  0F87  3001               	movlw	1
  7969  0F88  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  7970  0F89  3000               	movlw	0
  7971  0F8A  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  7972                           
  7973                           ;EEPROM_24LC256.c: 43: faderActiveFlag[i]=0;
  7974  0F8B  082D               	movf	updateModelFromPatchMemory@i,w
  7975  0F8C  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  7976  0F8D  0086               	movwf	6
  7977  0F8E  0187               	clrf	7
  7978  0F8F  0181               	clrf	1
  7979  0F90  3001               	movlw	1
  7980  0F91  07AD               	addwf	updateModelFromPatchMemory@i,f
  7981  0F92  3000               	movlw	0
  7982  0F93  3DAE               	addwfc	updateModelFromPatchMemory@i+1,f
  7983  0F94  082E               	movf	updateModelFromPatchMemory@i+1,w
  7984  0F95  3A80               	xorlw	128
  7985  0F96  00A2               	movwf	??_updateModelFromPatchMemory
  7986  0F97  3080               	movlw	128
  7987  0F98  0222               	subwf	??_updateModelFromPatchMemory,w
  7988  0F99  1D03               	skipz
  7989  0F9A  2F9D               	goto	u2735
  7990  0F9B  3004               	movlw	4
  7991  0F9C  022D               	subwf	updateModelFromPatchMemory@i,w
  7992  0F9D                     u2735:	
  7993  0F9D  1C03               	skipc
  7994  0F9E  2F72               	goto	l3266
  7995  0F9F                     l3272:	
  7996                           
  7997                           ;EEPROM_24LC256.c: 44: }
  7998                           ;EEPROM_24LC256.c: 45: for(int i=0; i<cADSRdataBytes;i++) {
  7999  0F9F  0020               	movlb	0	; select bank0
  8000  0FA0  01A7               	clrf	updateModelFromPatchMemory@i_1229
  8001  0FA1  01A8               	clrf	updateModelFromPatchMemory@i_1229+1
  8002  0FA2  0828               	movf	updateModelFromPatchMemory@i_1229+1,w
  8003  0FA3  3A80               	xorlw	128
  8004  0FA4  00A2               	movwf	??_updateModelFromPatchMemory
  8005  0FA5  3080               	movlw	128
  8006  0FA6  0222               	subwf	??_updateModelFromPatchMemory,w
  8007  0FA7  3008               	movlw	8
  8008  0FA8  1903               	btfsc	3,2
  8009  0FA9  0227               	subwf	updateModelFromPatchMemory@i_1229,w
  8010  0FAA  1803               	btfsc	3,0
  8011  0FAB  2FD4               	goto	l3286
  8012  0FAC                     l3278:	
  8013                           
  8014                           ;EEPROM_24LC256.c: 46: dualADSRdata0[i]=aPatchMemory[iPatchMemoryNDX++];
  8015  0FAC  3070               	movlw	112
  8016  0FAD  0020               	movlb	0	; select bank0
  8017  0FAE  00A2               	movwf	??_updateModelFromPatchMemory
  8018  0FAF  3023               	movlw	35
  8019  0FB0  00A3               	movwf	??_updateModelFromPatchMemory+1
  8020  0FB1  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  8021  0FB2  0722               	addwf	??_updateModelFromPatchMemory,w
  8022  0FB3  0086               	movwf	6
  8023  0FB4  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  8024  0FB5  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  8025  0FB6  0087               	movwf	7
  8026  0FB7  0801               	movf	1,w
  8027  0FB8  00A4               	movwf	??_updateModelFromPatchMemory+2
  8028  0FB9  0827               	movf	updateModelFromPatchMemory@i_1229,w
  8029  0FBA  0720               	addwf	updateModelFromPatchMemory@dualADSRdata0,w
  8030  0FBB  00A5               	movwf	??_updateModelFromPatchMemory+3
  8031  0FBC  0825               	movf	??_updateModelFromPatchMemory+3,w
  8032  0FBD  0086               	movwf	6
  8033  0FBE  3001               	movlw	1	; select bank2/3
  8034  0FBF  0087               	movwf	7
  8035  0FC0  0824               	movf	??_updateModelFromPatchMemory+2,w
  8036  0FC1  0081               	movwf	1
  8037  0FC2  3001               	movlw	1
  8038  0FC3  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  8039  0FC4  3000               	movlw	0
  8040  0FC5  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  8041  0FC6  3001               	movlw	1
  8042  0FC7  07A7               	addwf	updateModelFromPatchMemory@i_1229,f
  8043  0FC8  3000               	movlw	0
  8044  0FC9  3DA8               	addwfc	updateModelFromPatchMemory@i_1229+1,f
  8045  0FCA  0828               	movf	updateModelFromPatchMemory@i_1229+1,w
  8046  0FCB  3A80               	xorlw	128
  8047  0FCC  00A2               	movwf	??_updateModelFromPatchMemory
  8048  0FCD  3080               	movlw	128
  8049  0FCE  0222               	subwf	??_updateModelFromPatchMemory,w
  8050  0FCF  3008               	movlw	8
  8051  0FD0  1903               	btfsc	3,2
  8052  0FD1  0227               	subwf	updateModelFromPatchMemory@i_1229,w
  8053  0FD2  1C03               	skipc
  8054  0FD3  2FAC               	goto	l3278
  8055  0FD4                     l3286:	
  8056                           
  8057                           ;EEPROM_24LC256.c: 47: }
  8058                           ;EEPROM_24LC256.c: 48: for(int i=0; i<cADSRdataBytes;i++) {
  8059  0FD4  0020               	movlb	0	; select bank0
  8060  0FD5  01A9               	clrf	updateModelFromPatchMemory@i_1230
  8061  0FD6  01AA               	clrf	updateModelFromPatchMemory@i_1230+1
  8062  0FD7                     L4:	
  8063  0FD7  082A               	movf	updateModelFromPatchMemory@i_1230+1,w
  8064  0FD8  3A80               	xorlw	128
  8065  0FD9  00A2               	movwf	??_updateModelFromPatchMemory
  8066  0FDA  3080               	movlw	128
  8067  0FDB  0222               	subwf	??_updateModelFromPatchMemory,w
  8068  0FDC  3008               	movlw	8
  8069  0FDD  1903               	btfsc	3,2
  8070  0FDE  0229               	subwf	updateModelFromPatchMemory@i_1230,w
  8071  0FDF  1803               	btfsc	3,0
  8072  0FE0  0008               	return
  8073                           
  8074                           ;EEPROM_24LC256.c: 49: dualADSRdata1[i]=aPatchMemory[iPatchMemoryNDX++];
  8075  0FE1  3070               	movlw	112
  8076  0FE2  0020               	movlb	0	; select bank0
  8077  0FE3  00A2               	movwf	??_updateModelFromPatchMemory
  8078  0FE4  3023               	movlw	35
  8079  0FE5  00A3               	movwf	??_updateModelFromPatchMemory+1
  8080  0FE6  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  8081  0FE7  0722               	addwf	??_updateModelFromPatchMemory,w
  8082  0FE8  0086               	movwf	6
  8083  0FE9  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  8084  0FEA  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  8085  0FEB  0087               	movwf	7
  8086  0FEC  0801               	movf	1,w
  8087  0FED  00A4               	movwf	??_updateModelFromPatchMemory+2
  8088  0FEE  0829               	movf	updateModelFromPatchMemory@i_1230,w
  8089  0FEF  0721               	addwf	updateModelFromPatchMemory@dualADSRdata1,w
  8090  0FF0  00A5               	movwf	??_updateModelFromPatchMemory+3
  8091  0FF1  0825               	movf	??_updateModelFromPatchMemory+3,w
  8092  0FF2  0086               	movwf	6
  8093  0FF3  3001               	movlw	1	; select bank2/3
  8094  0FF4  0087               	movwf	7
  8095  0FF5  0824               	movf	??_updateModelFromPatchMemory+2,w
  8096  0FF6  0081               	movwf	1
  8097  0FF7  3001               	movlw	1
  8098  0FF8  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  8099  0FF9  3000               	movlw	0
  8100  0FFA  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  8101  0FFB  3001               	movlw	1
  8102  0FFC  07A9               	addwf	updateModelFromPatchMemory@i_1230,f
  8103  0FFD  3000               	movlw	0
  8104  0FFE  3DAA               	addwfc	updateModelFromPatchMemory@i_1230+1,f
  8105  0FFF  2FD7               	goto	L4
  8106  1000                     __end_of_updateModelFromPatchMemory:	
  8107                           
  8108                           	psect	text7
  8109  0A3B                     __ptext7:	
  8110 ;; *************** function _initDAC528 *****************
  8111 ;; Defined at:
  8112 ;;		line 44 in file "VCAMIX_SPI_Master.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;		None
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;		None
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  1    wreg      void 
  8119 ;; Registers used:
  8120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : 0/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;Total ram usage:        1 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:    6
  8133 ;; This function calls:
  8134 ;;		_putByte
  8135 ;; This function is called by:
  8136 ;;		_main
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           
  8141                           ;psect for function _initDAC528
  8142  0A3B                     _initDAC528:	
  8143                           
  8144                           ;VCAMIX_SPI_Master.c: 48: LATA &= 0x7F ;
  8145                           
  8146                           ;incstack = 0
  8147                           ; Regs used in _initDAC528: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8148  0A3B  307F               	movlw	127
  8149  0A3C  0020               	movlb	0	; select bank0
  8150  0A3D  00D5               	movwf	??_initDAC528
  8151  0A3E  0855               	movf	??_initDAC528,w
  8152  0A3F  0596               	andwf	22,f	;volatile
  8153                           
  8154                           ;VCAMIX_SPI_Master.c: 50: putByte(0x00,0);
  8155  0A40  3000               	movlw	0
  8156  0A41  00CC               	movwf	putByte@clockPin
  8157  0A42  00CD               	movwf	putByte@clockPin+1
  8158  0A43  3000               	movlw	0
  8159  0A44  3185  2585  318A   	fcall	_putByte
  8160                           
  8161                           ;VCAMIX_SPI_Master.c: 52: putByte(0xFF,0);
  8162  0A47  3000               	movlw	0
  8163  0A48  0020               	movlb	0	; select bank0
  8164  0A49  00CC               	movwf	putByte@clockPin
  8165  0A4A  00CD               	movwf	putByte@clockPin+1
  8166  0A4B  30FF               	movlw	255
  8167  0A4C  3185  2585         	fcall	_putByte
  8168                           
  8169                           ;VCAMIX_SPI_Master.c: 54: LATA |= 0x80 ;
  8170  0A4E  0020               	movlb	0	; select bank0
  8171  0A4F  1796               	bsf	22,7	;volatile
  8172  0A50  0008               	return
  8173  0A51                     __end_of_initDAC528:	
  8174                           
  8175                           	psect	text8
  8176  0585                     __ptext8:	
  8177 ;; *************** function _putByte *****************
  8178 ;; Defined at:
  8179 ;;		line 14 in file "VCAMIX_SPI_Master.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  data            1    wreg     unsigned char 
  8182 ;;  clockPin        2   44[BANK0 ] int 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  data            1   50[BANK0 ] unsigned char 
  8185 ;;  i               1   52[BANK0 ] unsigned char 
  8186 ;;  mask            1   51[BANK0 ] unsigned char 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  1    wreg      void 
  8189 ;; Registers used:
  8190 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8196 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;Total ram usage:        9 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    5
  8203 ;; This function calls:
  8204 ;;		___awtoft
  8205 ;;		___ftmul
  8206 ;;		___fttol
  8207 ;; This function is called by:
  8208 ;;		_initDAC528
  8209 ;;		_writeDAC528
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           
  8214                           ;psect for function _putByte
  8215  0585                     _putByte:	
  8216                           
  8217                           ;incstack = 0
  8218                           ; Regs used in _putByte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8219                           ;putByte@data stored from wreg
  8220  0585  0020               	movlb	0	; select bank0
  8221  0586  00D2               	movwf	putByte@data
  8222                           
  8223                           ;VCAMIX_SPI_Master.c: 15: uint8_t i = 8;
  8224  0587  3008               	movlw	8
  8225  0588  00CE               	movwf	??_putByte
  8226  0589  084E               	movf	??_putByte,w
  8227  058A  00D4               	movwf	putByte@i
  8228  058B                     l775:	
  8229                           ;VCAMIX_SPI_Master.c: 16: uint8_t mask;
  8230                           ;VCAMIX_SPI_Master.c: 17: while(i > 0) {
  8231                           
  8232  058B  0854               	movf	putByte@i,w
  8233  058C  1903               	btfsc	3,2
  8234  058D  0008               	return
  8235                           
  8236                           ;VCAMIX_SPI_Master.c: 18: mask = 0x01 << (i - 1);
  8237  058E  3001               	movlw	1
  8238  058F  00CE               	movwf	??_putByte
  8239  0590  0854               	movf	putByte@i,w
  8240  0591  3EFF               	addlw	-1
  8241  0592  0A89               	incf	9,f
  8242  0593  2D95               	goto	u2414
  8243  0594                     u2415:	
  8244  0594  35CE               	lslf	??_putByte,f
  8245  0595                     u2414:	
  8246  0595  0B89               	decfsz	9,f
  8247  0596  2D94               	goto	u2415
  8248  0597  084E               	movf	??_putByte,w
  8249  0598  00CF               	movwf	??_putByte+1
  8250  0599  084F               	movf	??_putByte+1,w
  8251  059A  00D3               	movwf	putByte@mask
  8252                           
  8253                           ;VCAMIX_SPI_Master.c: 20: LATB &= 0xBF ;
  8254  059B  30BF               	movlw	191
  8255  059C  00CE               	movwf	??_putByte
  8256  059D  084E               	movf	??_putByte,w
  8257  059E  0597               	andwf	23,f	;volatile
  8258                           
  8259                           ;VCAMIX_SPI_Master.c: 22: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8260  059F  3018               	movlw	low (_clockMicroTime| (0+32768))
  8261  05A0  0084               	movwf	4
  8262  05A1  3090               	movlw	high (_clockMicroTime| (0+32768))
  8263  05A2  0085               	movwf	5
  8264  05A3  3F00               	moviw [0]fsr0
  8265  05A4  00A8               	movwf	___awtoft@c
  8266  05A5  3F01               	moviw [1]fsr0
  8267  05A6  00A9               	movwf	___awtoft@c+1
  8268  05A7  318B  232A  3185   	fcall	___awtoft
  8269  05AA  0020               	movlb	0	; select bank0
  8270  05AB  0828               	movf	?___awtoft,w
  8271  05AC  00B1               	movwf	___ftmul@f2
  8272  05AD  0829               	movf	?___awtoft+1,w
  8273  05AE  00B2               	movwf	___ftmul@f2+1
  8274  05AF  082A               	movf	?___awtoft+2,w
  8275  05B0  00B3               	movwf	___ftmul@f2+2
  8276  05B1  3000               	movlw	0
  8277  05B2  00AE               	movwf	___ftmul@f1
  8278  05B3  3000               	movlw	0
  8279  05B4  00AF               	movwf	___ftmul@f1+1
  8280  05B5  3041               	movlw	65
  8281  05B6  00B0               	movwf	___ftmul@f1+2
  8282  05B7  3186  263A  3185   	fcall	___ftmul
  8283  05BA  0020               	movlb	0	; select bank0
  8284  05BB  082E               	movf	?___ftmul,w
  8285  05BC  00BE               	movwf	___fttol@f1
  8286  05BD  082F               	movf	?___ftmul+1,w
  8287  05BE  00BF               	movwf	___fttol@f1+1
  8288  05BF  0830               	movf	?___ftmul+2,w
  8289  05C0  00C0               	movwf	___fttol@f1+2
  8290  05C1  318E  2640  3185   	fcall	___fttol
  8291  05C4  0020               	movlb	0	; select bank0
  8292  05C5  083E               	movf	?___fttol,w
  8293  05C6  00CE               	movwf	??_putByte
  8294  05C7  083F               	movf	?___fttol+1,w
  8295  05C8  00CF               	movwf	??_putByte+1
  8296  05C9  0840               	movf	?___fttol+2,w
  8297  05CA  00D0               	movwf	??_putByte+2
  8298  05CB  0841               	movf	?___fttol+3,w
  8299  05CC  00D1               	movwf	??_putByte+3
  8300                           
  8301                           ;VCAMIX_SPI_Master.c: 23: if (data & mask){
  8302  05CD  0020               	movlb	0	; select bank0
  8303  05CE  0852               	movf	putByte@data,w
  8304  05CF  0553               	andwf	putByte@mask,w
  8305  05D0  1903               	btfsc	3,2
  8306  05D1  2DD4               	goto	l2982
  8307                           
  8308                           ;VCAMIX_SPI_Master.c: 25: LATB |= 0x80 ;
  8309  05D2  1797               	bsf	23,7	;volatile
  8310                           
  8311                           ;VCAMIX_SPI_Master.c: 26: }else{
  8312  05D3  2DD8               	goto	l2984
  8313  05D4                     l2982:	
  8314                           
  8315                           ;VCAMIX_SPI_Master.c: 28: LATB &= 0x7F ;
  8316  05D4  307F               	movlw	127
  8317  05D5  00CE               	movwf	??_putByte
  8318  05D6  084E               	movf	??_putByte,w
  8319  05D7  0597               	andwf	23,f	;volatile
  8320  05D8                     l2984:	
  8321                           
  8322                           ;VCAMIX_SPI_Master.c: 29: }
  8323                           ;VCAMIX_SPI_Master.c: 31: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8324  05D8  3018               	movlw	low (_clockMicroTime| (0+32768))
  8325  05D9  0084               	movwf	4
  8326  05DA  3090               	movlw	high (_clockMicroTime| (0+32768))
  8327  05DB  0085               	movwf	5
  8328  05DC  3F00               	moviw [0]fsr0
  8329  05DD  00A8               	movwf	___awtoft@c
  8330  05DE  3F01               	moviw [1]fsr0
  8331  05DF  00A9               	movwf	___awtoft@c+1
  8332  05E0  318B  232A  3185   	fcall	___awtoft
  8333  05E3  0020               	movlb	0	; select bank0
  8334  05E4  0828               	movf	?___awtoft,w
  8335  05E5  00B1               	movwf	___ftmul@f2
  8336  05E6  0829               	movf	?___awtoft+1,w
  8337  05E7  00B2               	movwf	___ftmul@f2+1
  8338  05E8  082A               	movf	?___awtoft+2,w
  8339  05E9  00B3               	movwf	___ftmul@f2+2
  8340  05EA  3000               	movlw	0
  8341  05EB  00AE               	movwf	___ftmul@f1
  8342  05EC  3000               	movlw	0
  8343  05ED  00AF               	movwf	___ftmul@f1+1
  8344  05EE  3041               	movlw	65
  8345  05EF  00B0               	movwf	___ftmul@f1+2
  8346  05F0  3186  263A  3185   	fcall	___ftmul
  8347  05F3  0020               	movlb	0	; select bank0
  8348  05F4  082E               	movf	?___ftmul,w
  8349  05F5  00BE               	movwf	___fttol@f1
  8350  05F6  082F               	movf	?___ftmul+1,w
  8351  05F7  00BF               	movwf	___fttol@f1+1
  8352  05F8  0830               	movf	?___ftmul+2,w
  8353  05F9  00C0               	movwf	___fttol@f1+2
  8354  05FA  318E  2640  3185   	fcall	___fttol
  8355  05FD  0020               	movlb	0	; select bank0
  8356  05FE  083E               	movf	?___fttol,w
  8357  05FF  00CE               	movwf	??_putByte
  8358  0600  083F               	movf	?___fttol+1,w
  8359  0601  00CF               	movwf	??_putByte+1
  8360  0602  0840               	movf	?___fttol+2,w
  8361  0603  00D0               	movwf	??_putByte+2
  8362  0604  0841               	movf	?___fttol+3,w
  8363  0605  00D1               	movwf	??_putByte+3
  8364                           
  8365                           ;VCAMIX_SPI_Master.c: 33: LATB |= 0x40 ;
  8366  0606  0020               	movlb	0	; select bank0
  8367  0607  1717               	bsf	23,6	;volatile
  8368                           
  8369                           ;VCAMIX_SPI_Master.c: 35: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8370  0608  3018               	movlw	low (_clockMicroTime| (0+32768))
  8371  0609  0084               	movwf	4
  8372  060A  3090               	movlw	high (_clockMicroTime| (0+32768))
  8373  060B  0085               	movwf	5
  8374  060C  3F00               	moviw [0]fsr0
  8375  060D  00A8               	movwf	___awtoft@c
  8376  060E  3F01               	moviw [1]fsr0
  8377  060F  00A9               	movwf	___awtoft@c+1
  8378  0610  318B  232A  3185   	fcall	___awtoft
  8379  0613  0020               	movlb	0	; select bank0
  8380  0614  0828               	movf	?___awtoft,w
  8381  0615  00B1               	movwf	___ftmul@f2
  8382  0616  0829               	movf	?___awtoft+1,w
  8383  0617  00B2               	movwf	___ftmul@f2+1
  8384  0618  082A               	movf	?___awtoft+2,w
  8385  0619  00B3               	movwf	___ftmul@f2+2
  8386  061A  3000               	movlw	0
  8387  061B  00AE               	movwf	___ftmul@f1
  8388  061C  3000               	movlw	0
  8389  061D  00AF               	movwf	___ftmul@f1+1
  8390  061E  3041               	movlw	65
  8391  061F  00B0               	movwf	___ftmul@f1+2
  8392  0620  3186  263A  3185   	fcall	___ftmul
  8393  0623  0020               	movlb	0	; select bank0
  8394  0624  082E               	movf	?___ftmul,w
  8395  0625  00BE               	movwf	___fttol@f1
  8396  0626  082F               	movf	?___ftmul+1,w
  8397  0627  00BF               	movwf	___fttol@f1+1
  8398  0628  0830               	movf	?___ftmul+2,w
  8399  0629  00C0               	movwf	___fttol@f1+2
  8400  062A  318E  2640  3185   	fcall	___fttol
  8401  062D  0020               	movlb	0	; select bank0
  8402  062E  083E               	movf	?___fttol,w
  8403  062F  00CE               	movwf	??_putByte
  8404  0630  083F               	movf	?___fttol+1,w
  8405  0631  00CF               	movwf	??_putByte+1
  8406  0632  0840               	movf	?___fttol+2,w
  8407  0633  00D0               	movwf	??_putByte+2
  8408  0634  0841               	movf	?___fttol+3,w
  8409  0635  00D1               	movwf	??_putByte+3
  8410                           
  8411                           ;VCAMIX_SPI_Master.c: 36: --i;
  8412  0636  3001               	movlw	1
  8413  0637  0020               	movlb	0	; select bank0
  8414  0638  02D4               	subwf	putByte@i,f
  8415  0639  2D8B               	goto	l775
  8416  063A                     __end_of_putByte:	
  8417                           
  8418                           	psect	text9
  8419  0E40                     __ptext9:	
  8420 ;; *************** function ___fttol *****************
  8421 ;; Defined at:
  8422 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;  f1              3   30[BANK0 ] float 
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  lval            4   39[BANK0 ] unsigned long 
  8427 ;;  exp1            1   43[BANK0 ] unsigned char 
  8428 ;;  sign1           1   38[BANK0 ] unsigned char 
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  4   30[BANK0 ] long 
  8431 ;; Registers used:
  8432 ;;		wreg, status,2, status,0
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8438 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;Total ram usage:       14 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    3
  8445 ;; This function calls:
  8446 ;;		Nothing
  8447 ;; This function is called by:
  8448 ;;		_main
  8449 ;;		_putByte
  8450 ;;		_LED7SegDisplayValue
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           
  8455                           ;psect for function ___fttol
  8456  0E40                     ___fttol:	
  8457                           
  8458                           ;incstack = 0
  8459                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8460  0E40  0020               	movlb	0	; select bank0
  8461  0E41  083E               	movf	___fttol@f1,w
  8462  0E42  00C2               	movwf	??___fttol
  8463  0E43  083F               	movf	___fttol@f1+1,w
  8464  0E44  00C3               	movwf	??___fttol+1
  8465  0E45  0840               	movf	___fttol@f1+2,w
  8466  0E46  00C4               	movwf	??___fttol+2
  8467  0E47  1003               	clrc
  8468  0E48  0D43               	rlf	??___fttol+1,w
  8469  0E49  0D44               	rlf	??___fttol+2,w
  8470  0E4A  00C5               	movwf	??___fttol+3
  8471  0E4B  0845               	movf	??___fttol+3,w
  8472  0E4C  00CB               	movwf	___fttol@exp1
  8473  0E4D  084B               	movf	___fttol@exp1,w
  8474  0E4E  1D03               	btfss	3,2
  8475  0E4F  2E59               	goto	l2924
  8476  0E50  3000               	movlw	0
  8477  0E51  00C1               	movwf	?___fttol+3
  8478  0E52  3000               	movlw	0
  8479  0E53  00C0               	movwf	?___fttol+2
  8480  0E54  3000               	movlw	0
  8481  0E55  00BF               	movwf	?___fttol+1
  8482  0E56  3000               	movlw	0
  8483  0E57  00BE               	movwf	?___fttol
  8484  0E58  0008               	return
  8485  0E59                     l2924:	
  8486  0E59  083E               	movf	___fttol@f1,w
  8487  0E5A  00C2               	movwf	??___fttol
  8488  0E5B  083F               	movf	___fttol@f1+1,w
  8489  0E5C  00C3               	movwf	??___fttol+1
  8490  0E5D  0840               	movf	___fttol@f1+2,w
  8491  0E5E  00C4               	movwf	??___fttol+2
  8492  0E5F  3017               	movlw	23
  8493  0E60                     u2305:	
  8494  0E60  36C4               	lsrf	??___fttol+2,f
  8495  0E61  0CC3               	rrf	??___fttol+1,f
  8496  0E62  0CC2               	rrf	??___fttol,f
  8497  0E63  0B89               	decfsz	9,f
  8498  0E64  2E60               	goto	u2305
  8499  0E65  0842               	movf	??___fttol,w
  8500  0E66  00C5               	movwf	??___fttol+3
  8501  0E67  0845               	movf	??___fttol+3,w
  8502  0E68  00C6               	movwf	___fttol@sign1
  8503  0E69  17BF               	bsf	___fttol@f1+1,7
  8504  0E6A  30FF               	movlw	255
  8505  0E6B  05BE               	andwf	___fttol@f1,f
  8506  0E6C  30FF               	movlw	255
  8507  0E6D  05BF               	andwf	___fttol@f1+1,f
  8508  0E6E  3000               	movlw	0
  8509  0E6F  05C0               	andwf	___fttol@f1+2,f
  8510  0E70  083E               	movf	___fttol@f1,w
  8511  0E71  00C7               	movwf	___fttol@lval
  8512  0E72  083F               	movf	___fttol@f1+1,w
  8513  0E73  00C8               	movwf	___fttol@lval+1
  8514  0E74  0840               	movf	___fttol@f1+2,w
  8515  0E75  00C9               	movwf	___fttol@lval+2
  8516  0E76  01CA               	clrf	___fttol@lval+3
  8517  0E77  308E               	movlw	142
  8518  0E78  02CB               	subwf	___fttol@exp1,f
  8519  0E79  1FCB               	btfss	___fttol@exp1,7
  8520  0E7A  2E97               	goto	l2944
  8521  0E7B  084B               	movf	___fttol@exp1,w
  8522  0E7C  3A80               	xorlw	128
  8523  0E7D  3E8F               	addlw	143
  8524  0E7E  1803               	skipnc
  8525  0E7F  2E89               	goto	l2942
  8526  0E80  3000               	movlw	0
  8527  0E81  00C1               	movwf	?___fttol+3
  8528  0E82  3000               	movlw	0
  8529  0E83  00C0               	movwf	?___fttol+2
  8530  0E84  3000               	movlw	0
  8531  0E85  00BF               	movwf	?___fttol+1
  8532  0E86  3000               	movlw	0
  8533  0E87  00BE               	movwf	?___fttol
  8534  0E88  0008               	return
  8535  0E89                     l2942:	
  8536  0E89  3001               	movlw	1
  8537  0E8A                     u2335:	
  8538  0E8A  36CA               	lsrf	___fttol@lval+3,f
  8539  0E8B  0CC9               	rrf	___fttol@lval+2,f
  8540  0E8C  0CC8               	rrf	___fttol@lval+1,f
  8541  0E8D  0CC7               	rrf	___fttol@lval,f
  8542  0E8E  0B89               	decfsz	9,f
  8543  0E8F  2E8A               	goto	u2335
  8544  0E90  3001               	movlw	1
  8545  0E91  00C2               	movwf	??___fttol
  8546  0E92  0842               	movf	??___fttol,w
  8547  0E93  07CB               	addwf	___fttol@exp1,f
  8548  0E94  1903               	btfsc	3,2
  8549  0E95  2EB0               	goto	l2952
  8550  0E96  2E89               	goto	l2942
  8551  0E97                     l2944:	
  8552  0E97  3018               	movlw	24
  8553  0E98  024B               	subwf	___fttol@exp1,w
  8554  0E99  1C03               	skipc
  8555  0E9A  2EAD               	goto	l1202
  8556  0E9B  3000               	movlw	0
  8557  0E9C  00C1               	movwf	?___fttol+3
  8558  0E9D  3000               	movlw	0
  8559  0E9E  00C0               	movwf	?___fttol+2
  8560  0E9F  3000               	movlw	0
  8561  0EA0  00BF               	movwf	?___fttol+1
  8562  0EA1  3000               	movlw	0
  8563  0EA2  00BE               	movwf	?___fttol
  8564  0EA3  0008               	return
  8565  0EA4                     l2950:	
  8566  0EA4  3001               	movlw	1
  8567  0EA5                     u2365:	
  8568  0EA5  35C7               	lslf	___fttol@lval,f
  8569  0EA6  0DC8               	rlf	___fttol@lval+1,f
  8570  0EA7  0DC9               	rlf	___fttol@lval+2,f
  8571  0EA8  0DCA               	rlf	___fttol@lval+3,f
  8572  0EA9  0B89               	decfsz	9,f
  8573  0EAA  2EA5               	goto	u2365
  8574  0EAB  3001               	movlw	1
  8575  0EAC  02CB               	subwf	___fttol@exp1,f
  8576  0EAD                     l1202:	
  8577  0EAD  084B               	movf	___fttol@exp1,w
  8578  0EAE  1D03               	btfss	3,2
  8579  0EAF  2EA4               	goto	l2950
  8580  0EB0                     l2952:	
  8581  0EB0  0846               	movf	___fttol@sign1,w
  8582  0EB1  1903               	btfsc	3,2
  8583  0EB2  2EBE               	goto	l2956
  8584  0EB3  09C7               	comf	___fttol@lval,f
  8585  0EB4  09C8               	comf	___fttol@lval+1,f
  8586  0EB5  09C9               	comf	___fttol@lval+2,f
  8587  0EB6  09CA               	comf	___fttol@lval+3,f
  8588  0EB7  0AC7               	incf	___fttol@lval,f
  8589  0EB8  1903               	skipnz
  8590  0EB9  0AC8               	incf	___fttol@lval+1,f
  8591  0EBA  1903               	skipnz
  8592  0EBB  0AC9               	incf	___fttol@lval+2,f
  8593  0EBC  1903               	skipnz
  8594  0EBD  0ACA               	incf	___fttol@lval+3,f
  8595  0EBE                     l2956:	
  8596  0EBE  084A               	movf	___fttol@lval+3,w
  8597  0EBF  00C1               	movwf	?___fttol+3
  8598  0EC0  0849               	movf	___fttol@lval+2,w
  8599  0EC1  00C0               	movwf	?___fttol+2
  8600  0EC2  0848               	movf	___fttol@lval+1,w
  8601  0EC3  00BF               	movwf	?___fttol+1
  8602  0EC4  0847               	movf	___fttol@lval,w
  8603  0EC5  00BE               	movwf	?___fttol
  8604  0EC6  0008               	return
  8605  0EC7                     __end_of___fttol:	
  8606                           
  8607                           	psect	text10
  8608  063A                     __ptext10:	
  8609 ;; *************** function ___ftmul *****************
  8610 ;; Defined at:
  8611 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;  f1              3   14[BANK0 ] float 
  8614 ;;  f2              3   17[BANK0 ] float 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8617 ;;  sign            1   29[BANK0 ] unsigned char 
  8618 ;;  cntr            1   28[BANK0 ] unsigned char 
  8619 ;;  exp             1   24[BANK0 ] unsigned char 
  8620 ;; Return value:  Size  Location     Type
  8621 ;;                  3   14[BANK0 ] float 
  8622 ;; Registers used:
  8623 ;;		wreg, status,2, status,0, pclath, cstack
  8624 ;; Tracked objects:
  8625 ;;		On entry : 0/0
  8626 ;;		On exit  : 0/0
  8627 ;;		Unchanged: 0/0
  8628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8629 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;Total ram usage:       16 bytes
  8634 ;; Hardware stack levels used:    1
  8635 ;; Hardware stack levels required when called:    4
  8636 ;; This function calls:
  8637 ;;		___ftpack
  8638 ;; This function is called by:
  8639 ;;		_putByte
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function ___ftmul
  8645  063A                     ___ftmul:	
  8646                           
  8647                           ;incstack = 0
  8648                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8649  063A  0020               	movlb	0	; select bank0
  8650  063B  082E               	movf	___ftmul@f1,w
  8651  063C  00B4               	movwf	??___ftmul
  8652  063D  082F               	movf	___ftmul@f1+1,w
  8653  063E  00B5               	movwf	??___ftmul+1
  8654  063F  0830               	movf	___ftmul@f1+2,w
  8655  0640  00B6               	movwf	??___ftmul+2
  8656  0641  1003               	clrc
  8657  0642  0D35               	rlf	??___ftmul+1,w
  8658  0643  0D36               	rlf	??___ftmul+2,w
  8659  0644  00B7               	movwf	??___ftmul+3
  8660  0645  0837               	movf	??___ftmul+3,w
  8661  0646  00B8               	movwf	___ftmul@exp
  8662  0647  0838               	movf	___ftmul@exp,w
  8663  0648  1D03               	btfss	3,2
  8664  0649  2E51               	goto	l2874
  8665  064A  3000               	movlw	0
  8666  064B  00AE               	movwf	?___ftmul
  8667  064C  3000               	movlw	0
  8668  064D  00AF               	movwf	?___ftmul+1
  8669  064E  3000               	movlw	0
  8670  064F  00B0               	movwf	?___ftmul+2
  8671  0650  0008               	return
  8672  0651                     l2874:	
  8673  0651  0831               	movf	___ftmul@f2,w
  8674  0652  00B4               	movwf	??___ftmul
  8675  0653  0832               	movf	___ftmul@f2+1,w
  8676  0654  00B5               	movwf	??___ftmul+1
  8677  0655  0833               	movf	___ftmul@f2+2,w
  8678  0656  00B6               	movwf	??___ftmul+2
  8679  0657  1003               	clrc
  8680  0658  0D35               	rlf	??___ftmul+1,w
  8681  0659  0D36               	rlf	??___ftmul+2,w
  8682  065A  00B7               	movwf	??___ftmul+3
  8683  065B  0837               	movf	??___ftmul+3,w
  8684  065C  00BD               	movwf	___ftmul@sign
  8685  065D  083D               	movf	___ftmul@sign,w
  8686  065E  1D03               	btfss	3,2
  8687  065F  2E67               	goto	l2880
  8688  0660  3000               	movlw	0
  8689  0661  00AE               	movwf	?___ftmul
  8690  0662  3000               	movlw	0
  8691  0663  00AF               	movwf	?___ftmul+1
  8692  0664  3000               	movlw	0
  8693  0665  00B0               	movwf	?___ftmul+2
  8694  0666  0008               	return
  8695  0667                     l2880:	
  8696  0667  083D               	movf	___ftmul@sign,w
  8697  0668  3E7B               	addlw	123
  8698  0669  00B4               	movwf	??___ftmul
  8699  066A  0834               	movf	??___ftmul,w
  8700  066B  07B8               	addwf	___ftmul@exp,f
  8701  066C  082E               	movf	___ftmul@f1,w
  8702  066D  00B4               	movwf	??___ftmul
  8703  066E  082F               	movf	___ftmul@f1+1,w
  8704  066F  00B5               	movwf	??___ftmul+1
  8705  0670  0830               	movf	___ftmul@f1+2,w
  8706  0671  00B6               	movwf	??___ftmul+2
  8707  0672  3010               	movlw	16
  8708  0673                     u2195:	
  8709  0673  36B6               	lsrf	??___ftmul+2,f
  8710  0674  0CB5               	rrf	??___ftmul+1,f
  8711  0675  0CB4               	rrf	??___ftmul,f
  8712  0676  0B89               	decfsz	9,f
  8713  0677  2E73               	goto	u2195
  8714  0678  0834               	movf	??___ftmul,w
  8715  0679  00B7               	movwf	??___ftmul+3
  8716  067A  0837               	movf	??___ftmul+3,w
  8717  067B  00BD               	movwf	___ftmul@sign
  8718  067C  0831               	movf	___ftmul@f2,w
  8719  067D  00B4               	movwf	??___ftmul
  8720  067E  0832               	movf	___ftmul@f2+1,w
  8721  067F  00B5               	movwf	??___ftmul+1
  8722  0680  0833               	movf	___ftmul@f2+2,w
  8723  0681  00B6               	movwf	??___ftmul+2
  8724  0682  3010               	movlw	16
  8725  0683                     u2205:	
  8726  0683  36B6               	lsrf	??___ftmul+2,f
  8727  0684  0CB5               	rrf	??___ftmul+1,f
  8728  0685  0CB4               	rrf	??___ftmul,f
  8729  0686  0B89               	decfsz	9,f
  8730  0687  2E83               	goto	u2205
  8731  0688  0834               	movf	??___ftmul,w
  8732  0689  00B7               	movwf	??___ftmul+3
  8733  068A  0837               	movf	??___ftmul+3,w
  8734  068B  06BD               	xorwf	___ftmul@sign,f
  8735  068C  3080               	movlw	128
  8736  068D  00B4               	movwf	??___ftmul
  8737  068E  0834               	movf	??___ftmul,w
  8738  068F  05BD               	andwf	___ftmul@sign,f
  8739  0690  17AF               	bsf	___ftmul@f1+1,7
  8740  0691  17B2               	bsf	___ftmul@f2+1,7
  8741  0692  30FF               	movlw	255
  8742  0693  05B1               	andwf	___ftmul@f2,f
  8743  0694  30FF               	movlw	255
  8744  0695  05B2               	andwf	___ftmul@f2+1,f
  8745  0696  3000               	movlw	0
  8746  0697  05B3               	andwf	___ftmul@f2+2,f
  8747  0698  3000               	movlw	0
  8748  0699  00B9               	movwf	___ftmul@f3_as_product
  8749  069A  3000               	movlw	0
  8750  069B  00BA               	movwf	___ftmul@f3_as_product+1
  8751  069C  3000               	movlw	0
  8752  069D  00BB               	movwf	___ftmul@f3_as_product+2
  8753  069E  3007               	movlw	7
  8754  069F  00B4               	movwf	??___ftmul
  8755  06A0  0834               	movf	??___ftmul,w
  8756  06A1  00BC               	movwf	___ftmul@cntr
  8757  06A2                     l2892:	
  8758  06A2  1C2E               	btfss	___ftmul@f1,0
  8759  06A3  2EAA               	goto	l2896
  8760  06A4  0831               	movf	___ftmul@f2,w
  8761  06A5  07B9               	addwf	___ftmul@f3_as_product,f
  8762  06A6  0832               	movf	___ftmul@f2+1,w
  8763  06A7  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8764  06A8  0833               	movf	___ftmul@f2+2,w
  8765  06A9  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8766  06AA                     l2896:	
  8767  06AA  3001               	movlw	1
  8768  06AB                     u2225:	
  8769  06AB  36B0               	lsrf	___ftmul@f1+2,f
  8770  06AC  0CAF               	rrf	___ftmul@f1+1,f
  8771  06AD  0CAE               	rrf	___ftmul@f1,f
  8772  06AE  0B89               	decfsz	9,f
  8773  06AF  2EAB               	goto	u2225
  8774  06B0  3001               	movlw	1
  8775  06B1                     u2235:	
  8776  06B1  35B1               	lslf	___ftmul@f2,f
  8777  06B2  0DB2               	rlf	___ftmul@f2+1,f
  8778  06B3  0DB3               	rlf	___ftmul@f2+2,f
  8779  06B4  0B89               	decfsz	9,f
  8780  06B5  2EB1               	goto	u2235
  8781  06B6  3001               	movlw	1
  8782  06B7  02BC               	subwf	___ftmul@cntr,f
  8783  06B8  1D03               	btfss	3,2
  8784  06B9  2EA2               	goto	l2892
  8785  06BA  3009               	movlw	9
  8786  06BB  00B4               	movwf	??___ftmul
  8787  06BC  0834               	movf	??___ftmul,w
  8788  06BD  00BC               	movwf	___ftmul@cntr
  8789  06BE                     l2904:	
  8790  06BE  1C2E               	btfss	___ftmul@f1,0
  8791  06BF  2EC6               	goto	l2908
  8792  06C0  0831               	movf	___ftmul@f2,w
  8793  06C1  07B9               	addwf	___ftmul@f3_as_product,f
  8794  06C2  0832               	movf	___ftmul@f2+1,w
  8795  06C3  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8796  06C4  0833               	movf	___ftmul@f2+2,w
  8797  06C5  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8798  06C6                     l2908:	
  8799  06C6  3001               	movlw	1
  8800  06C7                     u2265:	
  8801  06C7  36B0               	lsrf	___ftmul@f1+2,f
  8802  06C8  0CAF               	rrf	___ftmul@f1+1,f
  8803  06C9  0CAE               	rrf	___ftmul@f1,f
  8804  06CA  0B89               	decfsz	9,f
  8805  06CB  2EC7               	goto	u2265
  8806  06CC  3001               	movlw	1
  8807  06CD                     u2275:	
  8808  06CD  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8809  06CE  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8810  06CF  0CB9               	rrf	___ftmul@f3_as_product,f
  8811  06D0  0B89               	decfsz	9,f
  8812  06D1  2ECD               	goto	u2275
  8813  06D2  3001               	movlw	1
  8814  06D3  02BC               	subwf	___ftmul@cntr,f
  8815  06D4  1D03               	btfss	3,2
  8816  06D5  2EBE               	goto	l2904
  8817  06D6  0839               	movf	___ftmul@f3_as_product,w
  8818  06D7  00A0               	movwf	___ftpack@arg
  8819  06D8  083A               	movf	___ftmul@f3_as_product+1,w
  8820  06D9  00A1               	movwf	___ftpack@arg+1
  8821  06DA  083B               	movf	___ftmul@f3_as_product+2,w
  8822  06DB  00A2               	movwf	___ftpack@arg+2
  8823  06DC  0838               	movf	___ftmul@exp,w
  8824  06DD  00B4               	movwf	??___ftmul
  8825  06DE  0834               	movf	??___ftmul,w
  8826  06DF  00A3               	movwf	___ftpack@exp
  8827  06E0  083D               	movf	___ftmul@sign,w
  8828  06E1  00B5               	movwf	??___ftmul+1
  8829  06E2  0835               	movf	??___ftmul+1,w
  8830  06E3  00A4               	movwf	___ftpack@sign
  8831  06E4  3187  2797         	fcall	___ftpack
  8832  06E6  0020               	movlb	0	; select bank0
  8833  06E7  0820               	movf	?___ftpack,w
  8834  06E8  00AE               	movwf	?___ftmul
  8835  06E9  0821               	movf	?___ftpack+1,w
  8836  06EA  00AF               	movwf	?___ftmul+1
  8837  06EB  0822               	movf	?___ftpack+2,w
  8838  06EC  00B0               	movwf	?___ftmul+2
  8839  06ED  0008               	return
  8840  06EE                     __end_of___ftmul:	
  8841                           
  8842                           	psect	text11
  8843  0B2A                     __ptext11:	
  8844 ;; *************** function ___awtoft *****************
  8845 ;; Defined at:
  8846 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  c               2    8[BANK0 ] int 
  8849 ;; Auto vars:     Size  Location     Type
  8850 ;;  sign            1   13[BANK0 ] unsigned char 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;                  3    8[BANK0 ] float 
  8853 ;; Registers used:
  8854 ;;		wreg, status,2, status,0, pclath, cstack
  8855 ;; Tracked objects:
  8856 ;;		On entry : 0/0
  8857 ;;		On exit  : 0/0
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8860 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;Total ram usage:        6 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; Hardware stack levels required when called:    4
  8867 ;; This function calls:
  8868 ;;		___ftpack
  8869 ;; This function is called by:
  8870 ;;		_main
  8871 ;;		_putByte
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           
  8876                           ;psect for function ___awtoft
  8877  0B2A                     ___awtoft:	
  8878                           
  8879                           ;incstack = 0
  8880                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8881  0B2A  0020               	movlb	0	; select bank0
  8882  0B2B  01AD               	clrf	___awtoft@sign
  8883  0B2C  1FA9               	btfss	___awtoft@c+1,7
  8884  0B2D  2B35               	goto	l2864
  8885  0B2E  09A8               	comf	___awtoft@c,f
  8886  0B2F  09A9               	comf	___awtoft@c+1,f
  8887  0B30  0AA8               	incf	___awtoft@c,f
  8888  0B31  1903               	skipnz
  8889  0B32  0AA9               	incf	___awtoft@c+1,f
  8890  0B33  01AD               	clrf	___awtoft@sign
  8891  0B34  0AAD               	incf	___awtoft@sign,f
  8892  0B35                     l2864:	
  8893  0B35  0828               	movf	___awtoft@c,w
  8894  0B36  00A0               	movwf	___ftpack@arg
  8895  0B37  0829               	movf	___awtoft@c+1,w
  8896  0B38  00A1               	movwf	___ftpack@arg+1
  8897  0B39  01A2               	clrf	___ftpack@arg+2
  8898  0B3A  308E               	movlw	142
  8899  0B3B  00AB               	movwf	??___awtoft
  8900  0B3C  082B               	movf	??___awtoft,w
  8901  0B3D  00A3               	movwf	___ftpack@exp
  8902  0B3E  082D               	movf	___awtoft@sign,w
  8903  0B3F  00AC               	movwf	??___awtoft+1
  8904  0B40  082C               	movf	??___awtoft+1,w
  8905  0B41  00A4               	movwf	___ftpack@sign
  8906  0B42  3187  2797         	fcall	___ftpack
  8907  0B44  0020               	movlb	0	; select bank0
  8908  0B45  0820               	movf	?___ftpack,w
  8909  0B46  00A8               	movwf	?___awtoft
  8910  0B47  0821               	movf	?___ftpack+1,w
  8911  0B48  00A9               	movwf	?___awtoft+1
  8912  0B49  0822               	movf	?___ftpack+2,w
  8913  0B4A  00AA               	movwf	?___awtoft+2
  8914  0B4B  0008               	return
  8915  0B4C                     __end_of___awtoft:	
  8916                           
  8917                           	psect	text12
  8918  0DBD                     __ptext12:	
  8919 ;; *************** function _blinkyLoop *****************
  8920 ;; Defined at:
  8921 ;;		line 217 in file "main.c"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;  maxLoops        2   32[BANK0 ] int 
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;  loopCount       2   38[BANK0 ] int 
  8926 ;;  delayTime       2   36[BANK0 ] int 
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      void 
  8929 ;; Registers used:
  8930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8936 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8937 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8938 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8939 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8940 ;;Total ram usage:        8 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    6
  8943 ;; This function calls:
  8944 ;;		_MYI2C_Write2LEDBytes
  8945 ;;		___wmul
  8946 ;;		_delay
  8947 ;; This function is called by:
  8948 ;;		_main
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           
  8953                           ;psect for function _blinkyLoop
  8954  0DBD                     _blinkyLoop:	
  8955                           
  8956                           ;main.c: 218: int loopCount=maxLoops;
  8957                           
  8958                           ;incstack = 0
  8959                           ; Regs used in _blinkyLoop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8960  0DBD  0020               	movlb	0	; select bank0
  8961  0DBE  0841               	movf	blinkyLoop@maxLoops+1,w
  8962  0DBF  00C7               	movwf	blinkyLoop@loopCount+1
  8963  0DC0  0840               	movf	blinkyLoop@maxLoops,w
  8964  0DC1  00C6               	movwf	blinkyLoop@loopCount
  8965                           
  8966                           ;main.c: 219: int delayTime;
  8967                           ;main.c: 221: ODCONB &= 0xF0;
  8968  0DC2  30F0               	movlw	240
  8969  0DC3  00C2               	movwf	??_blinkyLoop
  8970  0DC4  0842               	movf	??_blinkyLoop,w
  8971  0DC5  003E               	movlb	30	; select bank30
  8972  0DC6  05C5               	andwf	69,f	;volatile
  8973                           
  8974                           ;main.c: 222: ODCONC &= 0x1F;
  8975  0DC7  301F               	movlw	31
  8976  0DC8  0020               	movlb	0	; select bank0
  8977  0DC9  00C2               	movwf	??_blinkyLoop
  8978  0DCA  0842               	movf	??_blinkyLoop,w
  8979  0DCB  003E               	movlb	30	; select bank30
  8980  0DCC  05D0               	andwf	80,f	;volatile
  8981  0DCD                     l4338:	
  8982                           ;main.c: 224: while(loopCount>0){
  8983                           
  8984  0DCD  0020               	movlb	0	; select bank0
  8985  0DCE  0847               	movf	blinkyLoop@loopCount+1,w
  8986  0DCF  3A80               	xorlw	128
  8987  0DD0  00C2               	movwf	??_blinkyLoop
  8988  0DD1  3080               	movlw	128
  8989  0DD2  0242               	subwf	??_blinkyLoop,w
  8990  0DD3  1D03               	skipz
  8991  0DD4  2DD7               	goto	u4115
  8992  0DD5  3001               	movlw	1
  8993  0DD6  0246               	subwf	blinkyLoop@loopCount,w
  8994  0DD7                     u4115:	
  8995  0DD7  1C03               	btfss	3,0
  8996  0DD8  2E23               	goto	l4340
  8997                           
  8998                           ;main.c: 225: delayTime=loopCount*400;
  8999  0DD9  0020               	movlb	0	; select bank0
  9000  0DDA  0847               	movf	blinkyLoop@loopCount+1,w
  9001  0DDB  00A1               	movwf	___wmul@multiplier+1
  9002  0DDC  0846               	movf	blinkyLoop@loopCount,w
  9003  0DDD  00A0               	movwf	___wmul@multiplier
  9004  0DDE  3090               	movlw	144
  9005  0DDF  00A2               	movwf	___wmul@multiplicand
  9006  0DE0  3001               	movlw	1
  9007  0DE1  00A3               	movwf	___wmul@multiplicand+1
  9008  0DE2  318A  22B4  318D   	fcall	___wmul
  9009  0DE5  0020               	movlb	0	; select bank0
  9010  0DE6  0821               	movf	?___wmul+1,w
  9011  0DE7  00C5               	movwf	blinkyLoop@delayTime+1
  9012  0DE8  0820               	movf	?___wmul,w
  9013  0DE9  00C4               	movwf	blinkyLoop@delayTime
  9014                           
  9015                           ;main.c: 228: LATB |= 0x0F;
  9016  0DEA  300F               	movlw	15
  9017  0DEB  00C2               	movwf	??_blinkyLoop
  9018  0DEC  0842               	movf	??_blinkyLoop,w
  9019  0DED  0497               	iorwf	23,f	;volatile
  9020                           
  9021                           ;main.c: 230: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0xFF,0xFF);
  9022  0DEE  30FF               	movlw	255
  9023  0DEF  00C2               	movwf	??_blinkyLoop
  9024  0DF0  0842               	movf	??_blinkyLoop,w
  9025  0DF1  00AE               	movwf	MYI2C_Write2LEDBytes@MSBWriteByte
  9026  0DF2  30FF               	movlw	255
  9027  0DF3  00C3               	movwf	??_blinkyLoop+1
  9028  0DF4  0843               	movf	??_blinkyLoop+1,w
  9029  0DF5  00AF               	movwf	MYI2C_Write2LEDBytes@LSBWriteByte
  9030  0DF6  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9031  0DF7  0084               	movwf	4
  9032  0DF8  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9033  0DF9  0085               	movwf	5
  9034  0DFA  0800               	movf	0,w	;code access
  9035  0DFB  318C  24EA  318D   	fcall	_MYI2C_Write2LEDBytes
  9036                           
  9037                           ;main.c: 231: delay(delayTime);
  9038  0DFE  0020               	movlb	0	; select bank0
  9039  0DFF  0845               	movf	blinkyLoop@delayTime+1,w
  9040  0E00  00A7               	movwf	delay@delaytime+1
  9041  0E01  0844               	movf	blinkyLoop@delayTime,w
  9042  0E02  00A6               	movwf	delay@delaytime
  9043  0E03  318C  2497  318D   	fcall	_delay
  9044                           
  9045                           ;main.c: 233: LATB &= 0xF0;
  9046  0E06  30F0               	movlw	240
  9047  0E07  0020               	movlb	0	; select bank0
  9048  0E08  00C2               	movwf	??_blinkyLoop
  9049  0E09  0842               	movf	??_blinkyLoop,w
  9050  0E0A  0597               	andwf	23,f	;volatile
  9051                           
  9052                           ;main.c: 235: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0x0,0x0);
  9053  0E0B  01AE               	clrf	MYI2C_Write2LEDBytes@MSBWriteByte
  9054  0E0C  01AF               	clrf	MYI2C_Write2LEDBytes@LSBWriteByte
  9055  0E0D  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9056  0E0E  0084               	movwf	4
  9057  0E0F  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9058  0E10  0085               	movwf	5
  9059  0E11  0800               	movf	0,w	;code access
  9060  0E12  318C  24EA  318D   	fcall	_MYI2C_Write2LEDBytes
  9061                           
  9062                           ;main.c: 236: delay(delayTime);
  9063  0E15  0020               	movlb	0	; select bank0
  9064  0E16  0845               	movf	blinkyLoop@delayTime+1,w
  9065  0E17  00A7               	movwf	delay@delaytime+1
  9066  0E18  0844               	movf	blinkyLoop@delayTime,w
  9067  0E19  00A6               	movwf	delay@delaytime
  9068  0E1A  318C  2497  318D   	fcall	_delay
  9069                           
  9070                           ;main.c: 238: loopCount--;
  9071  0E1D  30FF               	movlw	255
  9072  0E1E  0020               	movlb	0	; select bank0
  9073  0E1F  07C6               	addwf	blinkyLoop@loopCount,f
  9074  0E20  30FF               	movlw	255
  9075  0E21  3DC7               	addwfc	blinkyLoop@loopCount+1,f
  9076  0E22  2DCD               	goto	l4338
  9077  0E23                     l4340:	
  9078                           
  9079                           ;main.c: 239: }
  9080                           ;main.c: 240: LATB |= 0x0F;
  9081  0E23  300F               	movlw	15
  9082  0E24  0020               	movlb	0	; select bank0
  9083  0E25  00C2               	movwf	??_blinkyLoop
  9084  0E26  0842               	movf	??_blinkyLoop,w
  9085  0E27  0497               	iorwf	23,f	;volatile
  9086                           
  9087                           ;main.c: 242: delay(5000);
  9088  0E28  3088               	movlw	136
  9089  0E29  00A6               	movwf	delay@delaytime
  9090  0E2A  3013               	movlw	19
  9091  0E2B  00A7               	movwf	delay@delaytime+1
  9092  0E2C  318C  2497  318D   	fcall	_delay
  9093                           
  9094                           ;main.c: 243: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0xFF,0xFF);
  9095  0E2F  30FF               	movlw	255
  9096  0E30  0020               	movlb	0	; select bank0
  9097  0E31  00C2               	movwf	??_blinkyLoop
  9098  0E32  0842               	movf	??_blinkyLoop,w
  9099  0E33  00AE               	movwf	MYI2C_Write2LEDBytes@MSBWriteByte
  9100  0E34  30FF               	movlw	255
  9101  0E35  00C3               	movwf	??_blinkyLoop+1
  9102  0E36  0843               	movf	??_blinkyLoop+1,w
  9103  0E37  00AF               	movwf	MYI2C_Write2LEDBytes@LSBWriteByte
  9104  0E38  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9105  0E39  0084               	movwf	4
  9106  0E3A  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9107  0E3B  0085               	movwf	5
  9108  0E3C  0800               	movf	0,w	;code access
  9109  0E3D  318C  24EA         	fcall	_MYI2C_Write2LEDBytes
  9110  0E3F  0008               	return
  9111  0E40                     __end_of_blinkyLoop:	
  9112                           ;main.c: 244: return;
  9113                           
  9114                           
  9115                           	psect	text13
  9116  0CEA                     __ptext13:	
  9117 ;; *************** function _MYI2C_Write2LEDBytes *****************
  9118 ;; Defined at:
  9119 ;;		line 749 in file "main.c"
  9120 ;; Parameters:    Size  Location     Type
  9121 ;;  slaveDeviceA    1    wreg     unsigned char 
  9122 ;;  MSBWriteByte    1   14[BANK0 ] unsigned char 
  9123 ;;  LSBWriteByte    1   15[BANK0 ] unsigned char 
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;  slaveDeviceA    1   22[BANK0 ] unsigned char 
  9126 ;;  writeBuffer     3   28[BANK0 ] unsigned char [3]
  9127 ;;  timeOut         2   25[BANK0 ] unsigned int 
  9128 ;;  counter         2   23[BANK0 ] unsigned int 
  9129 ;;  nCount          2   20[BANK0 ] unsigned int 
  9130 ;;  pData           2    0        PTR unsigned char 
  9131 ;;  status          1   31[BANK0 ] enum E14335
  9132 ;;  pointerByte     1   27[BANK0 ] unsigned char 
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  1    wreg      void 
  9135 ;; Registers used:
  9136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9142 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9144 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9145 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;Total ram usage:       18 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:    5
  9149 ;; This function calls:
  9150 ;;		_I2C1_MasterWrite
  9151 ;; This function is called by:
  9152 ;;		_blinkyLoop
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           
  9157                           ;psect for function _MYI2C_Write2LEDBytes
  9158  0CEA                     _MYI2C_Write2LEDBytes:	
  9159                           
  9160                           ;incstack = 0
  9161                           ; Regs used in _MYI2C_Write2LEDBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9162                           ;MYI2C_Write2LEDBytes@slaveDeviceAddress stored from wreg
  9163  0CEA  0020               	movlb	0	; select bank0
  9164  0CEB  00B6               	movwf	MYI2C_Write2LEDBytes@slaveDeviceAddress
  9165                           
  9166                           ;main.c: 753: uint8_t *pData;
  9167                           ;main.c: 754: uint16_t nCount;
  9168                           ;main.c: 756: uint8_t writeBuffer[3];
  9169                           ;main.c: 758: uint16_t counter, timeOut;
  9170                           ;main.c: 759: uint8_t pointerByte = cPointerByteWriteLED;
  9171  0CEC  302E               	movlw	low (_cPointerByteWriteLED| (0+32768))
  9172  0CED  0084               	movwf	4
  9173  0CEE  3090               	movlw	high (_cPointerByteWriteLED| (0+32768))
  9174  0CEF  0085               	movwf	5
  9175  0CF0  0800               	movf	0,w	;code access
  9176  0CF1  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9177  0CF2  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9178  0CF3  00BB               	movwf	MYI2C_Write2LEDBytes@pointerByte
  9179                           
  9180                           ;main.c: 761: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
  9181  0CF4  3002               	movlw	2
  9182  0CF5  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9183  0CF6  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9184  0CF7  00BF               	movwf	MYI2C_Write2LEDBytes@status
  9185                           
  9186                           ;main.c: 765: nCount = 1;
  9187  0CF8  3001               	movlw	1
  9188  0CF9  00B4               	movwf	MYI2C_Write2LEDBytes@nCount
  9189  0CFA  3000               	movlw	0
  9190  0CFB  00B5               	movwf	MYI2C_Write2LEDBytes@nCount+1
  9191                           
  9192                           ;main.c: 767: for (counter = 0; counter < nCount; counter++)
  9193  0CFC  01B7               	clrf	MYI2C_Write2LEDBytes@counter
  9194  0CFD  01B8               	clrf	MYI2C_Write2LEDBytes@counter+1
  9195  0CFE                     l621:	
  9196  0CFE  0835               	movf	MYI2C_Write2LEDBytes@nCount+1,w
  9197  0CFF  0238               	subwf	MYI2C_Write2LEDBytes@counter+1,w
  9198  0D00  1D03               	skipz
  9199  0D01  2D04               	goto	u2535
  9200  0D02  0834               	movf	MYI2C_Write2LEDBytes@nCount,w
  9201  0D03  0237               	subwf	MYI2C_Write2LEDBytes@counter,w
  9202  0D04                     u2535:	
  9203  0D04  1803               	btfsc	3,0
  9204  0D05  0008               	return
  9205                           
  9206                           ;main.c: 768: {
  9207                           ;main.c: 771: writeBuffer[0] = pointerByte;
  9208  0D06  083B               	movf	MYI2C_Write2LEDBytes@pointerByte,w
  9209  0D07  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9210  0D08  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9211  0D09  00BC               	movwf	MYI2C_Write2LEDBytes@writeBuffer
  9212                           
  9213                           ;main.c: 773: writeBuffer[1] = (MSBWriteByte);
  9214  0D0A  082E               	movf	MYI2C_Write2LEDBytes@MSBWriteByte,w
  9215  0D0B  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9216  0D0C  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9217  0D0D  00BD               	movwf	MYI2C_Write2LEDBytes@writeBuffer+1
  9218                           
  9219                           ;main.c: 774: writeBuffer[2] = (LSBWriteByte);
  9220  0D0E  082F               	movf	MYI2C_Write2LEDBytes@LSBWriteByte,w
  9221  0D0F  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9222  0D10  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9223  0D11  00BE               	movwf	MYI2C_Write2LEDBytes@writeBuffer+2
  9224                           
  9225                           ;main.c: 779: timeOut = 0;
  9226  0D12  01B9               	clrf	MYI2C_Write2LEDBytes@timeOut
  9227  0D13  01BA               	clrf	MYI2C_Write2LEDBytes@timeOut+1
  9228  0D14                     l3128:	
  9229                           ;main.c: 780: while(status != I2C1_MESSAGE_FAIL)
  9230                           
  9231  0D14  033F               	decf	MYI2C_Write2LEDBytes@status,w
  9232  0D15  1903               	btfsc	3,2
  9233  0D16  2D3C               	goto	l3130
  9234                           
  9235                           ;main.c: 781: {
  9236                           ;main.c: 783: I2C1_MasterWrite( writeBuffer,
  9237                           ;main.c: 784: 3,
  9238                           ;main.c: 785: slaveDeviceAddress,
  9239                           ;main.c: 786: &status);
  9240  0D17  3003               	movlw	3
  9241  0D18  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9242  0D19  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9243  0D1A  00A7               	movwf	I2C1_MasterWrite@length
  9244  0D1B  0836               	movf	MYI2C_Write2LEDBytes@slaveDeviceAddress,w
  9245  0D1C  00B1               	movwf	??_MYI2C_Write2LEDBytes+1
  9246  0D1D  01B2               	clrf	??_MYI2C_Write2LEDBytes+2
  9247  0D1E  0831               	movf	??_MYI2C_Write2LEDBytes+1,w
  9248  0D1F  00A8               	movwf	I2C1_MasterWrite@address
  9249  0D20  0832               	movf	??_MYI2C_Write2LEDBytes+2,w
  9250  0D21  00A9               	movwf	I2C1_MasterWrite@address+1
  9251  0D22  303F               	movlw	(low (MYI2C_Write2LEDBytes@status| 0))& (0+255)
  9252  0D23  00B3               	movwf	??_MYI2C_Write2LEDBytes+3
  9253  0D24  0833               	movf	??_MYI2C_Write2LEDBytes+3,w
  9254  0D25  00AA               	movwf	I2C1_MasterWrite@pflag
  9255  0D26  303C               	movlw	(low (MYI2C_Write2LEDBytes@writeBuffer| 0))& (0+255)
  9256  0D27  318B  2371  318C   	fcall	_I2C1_MasterWrite
  9257  0D2A                     l3114:	
  9258                           ;main.c: 789: while(status == I2C1_MESSAGE_PENDING);
  9259                           
  9260  0D2A  3002               	movlw	2
  9261  0D2B  0020               	movlb	0	; select bank0
  9262  0D2C  063F               	xorwf	MYI2C_Write2LEDBytes@status,w
  9263  0D2D  1903               	btfsc	3,2
  9264  0D2E  2D2A               	goto	l3114
  9265                           
  9266                           ;main.c: 791: if (status == I2C1_MESSAGE_COMPLETE)
  9267  0D2F  083F               	movf	MYI2C_Write2LEDBytes@status,w
  9268  0D30  1903               	btfsc	3,2
  9269  0D31  2D3C               	goto	l3130
  9270                           
  9271                           ;main.c: 801: if (timeOut == 100)
  9272                           
  9273                           ;main.c: 792: break;
  9274  0D32  3064               	movlw	100
  9275  0D33  0639               	xorwf	MYI2C_Write2LEDBytes@timeOut,w
  9276  0D34  043A               	iorwf	MYI2C_Write2LEDBytes@timeOut+1,w
  9277  0D35  1903               	btfsc	3,2
  9278  0D36  2D3C               	goto	l3130
  9279                           
  9280                           ;main.c: 803: else
  9281                           ;main.c: 804: timeOut++;
  9282                           
  9283                           ;main.c: 802: break;
  9284  0D37  3001               	movlw	1
  9285  0D38  07B9               	addwf	MYI2C_Write2LEDBytes@timeOut,f
  9286  0D39  3000               	movlw	0
  9287  0D3A  3DBA               	addwfc	MYI2C_Write2LEDBytes@timeOut+1,f
  9288  0D3B  2D14               	goto	l3128
  9289  0D3C                     l3130:	
  9290                           
  9291                           ;main.c: 805: }
  9292                           ;main.c: 807: if (status == I2C1_MESSAGE_FAIL)
  9293  0D3C  033F               	decf	MYI2C_Write2LEDBytes@status,w
  9294  0D3D  1903               	btfsc	3,2
  9295  0D3E  0008               	return
  9296                           
  9297                           ;main.c: 808: {
  9298                           ;main.c: 809: break;
  9299  0D3F  3001               	movlw	1
  9300  0D40  07B7               	addwf	MYI2C_Write2LEDBytes@counter,f
  9301  0D41  3000               	movlw	0
  9302  0D42  3DB8               	addwfc	MYI2C_Write2LEDBytes@counter+1,f
  9303  0D43  2CFE               	goto	l621
  9304  0D44                     __end_of_MYI2C_Write2LEDBytes:	
  9305                           
  9306                           	psect	text14
  9307  0B71                     __ptext14:	
  9308 ;; *************** function _I2C1_MasterWrite *****************
  9309 ;; Defined at:
  9310 ;;		line 598 in file "mcc_generated_files/i2c1.c"
  9311 ;; Parameters:    Size  Location     Type
  9312 ;;  pdata           1    wreg     PTR unsigned char 
  9313 ;;		 -> MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), MYI2C_WriteFaders@writeBuffer(9),
      + 
  9314 ;;  length          1    7[BANK0 ] unsigned char 
  9315 ;;  address         2    8[BANK0 ] unsigned int 
  9316 ;;  pflag           1   10[BANK0 ] PTR enum E14260
  9317 ;;		 -> MYI2C_Write16EEPROMBytes@status(1), MYI2C_Write2LEDBytes@status(1), MYI2C_WriteFaders@status(1), 
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  9320 ;;		 -> MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), MYI2C_WriteFaders@writeBuffer(9),
      + 
  9321 ;; Return value:  Size  Location     Type
  9322 ;;                  1    wreg      void 
  9323 ;; Registers used:
  9324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9330 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;Total ram usage:        7 bytes
  9335 ;; Hardware stack levels used:    1
  9336 ;; Hardware stack levels required when called:    4
  9337 ;; This function calls:
  9338 ;;		_I2C1_MasterTRBInsert
  9339 ;;		_I2C1_MasterWriteTRBBuild
  9340 ;; This function is called by:
  9341 ;;		_MYI2C_Write2LEDBytes
  9342 ;;		_MYI2C_Write16EEPROMBytes
  9343 ;;		_MYI2C_WriteFaders
  9344 ;; This function uses a non-reentrant model
  9345 ;;
  9346                           
  9347                           
  9348                           ;psect for function _I2C1_MasterWrite
  9349  0B71                     _I2C1_MasterWrite:	
  9350                           
  9351                           ;incstack = 0
  9352                           ; Regs used in _I2C1_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9353                           ;I2C1_MasterWrite@pdata stored from wreg
  9354  0B71  0020               	movlb	0	; select bank0
  9355  0B72  00AD               	movwf	I2C1_MasterWrite@pdata
  9356                           
  9357                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9358                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
  9359  0B73  1869               	btfsc	_i2c1_object+2,0
  9360  0B74  2B92               	goto	l2964
  9361                           
  9362                           ;i2c1.c: 608: {
  9363                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  9364  0B75  082D               	movf	I2C1_MasterWrite@pdata,w
  9365  0B76  00AB               	movwf	??_I2C1_MasterWrite
  9366  0B77  082B               	movf	??_I2C1_MasterWrite,w
  9367  0B78  00A0               	movwf	I2C1_MasterWriteTRBBuild@pdata
  9368  0B79  0827               	movf	I2C1_MasterWrite@length,w
  9369  0B7A  00AC               	movwf	??_I2C1_MasterWrite+1
  9370  0B7B  082C               	movf	??_I2C1_MasterWrite+1,w
  9371  0B7C  00A1               	movwf	I2C1_MasterWriteTRBBuild@length
  9372  0B7D  0829               	movf	I2C1_MasterWrite@address+1,w
  9373  0B7E  00A3               	movwf	I2C1_MasterWriteTRBBuild@address+1
  9374  0B7F  0828               	movf	I2C1_MasterWrite@address,w
  9375  0B80  00A2               	movwf	I2C1_MasterWriteTRBBuild@address
  9376  0B81  30D1               	movlw	(low (I2C1_MasterWrite@trBlock| 0))& (0+255)
  9377  0B82  318B  230A  318B   	fcall	_I2C1_MasterWriteTRBBuild
  9378                           
  9379                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9380  0B85  30D1               	movlw	(low (I2C1_MasterWrite@trBlock| 0))& (0+255)
  9381  0B86  0020               	movlb	0	; select bank0
  9382  0B87  00AB               	movwf	??_I2C1_MasterWrite
  9383  0B88  082B               	movf	??_I2C1_MasterWrite,w
  9384  0B89  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9385  0B8A  082A               	movf	I2C1_MasterWrite@pflag,w
  9386  0B8B  00AC               	movwf	??_I2C1_MasterWrite+1
  9387  0B8C  082C               	movf	??_I2C1_MasterWrite+1,w
  9388  0B8D  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9389  0B8E  3001               	movlw	1
  9390  0B8F  318C  2451         	fcall	_I2C1_MasterTRBInsert
  9391                           
  9392                           ;i2c1.c: 611: }
  9393  0B91  0008               	return
  9394  0B92                     l2964:	
  9395                           
  9396                           ;i2c1.c: 612: else
  9397                           ;i2c1.c: 613: {
  9398                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
  9399  0B92  0020               	movlb	0	; select bank0
  9400  0B93  082A               	movf	I2C1_MasterWrite@pflag,w
  9401  0B94  0086               	movwf	6
  9402  0B95  0187               	clrf	7
  9403  0B96  0181               	clrf	1
  9404  0B97  0A81               	incf	1,f
  9405  0B98  0008               	return
  9406  0B99                     __end_of_I2C1_MasterWrite:	
  9407                           
  9408                           	psect	text15
  9409  0B0A                     __ptext15:	
  9410 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  9411 ;; Defined at:
  9412 ;;		line 707 in file "mcc_generated_files/i2c1.c"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;  ptrb            1    wreg     PTR struct .
  9415 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterWrite@trBlock(4), 
  9416 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  9417 ;;		 -> MYI2C_ReadPatch@pointerByte(1), MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), M
      +YI2C_WriteFaders@writeBuffer(9), 
  9418 ;;		 -> MYI2C_ReadFaders@pointerByte(1), 
  9419 ;;  length          1    1[BANK0 ] unsigned char 
  9420 ;;  address         2    2[BANK0 ] unsigned int 
  9421 ;; Auto vars:     Size  Location     Type
  9422 ;;  ptrb            1    6[BANK0 ] PTR struct .
  9423 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterWrite@trBlock(4), 
  9424 ;; Return value:  Size  Location     Type
  9425 ;;                  1    wreg      void 
  9426 ;; Registers used:
  9427 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9428 ;; Tracked objects:
  9429 ;;		On entry : 0/0
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9433 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;Total ram usage:        7 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    3
  9440 ;; This function calls:
  9441 ;;		Nothing
  9442 ;; This function is called by:
  9443 ;;		_I2C1_MasterWrite
  9444 ;;		_MYI2C_ReadFaders
  9445 ;;		_MYI2C_ReadPatch
  9446 ;; This function uses a non-reentrant model
  9447 ;;
  9448                           
  9449                           
  9450                           ;psect for function _I2C1_MasterWriteTRBBuild
  9451  0B0A                     _I2C1_MasterWriteTRBBuild:	
  9452                           
  9453                           ;incstack = 0
  9454                           ; Regs used in _I2C1_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9455                           ;I2C1_MasterWriteTRBBuild@ptrb stored from wreg
  9456  0B0A  0020               	movlb	0	; select bank0
  9457  0B0B  00A6               	movwf	I2C1_MasterWriteTRBBuild@ptrb
  9458                           
  9459                           ;i2c1.c: 713: ptrb->address = address << 1;
  9460  0B0C  0823               	movf	I2C1_MasterWriteTRBBuild@address+1,w
  9461  0B0D  00A5               	movwf	??_I2C1_MasterWriteTRBBuild+1
  9462  0B0E  0822               	movf	I2C1_MasterWriteTRBBuild@address,w
  9463  0B0F  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9464  0B10  35A4               	lslf	??_I2C1_MasterWriteTRBBuild,f
  9465  0B11  0DA5               	rlf	??_I2C1_MasterWriteTRBBuild+1,f
  9466  0B12  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9467  0B13  0086               	movwf	6
  9468  0B14  0187               	clrf	7
  9469  0B15  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9470  0B16  3FC0               	movwi [0]fsr1
  9471  0B17  0825               	movf	??_I2C1_MasterWriteTRBBuild+1,w
  9472  0B18  3FC1               	movwi [1]fsr1
  9473                           
  9474                           ;i2c1.c: 714: ptrb->length = length;
  9475  0B19  0821               	movf	I2C1_MasterWriteTRBBuild@length,w
  9476  0B1A  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9477  0B1B  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9478  0B1C  3E02               	addlw	2
  9479  0B1D  0086               	movwf	6
  9480  0B1E  0187               	clrf	7
  9481  0B1F  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9482  0B20  0081               	movwf	1
  9483                           
  9484                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
  9485  0B21  0820               	movf	I2C1_MasterWriteTRBBuild@pdata,w
  9486  0B22  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9487  0B23  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9488  0B24  3E03               	addlw	3
  9489  0B25  0086               	movwf	6
  9490  0B26  0187               	clrf	7
  9491  0B27  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9492  0B28  0081               	movwf	1
  9493  0B29  0008               	return
  9494  0B2A                     __end_of_I2C1_MasterWriteTRBBuild:	
  9495                           
  9496                           	psect	text16
  9497  0C51                     __ptext16:	
  9498 ;; *************** function _I2C1_MasterTRBInsert *****************
  9499 ;; Defined at:
  9500 ;;		line 641 in file "mcc_generated_files/i2c1.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;  count           1    wreg     unsigned char 
  9503 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  9504 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterRead@trBlock(4), I2C1_MasterWrite@trBlock(4)
      +, 
  9505 ;;  pflag           1    1[BANK0 ] PTR enum E14260
  9506 ;;		 -> MYI2C_ReadPatch@status(1), MYI2C_Write16EEPROMBytes@status(1), MYI2C_Write2LEDBytes@status(1), MYI2C_WriteFaders
      +@status(1), 
  9507 ;;		 -> MYI2C_ReadFaders@status(1), 
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;  count           1    3[BANK0 ] unsigned char 
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  1    wreg      void 
  9512 ;; Registers used:
  9513 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/0
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9519 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;Total ram usage:        4 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    3
  9526 ;; This function calls:
  9527 ;;		Nothing
  9528 ;; This function is called by:
  9529 ;;		_I2C1_MasterWrite
  9530 ;;		_I2C1_MasterRead
  9531 ;;		_MYI2C_ReadFaders
  9532 ;;		_MYI2C_ReadPatch
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           
  9537                           ;psect for function _I2C1_MasterTRBInsert
  9538  0C51                     _I2C1_MasterTRBInsert:	
  9539                           
  9540                           ;incstack = 0
  9541                           ; Regs used in _I2C1_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9542                           ;I2C1_MasterTRBInsert@count stored from wreg
  9543  0C51  0020               	movlb	0	; select bank0
  9544  0C52  00A3               	movwf	I2C1_MasterTRBInsert@count
  9545                           
  9546                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
  9547  0C53  1869               	btfsc	_i2c1_object+2,0
  9548  0C54  2C85               	goto	l2838
  9549                           
  9550                           ;i2c1.c: 649: {
  9551                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
  9552  0C55  3002               	movlw	2
  9553  0C56  00A2               	movwf	??_I2C1_MasterTRBInsert
  9554  0C57  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9555  0C58  0086               	movwf	6
  9556  0C59  0187               	clrf	7
  9557  0C5A  0822               	movf	??_I2C1_MasterTRBInsert,w
  9558  0C5B  0081               	movwf	1
  9559                           
  9560                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  9561  0C5C  0820               	movf	I2C1_MasterTRBInsert@ptrb_list,w
  9562  0C5D  00A2               	movwf	??_I2C1_MasterTRBInsert
  9563  0C5E  0A67               	incf	_i2c1_object,w
  9564  0C5F  0086               	movwf	6
  9565  0C60  0187               	clrf	7
  9566  0C61  0822               	movf	??_I2C1_MasterTRBInsert,w
  9567  0C62  0081               	movwf	1
  9568                           
  9569                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
  9570  0C63  0823               	movf	I2C1_MasterTRBInsert@count,w
  9571  0C64  00A2               	movwf	??_I2C1_MasterTRBInsert
  9572  0C65  0867               	movf	_i2c1_object,w
  9573  0C66  0086               	movwf	6
  9574  0C67  0187               	clrf	7
  9575  0C68  0822               	movf	??_I2C1_MasterTRBInsert,w
  9576  0C69  0081               	movwf	1
  9577                           
  9578                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
  9579  0C6A  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9580  0C6B  00A2               	movwf	??_I2C1_MasterTRBInsert
  9581  0C6C  0867               	movf	_i2c1_object,w
  9582  0C6D  3E02               	addlw	2
  9583  0C6E  0086               	movwf	6
  9584  0C6F  0187               	clrf	7
  9585  0C70  0822               	movf	??_I2C1_MasterTRBInsert,w
  9586  0C71  0081               	movwf	1
  9587                           
  9588                           ;i2c1.c: 655: i2c1_object.pTrTail++;
  9589  0C72  3003               	movlw	3
  9590  0C73  00A2               	movwf	??_I2C1_MasterTRBInsert
  9591  0C74  0822               	movf	??_I2C1_MasterTRBInsert,w
  9592  0C75  07E7               	addwf	_i2c1_object,f
  9593                           
  9594                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  9595  0C76  0867               	movf	_i2c1_object,w
  9596  0C77  3AD8               	xorlw	(low ((_i2c1_tr_queue| 0+3)))& (0+255)
  9597  0C78  1D03               	skipz
  9598  0C79  2C7E               	goto	l2834
  9599                           
  9600                           ;i2c1.c: 659: {
  9601                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
  9602  0C7A  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
  9603  0C7B  00A2               	movwf	??_I2C1_MasterTRBInsert
  9604  0C7C  0822               	movf	??_I2C1_MasterTRBInsert,w
  9605  0C7D  00E7               	movwf	_i2c1_object
  9606  0C7E                     l2834:	
  9607                           
  9608                           ;i2c1.c: 662: }
  9609                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
  9610  0C7E  10E9               	bcf	_i2c1_object+2,1
  9611                           
  9612                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  9613  0C7F  0868               	movf	low ((_i2c1_object| 0+1)),w
  9614  0C80  0667               	xorwf	_i2c1_object,w
  9615  0C81  1D03               	skipz
  9616  0C82  2C8A               	goto	l2840
  9617                           
  9618                           ;i2c1.c: 670: {
  9619                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
  9620  0C83  1469               	bsf	_i2c1_object+2,0
  9621                           
  9622                           ;i2c1.c: 673: }
  9623                           ;i2c1.c: 675: }
  9624  0C84  2C8A               	goto	l2840
  9625  0C85                     l2838:	
  9626                           
  9627                           ;i2c1.c: 676: else
  9628                           ;i2c1.c: 677: {
  9629                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
  9630  0C85  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9631  0C86  0086               	movwf	6
  9632  0C87  0187               	clrf	7
  9633  0C88  0181               	clrf	1
  9634  0C89  0A81               	incf	1,f
  9635  0C8A                     l2840:	
  9636                           
  9637                           ;i2c1.c: 679: }
  9638                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
  9639  0C8A  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9640  0C8B  0086               	movwf	6
  9641  0C8C  0187               	clrf	7
  9642  0C8D  3002               	movlw	2
  9643  0C8E  0601               	xorwf	1,w
  9644  0C8F  1D03               	btfss	3,2
  9645  0C90  0008               	return
  9646  0C91                     l2844:	
  9647                           ;i2c1.c: 683: {
  9648                           ;i2c1.c: 684: while(i2c1_state != S_MASTER_IDLE);
  9649                           
  9650  0C91  086F               	movf	_i2c1_state,w
  9651  0C92  1D03               	btfss	3,2
  9652  0C93  2C91               	goto	l2844
  9653                           
  9654                           ;i2c1.c: 685: {
  9655                           ;i2c1.c: 688: PIR3bits.SSP1IF = 1;
  9656  0C94  002E               	movlb	14	; select bank14
  9657  0C95  140F               	bsf	15,0	;volatile
  9658  0C96  0008               	return
  9659  0C97                     __end_of_I2C1_MasterTRBInsert:	
  9660                           
  9661                           	psect	text17
  9662  06EE                     __ptext17:	
  9663 ;; *************** function ___ftdiv *****************
  9664 ;; Defined at:
  9665 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;  f2              3   14[BANK0 ] float 
  9668 ;;  f1              3   17[BANK0 ] float 
  9669 ;; Auto vars:     Size  Location     Type
  9670 ;;  f3              3   25[BANK0 ] float 
  9671 ;;  sign            1   29[BANK0 ] unsigned char 
  9672 ;;  exp             1   28[BANK0 ] unsigned char 
  9673 ;;  cntr            1   24[BANK0 ] unsigned char 
  9674 ;; Return value:  Size  Location     Type
  9675 ;;                  3   14[BANK0 ] float 
  9676 ;; Registers used:
  9677 ;;		wreg, status,2, status,0, pclath, cstack
  9678 ;; Tracked objects:
  9679 ;;		On entry : 0/0
  9680 ;;		On exit  : 0/0
  9681 ;;		Unchanged: 0/0
  9682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9683 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;Total ram usage:       16 bytes
  9688 ;; Hardware stack levels used:    1
  9689 ;; Hardware stack levels required when called:    4
  9690 ;; This function calls:
  9691 ;;		___ftpack
  9692 ;; This function is called by:
  9693 ;;		_main
  9694 ;; This function uses a non-reentrant model
  9695 ;;
  9696                           
  9697                           
  9698                           ;psect for function ___ftdiv
  9699  06EE                     ___ftdiv:	
  9700                           
  9701                           ;incstack = 0
  9702                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9703  06EE  0020               	movlb	0	; select bank0
  9704  06EF  0831               	movf	___ftdiv@f1,w
  9705  06F0  00B4               	movwf	??___ftdiv
  9706  06F1  0832               	movf	___ftdiv@f1+1,w
  9707  06F2  00B5               	movwf	??___ftdiv+1
  9708  06F3  0833               	movf	___ftdiv@f1+2,w
  9709  06F4  00B6               	movwf	??___ftdiv+2
  9710  06F5  1003               	clrc
  9711  06F6  0D35               	rlf	??___ftdiv+1,w
  9712  06F7  0D36               	rlf	??___ftdiv+2,w
  9713  06F8  00B7               	movwf	??___ftdiv+3
  9714  06F9  0837               	movf	??___ftdiv+3,w
  9715  06FA  00BC               	movwf	___ftdiv@exp
  9716  06FB  083C               	movf	___ftdiv@exp,w
  9717  06FC  1D03               	btfss	3,2
  9718  06FD  2F05               	goto	l3680
  9719  06FE  3000               	movlw	0
  9720  06FF  00AE               	movwf	?___ftdiv
  9721  0700  3000               	movlw	0
  9722  0701  00AF               	movwf	?___ftdiv+1
  9723  0702  3000               	movlw	0
  9724  0703  00B0               	movwf	?___ftdiv+2
  9725  0704  0008               	return
  9726  0705                     l3680:	
  9727  0705  082E               	movf	___ftdiv@f2,w
  9728  0706  00B4               	movwf	??___ftdiv
  9729  0707  082F               	movf	___ftdiv@f2+1,w
  9730  0708  00B5               	movwf	??___ftdiv+1
  9731  0709  0830               	movf	___ftdiv@f2+2,w
  9732  070A  00B6               	movwf	??___ftdiv+2
  9733  070B  1003               	clrc
  9734  070C  0D35               	rlf	??___ftdiv+1,w
  9735  070D  0D36               	rlf	??___ftdiv+2,w
  9736  070E  00B7               	movwf	??___ftdiv+3
  9737  070F  0837               	movf	??___ftdiv+3,w
  9738  0710  00BD               	movwf	___ftdiv@sign
  9739  0711  083D               	movf	___ftdiv@sign,w
  9740  0712  1D03               	btfss	3,2
  9741  0713  2F1B               	goto	l3686
  9742  0714  3000               	movlw	0
  9743  0715  00AE               	movwf	?___ftdiv
  9744  0716  3000               	movlw	0
  9745  0717  00AF               	movwf	?___ftdiv+1
  9746  0718  3000               	movlw	0
  9747  0719  00B0               	movwf	?___ftdiv+2
  9748  071A  0008               	return
  9749  071B                     l3686:	
  9750  071B  3000               	movlw	0
  9751  071C  00B9               	movwf	___ftdiv@f3
  9752  071D  3000               	movlw	0
  9753  071E  00BA               	movwf	___ftdiv@f3+1
  9754  071F  3000               	movlw	0
  9755  0720  00BB               	movwf	___ftdiv@f3+2
  9756  0721  3089               	movlw	137
  9757  0722  073D               	addwf	___ftdiv@sign,w
  9758  0723  00B4               	movwf	??___ftdiv
  9759  0724  0834               	movf	??___ftdiv,w
  9760  0725  02BC               	subwf	___ftdiv@exp,f
  9761  0726  0831               	movf	___ftdiv@f1,w
  9762  0727  00B4               	movwf	??___ftdiv
  9763  0728  0832               	movf	___ftdiv@f1+1,w
  9764  0729  00B5               	movwf	??___ftdiv+1
  9765  072A  0833               	movf	___ftdiv@f1+2,w
  9766  072B  00B6               	movwf	??___ftdiv+2
  9767  072C  3010               	movlw	16
  9768  072D                     u3225:	
  9769  072D  36B6               	lsrf	??___ftdiv+2,f
  9770  072E  0CB5               	rrf	??___ftdiv+1,f
  9771  072F  0CB4               	rrf	??___ftdiv,f
  9772  0730  0B89               	decfsz	9,f
  9773  0731  2F2D               	goto	u3225
  9774  0732  0834               	movf	??___ftdiv,w
  9775  0733  00B7               	movwf	??___ftdiv+3
  9776  0734  0837               	movf	??___ftdiv+3,w
  9777  0735  00BD               	movwf	___ftdiv@sign
  9778  0736  082E               	movf	___ftdiv@f2,w
  9779  0737  00B4               	movwf	??___ftdiv
  9780  0738  082F               	movf	___ftdiv@f2+1,w
  9781  0739  00B5               	movwf	??___ftdiv+1
  9782  073A  0830               	movf	___ftdiv@f2+2,w
  9783  073B  00B6               	movwf	??___ftdiv+2
  9784  073C  3010               	movlw	16
  9785  073D                     u3235:	
  9786  073D  36B6               	lsrf	??___ftdiv+2,f
  9787  073E  0CB5               	rrf	??___ftdiv+1,f
  9788  073F  0CB4               	rrf	??___ftdiv,f
  9789  0740  0B89               	decfsz	9,f
  9790  0741  2F3D               	goto	u3235
  9791  0742  0834               	movf	??___ftdiv,w
  9792  0743  00B7               	movwf	??___ftdiv+3
  9793  0744  0837               	movf	??___ftdiv+3,w
  9794  0745  06BD               	xorwf	___ftdiv@sign,f
  9795  0746  3080               	movlw	128
  9796  0747  00B4               	movwf	??___ftdiv
  9797  0748  0834               	movf	??___ftdiv,w
  9798  0749  05BD               	andwf	___ftdiv@sign,f
  9799  074A  17B2               	bsf	___ftdiv@f1+1,7
  9800  074B  30FF               	movlw	255
  9801  074C  05B1               	andwf	___ftdiv@f1,f
  9802  074D  30FF               	movlw	255
  9803  074E  05B2               	andwf	___ftdiv@f1+1,f
  9804  074F  3000               	movlw	0
  9805  0750  05B3               	andwf	___ftdiv@f1+2,f
  9806  0751  17AF               	bsf	___ftdiv@f2+1,7
  9807  0752  30FF               	movlw	255
  9808  0753  05AE               	andwf	___ftdiv@f2,f
  9809  0754  30FF               	movlw	255
  9810  0755  05AF               	andwf	___ftdiv@f2+1,f
  9811  0756  3000               	movlw	0
  9812  0757  05B0               	andwf	___ftdiv@f2+2,f
  9813  0758  3018               	movlw	24
  9814  0759  00B4               	movwf	??___ftdiv
  9815  075A  0834               	movf	??___ftdiv,w
  9816  075B  00B8               	movwf	___ftdiv@cntr
  9817  075C                     l3700:	
  9818  075C  3001               	movlw	1
  9819  075D                     u3245:	
  9820  075D  35B9               	lslf	___ftdiv@f3,f
  9821  075E  0DBA               	rlf	___ftdiv@f3+1,f
  9822  075F  0DBB               	rlf	___ftdiv@f3+2,f
  9823  0760  0B89               	decfsz	9,f
  9824  0761  2F5D               	goto	u3245
  9825  0762  0830               	movf	___ftdiv@f2+2,w
  9826  0763  0233               	subwf	___ftdiv@f1+2,w
  9827  0764  1D03               	skipz
  9828  0765  2F6C               	goto	u3255
  9829  0766  082F               	movf	___ftdiv@f2+1,w
  9830  0767  0232               	subwf	___ftdiv@f1+1,w
  9831  0768  1D03               	skipz
  9832  0769  2F6C               	goto	u3255
  9833  076A  082E               	movf	___ftdiv@f2,w
  9834  076B  0231               	subwf	___ftdiv@f1,w
  9835  076C                     u3255:	
  9836  076C  1C03               	skipc
  9837  076D  2F75               	goto	l3708
  9838  076E  082E               	movf	___ftdiv@f2,w
  9839  076F  02B1               	subwf	___ftdiv@f1,f
  9840  0770  082F               	movf	___ftdiv@f2+1,w
  9841  0771  3BB2               	subwfb	___ftdiv@f1+1,f
  9842  0772  0830               	movf	___ftdiv@f2+2,w
  9843  0773  3BB3               	subwfb	___ftdiv@f1+2,f
  9844  0774  1439               	bsf	___ftdiv@f3,0
  9845  0775                     l3708:	
  9846  0775  3001               	movlw	1
  9847  0776                     u3265:	
  9848  0776  35B1               	lslf	___ftdiv@f1,f
  9849  0777  0DB2               	rlf	___ftdiv@f1+1,f
  9850  0778  0DB3               	rlf	___ftdiv@f1+2,f
  9851  0779  0B89               	decfsz	9,f
  9852  077A  2F76               	goto	u3265
  9853  077B  3001               	movlw	1
  9854  077C  02B8               	subwf	___ftdiv@cntr,f
  9855  077D  1D03               	btfss	3,2
  9856  077E  2F5C               	goto	l3700
  9857  077F  0839               	movf	___ftdiv@f3,w
  9858  0780  00A0               	movwf	___ftpack@arg
  9859  0781  083A               	movf	___ftdiv@f3+1,w
  9860  0782  00A1               	movwf	___ftpack@arg+1
  9861  0783  083B               	movf	___ftdiv@f3+2,w
  9862  0784  00A2               	movwf	___ftpack@arg+2
  9863  0785  083C               	movf	___ftdiv@exp,w
  9864  0786  00B4               	movwf	??___ftdiv
  9865  0787  0834               	movf	??___ftdiv,w
  9866  0788  00A3               	movwf	___ftpack@exp
  9867  0789  083D               	movf	___ftdiv@sign,w
  9868  078A  00B5               	movwf	??___ftdiv+1
  9869  078B  0835               	movf	??___ftdiv+1,w
  9870  078C  00A4               	movwf	___ftpack@sign
  9871  078D  3187  2797         	fcall	___ftpack
  9872  078F  0020               	movlb	0	; select bank0
  9873  0790  0820               	movf	?___ftpack,w
  9874  0791  00AE               	movwf	?___ftdiv
  9875  0792  0821               	movf	?___ftpack+1,w
  9876  0793  00AF               	movwf	?___ftdiv+1
  9877  0794  0822               	movf	?___ftpack+2,w
  9878  0795  00B0               	movwf	?___ftdiv+2
  9879  0796  0008               	return
  9880  0797                     __end_of___ftdiv:	
  9881                           
  9882                           	psect	text18
  9883  0797                     __ptext18:	
  9884 ;; *************** function ___ftpack *****************
  9885 ;; Defined at:
  9886 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;  arg             3    0[BANK0 ] unsigned um
  9889 ;;  exp             1    3[BANK0 ] unsigned char 
  9890 ;;  sign            1    4[BANK0 ] unsigned char 
  9891 ;; Auto vars:     Size  Location     Type
  9892 ;;		None
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  3    0[BANK0 ] float 
  9895 ;; Registers used:
  9896 ;;		wreg, status,2, status,0
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9902 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;Total ram usage:        8 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; Hardware stack levels required when called:    3
  9909 ;; This function calls:
  9910 ;;		Nothing
  9911 ;; This function is called by:
  9912 ;;		___awtoft
  9913 ;;		___ftdiv
  9914 ;;		___ftmul
  9915 ;;		___lwtoft
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           
  9920                           ;psect for function ___ftpack
  9921  0797                     ___ftpack:	
  9922                           
  9923                           ;incstack = 0
  9924                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9925  0797  0020               	movlb	0	; select bank0
  9926  0798  0823               	movf	___ftpack@exp,w
  9927  0799  1903               	btfsc	3,2
  9928  079A  2FA0               	goto	l2794
  9929  079B  0822               	movf	___ftpack@arg+2,w
  9930  079C  0421               	iorwf	___ftpack@arg+1,w
  9931  079D  0420               	iorwf	___ftpack@arg,w
  9932  079E  1D03               	skipz
  9933  079F  2FB1               	goto	l2800
  9934  07A0                     l2794:	
  9935  07A0  3000               	movlw	0
  9936  07A1  00A0               	movwf	?___ftpack
  9937  07A2  3000               	movlw	0
  9938  07A3  00A1               	movwf	?___ftpack+1
  9939  07A4  3000               	movlw	0
  9940  07A5  00A2               	movwf	?___ftpack+2
  9941  07A6  0008               	return
  9942  07A7                     l2798:	
  9943  07A7  3001               	movlw	1
  9944  07A8  00A5               	movwf	??___ftpack
  9945  07A9  0825               	movf	??___ftpack,w
  9946  07AA  07A3               	addwf	___ftpack@exp,f
  9947  07AB  3001               	movlw	1
  9948  07AC                     u1995:	
  9949  07AC  36A2               	lsrf	___ftpack@arg+2,f
  9950  07AD  0CA1               	rrf	___ftpack@arg+1,f
  9951  07AE  0CA0               	rrf	___ftpack@arg,f
  9952  07AF  0B89               	decfsz	9,f
  9953  07B0  2FAC               	goto	u1995
  9954  07B1                     l2800:	
  9955  07B1  30FE               	movlw	254
  9956  07B2  0522               	andwf	___ftpack@arg+2,w
  9957  07B3  1903               	btfsc	3,2
  9958  07B4  2FCA               	goto	l1111
  9959  07B5  2FA7               	goto	l2798
  9960  07B6                     l2802:	
  9961  07B6  3001               	movlw	1
  9962  07B7  00A5               	movwf	??___ftpack
  9963  07B8  0825               	movf	??___ftpack,w
  9964  07B9  07A3               	addwf	___ftpack@exp,f
  9965  07BA  3001               	movlw	1
  9966  07BB  07A0               	addwf	___ftpack@arg,f
  9967  07BC  3000               	movlw	0
  9968  07BD  1803               	skipnc
  9969  07BE  3001               	movlw	1
  9970  07BF  07A1               	addwf	___ftpack@arg+1,f
  9971  07C0  3000               	movlw	0
  9972  07C1  1803               	skipnc
  9973  07C2  3001               	movlw	1
  9974  07C3  07A2               	addwf	___ftpack@arg+2,f
  9975  07C4  3001               	movlw	1
  9976  07C5                     u2015:	
  9977  07C5  36A2               	lsrf	___ftpack@arg+2,f
  9978  07C6  0CA1               	rrf	___ftpack@arg+1,f
  9979  07C7  0CA0               	rrf	___ftpack@arg,f
  9980  07C8  0B89               	decfsz	9,f
  9981  07C9  2FC5               	goto	u2015
  9982  07CA                     l1111:	
  9983  07CA  30FF               	movlw	255
  9984  07CB  0522               	andwf	___ftpack@arg+2,w
  9985  07CC  1903               	btfsc	3,2
  9986  07CD  2FD7               	goto	l2810
  9987  07CE  2FB6               	goto	l2802
  9988  07CF                     l2808:	
  9989  07CF  3001               	movlw	1
  9990  07D0  02A3               	subwf	___ftpack@exp,f
  9991  07D1  3001               	movlw	1
  9992  07D2                     u2035:	
  9993  07D2  35A0               	lslf	___ftpack@arg,f
  9994  07D3  0DA1               	rlf	___ftpack@arg+1,f
  9995  07D4  0DA2               	rlf	___ftpack@arg+2,f
  9996  07D5  0B89               	decfsz	9,f
  9997  07D6  2FD2               	goto	u2035
  9998  07D7                     l2810:	
  9999  07D7  1BA1               	btfsc	___ftpack@arg+1,7
 10000  07D8  2FDD               	goto	l1118
 10001  07D9  3002               	movlw	2
 10002  07DA  0223               	subwf	___ftpack@exp,w
 10003  07DB  1803               	skipnc
 10004  07DC  2FCF               	goto	l2808
 10005  07DD                     l1118:	
 10006  07DD  1823               	btfsc	___ftpack@exp,0
 10007  07DE  2FE5               	goto	l1119
 10008  07DF  30FF               	movlw	255
 10009  07E0  05A0               	andwf	___ftpack@arg,f
 10010  07E1  307F               	movlw	127
 10011  07E2  05A1               	andwf	___ftpack@arg+1,f
 10012  07E3  30FF               	movlw	255
 10013  07E4  05A2               	andwf	___ftpack@arg+2,f
 10014  07E5                     l1119:	
 10015  07E5  1003               	clrc
 10016  07E6  0CA3               	rrf	___ftpack@exp,f
 10017  07E7  0823               	movf	___ftpack@exp,w
 10018  07E8  00A5               	movwf	??___ftpack
 10019  07E9  01A6               	clrf	??___ftpack+1
 10020  07EA  01A7               	clrf	??___ftpack+2
 10021  07EB  3010               	movlw	16
 10022  07EC                     u2075:	
 10023  07EC  35A5               	lslf	??___ftpack,f
 10024  07ED  0DA6               	rlf	??___ftpack+1,f
 10025  07EE  0DA7               	rlf	??___ftpack+2,f
 10026  07EF  0B89               	decfsz	9,f
 10027  07F0  2FEC               	goto	u2075
 10028  07F1  0825               	movf	??___ftpack,w
 10029  07F2  04A0               	iorwf	___ftpack@arg,f
 10030  07F3  0826               	movf	??___ftpack+1,w
 10031  07F4  04A1               	iorwf	___ftpack@arg+1,f
 10032  07F5  0827               	movf	??___ftpack+2,w
 10033  07F6  04A2               	iorwf	___ftpack@arg+2,f
 10034  07F7  0824               	movf	___ftpack@sign,w
 10035  07F8  1903               	btfsc	3,2
 10036  07F9  0008               	return
 10037  07FA  17A2               	bsf	___ftpack@arg+2,7
 10038  07FB  0008               	return
 10039  07FC                     __end_of___ftpack:	
 10040                           
 10041                           	psect	text19
 10042  09D0                     __ptext19:	
 10043 ;; *************** function _SYSTEM_Initialize *****************
 10044 ;; Defined at:
 10045 ;;		line 83 in file "mcc_generated_files/mcc.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;		None
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;		None
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      void 
 10052 ;; Registers used:
 10053 ;;		wreg, status,2, status,0, pclath, cstack
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;Total ram usage:        0 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    4
 10066 ;; This function calls:
 10067 ;;		_ADCC_Initialize
 10068 ;;		_I2C1_Initialize
 10069 ;;		_OSCILLATOR_Initialize
 10070 ;;		_PIN_MANAGER_Initialize
 10071 ;; This function is called by:
 10072 ;;		_main
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           
 10077                           ;psect for function _SYSTEM_Initialize
 10078  09D0                     _SYSTEM_Initialize:	
 10079                           
 10080                           ;mcc.c: 86: PIN_MANAGER_Initialize();
 10081                           
 10082                           ;incstack = 0
 10083                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10084  09D0  318B  23D2  3189   	fcall	_PIN_MANAGER_Initialize
 10085                           
 10086                           ;mcc.c: 87: OSCILLATOR_Initialize();
 10087  09D3  3189  21BC  3189   	fcall	_OSCILLATOR_Initialize
 10088                           
 10089                           ;mcc.c: 88: I2C1_Initialize();
 10090  09D6  318A  2251  3189   	fcall	_I2C1_Initialize
 10091                           
 10092                           ;mcc.c: 89: ADCC_Initialize();
 10093  09D9  318A  2299         	fcall	_ADCC_Initialize
 10094  09DB  0008               	return
 10095  09DC                     __end_of_SYSTEM_Initialize:	
 10096                           
 10097                           	psect	text20
 10098  0BD2                     __ptext20:	
 10099 ;; *************** function _PIN_MANAGER_Initialize *****************
 10100 ;; Defined at:
 10101 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;		None
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;  state           1    0[BANK0 ] unsigned char 
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  1    wreg      void 
 10108 ;; Registers used:
 10109 ;;		wreg, status,2, status,0
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;Total ram usage:        1 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; Hardware stack levels required when called:    3
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		_SYSTEM_Initialize
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           
 10130                           ;psect for function _PIN_MANAGER_Initialize
 10131  0BD2                     _PIN_MANAGER_Initialize:	
 10132                           
 10133                           ;pin_manager.c: 57: LATA = 0x00;
 10134                           
 10135                           ;incstack = 0
 10136                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 10137  0BD2  0020               	movlb	0	; select bank0
 10138  0BD3  0196               	clrf	22	;volatile
 10139                           
 10140                           ;pin_manager.c: 58: LATB = 0x00;
 10141  0BD4  0197               	clrf	23	;volatile
 10142                           
 10143                           ;pin_manager.c: 59: LATC = 0x00;
 10144  0BD5  0198               	clrf	24	;volatile
 10145                           
 10146                           ;pin_manager.c: 64: TRISA = 0x7F;
 10147  0BD6  307F               	movlw	127
 10148  0BD7  0091               	movwf	17	;volatile
 10149                           
 10150                           ;pin_manager.c: 65: TRISB = 0x30;
 10151  0BD8  3030               	movlw	48
 10152  0BD9  0092               	movwf	18	;volatile
 10153                           
 10154                           ;pin_manager.c: 66: TRISC = 0x1D;
 10155  0BDA  301D               	movlw	29
 10156  0BDB  0093               	movwf	19	;volatile
 10157                           
 10158                           ;pin_manager.c: 71: ANSELC = 0xE7;
 10159  0BDC  30E7               	movlw	231
 10160  0BDD  003E               	movlb	30	; select bank30
 10161  0BDE  00CE               	movwf	78	;volatile
 10162                           
 10163                           ;pin_manager.c: 72: ANSELB = 0xCF;
 10164  0BDF  30CF               	movlw	207
 10165  0BE0  00C3               	movwf	67	;volatile
 10166                           
 10167                           ;pin_manager.c: 73: ANSELA = 0xFF;
 10168  0BE1  30FF               	movlw	255
 10169  0BE2  00B8               	movwf	56	;volatile
 10170                           
 10171                           ;pin_manager.c: 78: WPUE = 0x00;
 10172  0BE3  01E5               	clrf	101	;volatile
 10173                           
 10174                           ;pin_manager.c: 79: WPUB = 0x30;
 10175  0BE4  3030               	movlw	48
 10176  0BE5  00C4               	movwf	68	;volatile
 10177                           
 10178                           ;pin_manager.c: 80: WPUA = 0x00;
 10179  0BE6  01B9               	clrf	57	;volatile
 10180                           
 10181                           ;pin_manager.c: 81: WPUC = 0x00;
 10182  0BE7  01CF               	clrf	79	;volatile
 10183                           
 10184                           ;pin_manager.c: 86: ODCONA = 0x00;
 10185  0BE8  01BA               	clrf	58	;volatile
 10186                           
 10187                           ;pin_manager.c: 87: ODCONB = 0x00;
 10188  0BE9  01C5               	clrf	69	;volatile
 10189                           
 10190                           ;pin_manager.c: 88: ODCONC = 0x00;
 10191  0BEA  01D0               	clrf	80	;volatile
 10192                           
 10193                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
 10194  0BEB  3000               	movlw	0
 10195  0BEC  1B8B               	btfsc	11,7	;volatile
 10196  0BED  3001               	movlw	1
 10197  0BEE  0020               	movlb	0	; select bank0
 10198  0BEF  00A0               	movwf	PIN_MANAGER_Initialize@state
 10199                           
 10200                           ;pin_manager.c: 96: GIE = 0;
 10201  0BF0  138B               	bcf	11,7	;volatile
 10202                           
 10203                           ;pin_manager.c: 97: PPSLOCK = 0x55;
 10204  0BF1  3055               	movlw	85
 10205  0BF2  003D               	movlb	29	; select bank29
 10206  0BF3  008F               	movwf	15	;volsfr
 10207                           
 10208                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
 10209  0BF4  30AA               	movlw	170
 10210  0BF5  008F               	movwf	15	;volsfr
 10211                           
 10212                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
 10213  0BF6  100F               	bcf	15,0	;volsfr
 10214                           
 10215                           ;pin_manager.c: 101: SSP1DATPPSbits.SSP1DATPPS = 0x13;
 10216  0BF7  0846               	movf	70,w	;volatile
 10217  0BF8  39E0               	andlw	-32
 10218  0BF9  3813               	iorlw	19
 10219  0BFA  00C6               	movwf	70	;volatile
 10220                           
 10221                           ;pin_manager.c: 102: SSP1CLKPPSbits.SSP1CLKPPS = 0x14;
 10222  0BFB  0845               	movf	69,w	;volatile
 10223  0BFC  39E0               	andlw	-32
 10224  0BFD  3814               	iorlw	20
 10225  0BFE  00C5               	movwf	69	;volatile
 10226                           
 10227                           ;pin_manager.c: 103: RC3PPS = 0x15;
 10228  0BFF  3015               	movlw	21
 10229  0C00  003E               	movlb	30	; select bank30
 10230  0C01  00A3               	movwf	35	;volatile
 10231                           
 10232                           ;pin_manager.c: 104: RC4PPS = 0x14;
 10233  0C02  3014               	movlw	20
 10234  0C03  00A4               	movwf	36	;volatile
 10235                           
 10236                           ;pin_manager.c: 106: PPSLOCK = 0x55;
 10237  0C04  3055               	movlw	85
 10238  0C05  003D               	movlb	29	; select bank29
 10239  0C06  008F               	movwf	15	;volsfr
 10240                           
 10241                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
 10242  0C07  30AA               	movlw	170
 10243  0C08  008F               	movwf	15	;volsfr
 10244                           
 10245                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x01;
 10246  0C09  140F               	bsf	15,0	;volsfr
 10247                           
 10248                           ;pin_manager.c: 110: GIE = state;
 10249  0C0A  0020               	movlb	0	; select bank0
 10250  0C0B  1C20               	btfss	PIN_MANAGER_Initialize@state,0
 10251  0C0C  2C0F               	goto	u4050
 10252  0C0D  178B               	bsf	11,7	;volatile
 10253  0C0E  0008               	return
 10254  0C0F                     u4050:	
 10255  0C0F  138B               	bcf	11,7	;volatile
 10256  0C10  0008               	return
 10257  0C11                     __end_of_PIN_MANAGER_Initialize:	
 10258                           
 10259                           	psect	text21
 10260  09BC                     __ptext21:	
 10261 ;; *************** function _OSCILLATOR_Initialize *****************
 10262 ;; Defined at:
 10263 ;;		line 92 in file "mcc_generated_files/mcc.c"
 10264 ;; Parameters:    Size  Location     Type
 10265 ;;		None
 10266 ;; Auto vars:     Size  Location     Type
 10267 ;;		None
 10268 ;; Return value:  Size  Location     Type
 10269 ;;                  1    wreg      void 
 10270 ;; Registers used:
 10271 ;;		wreg, status,2
 10272 ;; Tracked objects:
 10273 ;;		On entry : 0/0
 10274 ;;		On exit  : 0/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;Total ram usage:        0 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:    3
 10284 ;; This function calls:
 10285 ;;		Nothing
 10286 ;; This function is called by:
 10287 ;;		_SYSTEM_Initialize
 10288 ;; This function uses a non-reentrant model
 10289 ;;
 10290                           
 10291                           
 10292                           ;psect for function _OSCILLATOR_Initialize
 10293  09BC                     _OSCILLATOR_Initialize:	
 10294                           
 10295                           ;mcc.c: 95: OSCCON1 = 0x60;
 10296                           
 10297                           ;incstack = 0
 10298                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10299  09BC  3060               	movlw	96
 10300  09BD  0031               	movlb	17	; select bank17
 10301  09BE  008D               	movwf	13	;volatile
 10302                           
 10303                           ;mcc.c: 97: OSCCON3 = 0x00;
 10304  09BF  018F               	clrf	15	;volatile
 10305                           
 10306                           ;mcc.c: 99: OSCEN = 0x00;
 10307  09C0  0191               	clrf	17	;volatile
 10308                           
 10309                           ;mcc.c: 101: OSCFRQ = 0x06;
 10310  09C1  3006               	movlw	6
 10311  09C2  0093               	movwf	19	;volatile
 10312                           
 10313                           ;mcc.c: 103: OSCTUNE = 0x00;
 10314  09C3  0192               	clrf	18	;volatile
 10315  09C4  0008               	return
 10316  09C5                     __end_of_OSCILLATOR_Initialize:	
 10317                           
 10318                           	psect	text22
 10319  0A51                     __ptext22:	
 10320 ;; *************** function _I2C1_Initialize *****************
 10321 ;; Defined at:
 10322 ;;		line 198 in file "mcc_generated_files/i2c1.c"
 10323 ;; Parameters:    Size  Location     Type
 10324 ;;		None
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;                  1    wreg      void 
 10329 ;; Registers used:
 10330 ;;		wreg, status,2
 10331 ;; Tracked objects:
 10332 ;;		On entry : 0/0
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;Total ram usage:        1 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; Hardware stack levels required when called:    3
 10343 ;; This function calls:
 10344 ;;		Nothing
 10345 ;; This function is called by:
 10346 ;;		_SYSTEM_Initialize
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350                           
 10351                           ;psect for function _I2C1_Initialize
 10352  0A51                     _I2C1_Initialize:	
 10353                           
 10354                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
 10355                           
 10356                           ;incstack = 0
 10357                           ; Regs used in _I2C1_Initialize: [wreg+status,2]
 10358  0A51  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 10359  0A52  0020               	movlb	0	; select bank0
 10360  0A53  00A0               	movwf	??_I2C1_Initialize
 10361  0A54  0820               	movf	??_I2C1_Initialize,w
 10362  0A55  00E8               	movwf	low ((_i2c1_object| 0+1))
 10363                           
 10364                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
 10365  0A56  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 10366  0A57  00A0               	movwf	??_I2C1_Initialize
 10367  0A58  0820               	movf	??_I2C1_Initialize,w
 10368  0A59  00E7               	movwf	_i2c1_object
 10369                           
 10370                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
 10371  0A5A  14E9               	bsf	_i2c1_object+2,1
 10372                           
 10373                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
 10374  0A5B  1069               	bcf	_i2c1_object+2,0
 10375                           
 10376                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
 10377  0A5C  01EB               	clrf	_i2c1_object+4
 10378                           
 10379                           ;i2c1.c: 208: SSP1STAT = 0x00;
 10380  0A5D  0023               	movlb	3	; select bank3
 10381  0A5E  018F               	clrf	15	;volatile
 10382                           
 10383                           ;i2c1.c: 210: SSP1CON1 = 0x28;
 10384  0A5F  3028               	movlw	40
 10385  0A60  0090               	movwf	16	;volatile
 10386                           
 10387                           ;i2c1.c: 212: SSP1CON3 = 0x00;
 10388  0A61  0192               	clrf	18	;volatile
 10389                           
 10390                           ;i2c1.c: 214: SSP1ADD = 0x13;
 10391  0A62  3013               	movlw	19
 10392  0A63  008D               	movwf	13	;volatile
 10393                           
 10394                           ;i2c1.c: 218: PIR3bits.SSP1IF = 0;
 10395  0A64  002E               	movlb	14	; select bank14
 10396  0A65  100F               	bcf	15,0	;volatile
 10397                           
 10398                           ;i2c1.c: 220: PIE3bits.SSP1IE = 1;
 10399  0A66  1419               	bsf	25,0	;volatile
 10400  0A67  0008               	return
 10401  0A68                     __end_of_I2C1_Initialize:	
 10402                           
 10403                           	psect	text23
 10404  0A99                     __ptext23:	
 10405 ;; *************** function _ADCC_Initialize *****************
 10406 ;; Defined at:
 10407 ;;		line 62 in file "mcc_generated_files/adcc.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;		None
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;		None
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  1    wreg      void 
 10414 ;; Registers used:
 10415 ;;		wreg, status,2
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;Total ram usage:        0 bytes
 10426 ;; Hardware stack levels used:    1
 10427 ;; Hardware stack levels required when called:    3
 10428 ;; This function calls:
 10429 ;;		Nothing
 10430 ;; This function is called by:
 10431 ;;		_SYSTEM_Initialize
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           
 10436                           ;psect for function _ADCC_Initialize
 10437  0A99                     _ADCC_Initialize:	
 10438                           
 10439                           ;adcc.c: 66: ADCON1 = 0x00;
 10440                           
 10441                           ;incstack = 0
 10442                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 10443  0A99  0021               	movlb	1	; select bank1
 10444  0A9A  0194               	clrf	20	;volatile
 10445                           
 10446                           ;adcc.c: 68: ADCON2 = 0x03;
 10447  0A9B  3003               	movlw	3
 10448  0A9C  0095               	movwf	21	;volatile
 10449                           
 10450                           ;adcc.c: 70: ADCON3 = 0x00;
 10451  0A9D  0196               	clrf	22	;volatile
 10452                           
 10453                           ;adcc.c: 72: ADACT = 0x00;
 10454  0A9E  0199               	clrf	25	;volatile
 10455                           
 10456                           ;adcc.c: 74: ADSTAT = 0x00;
 10457  0A9F  0197               	clrf	23	;volatile
 10458                           
 10459                           ;adcc.c: 76: ADCLK = 0x13;
 10460  0AA0  3013               	movlw	19
 10461  0AA1  0098               	movwf	24	;volatile
 10462                           
 10463                           ;adcc.c: 78: ADREF = 0x00;
 10464  0AA2  019A               	clrf	26	;volatile
 10465                           
 10466                           ;adcc.c: 80: ADCAP = 0x00;
 10467  0AA3  019B               	clrf	27	;volatile
 10468                           
 10469                           ;adcc.c: 82: ADPRE = 0x00;
 10470  0AA4  019C               	clrf	28	;volatile
 10471                           
 10472                           ;adcc.c: 84: ADACQ = 0x04;
 10473  0AA5  3004               	movlw	4
 10474  0AA6  009D               	movwf	29	;volatile
 10475                           
 10476                           ;adcc.c: 86: ADPCH = 0x00;
 10477  0AA7  019E               	clrf	30	;volatile
 10478                           
 10479                           ;adcc.c: 88: ADRPT = 0x00;
 10480  0AA8  0022               	movlb	2	; select bank2
 10481  0AA9  018D               	clrf	13	;volatile
 10482                           
 10483                           ;adcc.c: 90: ADLTHL = 0x00;
 10484  0AAA  018E               	clrf	14	;volatile
 10485                           
 10486                           ;adcc.c: 92: ADLTHH = 0x00;
 10487  0AAB  018F               	clrf	15	;volatile
 10488                           
 10489                           ;adcc.c: 94: ADUTHL = 0x00;
 10490  0AAC  0190               	clrf	16	;volatile
 10491                           
 10492                           ;adcc.c: 96: ADUTHH = 0x00;
 10493  0AAD  0191               	clrf	17	;volatile
 10494                           
 10495                           ;adcc.c: 98: ADSTPTL = 0x00;
 10496  0AAE  0192               	clrf	18	;volatile
 10497                           
 10498                           ;adcc.c: 100: ADSTPTH = 0x00;
 10499  0AAF  0193               	clrf	19	;volatile
 10500                           
 10501                           ;adcc.c: 103: ADCON0 = 0x84;
 10502  0AB0  3084               	movlw	132
 10503  0AB1  0021               	movlb	1	; select bank1
 10504  0AB2  0093               	movwf	19	;volatile
 10505  0AB3  0008               	return
 10506  0AB4                     __end_of_ADCC_Initialize:	
 10507                           
 10508                           	psect	text24
 10509  09F4                     __ptext24:	
 10510 ;; *************** function _LED7SegSetup *****************
 10511 ;; Defined at:
 10512 ;;		line 31 in file "LED7Seg.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;		None
 10515 ;; Auto vars:     Size  Location     Type
 10516 ;;		None
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  1    wreg      void 
 10519 ;; Registers used:
 10520 ;;		None
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;Total ram usage:        0 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; Hardware stack levels required when called:    3
 10533 ;; This function calls:
 10534 ;;		Nothing
 10535 ;; This function is called by:
 10536 ;;		_main
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           
 10541                           ;psect for function _LED7SegSetup
 10542  09F4                     _LED7SegSetup:	
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in _LED7SegSetup: []
 10546                           ;LED7Seg.c: 34: do { ANSELCbits.ANSC5 = 0; } while(0);
 10547  09F4  003E               	movlb	30	; select bank30
 10548  09F5  12CE               	bcf	78,5	;volatile
 10549                           
 10550                           ;LED7Seg.c: 35: do { TRISCbits.TRISC5 = 0; } while(0);
 10551  09F6  0020               	movlb	0	; select bank0
 10552  09F7  1293               	bcf	19,5	;volatile
 10553                           
 10554                           ;LED7Seg.c: 38: do { ANSELCbits.ANSC6 = 0; } while(0);
 10555  09F8  003E               	movlb	30	; select bank30
 10556  09F9  134E               	bcf	78,6	;volatile
 10557                           
 10558                           ;LED7Seg.c: 39: do { TRISCbits.TRISC6 = 0; } while(0);
 10559  09FA  0020               	movlb	0	; select bank0
 10560  09FB  1313               	bcf	19,6	;volatile
 10561                           
 10562                           ;LED7Seg.c: 42: do { ANSELCbits.ANSC7 = 0; } while(0);
 10563  09FC  003E               	movlb	30	; select bank30
 10564  09FD  13CE               	bcf	78,7	;volatile
 10565                           
 10566                           ;LED7Seg.c: 43: do { TRISCbits.TRISC7 = 0; } while(0);
 10567  09FE  0020               	movlb	0	; select bank0
 10568  09FF  1393               	bcf	19,7	;volatile
 10569  0A00  0008               	return
 10570  0A01                     __end_of_LED7SegSetup:	
 10571                           
 10572                           	psect	text25
 10573  0B99                     __ptext25:	
 10574 ;; *************** function _LED7SegDisplayValueByDigit *****************
 10575 ;; Defined at:
 10576 ;;		line 95 in file "LED7Seg.c"
 10577 ;; Parameters:    Size  Location     Type
 10578 ;;  iTensDigit      2   20[BANK0 ] unsigned int 
 10579 ;;  iUnitsDigit     2   22[BANK0 ] unsigned int 
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  iTensCode       2   24[BANK0 ] unsigned int 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;                  1    wreg      void 
 10584 ;; Registers used:
 10585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10591 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;Total ram usage:        6 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; Hardware stack levels required when called:    7
 10598 ;; This function calls:
 10599 ;;		_LED7SegShiftOutPulseClock
 10600 ;; This function is called by:
 10601 ;;		_main
 10602 ;;		_LED7SegDisplayValue
 10603 ;; This function uses a non-reentrant model
 10604 ;;
 10605                           
 10606                           
 10607                           ;psect for function _LED7SegDisplayValueByDigit
 10608  0B99                     _LED7SegDisplayValueByDigit:	
 10609                           
 10610                           ;LED7Seg.c: 99: if(iUnitsDigit>9) iUnitsDigit=9;
 10611                           
 10612                           ;LED7Seg.c: 96: unsigned int iTensCode;
 10613                           ;LED7Seg.c: 98: if(0>iUnitsDigit) iUnitsDigit=0;
 10614                           
 10615                           ;incstack = 0
 10616                           ; Regs used in _LED7SegDisplayValueByDigit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10617  0B99  3000               	movlw	0
 10618  0B9A  0020               	movlb	0	; select bank0
 10619  0B9B  0237               	subwf	LED7SegDisplayValueByDigit@iUnitsDigit+1,w
 10620  0B9C  300A               	movlw	10
 10621  0B9D  1903               	skipnz
 10622  0B9E  0236               	subwf	LED7SegDisplayValueByDigit@iUnitsDigit,w
 10623  0B9F  1C03               	skipc
 10624  0BA0  2BA5               	goto	l4358
 10625  0BA1  3009               	movlw	9
 10626  0BA2  00B6               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit
 10627  0BA3  3000               	movlw	0
 10628  0BA4  00B7               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit+1
 10629  0BA5                     l4358:	
 10630                           ;LED7Seg.c: 101: if(0>iTensDigit) iTensDigit=0;
 10631                           
 10632                           
 10633                           ;LED7Seg.c: 102: if(iTensDigit>9) iTensDigit=9;
 10634  0BA5  3000               	movlw	0
 10635  0BA6  0235               	subwf	LED7SegDisplayValueByDigit@iTensDigit+1,w
 10636  0BA7  300A               	movlw	10
 10637  0BA8  1903               	skipnz
 10638  0BA9  0234               	subwf	LED7SegDisplayValueByDigit@iTensDigit,w
 10639  0BAA  1C03               	skipc
 10640  0BAB  2BB0               	goto	l4362
 10641  0BAC  3009               	movlw	9
 10642  0BAD  00B4               	movwf	LED7SegDisplayValueByDigit@iTensDigit
 10643  0BAE  3000               	movlw	0
 10644  0BAF  00B5               	movwf	LED7SegDisplayValueByDigit@iTensDigit+1
 10645  0BB0                     l4362:	
 10646                           
 10647                           ;LED7Seg.c: 104: iTensCode=segdisp[iTensDigit];
 10648  0BB0  3534               	lslf	LED7SegDisplayValueByDigit@iTensDigit,w
 10649  0BB1  3E20               	addlw	(low (_segdisp| (0+256)))& (0+255)
 10650  0BB2  0086               	movwf	6
 10651  0BB3  3001               	movlw	1	; select bank2/3
 10652  0BB4  0087               	movwf	7
 10653  0BB5  3F40               	moviw [0]fsr1
 10654  0BB6  00B8               	movwf	LED7SegDisplayValueByDigit@iTensCode
 10655  0BB7  3F41               	moviw [1]fsr1
 10656  0BB8  00B9               	movwf	LED7SegDisplayValueByDigit@iTensCode+1
 10657                           
 10658                           ;LED7Seg.c: 105: if(0==iTensDigit) iTensCode=255;
 10659  0BB9  0834               	movf	LED7SegDisplayValueByDigit@iTensDigit,w
 10660  0BBA  0435               	iorwf	LED7SegDisplayValueByDigit@iTensDigit+1,w
 10661  0BBB  1D03               	btfss	3,2
 10662  0BBC  2BC1               	goto	l4368
 10663  0BBD  30FF               	movlw	255
 10664  0BBE  00B8               	movwf	LED7SegDisplayValueByDigit@iTensCode
 10665  0BBF  3000               	movlw	0
 10666  0BC0  00B9               	movwf	LED7SegDisplayValueByDigit@iTensCode+1
 10667  0BC1                     l4368:	
 10668                           
 10669                           ;LED7Seg.c: 107: LED7SegShiftOutPulseClock( segdisp[iUnitsDigit]);
 10670  0BC1  3536               	lslf	LED7SegDisplayValueByDigit@iUnitsDigit,w
 10671  0BC2  3E20               	addlw	(low (_segdisp| (0+256)))& (0+255)
 10672  0BC3  0086               	movwf	6
 10673  0BC4  3001               	movlw	1	; select bank2/3
 10674  0BC5  0087               	movwf	7
 10675  0BC6  0801               	movf	1,w
 10676  0BC7  318A  22D0  318B   	fcall	_LED7SegShiftOutPulseClock
 10677                           
 10678                           ;LED7Seg.c: 108: LED7SegShiftOutPulseClock( iTensCode );
 10679  0BCA  0020               	movlb	0	; select bank0
 10680  0BCB  0838               	movf	LED7SegDisplayValueByDigit@iTensCode,w
 10681  0BCC  318A  22D0         	fcall	_LED7SegShiftOutPulseClock
 10682                           
 10683                           ;LED7Seg.c: 110: do { LATCbits.LATC5 = 1; } while(0);
 10684  0BCE  0020               	movlb	0	; select bank0
 10685  0BCF  1698               	bsf	24,5	;volatile
 10686                           
 10687                           ;LED7Seg.c: 111: do { LATCbits.LATC5 = 0; } while(0);
 10688  0BD0  1298               	bcf	24,5	;volatile
 10689  0BD1  0008               	return
 10690  0BD2                     __end_of_LED7SegDisplayValueByDigit:	
 10691                           
 10692                           	psect	text26
 10693  0AD0                     __ptext26:	
 10694 ;; *************** function _LED7SegShiftOutPulseClock *****************
 10695 ;; Defined at:
 10696 ;;		line 69 in file "LED7Seg.c"
 10697 ;; Parameters:    Size  Location     Type
 10698 ;;  val             1    wreg     unsigned char 
 10699 ;; Auto vars:     Size  Location     Type
 10700 ;;  val             1   18[BANK0 ] unsigned char 
 10701 ;;  i               1   19[BANK0 ] unsigned char 
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  1    wreg      void 
 10704 ;; Registers used:
 10705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;Total ram usage:        3 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    6
 10718 ;; This function calls:
 10719 ;;		_LED7SegPinWrite
 10720 ;;		_LED7SegPulseClock
 10721 ;; This function is called by:
 10722 ;;		_LED7SegDisplayValueByDigit
 10723 ;;		_LED7SegBlankDisplay
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           
 10728                           ;psect for function _LED7SegShiftOutPulseClock
 10729  0AD0                     _LED7SegShiftOutPulseClock:	
 10730                           
 10731                           ;incstack = 0
 10732                           ; Regs used in _LED7SegShiftOutPulseClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10733                           ;LED7SegShiftOutPulseClock@val stored from wreg
 10734  0AD0  0020               	movlb	0	; select bank0
 10735  0AD1  00B2               	movwf	LED7SegShiftOutPulseClock@val
 10736                           
 10737                           ;LED7Seg.c: 71: char i;
 10738                           ;LED7Seg.c: 75: for (i = 0; i < 8; i++) {
 10739  0AD2  01B3               	clrf	LED7SegShiftOutPulseClock@i
 10740  0AD3                     L5:	
 10741  0AD3  3008               	movlw	8
 10742  0AD4  0233               	subwf	LED7SegShiftOutPulseClock@i,w
 10743  0AD5  1803               	btfsc	3,0
 10744  0AD6  0008               	return
 10745                           
 10746                           ;LED7Seg.c: 76: LED7SegPinWrite((val & (1 << i)));
 10747  0AD7  3001               	movlw	1
 10748  0AD8  00B1               	movwf	??_LED7SegShiftOutPulseClock
 10749  0AD9  0A33               	incf	LED7SegShiftOutPulseClock@i,w
 10750  0ADA  2ADC               	goto	u4084
 10751  0ADB                     u4085:	
 10752  0ADB  35B1               	lslf	??_LED7SegShiftOutPulseClock,f
 10753  0ADC                     u4084:	
 10754  0ADC  0B89               	decfsz	9,f
 10755  0ADD  2ADB               	goto	u4085
 10756  0ADE  0831               	movf	??_LED7SegShiftOutPulseClock,w
 10757  0ADF  0532               	andwf	LED7SegShiftOutPulseClock@val,w
 10758  0AE0  3189  21B3  318A   	fcall	_LED7SegPinWrite
 10759                           
 10760                           ;LED7Seg.c: 77: LED7SegPulseClock();
 10761  0AE3  3189  21C5  318A   	fcall	_LED7SegPulseClock
 10762  0AE6  3001               	movlw	1
 10763  0AE7  0020               	movlb	0	; select bank0
 10764  0AE8  00B1               	movwf	??_LED7SegShiftOutPulseClock
 10765  0AE9  0831               	movf	??_LED7SegShiftOutPulseClock,w
 10766  0AEA  07B3               	addwf	LED7SegShiftOutPulseClock@i,f
 10767  0AEB  2AD3               	goto	L5
 10768  0AEC                     __end_of_LED7SegShiftOutPulseClock:	
 10769                           
 10770                           	psect	text27
 10771  09C5                     __ptext27:	
 10772 ;; *************** function _LED7SegPulseClock *****************
 10773 ;; Defined at:
 10774 ;;		line 60 in file "LED7Seg.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;		None
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;		None
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  1    wreg      void 
 10781 ;; Registers used:
 10782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;Total ram usage:        0 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    5
 10795 ;; This function calls:
 10796 ;;		_delay
 10797 ;; This function is called by:
 10798 ;;		_LED7SegShiftOutPulseClock
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           
 10803                           ;psect for function _LED7SegPulseClock
 10804  09C5                     _LED7SegPulseClock:	
 10805                           
 10806                           ;incstack = 0
 10807                           ; Regs used in _LED7SegPulseClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10808                           ;LED7Seg.c: 63: do { LATCbits.LATC6 = 1; } while(0);
 10809  09C5  0020               	movlb	0	; select bank0
 10810  09C6  1718               	bsf	24,6	;volatile
 10811                           
 10812                           ;LED7Seg.c: 64: delay(1);
 10813  09C7  3001               	movlw	1
 10814  09C8  00A6               	movwf	delay@delaytime
 10815  09C9  3000               	movlw	0
 10816  09CA  00A7               	movwf	delay@delaytime+1
 10817  09CB  318C  2497         	fcall	_delay
 10818                           
 10819                           ;LED7Seg.c: 66: do { LATCbits.LATC6 = 0; } while(0);
 10820  09CD  0020               	movlb	0	; select bank0
 10821  09CE  1318               	bcf	24,6	;volatile
 10822  09CF  0008               	return
 10823  09D0                     __end_of_LED7SegPulseClock:	
 10824                           
 10825                           	psect	text28
 10826  0C97                     __ptext28:	
 10827 ;; *************** function _delay *****************
 10828 ;; Defined at:
 10829 ;;		line 194 in file "main.c"
 10830 ;; Parameters:    Size  Location     Type
 10831 ;;  delaytime       2    6[BANK0 ] int 
 10832 ;; Auto vars:     Size  Location     Type
 10833 ;;  counter         4   13[BANK0 ] long 
 10834 ;;  adjustedDela    4    9[BANK0 ] long 
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  1    wreg      void 
 10837 ;; Registers used:
 10838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10839 ;; Tracked objects:
 10840 ;;		On entry : 0/0
 10841 ;;		On exit  : 0/0
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10844 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;Total ram usage:       11 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; Hardware stack levels required when called:    4
 10851 ;; This function calls:
 10852 ;;		___wmul
 10853 ;; This function is called by:
 10854 ;;		_blinkyLoop
 10855 ;;		_main
 10856 ;;		_LED7SegPulseClock
 10857 ;;		_LED7SegLoop
 10858 ;; This function uses a non-reentrant model
 10859 ;;
 10860                           
 10861                           
 10862                           ;psect for function _delay
 10863  0C97                     _delay:	
 10864                           
 10865                           ;main.c: 195: long counter = 0;
 10866                           
 10867                           ;incstack = 0
 10868                           ; Regs used in _delay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10869  0C97  3000               	movlw	0
 10870  0C98  0020               	movlb	0	; select bank0
 10871  0C99  00B0               	movwf	delay@counter+3
 10872  0C9A  3000               	movlw	0
 10873  0C9B  00AF               	movwf	delay@counter+2
 10874  0C9C  3000               	movlw	0
 10875  0C9D  00AE               	movwf	delay@counter+1
 10876  0C9E  3000               	movlw	0
 10877  0C9F  00AD               	movwf	delay@counter
 10878                           
 10879                           ;main.c: 196: long adjustedDelaytime=delaytime*cMstrClkAdjust;
 10880  0CA0  0827               	movf	delay@delaytime+1,w
 10881  0CA1  00A1               	movwf	___wmul@multiplier+1
 10882  0CA2  0826               	movf	delay@delaytime,w
 10883  0CA3  00A0               	movwf	___wmul@multiplier
 10884  0CA4  302A               	movlw	low (_cMstrClkAdjust| (0+32768))
 10885  0CA5  0084               	movwf	4
 10886  0CA6  3090               	movlw	high (_cMstrClkAdjust| (0+32768))
 10887  0CA7  0085               	movwf	5
 10888  0CA8  3F00               	moviw [0]fsr0
 10889  0CA9  00A2               	movwf	___wmul@multiplicand
 10890  0CAA  3F01               	moviw [1]fsr0
 10891  0CAB  00A3               	movwf	___wmul@multiplicand+1
 10892  0CAC  318A  22B4  318C   	fcall	___wmul
 10893  0CAF  0020               	movlb	0	; select bank0
 10894  0CB0  0820               	movf	?___wmul,w
 10895  0CB1  00A9               	movwf	delay@adjustedDelaytime
 10896  0CB2  0821               	movf	?___wmul+1,w
 10897  0CB3  00AA               	movwf	delay@adjustedDelaytime+1
 10898  0CB4  0D89               	rlf	9,f
 10899  0CB5  3B89               	subwfb	9,f
 10900  0CB6  0989               	comf	9,f
 10901  0CB7  00AB               	movwf	delay@adjustedDelaytime+2
 10902  0CB8  00AC               	movwf	delay@adjustedDelaytime+3
 10903                           
 10904                           ;main.c: 198: if (0<delaytime)
 10905  0CB9  0827               	movf	delay@delaytime+1,w
 10906  0CBA  3A80               	xorlw	128
 10907  0CBB  00A8               	movwf	??_delay
 10908  0CBC  3080               	movlw	128
 10909  0CBD  0228               	subwf	??_delay,w
 10910  0CBE  1D03               	skipz
 10911  0CBF  2CC2               	goto	u4025
 10912  0CC0  3001               	movlw	1
 10913  0CC1  0226               	subwf	delay@delaytime,w
 10914  0CC2                     u4025:	
 10915  0CC2  1C03               	skipc
 10916  0CC3  0008               	return
 10917                           
 10918                           ;main.c: 199: for (counter = 0; counter<adjustedDelaytime; counter++);
 10919  0CC4  3000               	movlw	0
 10920  0CC5  0020               	movlb	0	; select bank0
 10921  0CC6  00B0               	movwf	delay@counter+3
 10922  0CC7  3000               	movlw	0
 10923  0CC8  00AF               	movwf	delay@counter+2
 10924  0CC9  3000               	movlw	0
 10925  0CCA  00AE               	movwf	delay@counter+1
 10926  0CCB  3000               	movlw	0
 10927  0CCC  00AD               	movwf	delay@counter
 10928  0CCD                     l504:	
 10929  0CCD  0830               	movf	delay@counter+3,w
 10930  0CCE  3A80               	xorlw	128
 10931  0CCF  00A8               	movwf	??_delay
 10932  0CD0  082C               	movf	delay@adjustedDelaytime+3,w
 10933  0CD1  3A80               	xorlw	128
 10934  0CD2  0228               	subwf	??_delay,w
 10935  0CD3  1D03               	skipz
 10936  0CD4  2CDF               	goto	u4033
 10937  0CD5  082B               	movf	delay@adjustedDelaytime+2,w
 10938  0CD6  022F               	subwf	delay@counter+2,w
 10939  0CD7  1D03               	skipz
 10940  0CD8  2CDF               	goto	u4033
 10941  0CD9  082A               	movf	delay@adjustedDelaytime+1,w
 10942  0CDA  022E               	subwf	delay@counter+1,w
 10943  0CDB  1D03               	skipz
 10944  0CDC  2CDF               	goto	u4033
 10945  0CDD  0829               	movf	delay@adjustedDelaytime,w
 10946  0CDE  022D               	subwf	delay@counter,w
 10947  0CDF                     u4033:	
 10948  0CDF  1803               	btfsc	3,0
 10949  0CE0  0008               	return
 10950  0CE1  3001               	movlw	1
 10951  0CE2  07AD               	addwf	delay@counter,f
 10952  0CE3  3000               	movlw	0
 10953  0CE4  3DAE               	addwfc	delay@counter+1,f
 10954  0CE5  3000               	movlw	0
 10955  0CE6  3DAF               	addwfc	delay@counter+2,f
 10956  0CE7  3000               	movlw	0
 10957  0CE8  3DB0               	addwfc	delay@counter+3,f
 10958  0CE9  2CCD               	goto	l504
 10959  0CEA                     __end_of_delay:	
 10960                           
 10961                           	psect	text29
 10962  0AB4                     __ptext29:	
 10963 ;; *************** function ___wmul *****************
 10964 ;; Defined at:
 10965 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10968 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;  product         2    4[BANK0 ] unsigned int 
 10971 ;; Return value:  Size  Location     Type
 10972 ;;                  2    0[BANK0 ] unsigned int 
 10973 ;; Registers used:
 10974 ;;		wreg, status,2, status,0
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10980 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;Total ram usage:        6 bytes
 10985 ;; Hardware stack levels used:    1
 10986 ;; Hardware stack levels required when called:    3
 10987 ;; This function calls:
 10988 ;;		Nothing
 10989 ;; This function is called by:
 10990 ;;		_delay
 10991 ;;		_blinkyLoop
 10992 ;;		_main
 10993 ;; This function uses a non-reentrant model
 10994 ;;
 10995                           
 10996                           
 10997                           ;psect for function ___wmul
 10998  0AB4                     ___wmul:	
 10999                           
 11000                           ;incstack = 0
 11001                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11002  0AB4  0020               	movlb	0	; select bank0
 11003  0AB5  01A4               	clrf	___wmul@product
 11004  0AB6  01A5               	clrf	___wmul@product+1
 11005  0AB7                     l4178:	
 11006  0AB7  1C20               	btfss	___wmul@multiplier,0
 11007  0AB8  2ABD               	goto	l950
 11008  0AB9  0822               	movf	___wmul@multiplicand,w
 11009  0ABA  07A4               	addwf	___wmul@product,f
 11010  0ABB  0823               	movf	___wmul@multiplicand+1,w
 11011  0ABC  3DA5               	addwfc	___wmul@product+1,f
 11012  0ABD                     l950:	
 11013  0ABD  3001               	movlw	1
 11014  0ABE                     u3995:	
 11015  0ABE  35A2               	lslf	___wmul@multiplicand,f
 11016  0ABF  0DA3               	rlf	___wmul@multiplicand+1,f
 11017  0AC0  0B89               	decfsz	9,f
 11018  0AC1  2ABE               	goto	u3995
 11019  0AC2  3001               	movlw	1
 11020  0AC3                     u4005:	
 11021  0AC3  36A1               	lsrf	___wmul@multiplier+1,f
 11022  0AC4  0CA0               	rrf	___wmul@multiplier,f
 11023  0AC5  0B89               	decfsz	9,f
 11024  0AC6  2AC3               	goto	u4005
 11025  0AC7  0820               	movf	___wmul@multiplier,w
 11026  0AC8  0421               	iorwf	___wmul@multiplier+1,w
 11027  0AC9  1D03               	btfss	3,2
 11028  0ACA  2AB7               	goto	l4178
 11029  0ACB  0825               	movf	___wmul@product+1,w
 11030  0ACC  00A1               	movwf	?___wmul+1
 11031  0ACD  0824               	movf	___wmul@product,w
 11032  0ACE  00A0               	movwf	?___wmul
 11033  0ACF  0008               	return
 11034  0AD0                     __end_of___wmul:	
 11035                           
 11036                           	psect	text30
 11037  09B3                     __ptext30:	
 11038 ;; *************** function _LED7SegPinWrite *****************
 11039 ;; Defined at:
 11040 ;;		line 48 in file "LED7Seg.c"
 11041 ;; Parameters:    Size  Location     Type
 11042 ;;  val             1    wreg     unsigned char 
 11043 ;; Auto vars:     Size  Location     Type
 11044 ;;  val             1    0[BANK0 ] unsigned char 
 11045 ;; Return value:  Size  Location     Type
 11046 ;;                  1    wreg      void 
 11047 ;; Registers used:
 11048 ;;		wreg, status,2, status,0
 11049 ;; Tracked objects:
 11050 ;;		On entry : 0/0
 11051 ;;		On exit  : 0/0
 11052 ;;		Unchanged: 0/0
 11053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11058 ;;Total ram usage:        1 bytes
 11059 ;; Hardware stack levels used:    1
 11060 ;; Hardware stack levels required when called:    3
 11061 ;; This function calls:
 11062 ;;		Nothing
 11063 ;; This function is called by:
 11064 ;;		_LED7SegShiftOutPulseClock
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           
 11069                           ;psect for function _LED7SegPinWrite
 11070  09B3                     _LED7SegPinWrite:	
 11071                           
 11072                           ;incstack = 0
 11073                           ; Regs used in _LED7SegPinWrite: [wreg+status,2+status,0]
 11074                           ;LED7SegPinWrite@val stored from wreg
 11075  09B3  0020               	movlb	0	; select bank0
 11076  09B4  00A0               	movwf	LED7SegPinWrite@val
 11077                           
 11078                           ;LED7Seg.c: 50: if (val){
 11079  09B5  0820               	movf	LED7SegPinWrite@val,w
 11080  09B6  1903               	btfsc	3,2
 11081  09B7  29BA               	goto	l711
 11082                           
 11083                           ;LED7Seg.c: 52: do { LATCbits.LATC7 = 1; } while(0);
 11084  09B8  1798               	bsf	24,7	;volatile
 11085                           
 11086                           ;LED7Seg.c: 53: } else {
 11087  09B9  0008               	return
 11088  09BA                     l711:	
 11089                           ;LED7Seg.c: 55: do { LATCbits.LATC7 = 0; } while(0);
 11090                           
 11091  09BA  1398               	bcf	24,7	;volatile
 11092  09BB  0008               	return
 11093  09BC                     __end_of_LED7SegPinWrite:	
 11094                           
 11095                           	psect	text31
 11096  0A80                     __ptext31:	
 11097 ;; *************** function _InitmvcChannels *****************
 11098 ;; Defined at:
 11099 ;;		line 182 in file "main.c"
 11100 ;; Parameters:    Size  Location     Type
 11101 ;;		None
 11102 ;; Auto vars:     Size  Location     Type
 11103 ;;  i               2    1[BANK0 ] int 
 11104 ;; Return value:  Size  Location     Type
 11105 ;;                  1    wreg      void 
 11106 ;; Registers used:
 11107 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11108 ;; Tracked objects:
 11109 ;;		On entry : 0/0
 11110 ;;		On exit  : 0/0
 11111 ;;		Unchanged: 0/0
 11112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;Total ram usage:        3 bytes
 11118 ;; Hardware stack levels used:    1
 11119 ;; Hardware stack levels required when called:    3
 11120 ;; This function calls:
 11121 ;;		Nothing
 11122 ;; This function is called by:
 11123 ;;		_main
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           
 11128                           ;psect for function _InitmvcChannels
 11129  0A80                     _InitmvcChannels:	
 11130                           
 11131                           ;main.c: 183: for(int i=0; i<cMixFaderCount;i++) {
 11132                           
 11133                           ;incstack = 0
 11134                           ; Regs used in _InitmvcChannels: [wreg+fsr1l+fsr1h+status,2+status,0]
 11135  0A80  0020               	movlb	0	; select bank0
 11136  0A81  01A1               	clrf	InitmvcChannels@i
 11137  0A82  01A2               	clrf	InitmvcChannels@i+1
 11138  0A83                     L6:	
 11139  0A83  0822               	movf	InitmvcChannels@i+1,w
 11140  0A84  3A80               	xorlw	128
 11141  0A85  00A0               	movwf	??_InitmvcChannels
 11142  0A86  3080               	movlw	128
 11143  0A87  0220               	subwf	??_InitmvcChannels,w
 11144  0A88  1D03               	skipz
 11145  0A89  2A8C               	goto	u3005
 11146  0A8A  3004               	movlw	4
 11147  0A8B  0221               	subwf	InitmvcChannels@i,w
 11148  0A8C                     u3005:	
 11149  0A8C  1803               	btfsc	3,0
 11150  0A8D  0008               	return
 11151                           
 11152                           ;main.c: 184: mvcChannels[i]=0;
 11153  0A8E  0020               	movlb	0	; select bank0
 11154  0A8F  0821               	movf	InitmvcChannels@i,w
 11155  0A90  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
 11156  0A91  0086               	movwf	6
 11157  0A92  0187               	clrf	7
 11158  0A93  0181               	clrf	1
 11159  0A94  3001               	movlw	1
 11160  0A95  07A1               	addwf	InitmvcChannels@i,f
 11161  0A96  3000               	movlw	0
 11162  0A97  3DA2               	addwfc	InitmvcChannels@i+1,f
 11163  0A98  2A83               	goto	L6
 11164  0A99                     __end_of_InitmvcChannels:	
 11165                           
 11166                           	psect	text32
 11167  0AEC                     __ptext32:	
 11168 ;; *************** function _InitPanelInChannels *****************
 11169 ;; Defined at:
 11170 ;;		line 176 in file "main.c"
 11171 ;; Parameters:    Size  Location     Type
 11172 ;;		None
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;  i               2    1[BANK0 ] int 
 11175 ;; Return value:  Size  Location     Type
 11176 ;;                  1    wreg      void 
 11177 ;; Registers used:
 11178 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11179 ;; Tracked objects:
 11180 ;;		On entry : 0/0
 11181 ;;		On exit  : 0/0
 11182 ;;		Unchanged: 0/0
 11183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11185 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11187 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;Total ram usage:        3 bytes
 11189 ;; Hardware stack levels used:    1
 11190 ;; Hardware stack levels required when called:    3
 11191 ;; This function calls:
 11192 ;;		Nothing
 11193 ;; This function is called by:
 11194 ;;		_main
 11195 ;; This function uses a non-reentrant model
 11196 ;;
 11197                           
 11198                           
 11199                           ;psect for function _InitPanelInChannels
 11200  0AEC                     _InitPanelInChannels:	
 11201                           
 11202                           ;main.c: 177: for(int i=0; i<cMixFaderCount;i++) {
 11203                           
 11204                           ;incstack = 0
 11205                           ; Regs used in _InitPanelInChannels: [wreg+fsr1l+fsr1h+status,2+status,0]
 11206  0AEC  0020               	movlb	0	; select bank0
 11207  0AED  01A1               	clrf	InitPanelInChannels@i
 11208  0AEE  01A2               	clrf	InitPanelInChannels@i+1
 11209  0AEF                     L7:	
 11210  0AEF  0822               	movf	InitPanelInChannels@i+1,w
 11211  0AF0  3A80               	xorlw	128
 11212  0AF1  00A0               	movwf	??_InitPanelInChannels
 11213  0AF2  3080               	movlw	128
 11214  0AF3  0220               	subwf	??_InitPanelInChannels,w
 11215  0AF4  1D03               	skipz
 11216  0AF5  2AF8               	goto	u2985
 11217  0AF6  3004               	movlw	4
 11218  0AF7  0221               	subwf	InitPanelInChannels@i,w
 11219  0AF8                     u2985:	
 11220  0AF8  1803               	btfsc	3,0
 11221  0AF9  0008               	return
 11222                           
 11223                           ;main.c: 178: PanelInChannels[i]=0;
 11224  0AFA  0020               	movlb	0	; select bank0
 11225  0AFB  0821               	movf	InitPanelInChannels@i,w
 11226  0AFC  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
 11227  0AFD  0086               	movwf	6
 11228  0AFE  0187               	clrf	7
 11229  0AFF  0181               	clrf	1
 11230                           
 11231                           ;main.c: 179: faderActiveFlag[i]=0;
 11232  0B00  0821               	movf	InitPanelInChannels@i,w
 11233  0B01  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
 11234  0B02  0086               	movwf	6
 11235  0B03  0187               	clrf	7
 11236  0B04  0181               	clrf	1
 11237  0B05  3001               	movlw	1
 11238  0B06  07A1               	addwf	InitPanelInChannels@i,f
 11239  0B07  3000               	movlw	0
 11240  0B08  3DA2               	addwfc	InitPanelInChannels@i+1,f
 11241  0B09  2AEF               	goto	L7
 11242  0B0A                     __end_of_InitPanelInChannels:	
 11243                           
 11244                           	psect	text33
 11245  0A13                     __ptext33:	
 11246 ;; *************** function _ADCC_GetSingleConversion *****************
 11247 ;; Defined at:
 11248 ;;		line 132 in file "mcc_generated_files/adcc.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;  channel         1    wreg     enum E14259
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  channel         1    3[BANK0 ] enum E14259
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  2    0[BANK0 ] unsigned int 
 11255 ;; Registers used:
 11256 ;;		wreg
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11262 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;Total ram usage:        4 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; Hardware stack levels required when called:    3
 11269 ;; This function calls:
 11270 ;;		Nothing
 11271 ;; This function is called by:
 11272 ;;		_main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function _ADCC_GetSingleConversion
 11278  0A13                     _ADCC_GetSingleConversion:	
 11279                           
 11280                           ;incstack = 0
 11281                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 11282                           ;ADCC_GetSingleConversion@channel stored from wreg
 11283  0A13  0020               	movlb	0	; select bank0
 11284  0A14  00A3               	movwf	ADCC_GetSingleConversion@channel
 11285                           
 11286                           ;adcc.c: 135: ADPCH = channel;
 11287  0A15  0823               	movf	ADCC_GetSingleConversion@channel,w
 11288  0A16  0021               	movlb	1	; select bank1
 11289  0A17  009E               	movwf	30	;volatile
 11290                           
 11291                           ;adcc.c: 138: ADCON0bits.ADON = 1;
 11292  0A18  1793               	bsf	19,7	;volatile
 11293                           
 11294                           ;adcc.c: 141: ADCON0bits.ADCONT = 0;
 11295  0A19  1313               	bcf	19,6	;volatile
 11296                           
 11297                           ;adcc.c: 144: ADCON0bits.ADGO = 1;
 11298  0A1A  1413               	bsf	19,0	;volatile
 11299                           
 11300                           ;adcc.c: 147: __nop();
 11301  0A1B  0000               	nop
 11302  0A1C                     l163:	
 11303                           ;adcc.c: 151: {
 11304                           
 11305                           ;adcc.c: 150: while (ADCON0bits.ADGO)
 11306                           
 11307  0A1C  0021               	movlb	1	; select bank1
 11308  0A1D  1813               	btfsc	19,0	;volatile
 11309  0A1E  2A1C               	goto	l163
 11310                           
 11311                           ;adcc.c: 152: }
 11312                           ;adcc.c: 155: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 11313  0A1F  080D               	movf	13,w	;volatile
 11314  0A20  0020               	movlb	0	; select bank0
 11315  0A21  00A1               	movwf	?_ADCC_GetSingleConversion+1
 11316  0A22  0021               	movlb	1	; select bank1
 11317  0A23  080C               	movf	12,w	;volatile
 11318  0A24  0020               	movlb	0	; select bank0
 11319  0A25  00A0               	movwf	?_ADCC_GetSingleConversion
 11320  0A26  0008               	return
 11321  0A27                     __end_of_ADCC_GetSingleConversion:	
 11322                           
 11323                           	psect	intentry
 11324  0004                     __pintentry:	
 11325 ;; *************** function _INTERRUPT_InterruptManager *****************
 11326 ;; Defined at:
 11327 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11328 ;; Parameters:    Size  Location     Type
 11329 ;;		None
 11330 ;; Auto vars:     Size  Location     Type
 11331 ;;		None
 11332 ;; Return value:  Size  Location     Type
 11333 ;;                  1    wreg      void 
 11334 ;; Registers used:
 11335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11336 ;; Tracked objects:
 11337 ;;		On entry : 0/0
 11338 ;;		On exit  : 0/0
 11339 ;;		Unchanged: 0/0
 11340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11343 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11345 ;;Total ram usage:        1 bytes
 11346 ;; Hardware stack levels used:    1
 11347 ;; Hardware stack levels required when called:    2
 11348 ;; This function calls:
 11349 ;;		_I2C1_BusCollisionISR
 11350 ;;		_I2C1_ISR
 11351 ;; This function is called by:
 11352 ;;		Interrupt level 1
 11353 ;; This function uses a non-reentrant model
 11354 ;;
 11355                           
 11356  0004                     _INTERRUPT_InterruptManager:	
 11357                           
 11358                           ;incstack = 0
 11359  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11360                           
 11361                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11362  0005  3180               	pagesel	$
 11363  0006  0020               	movlb	0	; select bank0
 11364  0007  087F               	movf	127,w
 11365  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 11366                           
 11367                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.BCL1IE == 1 && PIR3bits.BC
      +                          L1IF == 1)
 11368  0009  1F0B               	btfss	11,6	;volatile
 11369  000A  2813               	goto	i1l394
 11370  000B  002E               	movlb	14	; select bank14
 11371  000C  1899               	btfsc	25,1	;volatile
 11372  000D  1C8F               	btfss	15,1	;volatile
 11373  000E  2813               	goto	i1l394
 11374                           
 11375                           ;interrupt_manager.c: 55: {
 11376                           ;interrupt_manager.c: 56: I2C1_BusCollisionISR();
 11377  000F  3187  27FC  3180   	fcall	_I2C1_BusCollisionISR
 11378                           
 11379                           ;interrupt_manager.c: 57: }
 11380  0012  281B               	goto	i1l398
 11381  0013                     i1l394:	
 11382                           
 11383                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE3bits.SSP1IE == 1 && PIR3bi
      +                          ts.SSP1IF == 1)
 11384  0013  1F0B               	btfss	11,6	;volatile
 11385  0014  281B               	goto	i1l398
 11386  0015  002E               	movlb	14	; select bank14
 11387  0016  1819               	btfsc	25,0	;volatile
 11388  0017  1C0F               	btfss	15,0	;volatile
 11389  0018  281B               	goto	i1l398
 11390                           
 11391                           ;interrupt_manager.c: 59: {
 11392                           ;interrupt_manager.c: 60: I2C1_ISR();
 11393  0019  3183  237E         	fcall	_I2C1_ISR
 11394  001B                     i1l398:	
 11395                           ;interrupt_manager.c: 62: else
 11396                           ;interrupt_manager.c: 63: {
 11397                           
 11398                           ;interrupt_manager.c: 61: }
 11399                           
 11400  001B  087D               	movf	??_INTERRUPT_InterruptManager,w
 11401  001C  0020               	movlb	0	; select bank0
 11402  001D  00FF               	movwf	127
 11403  001E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11404  001F  0009               	retfie
 11405  0020                     __end_of_INTERRUPT_InterruptManager:	
 11406                           
 11407                           	psect	text35
 11408  037E                     __ptext35:	
 11409 ;; *************** function _I2C1_ISR *****************
 11410 ;; Defined at:
 11411 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 11412 ;; Parameters:    Size  Location     Type
 11413 ;;		None
 11414 ;; Auto vars:     Size  Location     Type
 11415 ;;		None
 11416 ;; Return value:  Size  Location     Type
 11417 ;;                  1    wreg      void 
 11418 ;; Registers used:
 11419 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11420 ;; Tracked objects:
 11421 ;;		On entry : 0/0
 11422 ;;		On exit  : 0/0
 11423 ;;		Unchanged: 0/0
 11424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11428 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11429 ;;Total ram usage:        4 bytes
 11430 ;; Hardware stack levels used:    1
 11431 ;; Hardware stack levels required when called:    1
 11432 ;; This function calls:
 11433 ;;		_I2C1_FunctionComplete
 11434 ;;		_I2C1_Stop
 11435 ;; This function is called by:
 11436 ;;		_INTERRUPT_InterruptManager
 11437 ;; This function uses a non-reentrant model
 11438 ;;
 11439                           
 11440                           
 11441                           ;psect for function _I2C1_ISR
 11442  037E                     _I2C1_ISR:	
 11443                           
 11444                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 11445                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 11446                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 11447                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 11448                           ;i2c1.c: 241: PIR3bits.SSP1IF = 0;
 11449                           
 11450                           ;incstack = 0
 11451                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11452  037E  002E               	movlb	14	; select bank14
 11453  037F  100F               	bcf	15,0	;volatile
 11454                           
 11455                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 11456  0380  0023               	movlb	3	; select bank3
 11457  0381  1F90               	btfss	16,7	;volatile
 11458  0382  2CAD               	goto	i1l3466
 11459                           
 11460                           ;i2c1.c: 246: {
 11461                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 11462  0383  1390               	bcf	16,7	;volatile
 11463                           
 11464                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
 11465  0384  0020               	movlb	0	; select bank0
 11466  0385  01EF               	clrf	_i2c1_state
 11467                           
 11468                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 11469  0386  0872               	movf	_p_i2c1_current,w
 11470  0387  3E02               	addlw	2
 11471  0388  0086               	movwf	6
 11472  0389  0187               	clrf	7
 11473  038A  0801               	movf	1,w
 11474  038B  0086               	movwf	6
 11475  038C  0187               	clrf	7
 11476  038D  0181               	clrf	1
 11477  038E  0A81               	incf	1,f
 11478                           
 11479                           ;i2c1.c: 253: p_i2c1_current = (0);
 11480  038F  01F2               	clrf	_p_i2c1_current
 11481                           
 11482                           ;i2c1.c: 255: return;
 11483  0390  0008               	return
 11484  0391                     i1l292:	
 11485                           ;i2c1.c: 260: {
 11486                           ;i2c1.c: 261: case S_MASTER_IDLE:
 11487                           
 11488                           ;i2c1.c: 256: }
 11489                           ;i2c1.c: 259: switch(i2c1_state)
 11490                           
 11491                           
 11492                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 11493  0391  18E9               	btfsc	_i2c1_object+2,1
 11494  0392  0008               	return
 11495                           
 11496                           ;i2c1.c: 264: {
 11497                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 11498  0393  0868               	movf	low ((_i2c1_object| 0+1)),w
 11499  0394  00F9               	movwf	??_I2C1_ISR
 11500  0395  0879               	movf	??_I2C1_ISR,w
 11501  0396  00F2               	movwf	_p_i2c1_current
 11502                           
 11503                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 11504  0397  0868               	movf	low ((_i2c1_object| 0+1)),w
 11505  0398  0086               	movwf	6
 11506  0399  0187               	clrf	7
 11507  039A  0801               	movf	1,w
 11508  039B  00F9               	movwf	??_I2C1_ISR
 11509  039C  0879               	movf	??_I2C1_ISR,w
 11510  039D  00F4               	movwf	_i2c1_trb_count
 11511                           
 11512                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 11513  039E  0868               	movf	low ((_i2c1_object| 0+1)),w
 11514  039F  0086               	movwf	6
 11515  03A0  0187               	clrf	7
 11516  03A1  3F41               	moviw [1]fsr1
 11517  03A2  00F3               	movwf	_p_i2c1_trb_current
 11518                           
 11519                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 11520  03A3  3003               	movlw	3
 11521  03A4  00F9               	movwf	??_I2C1_ISR
 11522  03A5  0879               	movf	??_I2C1_ISR,w
 11523  03A6  07E8               	addwf	low ((_i2c1_object| 0+1)),f
 11524                           
 11525                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 11526  03A7  0868               	movf	low ((_i2c1_object| 0+1)),w
 11527  03A8  3AD8               	xorlw	(low ((_i2c1_tr_queue| 0+3)))& (0+255)
 11528  03A9  1D03               	skipz
 11529  03AA  2BAF               	goto	i1l3354
 11530                           
 11531                           ;i2c1.c: 274: {
 11532                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 11533  03AB  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 11534  03AC  00F9               	movwf	??_I2C1_ISR
 11535  03AD  0879               	movf	??_I2C1_ISR,w
 11536  03AE  00E8               	movwf	low ((_i2c1_object| 0+1))
 11537  03AF                     i1l3354:	
 11538                           
 11539                           ;i2c1.c: 277: }
 11540                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 11541  03AF  1069               	bcf	_i2c1_object+2,0
 11542                           
 11543                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 11544  03B0  0868               	movf	low ((_i2c1_object| 0+1)),w
 11545  03B1  0667               	xorwf	_i2c1_object,w
 11546  03B2  1903               	btfsc	3,2
 11547                           
 11548                           ;i2c1.c: 285: {
 11549                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 11550  03B3  14E9               	bsf	_i2c1_object+2,1
 11551                           
 11552                           ;i2c1.c: 288: }
 11553                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 11554  03B4  0023               	movlb	3	; select bank3
 11555  03B5  1411               	bsf	17,0	;volatile
 11556                           
 11557                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 11558  03B6  3002               	movlw	2
 11559  03B7  00F9               	movwf	??_I2C1_ISR
 11560  03B8  0879               	movf	??_I2C1_ISR,w
 11561  03B9  0020               	movlb	0	; select bank0
 11562  03BA  00EF               	movwf	_i2c1_state
 11563                           
 11564                           ;i2c1.c: 295: }
 11565                           ;i2c1.c: 297: break;
 11566  03BB  0008               	return
 11567  03BC                     i1l297:	
 11568                           ;i2c1.c: 299: case S_MASTER_RESTART:
 11569                           
 11570                           
 11571                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 11572  03BC  0023               	movlb	3	; select bank3
 11573  03BD  1491               	bsf	17,1	;volatile
 11574                           
 11575                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 11576  03BE  3002               	movlw	2
 11577  03BF  00F9               	movwf	??_I2C1_ISR
 11578  03C0  0879               	movf	??_I2C1_ISR,w
 11579  03C1  0020               	movlb	0	; select bank0
 11580  03C2  00EF               	movwf	_i2c1_state
 11581                           
 11582                           ;i2c1.c: 309: break;
 11583  03C3  0008               	return
 11584  03C4                     i1l298:	
 11585                           ;i2c1.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 11586                           
 11587                           
 11588                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 11589  03C4  0023               	movlb	3	; select bank3
 11590  03C5  1F11               	btfss	17,6	;volatile
 11591  03C6  2BD0               	goto	i1l3366
 11592                           
 11593                           ;i2c1.c: 314: {
 11594                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 11595  03C7  3001               	movlw	1
 11596  03C8  00F9               	movwf	??_I2C1_ISR
 11597  03C9  0879               	movf	??_I2C1_ISR,w
 11598  03CA  0020               	movlb	0	; select bank0
 11599  03CB  07EB               	addwf	_i2c1_object+4,f
 11600                           
 11601                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11602  03CC  3004               	movlw	4
 11603  03CD  318A  2268         	fcall	_I2C1_Stop
 11604                           
 11605                           ;i2c1.c: 317: }
 11606  03CF  0008               	return
 11607  03D0                     i1l3366:	
 11608                           
 11609                           ;i2c1.c: 318: else
 11610                           ;i2c1.c: 319: {
 11611                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 11612  03D0  0876               	movf	I2C1_ISR@i2c_address+1,w
 11613  03D1  00FA               	movwf	??_I2C1_ISR+1
 11614  03D2  0875               	movf	I2C1_ISR@i2c_address,w
 11615  03D3  00F9               	movwf	??_I2C1_ISR
 11616  03D4  36FA               	lsrf	??_I2C1_ISR+1,f
 11617  03D5  0CF9               	rrf	??_I2C1_ISR,f
 11618  03D6  0879               	movf	??_I2C1_ISR,w
 11619  03D7  0023               	movlb	3	; select bank3
 11620  03D8  008C               	movwf	12	;volatile
 11621                           
 11622                           ;i2c1.c: 324: if(i2c_address & 0x01)
 11623  03D9  1C75               	btfss	I2C1_ISR@i2c_address,0
 11624  03DA  2BE1               	goto	i1l3372
 11625                           
 11626                           ;i2c1.c: 325: {
 11627                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 11628  03DB  300B               	movlw	11
 11629  03DC  00F9               	movwf	??_I2C1_ISR
 11630  03DD  0879               	movf	??_I2C1_ISR,w
 11631  03DE  0020               	movlb	0	; select bank0
 11632  03DF  00EF               	movwf	_i2c1_state
 11633                           
 11634                           ;i2c1.c: 329: }
 11635  03E0  0008               	return
 11636  03E1                     i1l3372:	
 11637                           
 11638                           ;i2c1.c: 330: else
 11639                           ;i2c1.c: 331: {
 11640                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 11641  03E1  3003               	movlw	3
 11642  03E2  00F9               	movwf	??_I2C1_ISR
 11643  03E3  0879               	movf	??_I2C1_ISR,w
 11644  03E4  0020               	movlb	0	; select bank0
 11645  03E5  00EF               	movwf	_i2c1_state
 11646                           
 11647                           ;i2c1.c: 334: }
 11648                           ;i2c1.c: 335: }
 11649                           ;i2c1.c: 337: break;
 11650  03E6  0008               	return
 11651  03E7                     i1l303:	
 11652                           ;i2c1.c: 339: case S_MASTER_10BIT_RESTART:
 11653                           
 11654                           
 11655                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 11656  03E7  0023               	movlb	3	; select bank3
 11657  03E8  1F11               	btfss	17,6	;volatile
 11658  03E9  2BF3               	goto	i1l304
 11659                           
 11660                           ;i2c1.c: 342: {
 11661                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 11662  03EA  3001               	movlw	1
 11663  03EB  00F9               	movwf	??_I2C1_ISR
 11664  03EC  0879               	movf	??_I2C1_ISR,w
 11665  03ED  0020               	movlb	0	; select bank0
 11666  03EE  07EB               	addwf	_i2c1_object+4,f
 11667                           
 11668                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11669  03EF  3004               	movlw	4
 11670  03F0  318A  2268         	fcall	_I2C1_Stop
 11671                           
 11672                           ;i2c1.c: 345: }
 11673  03F2  0008               	return
 11674  03F3                     i1l304:	
 11675                           
 11676                           ;i2c1.c: 346: else
 11677                           ;i2c1.c: 347: {
 11678                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 11679  03F3  1491               	bsf	17,1	;volatile
 11680                           
 11681                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 11682  03F4  0876               	movf	I2C1_ISR@i2c_address+1,w
 11683  03F5  00FA               	movwf	??_I2C1_ISR+1
 11684  03F6  0875               	movf	I2C1_ISR@i2c_address,w
 11685  03F7  00F9               	movwf	??_I2C1_ISR
 11686  03F8  087A               	movf	??_I2C1_ISR+1,w
 11687  03F9  00F9               	movwf	??_I2C1_ISR
 11688  03FA  01FA               	clrf	??_I2C1_ISR+1
 11689  03FB  3006               	movlw	6
 11690  03FC  0579               	andwf	??_I2C1_ISR,w
 11691  03FD  00FB               	movwf	??_I2C1_ISR+2
 11692  03FE  3000               	movlw	0
 11693  03FF  057A               	andwf	??_I2C1_ISR+1,w
 11694  0400  00FC               	movwf	??_I2C1_ISR+3
 11695  0401  30F0               	movlw	240
 11696  0402  047B               	iorwf	??_I2C1_ISR+2,w
 11697  0403  00F5               	movwf	I2C1_ISR@i2c_address
 11698  0404  3000               	movlw	0
 11699  0405  047C               	iorwf	??_I2C1_ISR+3,w
 11700  0406  00F6               	movwf	I2C1_ISR@i2c_address+1
 11701                           
 11702                           ;i2c1.c: 357: i2c_address |= 0x0001;
 11703  0407  1475               	bsf	I2C1_ISR@i2c_address,0
 11704                           
 11705                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 11706  0408  0020               	movlb	0	; select bank0
 11707  0409  01EE               	clrf	I2C1_ISR@i2c_10bit_address_restart
 11708  040A  0AEE               	incf	I2C1_ISR@i2c_10bit_address_restart,f
 11709                           
 11710                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 11711  040B  3002               	movlw	2
 11712  040C  00F9               	movwf	??_I2C1_ISR
 11713  040D  0879               	movf	??_I2C1_ISR,w
 11714  040E  00EF               	movwf	_i2c1_state
 11715                           
 11716                           ;i2c1.c: 364: }
 11717                           ;i2c1.c: 366: break;
 11718  040F  0008               	return
 11719  0410                     i1l3386:	
 11720                           ;i2c1.c: 368: case S_MASTER_SEND_ADDR:
 11721                           
 11722                           
 11723                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 11724  0410  036E               	decf	I2C1_ISR@i2c_10bit_address_restart,w
 11725  0411  1903               	btfsc	3,2
 11726  0412  2C24               	goto	i1l3406
 11727                           
 11728                           ;i2c1.c: 382: {
 11729                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 11730  0413  0873               	movf	_p_i2c1_trb_current,w
 11731  0414  0086               	movwf	6
 11732  0415  0187               	clrf	7
 11733  0416  3F40               	moviw [0]fsr1
 11734  0417  00F5               	movwf	I2C1_ISR@i2c_address
 11735  0418  3F41               	moviw [1]fsr1
 11736  0419  00F6               	movwf	I2C1_ISR@i2c_address+1
 11737                           
 11738                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 11739  041A  0873               	movf	_p_i2c1_trb_current,w
 11740  041B  0086               	movwf	6
 11741  041C  0187               	clrf	7
 11742  041D  3F43               	moviw [3]fsr1
 11743  041E  00F1               	movwf	I2C1_ISR@pi2c_buf_ptr
 11744                           
 11745                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 11746  041F  0873               	movf	_p_i2c1_trb_current,w
 11747  0420  0086               	movwf	6
 11748  0421  0187               	clrf	7
 11749  0422  3F42               	moviw [2]fsr1
 11750  0423  00F0               	movwf	I2C1_ISR@i2c_bytes_left
 11751  0424                     i1l3406:	
 11752                           ;i2c1.c: 407: }
 11753                           ;i2c1.c: 408: }
 11754                           
 11755                           ;i2c1.c: 406: i2c_10bit_address_restart = 0;
 11756                           
 11757                           ;i2c1.c: 404: i2c1_state = S_MASTER_ACK_ADDR;
 11758                           
 11759                           ;i2c1.c: 400: else
 11760                           ;i2c1.c: 401: {
 11761                           ;i2c1.c: 403: SSP1BUF = i2c_address;
 11762                           
 11763                           ;i2c1.c: 399: }
 11764                           
 11765                           ;i2c1.c: 398: i2c1_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 11766                           
 11767                           ;i2c1.c: 393: {
 11768                           ;i2c1.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 11769                           
 11770                           ;i2c1.c: 391: {
 11771                           ;i2c1.c: 392: if (0 == i2c_10bit_address_restart)
 11772                           
 11773                           ;i2c1.c: 387: }
 11774                           ;i2c1.c: 390: if(!1 && (0x0 != i2c_address))
 11775                           
 11776                           
 11777                           ;i2c1.c: 409: else
 11778                           ;i2c1.c: 410: {
 11779                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 11780  0424  0875               	movf	I2C1_ISR@i2c_address,w
 11781  0425  0023               	movlb	3	; select bank3
 11782  0426  008C               	movwf	12	;volatile
 11783                           
 11784                           ;i2c1.c: 413: if(i2c_address & 0x01)
 11785  0427  1C75               	btfss	I2C1_ISR@i2c_address,0
 11786  0428  2C2F               	goto	i1l3412
 11787                           
 11788                           ;i2c1.c: 414: {
 11789                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 11790  0429  3005               	movlw	5
 11791  042A  00F9               	movwf	??_I2C1_ISR
 11792  042B  0879               	movf	??_I2C1_ISR,w
 11793  042C  0020               	movlb	0	; select bank0
 11794  042D  00EF               	movwf	_i2c1_state
 11795                           
 11796                           ;i2c1.c: 417: }
 11797  042E  0008               	return
 11798  042F                     i1l3412:	
 11799                           
 11800                           ;i2c1.c: 418: else
 11801                           ;i2c1.c: 419: {
 11802                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 11803  042F  3003               	movlw	3
 11804  0430  00F9               	movwf	??_I2C1_ISR
 11805  0431  0879               	movf	??_I2C1_ISR,w
 11806  0432  0020               	movlb	0	; select bank0
 11807  0433  00EF               	movwf	_i2c1_state
 11808                           
 11809                           ;i2c1.c: 422: }
 11810                           ;i2c1.c: 423: }
 11811                           ;i2c1.c: 424: break;
 11812  0434  0008               	return
 11813  0435                     i1l314:	
 11814                           ;i2c1.c: 426: case S_MASTER_SEND_DATA:
 11815                           
 11816                           
 11817                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 11818  0435  0023               	movlb	3	; select bank3
 11819  0436  1F11               	btfss	17,6	;volatile
 11820  0437  2C43               	goto	i1l3420
 11821                           
 11822                           ;i2c1.c: 430: {
 11823                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 11824  0438  3001               	movlw	1
 11825  0439  00F9               	movwf	??_I2C1_ISR
 11826  043A  0879               	movf	??_I2C1_ISR,w
 11827  043B  0020               	movlb	0	; select bank0
 11828  043C  07EB               	addwf	_i2c1_object+4,f
 11829                           
 11830                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 11831  043D  0023               	movlb	3	; select bank3
 11832  043E  1311               	bcf	17,6	;volatile
 11833                           
 11834                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 11835  043F  3005               	movlw	5
 11836  0440  318A  2268         	fcall	_I2C1_Stop
 11837                           
 11838                           ;i2c1.c: 440: }
 11839  0442  0008               	return
 11840  0443                     i1l3420:	
 11841                           
 11842                           ;i2c1.c: 441: else
 11843                           ;i2c1.c: 442: {
 11844                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 11845  0443  3001               	movlw	1
 11846  0444  02F0               	subwf	I2C1_ISR@i2c_bytes_left,f
 11847  0445  0A70               	incf	I2C1_ISR@i2c_bytes_left,w
 11848  0446  1D03               	btfss	3,2
 11849  0447  2C5C               	goto	i1l3428
 11850                           
 11851                           ;i2c1.c: 445: {
 11852                           ;i2c1.c: 449: p_i2c1_trb_current++;
 11853  0448  3004               	movlw	4
 11854  0449  00F9               	movwf	??_I2C1_ISR
 11855  044A  0879               	movf	??_I2C1_ISR,w
 11856  044B  07F3               	addwf	_p_i2c1_trb_current,f
 11857                           
 11858                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 11859  044C  3001               	movlw	1
 11860  044D  02F4               	subwf	_i2c1_trb_count,f
 11861  044E  1D03               	btfss	3,2
 11862  044F  2C54               	goto	i1l318
 11863                           
 11864                           ;i2c1.c: 453: {
 11865                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 11866  0450  3000               	movlw	0
 11867  0451  318A  2268         	fcall	_I2C1_Stop
 11868                           
 11869                           ;i2c1.c: 455: }
 11870  0453  0008               	return
 11871  0454                     i1l318:	
 11872                           
 11873                           ;i2c1.c: 456: else
 11874                           ;i2c1.c: 457: {
 11875                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 11876  0454  0023               	movlb	3	; select bank3
 11877  0455  1491               	bsf	17,1	;volatile
 11878                           
 11879                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 11880  0456  3002               	movlw	2
 11881  0457  00F9               	movwf	??_I2C1_ISR
 11882  0458  0879               	movf	??_I2C1_ISR,w
 11883  0459  0020               	movlb	0	; select bank0
 11884  045A  00EF               	movwf	_i2c1_state
 11885                           
 11886                           ;i2c1.c: 469: }
 11887                           ;i2c1.c: 470: }
 11888  045B  0008               	return
 11889  045C                     i1l3428:	
 11890                           
 11891                           ;i2c1.c: 471: else
 11892                           ;i2c1.c: 472: {
 11893                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 11894  045C  0871               	movf	I2C1_ISR@pi2c_buf_ptr,w
 11895  045D  0086               	movwf	6
 11896  045E  0187               	clrf	7
 11897  045F  0801               	movf	1,w
 11898  0460  0023               	movlb	3	; select bank3
 11899  0461  008C               	movwf	12	;volatile
 11900  0462  3001               	movlw	1
 11901  0463  00F9               	movwf	??_I2C1_ISR
 11902  0464  0879               	movf	??_I2C1_ISR,w
 11903  0465  07F1               	addwf	I2C1_ISR@pi2c_buf_ptr,f
 11904                           
 11905                           ;i2c1.c: 475: }
 11906                           ;i2c1.c: 476: }
 11907                           ;i2c1.c: 477: break;
 11908  0466  0008               	return
 11909  0467                     i1l321:	
 11910                           ;i2c1.c: 479: case S_MASTER_ACK_ADDR:
 11911                           
 11912                           
 11913                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 11914  0467  0023               	movlb	3	; select bank3
 11915  0468  1F11               	btfss	17,6	;volatile
 11916  0469  2C75               	goto	i1l322
 11917                           
 11918                           ;i2c1.c: 483: {
 11919                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 11920  046A  3001               	movlw	1
 11921  046B  00F9               	movwf	??_I2C1_ISR
 11922  046C  0879               	movf	??_I2C1_ISR,w
 11923  046D  0020               	movlb	0	; select bank0
 11924  046E  07EB               	addwf	_i2c1_object+4,f
 11925                           
 11926                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11927  046F  3004               	movlw	4
 11928  0470  318A  2268         	fcall	_I2C1_Stop
 11929                           
 11930                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 11931  0472  0023               	movlb	3	; select bank3
 11932  0473  1311               	bcf	17,6	;volatile
 11933                           
 11934                           ;i2c1.c: 493: }
 11935  0474  0008               	return
 11936  0475                     i1l322:	
 11937                           
 11938                           ;i2c1.c: 494: else
 11939                           ;i2c1.c: 495: {
 11940                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 11941  0475  1591               	bsf	17,3	;volatile
 11942                           
 11943                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11944  0476  3008               	movlw	8
 11945  0477  00F9               	movwf	??_I2C1_ISR
 11946  0478  0879               	movf	??_I2C1_ISR,w
 11947  0479  0020               	movlb	0	; select bank0
 11948  047A  00EF               	movwf	_i2c1_state
 11949                           
 11950                           ;i2c1.c: 498: }
 11951                           ;i2c1.c: 499: break;
 11952  047B  0008               	return
 11953  047C                     i1l3440:	
 11954                           ;i2c1.c: 501: case S_MASTER_RCV_DATA:
 11955                           
 11956                           
 11957                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11958  047C  3008               	movlw	8
 11959  047D  00F9               	movwf	??_I2C1_ISR
 11960  047E  0879               	movf	??_I2C1_ISR,w
 11961  047F  00EF               	movwf	_i2c1_state
 11962                           
 11963                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 11964  0480  0023               	movlb	3	; select bank3
 11965  0481  1591               	bsf	17,3	;volatile
 11966                           
 11967                           ;i2c1.c: 511: break;
 11968  0482  0008               	return
 11969  0483                     i1l3444:	
 11970                           ;i2c1.c: 513: case S_MASTER_ACK_RCV_DATA:
 11971                           
 11972                           
 11973                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 11974  0483  0023               	movlb	3	; select bank3
 11975  0484  080C               	movf	12,w	;volatile
 11976  0485  00F9               	movwf	??_I2C1_ISR
 11977  0486  0871               	movf	I2C1_ISR@pi2c_buf_ptr,w
 11978  0487  0086               	movwf	6
 11979  0488  0187               	clrf	7
 11980  0489  0879               	movf	??_I2C1_ISR,w
 11981  048A  0081               	movwf	1
 11982  048B  3001               	movlw	1
 11983  048C  00F9               	movwf	??_I2C1_ISR
 11984  048D  0879               	movf	??_I2C1_ISR,w
 11985  048E  07F1               	addwf	I2C1_ISR@pi2c_buf_ptr,f
 11986                           
 11987                           ;i2c1.c: 519: if(--i2c_bytes_left)
 11988  048F  3001               	movlw	1
 11989  0490  02F0               	subwf	I2C1_ISR@i2c_bytes_left,f
 11990  0491  1903               	btfsc	3,2
 11991  0492  2C9A               	goto	i1l326
 11992                           
 11993                           ;i2c1.c: 520: {
 11994                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 11995  0493  1291               	bcf	17,5	;volatile
 11996                           
 11997                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 11998  0494  3006               	movlw	6
 11999  0495  00F9               	movwf	??_I2C1_ISR
 12000  0496  0879               	movf	??_I2C1_ISR,w
 12001  0497  0020               	movlb	0	; select bank0
 12002  0498  00EF               	movwf	_i2c1_state
 12003                           
 12004                           ;i2c1.c: 530: }
 12005  0499  2C9D               	goto	i1l3456
 12006  049A                     i1l326:	
 12007                           
 12008                           ;i2c1.c: 531: else
 12009                           ;i2c1.c: 532: {
 12010                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 12011  049A  1691               	bsf	17,5	;volatile
 12012                           
 12013                           ;i2c1.c: 538: I2C1_FunctionComplete();
 12014  049B  318A  2201         	fcall	_I2C1_FunctionComplete
 12015  049D                     i1l3456:	
 12016                           
 12017                           ;i2c1.c: 539: }
 12018                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 12019  049D  0023               	movlb	3	; select bank3
 12020  049E  1611               	bsf	17,4	;volatile
 12021                           
 12022                           ;i2c1.c: 543: break;
 12023  049F  0008               	return
 12024  04A0                     i1l3458:	
 12025                           ;i2c1.c: 545: case S_MASTER_RCV_STOP:
 12026                           
 12027                           
 12028                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 12029                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 12030  04A0  3000               	movlw	0
 12031  04A1  318A  2268         	fcall	_I2C1_Stop
 12032                           
 12033                           ;i2c1.c: 550: break;
 12034  04A3  0008               	return
 12035  04A4                     i1l3460:	
 12036                           ;i2c1.c: 552: default:
 12037                           
 12038                           
 12039                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 12040  04A4  3001               	movlw	1
 12041  04A5  00F9               	movwf	??_I2C1_ISR
 12042  04A6  0879               	movf	??_I2C1_ISR,w
 12043  04A7  0020               	movlb	0	; select bank0
 12044  04A8  07EB               	addwf	_i2c1_object+4,f
 12045                           
 12046                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 12047  04A9  3006               	movlw	6
 12048  04AA  318A  2268         	fcall	_I2C1_Stop
 12049                           
 12050                           ;i2c1.c: 560: }
 12051                           
 12052                           ;i2c1.c: 558: break;
 12053  04AC  0008               	return
 12054  04AD                     i1l3466:	
 12055  04AD  0020               	movlb	0	; select bank0
 12056  04AE  086F               	movf	_i2c1_state,w
 12057                           
 12058                           ; Switch size 1, requested type "space"
 12059                           ; Number of cases is 11, Range of values is 0 to 11
 12060                           ; switch strategies available:
 12061                           ; Name         Instructions Cycles
 12062                           ; direct_byte           30     6 (fixed)
 12063                           ; simple_byte           34    18 (average)
 12064                           ; jumptable            260     6 (fixed)
 12065                           ;	Chosen strategy is direct_byte
 12066  04AF  0084               	movwf	4
 12067  04B0  300C               	movlw	12
 12068  04B1  0204               	subwf	4,w
 12069  04B2  1803               	skipnc
 12070  04B3  2CA4               	goto	i1l3460
 12071  04B4  3188               	movlp	high i1S4612
 12072  04B5  3504               	lslf	4,w
 12073  04B6  3E00               	addlw	low i1S4612
 12074  04B7  0082               	movwf	2
 12075  04B8  0008               	return
 12076  04B9                     __end_of_I2C1_ISR:	
 12077                           
 12078                           	psect	swtext1
 12079  0800                     __pswtext1:	
 12080  0800                     i1S4612:	
 12081  0800  3183  2B91         	ljmp	i1l292
 12082  0802  3183  2BBC         	ljmp	i1l297
 12083  0804  3184  2C10         	ljmp	i1l3386
 12084  0806  3184  2C35         	ljmp	i1l314
 12085  0808  3184  2CA0         	ljmp	i1l3458
 12086  080A  3184  2C67         	ljmp	i1l321
 12087  080C  3184  2C7C         	ljmp	i1l3440
 12088  080E  3184  2CA0         	ljmp	i1l3458
 12089  0810  3184  2C83         	ljmp	i1l3444
 12090  0812  3184  2CA4         	ljmp	i1l3460
 12091  0814  3183  2BC4         	ljmp	i1l298
 12092  0816  3183  2BE7         	ljmp	i1l303
 12093                           
 12094                           	psect	text36
 12095  0A68                     __ptext36:	
 12096 ;; *************** function _I2C1_Stop *****************
 12097 ;; Defined at:
 12098 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;  completion_c    1    wreg     enum E14260
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;  completion_c    1    1[COMMON] enum E14260
 12103 ;; Return value:  Size  Location     Type
 12104 ;;                  1    wreg      void 
 12105 ;; Registers used:
 12106 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;Total ram usage:        2 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; This function calls:
 12119 ;;		Nothing
 12120 ;; This function is called by:
 12121 ;;		_I2C1_ISR
 12122 ;; This function uses a non-reentrant model
 12123 ;;
 12124                           
 12125                           
 12126                           ;psect for function _I2C1_Stop
 12127  0A68                     _I2C1_Stop:	
 12128                           
 12129                           ;incstack = 0
 12130                           ; Regs used in _I2C1_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 12131                           ;I2C1_Stop@completion_code stored from wreg
 12132  0A68  00F8               	movwf	I2C1_Stop@completion_code
 12133                           
 12134                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 12135  0A69  0023               	movlb	3	; select bank3
 12136  0A6A  1511               	bsf	17,2	;volatile
 12137                           
 12138                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
 12139  0A6B  0872               	movf	_p_i2c1_current,w
 12140  0A6C  3E02               	addlw	2
 12141  0A6D  0086               	movwf	6
 12142  0A6E  0187               	clrf	7
 12143  0A6F  0801               	movf	1,w
 12144  0A70  1903               	btfsc	3,2
 12145  0A71  2A7D               	goto	i1l3094
 12146                           
 12147                           ;i2c1.c: 588: {
 12148                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
 12149  0A72  0878               	movf	I2C1_Stop@completion_code,w
 12150  0A73  00F7               	movwf	??_I2C1_Stop
 12151  0A74  0872               	movf	_p_i2c1_current,w
 12152  0A75  3E02               	addlw	2
 12153  0A76  0086               	movwf	6
 12154  0A77  0187               	clrf	7
 12155  0A78  0801               	movf	1,w
 12156  0A79  0086               	movwf	6
 12157  0A7A  0187               	clrf	7
 12158  0A7B  0877               	movf	??_I2C1_Stop,w
 12159  0A7C  0081               	movwf	1
 12160  0A7D                     i1l3094:	
 12161                           
 12162                           ;i2c1.c: 591: }
 12163                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 12164  0A7D  0020               	movlb	0	; select bank0
 12165  0A7E  01EF               	clrf	_i2c1_state
 12166  0A7F  0008               	return
 12167  0A80                     __end_of_I2C1_Stop:	
 12168                           
 12169                           	psect	text37
 12170  0A01                     __ptext37:	
 12171 ;; *************** function _I2C1_FunctionComplete *****************
 12172 ;; Defined at:
 12173 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 12174 ;; Parameters:    Size  Location     Type
 12175 ;;		None
 12176 ;; Auto vars:     Size  Location     Type
 12177 ;;		None
 12178 ;; Return value:  Size  Location     Type
 12179 ;;                  1    wreg      void 
 12180 ;; Registers used:
 12181 ;;		wreg, status,2, status,0
 12182 ;; Tracked objects:
 12183 ;;		On entry : 0/0
 12184 ;;		On exit  : 0/0
 12185 ;;		Unchanged: 0/0
 12186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12190 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12191 ;;Total ram usage:        1 bytes
 12192 ;; Hardware stack levels used:    1
 12193 ;; This function calls:
 12194 ;;		Nothing
 12195 ;; This function is called by:
 12196 ;;		_I2C1_ISR
 12197 ;; This function uses a non-reentrant model
 12198 ;;
 12199                           
 12200                           
 12201                           ;psect for function _I2C1_FunctionComplete
 12202  0A01                     _I2C1_FunctionComplete:	
 12203                           
 12204                           ;i2c1.c: 567: p_i2c1_trb_current++;
 12205                           
 12206                           ;incstack = 0
 12207                           ; Regs used in _I2C1_FunctionComplete: [wreg+status,2+status,0]
 12208  0A01  3004               	movlw	4
 12209  0A02  00F7               	movwf	??_I2C1_FunctionComplete
 12210  0A03  0877               	movf	??_I2C1_FunctionComplete,w
 12211  0A04  07F3               	addwf	_p_i2c1_trb_current,f
 12212                           
 12213                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 12214  0A05  3001               	movlw	1
 12215  0A06  02F4               	subwf	_i2c1_trb_count,f
 12216  0A07  1D03               	btfss	3,2
 12217  0A08  2A0F               	goto	i1l333
 12218                           
 12219                           ;i2c1.c: 571: {
 12220                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 12221  0A09  3004               	movlw	4
 12222  0A0A  00F7               	movwf	??_I2C1_FunctionComplete
 12223  0A0B  0877               	movf	??_I2C1_FunctionComplete,w
 12224  0A0C  0020               	movlb	0	; select bank0
 12225  0A0D  00EF               	movwf	_i2c1_state
 12226                           
 12227                           ;i2c1.c: 573: }
 12228  0A0E  0008               	return
 12229  0A0F                     i1l333:	
 12230                           
 12231                           ;i2c1.c: 574: else
 12232                           ;i2c1.c: 575: {
 12233                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 12234  0A0F  0020               	movlb	0	; select bank0
 12235  0A10  01EF               	clrf	_i2c1_state
 12236  0A11  0AEF               	incf	_i2c1_state,f
 12237  0A12  0008               	return
 12238  0A13                     __end_of_I2C1_FunctionComplete:	
 12239                           
 12240                           	psect	text38
 12241  07FC                     __ptext38:	
 12242 ;; *************** function _I2C1_BusCollisionISR *****************
 12243 ;; Defined at:
 12244 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 12245 ;; Parameters:    Size  Location     Type
 12246 ;;		None
 12247 ;; Auto vars:     Size  Location     Type
 12248 ;;		None
 12249 ;; Return value:  Size  Location     Type
 12250 ;;                  1    wreg      void 
 12251 ;; Registers used:
 12252 ;;		None
 12253 ;; Tracked objects:
 12254 ;;		On entry : 0/0
 12255 ;;		On exit  : 0/0
 12256 ;;		Unchanged: 0/0
 12257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;Total ram usage:        0 bytes
 12263 ;; Hardware stack levels used:    1
 12264 ;; This function calls:
 12265 ;;		Nothing
 12266 ;; This function is called by:
 12267 ;;		_INTERRUPT_InterruptManager
 12268 ;; This function uses a non-reentrant model
 12269 ;;
 12270                           
 12271                           
 12272                           ;psect for function _I2C1_BusCollisionISR
 12273  07FC                     _I2C1_BusCollisionISR:	
 12274                           
 12275                           ;incstack = 0
 12276                           ; Regs used in _I2C1_BusCollisionISR: []
 12277  07FC  0008               	return
 12278  07FD                     __end_of_I2C1_BusCollisionISR:	
 12279  007E                     btemp	set	126	;btemp
 12280  007E                     int$flags	set	126
 12281  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    49
    Data        20
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     71      80
    BANK1            80     20      76
    BANK2            80      0      36
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    MYI2C_ReadFaders@readTRB.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    MYI2C_ReadPatch@readTRB.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    MYI2C_Write16EEPROMBytes@pData	PTR unsigned char  size(2) Largest target is 128
		 -> aPatchMemory(BIGRAM[128]), 

    updateModelFromPatchMemory@dualADSRdata1	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata1(BANK2[8]), 

    updateModelFromPatchMemory@dualADSRdata0	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata0(BANK2[8]), 

    updateModelFromPatchMemory@mvcChannels	PTR unsigned char  size(1) Largest target is 4
		 -> mvcChannels(BANK1[4]), 

    marshallPatchMemory@dualADSRdata1	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata1(BANK2[8]), 

    marshallPatchMemory@dualADSRdata0	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata0(BANK2[8]), 

    marshallPatchMemory@mvcChannels	PTR unsigned char  size(1) Largest target is 4
		 -> mvcChannels(BANK1[4]), 

    savePatch@pData	PTR unsigned char  size(2) Largest target is 128
		 -> aPatchMemory(BIGRAM[128]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), 
		 -> MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E14260 size(1) Largest target is 1
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> MYI2C_ReadFaders@status(COMMON[1]), 

    F14372.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWrite@pflag	PTR enum E14260 size(1) Largest target is 1
		 -> MYI2C_Write16EEPROMBytes@status(BANK0[1]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@status(COMMON[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), 

    F14367.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_trb_current	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 
		 -> NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    S374$pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_current.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    S386$pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_current.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    S386$ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    p_i2c1_current.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    p_i2c1_current	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S397$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    i2c1_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    S397$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    i2c1_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_savePatch
    _savePatch->_MYI2C_Write16EEPROMBytes
    _MYI2C_Write16EEPROMBytes->_I2C1_MasterWrite
    _loadPatch->_writeDAC528
    _writeDAC528->_putByte
    _initDAC528->_putByte
    _putByte->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _blinkyLoop->_MYI2C_Write2LEDBytes
    _MYI2C_Write2LEDBytes->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_I2C1_Initialize
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _LED7SegDisplayValueByDigit->_LED7SegShiftOutPulseClock
    _LED7SegPulseClock->_delay
    _delay->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   35334
                                             67 BANK0      4     4      0
                                              0 BANK1     20    20      0
           _ADCC_GetSingleConversion
                _InitPanelInChannels
                    _InitmvcChannels
         _LED7SegDisplayValueByDigit
                       _LED7SegSetup
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                             ___wmul
                         _blinkyLoop
                              _delay
                         _initDAC528
                          _loadPatch
                          _savePatch
                        _writeDAC528
 ---------------------------------------------------------------------------------
 (1) _savePatch                                           15    13      2    3617
                                             52 BANK0     15    13      2
           _MYI2C_Write16EEPROMBytes
                _marshallPatchMemory
 ---------------------------------------------------------------------------------
 (2) _marshallPatchMemory                                 17    15      2     540
                                              0 BANK0     17    15      2
 ---------------------------------------------------------------------------------
 (2) _MYI2C_Write16EEPROMBytes                            38    34      4    2840
                                             14 BANK0     38    34      4
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (1) _loadPatch                                           12    10      2    6209
                                             58 BANK0      8     6      2
         _updateModelFromPatchMemory
                        _writeDAC528
 ---------------------------------------------------------------------------------
 (1) _writeDAC528                                          5     2      3    5548
                                             53 BANK0      5     2      3
                            _putByte
 ---------------------------------------------------------------------------------
 (2) _updateModelFromPatchMemory                          15    13      2     495
                                              0 BANK0     15    13      2
 ---------------------------------------------------------------------------------
 (1) _initDAC528                                           1     1      0    5268
                                             53 BANK0      1     1      0
                            _putByte
 ---------------------------------------------------------------------------------
 (2) _putByte                                              9     7      2    5268
                                             44 BANK0      9     7      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     623
                                             30 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2027
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _blinkyLoop                                           8     6      2    4718
                                             32 BANK0      8     6      2
               _MYI2C_Write2LEDBytes
                             ___wmul
                              _delay
 ---------------------------------------------------------------------------------
 (2) _MYI2C_Write2LEDBytes                                20    18      2    2781
                                             14 BANK0     18    16      2
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterWrite                                     7     3      4    2100
                                              7 BANK0      7     3      4
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterWriteTRBBuild                             7     3      4     690
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterTRBInsert                                 4     2      2     556
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2163
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1671
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      34
                    _ADCC_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED7SegSetup                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED7SegDisplayValueByDigit                           6     2      4    1807
                                             20 BANK0      6     2      4
          _LED7SegShiftOutPulseClock
 ---------------------------------------------------------------------------------
 (2) _LED7SegShiftOutPulseClock                            3     3      0    1343
                                             17 BANK0      3     3      0
                    _LED7SegPinWrite
                  _LED7SegPulseClock
 ---------------------------------------------------------------------------------
 (3) _LED7SegPulseClock                                    0     0      0    1182
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                               11     9      2    1182
                                              6 BANK0     11     9      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     526
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _LED7SegPinWrite                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitmvcChannels                                      3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitPanelInChannels                                  3     3      0      90
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADCC_GetSingleConversion                             4     1      3      31
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      22
                                              6 COMMON     1     1      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (7) _I2C1_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C1_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _I2C1_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCC_GetSingleConversion
   _InitPanelInChannels
   _InitmvcChannels
   _LED7SegDisplayValueByDigit
     _LED7SegShiftOutPulseClock
       _LED7SegPinWrite
       _LED7SegPulseClock
         _delay
           ___wmul
   _LED7SegSetup
   _SYSTEM_Initialize
     _ADCC_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___wmul
   _blinkyLoop
     _MYI2C_Write2LEDBytes
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     ___wmul
     _delay
       ___wmul
   _delay
     ___wmul
   _initDAC528
     _putByte
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _loadPatch
     _updateModelFromPatchMemory
     _writeDAC528
       _putByte
         ___awtoft
           ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _savePatch
     _MYI2C_Write16EEPROMBytes
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     _marshallPatchMemory
   _writeDAC528
     _putByte
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     14      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      24       9       45.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      CE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      CE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 28 20:20:00 2018

                                         _b 00AF                                           _c 00B7  
                                         _d 00AC                                           _e 00B5  
                                         pc 0002                                 __CFG_CP$OFF 0000  
              __end_of_cPointerByteWriteLED 102F                  __size_of_LED7SegPulseClock 000B  
                       ___wmul@multiplicand 0022                                         l163 0A1C  
                                       l504 0CCD                                         l523 0110  
                                       l621 0CFE                                         l526 0191  
                                       l711 09BA                                         l833 0EDF  
                                       l950 0ABD                                         l775 058B  
                                       _GIE 005F                                __CFG_CPD$OFF 0000  
                       _marshallPatchMemory 04B9                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_LVP$OFF 0000  
                          ?_InitmvcChannels 0077                                __CFG_ZCD$OFF 0000  
                              ___ftdiv@cntr 0038                            __end_of_I2C1_ISR 04B9  
                              ___ftdiv@sign 003D                                        l1111 07CA  
                                      l1202 0EAD                                        l1118 07DD  
                                      l1119 07E5                                        l3130 0D3C  
                                      l3114 0D2A                                        l3222 0F07  
                                      l3230 0F27                                        l3128 0D14  
                                      l3218 0EF8                                        l3162 04F6  
                                      l3154 04CA                                        l3236 0F33  
                                      l3252 0F2A                                        l3254 0F59  
                                      l3238 0F47                                        l3190 0568  
                                      l3182 053C                                        l2800 07B1  
                                      l3272 0F9F                                        l3176 052F  
                                      l3168 0503                                        l2810 07D7  
                                      l2802 07B6                                        l3266 0F72  
                                      l3700 075C                                        l4340 0E23  
                                      l3604 0D69                                        l3286 0FD4  
                                      l3278 0FAC                                        l4502 02B4  
                                      l4422 0090                                        l2808 07CF  
                                      l2840 0C8A                                        l2904 06BE  
                                      l4432 00D9                                        l4178 0AB7  
                                      l4362 0BB0                                        l2834 0C7E  
                                      l4338 0DCD                                        l4442 00F5  
                                      l3708 0775                                        l2844 0C91  
                                      l2908 06C6                                        l2924 0E59  
                                      l4524 0332                                        l4452 011F  
                                      l4358 0BA5                                        l2838 0C85  
                                      l2950 0EA4                                        l2942 0E89  
                                      l4518 031F                                        l4470 01BB  
                                      l4368 0BC1                                        l3680 0705  
                                      l2864 0B35                                        l2880 0667  
                                      l2952 0EB0                                        l2944 0E97  
                                      l4536 036A                                        l2794 07A0  
                                      l2874 0651                                        l2964 0B92  
                                      l2892 06A2                                        l2956 0EBE  
                                      l2798 07A7                                        l3686 071B  
                                      l2982 05D4                                        l4494 0294  
                                      l4478 01E6                                        l2896 06AA  
                                      l2984 05D8               __size_of_MYI2C_Write2LEDBytes 005A  
                                      u2015 07C5                                        u2035 07D2  
                                      u3005 0A8C                                        u2205 0683  
                                      _LATA 0016                                        _LATB 0017  
                                      _LATC 0018                                        u2225 06AB  
                                      u2305 0E60                                        u3105 0D7F  
                                      u2075 07EC                                        u2235 06B1  
                                      u4005 0AC3                                        u2414 0595  
                                      u2335 0E8A                                        u2415 0594  
                                      u4033 0CDF                                        u4025 0CC2  
                                      u3225 072D                                        u2265 06C7  
                                      u3065 0C17                                        u4050 0C0F  
                                      u3235 073D                                        u4115 0DD7  
                                      u2275 06CD                                        u2195 0673  
                                      u3075 0C37                                        u3245 075D  
                                      u2365 0EA5                                        u2605 0572  
                                      u4205 016A                                        u3255 076C  
                                      u2535 0D04                                        u3095 0D4A  
                                      u4215 0186                                        u3265 0776  
                                      u2545 04C8                                        u4305 0345  
                                      u2715 0EE5                                        u2635 0F05  
                                      u2555 04F4                                        u4315 0376  
                                      u4235 01E4                                        u4084 0ADC  
                                      u4085 0ADB                                        u2725 0F70  
                                      u2645 0F25                                        u4165 008E  
                                      u2735 0F9D                                        u4407 01CF  
                                      u4175 00D7                                        u4417 01EA  
                                      u4185 010C                                        u4275 02FA  
                                      u4427 023C                                        u4195 011D  
                                      u4285 032B                                        u4437 0317  
                                      u4447 0362                                        u4457 0DB2  
                                      u1995 07AC                                        u2985 0AF8  
                                      u3995 0ABE                                        _WPUA 0F39  
                                      _WPUB 0F44                                        _WPUC 0F4F  
                                      _WPUE 0F65                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        _main 0064  
                              ___ftpack@arg 0020                                ___ftpack@exp 0023  
                MYI2C_Write2LEDBytes@nCount 0034                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        _twoK 101E  
                    ??_I2C1_MasterTRBInsert 0022                                        btemp 007E  
                              main@iCounter 00D9        LED7SegDisplayValueByDigit@iTensDigit 0034  
                             __CFG_BOREN$ON 0000                     __end_of_LED7SegPinWrite 09BC  
                                      start 0020                        ?_marshallPatchMemory 0020  
                               _writeDAC528 0B4C                               __CFG_CSWEN$ON 0000  
                             __CFG_MCLRE$ON 0000                                ___ftmul@cntr 003C  
                MYI2C_Write2LEDBytes@status 003F                                ___ftmul@sign 003D  
            I2C1_MasterWriteTRBBuild@length 0021                                ___fttol@exp1 004B  
                              ___fttol@lval 0047          __end_of_updateModelFromPatchMemory 1000  
                _updateModelFromPatchMemory 0F61      MYI2C_Write2LEDBytes@slaveDeviceAddress 0036  
                                _i2c1_state 006F              __size_of_OSCILLATOR_Initialize 0009  
                 I2C1_MasterTRBInsert@count 0023               __end_of_OSCILLATOR_Initialize 09C5  
                 I2C1_MasterTRBInsert@pflag 0021                                       _ADACQ 009D  
                                     _ADACT 0099                                       _ADCAP 009B  
                                     ?_main 0077                                       _ADCLK 0098  
                                     _ADCNT 010C                                       _ADPCH 009E  
                                     _ADREF 009A                           __end_of_I2C1_Stop 0A80  
                                     _ADPRE 009C                               __CFG_WDTE$OFF 0000  
                                     _ADRPT 010D                             __end_of___ftdiv 0797  
                           __end_of___ftmul 06EE                             __end_of___fttol 0EC7  
                            __CFG_DEBUG$OFF 0000                                       i1l303 03E7  
                                     i1l304 03F3                                       i1l321 0467  
                                     i1l322 0475                                       i1l314 0435  
                                     i1l333 0A0F                                       i1l326 049A  
                                     i1l318 0454                                       i1l292 0391  
                                     i1l297 03BC                                       i1l298 03C4  
                                     i1l394 0013                                       i1l398 001B  
                                     _OSCEN 0891                                       _PORTB 000D  
                                     _PORTC 000E                                       _TRISA 0011  
                                     _TRISB 0012                                       _TRISC 0013  
                           __end_of_datapin 1024                __end_of_I2C1_BusCollisionISR 07FD  
                         ??_I2C1_Initialize 0020             __end_of_cPointerByteWriteFaders 1031  
                             ___awtoft@sign 002D                                       _delay 0C97  
                             ___ftpack@sign 0024                                       _speed 1020  
                         savePatch@batchNum 005F                             __end_of_putByte 063A  
                                     status 0003                                       wtemp0 007E  
               MYI2C_Write2LEDBytes@counter 0037                       ??_marshallPatchMemory 0022  
           I2C1_MasterWriteTRBBuild@address 0022                 MYI2C_Write2LEDBytes@timeOut 0039  
                                _iLEDs0_LSB 00C0                                  _iLEDs0_MSB 006C  
                                _iLEDs1_LSB 00BE                                  _iLEDs1_MSB 00BF  
                      __end_of_LED7SegSetup 0A01                             __initialization 0022  
                     I2C1_MasterWrite@pdata 002D                       I2C1_MasterWrite@pflag 002A  
                              __end_of_main 037E                                __end_of_twoK 1020  
          __end_of_MYI2C_Write16EEPROMBytes 0F61                 ?_INTERRUPT_InterruptManager 0077  
                       _lineSettleMicroTime 101A                              _iI2CFaderValue 00C1  
                               _i2c1_object 0067                                      ??_main 0063  
                             ___fttol@sign1 0046                 ??_LED7SegShiftOutPulseClock 0031  
                           putByte@clockPin 004C       LED7SegDisplayValueByDigit@iUnitsDigit 0036  
                 savePatch@iPatchAddressLow 005A                                      ?_delay 0026  
                                    _ADACCH 0091                                      _ADACCL 0090  
                                    _ADCON0 0093                                      _ADCON1 0094  
                                    _ADCON2 0095                                      _ADCON3 0096  
                                    _ADERRH 0117                                      _ADERRL 0116  
                                    i1S4612 0800                                      _ADLTHH 010F  
                                    _ADLTHL 010E                                      _ADRESH 008D  
                                    _ADRESL 008C                                      _ADSTAT 0097  
                                    _ADUTHH 0111                                      _ADUTHL 0110  
                          __end_of___awtoft 0B4C                                      _ANSELA 0F38  
                                    _ANSELB 0F43                                      _ANSELC 0F4E  
                          __end_of___ftpack 07FC                          __CFG_RSTOSC$HFINT1 0000  
                                    _RC3PPS 0F23                                      _RC4PPS 0F24  
                                    _ODCONA 0F3A                                      _ODCONB 0F45  
                                    _ODCONC 0F50                                      i1l3420 0443  
                                    i1l3412 042F                                      i1l3094 0A7D  
                                    i1l3406 0424                                      i1l3440 047C  
                                    i1l3354 03AF                                      i1l3460 04A4  
                                    i1l3444 0483                                      i1l3428 045C  
                                    i1l3372 03E1                                      i1l3366 03D0  
                                    i1l3456 049D                                      i1l3458 04A0  
                                    i1l3386 0410                                      i1l3466 04AD  
                            __CFG_WDTCCS$SC 0000         MYI2C_Write16EEPROMBytes@pointerByte 004C  
                      _cPointerByteWriteLED 102E                                      _OSCFRQ 0893  
                         ?_I2C1_MasterWrite 0027                       main@SaveDebounceCount 00E3  
                          ?_LED7SegPinWrite 0077                              __CFG_PWRTE$OFF 0000  
      MYI2C_Write16EEPROMBytes@writeAddress 002E                         __end_of_MvcMaxValue 1016  
                          __end_of_clockpin 1026                          ??_I2C1_MasterWrite 002B  
                       __end_of_MvcMinValue 1018                              _p_i2c1_current 0072  
                          __end_of_maxBanks 1012                                      ___wmul 0AB4  
                            __CFG_STVREN$ON 0000                                   ??___ftdiv 0034  
                                 ??___ftmul 0034                                   ??___fttol 0042  
                          __end_of_latchpin 1028                  ??_I2C1_MasterWriteTRBBuild 0024  
                                 ?_I2C1_ISR 0077                                      _wkByte 00BB  
                                    main@fx 00E6                       ___ftmul@f3_as_product 0039  
                           _ADCC_Initialize 0A99                                   ??_putByte 004E  
         __size_of_ADCC_GetSingleConversion 0014                   ?_ADCC_GetSingleConversion 0020  
             I2C1_MasterWriteTRBBuild@pdata 0020                           _SYSTEM_Initialize 09D0  
                 _LED7SegShiftOutPulseClock 0AD0                     __end_of__initialization 0060  
                        ?_SYSTEM_Initialize 0077                                  ___ftdiv@f1 0031  
                                ___ftdiv@f2 002E                                  ___ftdiv@f3 0039  
                            _i2c1_trb_count 0074                                  ___awtoft@c 0028  
                                ___ftmul@f1 002E                                  ___ftmul@f2 0031  
                     _I2C1_FunctionComplete 0A01                        _I2C1_BusCollisionISR 07FC  
                                ___fttol@f1 003E                              __pcstackCOMMON 0077  
                    I2C1_MasterWrite@length 0027                                __pidataBANK2 0A27  
                       ??_SYSTEM_Initialize 0021                               __end_of_delay 0CEA  
                            main@faderValue 00E8                               __end_of_speed 1022  
                                ??_I2C1_ISR 0079       updateModelFromPatchMemory@mvcChannels 0026  
                  _MYI2C_Write16EEPROMBytes 0EC7                          main@fader8bitValue 00E5  
                                   ??_delay 0028                   __end_of_SYSTEM_Initialize 09DC  
       MYI2C_Write16EEPROMBytes@writeBuffer 0036                            InitmvcChannels@i 0021  
                __end_of_i2c_addr_dualADSR0 102E                  __end_of_i2c_addr_dualADSR1 102D  
                                __pbssBANK0 0067                                  __pbssBANK1 00A0  
                                __pbssBANK2 0134                                 _MvcMaxValue 1014  
                        __size_of_loadPatch 0040                                 _MvcMinValue 1016  
                     __size_of_LED7SegSetup 000D                      savePatch@iPatchAddress 0061  
                LED7SegShiftOutPulseClock@i 0033                                ?_writeDAC528 0055  
                     ?_I2C1_BusCollisionISR 0077                              _SSP1DATPPSbits 0EC6  
                                __pmaintext 0064                __size_of_InitPanelInChannels 001E  
                                   ?___wmul 0020                __end_of_MYI2C_Write2LEDBytes 0D44  
                           __CFG_PPS1WAY$ON 0000                     __end_of_ADCC_Initialize 0AB4  
                        __size_of_savePatch 0079                                  __pintentry 0004  
                           _I2C1_Initialize 0A51                                     _ADFLTRH 0115  
               ?_updateModelFromPatchMemory 0020                                     _ADFLTRL 0114  
                                _blinkyLoop 0DBD                                     _ADPREVH 008F  
                                   _ADPREVL 008E                                   ?___awtoft 0028  
                                 ?___ftpack 0020                                     _ADSTPTH 0113  
                                   _ADSTPTL 0112                              _SSP1CLKPPSbits 0EC5  
                                   _OSCCON1 088D                                     _OSCCON3 088F  
                                 _I2C1_Stop 0A68                                     _OSCTUNE 0892  
                              _LED7SegSetup 09F4                       main@LoadDebounceCount 00E1  
                                   _SSP1ADD 018D                                     _PPSLOCK 0E8F  
                                   _SSP1BUF 018C              marshallPatchMemory@mvcChannels 0028  
           MYI2C_Write2LEDBytes@pointerByte 003B                                  _initDAC528 0A3B  
                            main@readStatus 00D8               I2C1_MasterTRBInsert@ptrb_list 0020  
                       __end_of_cPowerOfTwo 1010                                  _maxPatches 1012  
                  __size_of_InitmvcChannels 0019                      ?_I2C1_FunctionComplete 0077  
             __size_of_I2C1_MasterTRBInsert 0046                          _p_i2c1_trb_current 0073  
                           _PanelInChannels 00A4                        __CFG_SCANE$available 0000  
                                   ___ftdiv 06EE                             __size_of___wmul 001C  
                                   ___ftmul 063A                                     ___fttol 0E40  
                        writeDAC528@dacData 0057          marshallPatchMemory@iPatchMemoryNDX 002F  
                                ??___awtoft 002B                                  ??___ftpack 0025  
                                   _datapin 1022                                     __ptext1 0D44  
                                   __ptext2 04B9                                     __ptext3 0EC7  
                                   __ptext4 0C11                                     __ptext5 0B4C  
                                   __ptext6 0F61                                     __ptext7 0A3B  
                                   __ptext8 0585                                     __ptext9 0E40  
                         __end_of_loadPatch 0C51                       _OSCILLATOR_Initialize 09BC  
                                   _wkFloat 00B2                                     _segdisp 0120  
                  ??_PIN_MANAGER_Initialize 0020                        loadPatch@PatchNumber 005A  
                                ?_I2C1_Stop 0077                                     _putByte 0585  
                __size_of_SYSTEM_Initialize 000C                        I2C1_ISR@pi2c_buf_ptr 0071  
                                   clrloop0 09DD                           __end_of_savePatch 0DBD  
               __end_of_marshallPatchMemory 0585                        end_of_initialization 0060  
              ??_LED7SegDisplayValueByDigit 0038                                     init_ram 09E8  
                                   initloop 09E9   updateModelFromPatchMemory@iPatchMemoryNDX 002B  
                    ??_I2C1_BusCollisionISR 0077                     __end_of_I2C1_Initialize 0A68  
                         __end_of_toggleDly 101E                     _cPointerByteWriteFaders 1030  
          marshallPatchMemory@dualADSRdata0 0020            marshallPatchMemory@dualADSRdata1 0021  
                          ?_ADCC_Initialize 0077            __end_of_ADCC_GetSingleConversion 0A27  
 MYI2C_Write16EEPROMBytes@iPatchAddressHigh 004E                                 ?_blinkyLoop 0040  
                     __CFG_WDTCPS$WDTCPS_31 0000                                   _PORTBbits 000D  
                 __size_of_I2C1_MasterWrite 0028                           __size_of_I2C1_ISR 013B  
       __size_of_LED7SegDisplayValueByDigit 0039                                   _MY_CONSTS 006D  
                                 _TRISCbits 0013             MYI2C_Write2LEDBytes@writeBuffer 003C  
                               _cPowerOfTwo 1000                            __CFG_FEXTOSC$OFF 0000  
                               putByte@data 0052                             main@iResetValue 1028  
                               ?_initDAC528 0077                                 putByte@mask 0053  
                      _MYI2C_Write2LEDBytes 0CEA           I2C1_ISR@i2c_10bit_address_restart 006E  
                 marshallPatchMemory@i_1221 002B                   marshallPatchMemory@i_1222 002D  
                                main@fx_978 00EA                                 ___ftdiv@exp 003C  
                   I2C1_MasterWrite@address 0028                                 ___ftmul@exp 0038  
                ??_MYI2C_Write16EEPROMBytes 0032                        __size_of_writeDAC528 0025  
   updateModelFromPatchMemory@dualADSRdata0 0020     updateModelFromPatchMemory@dualADSRdata1 0021  
                    delay@adjustedDelaytime 0029                           ??_InitmvcChannels 0020  
                  __size_of_LED7SegPinWrite 0009                              __end_of___wmul 0AD0  
                   I2C1_MasterWrite@trBlock 00D1                    I2C1_Stop@completion_code 0078  
                    ?_OSCILLATOR_Initialize 0077                              _clockMicroTime 1018  
               __end_of_lineSettleMicroTime 101C                         start_initialization 0022  
                               ??_I2C1_Stop 0077             __size_of_PIN_MANAGER_Initialize 003F  
                       _InitPanelInChannels 0AEC                       ?_MYI2C_Write2LEDBytes 002E  
         __size_of_I2C1_MasterWriteTRBBuild 0020                   ?_I2C1_MasterWriteTRBBuild 0020  
                                loadPatch@i 0060                         __size_of_blinkyLoop 0083  
                    _cPointerByteReadFaders 102F                            ?_I2C1_Initialize 0077  
                          __CFG_LPBOREN$OFF 0000                        savePatch@PatchNumber 0054  
                      ?_InitPanelInChannels 0077                          _i2c_addr_dualADSR0 102D  
                        _i2c_addr_dualADSR1 102C                                    ??___wmul 0024  
                               __pdataBANK2 0120                      __end_of_clockMicroTime 101A  
                       __size_of_initDAC528 0016                I2C1_MasterWriteTRBBuild@ptrb 0026  
                         __size_of___awtoft 0022                    _ADCC_GetSingleConversion 0A13  
                         __size_of___ftpack 0065                                 __pbssBIGRAM 2370  
                   __end_ofmain@iResetValue 102A                                 __pbssCOMMON 0070  
                                 ___latbits 0002                               __pcstackBANK0 0020  
                             __pcstackBANK1 00D8            MYI2C_Write2LEDBytes@LSBWriteByte 002F  
                             _i2c1_tr_queue 00D5                         blinkyLoop@delayTime 0044  
        __end_of_LED7SegDisplayValueByDigit 0BD2                  _LED7SegDisplayValueByDigit 0B99  
                    loadPatch@iPatchAddress 005E                        writeDAC528@dacNumber 0055  
                   ??_I2C1_FunctionComplete 0077               MYI2C_Write16EEPROMBytes@pData 0030  
                    _PIN_MANAGER_Initialize 0BD2            MYI2C_Write2LEDBytes@MSBWriteByte 002E  
                     ??_InitPanelInChannels 0020             ADCC_GetSingleConversion@channel 0023  
                                  ?___ftdiv 002E                                    ?___ftmul 002E  
                                  ?___fttol 003E                                    _I2C1_ISR 037E  
              ??_INTERRUPT_InterruptManager 007D                        marshallPatchMemory@i 0029  
                                 __pswtext1 0800                            _I2C1_MasterWrite 0B71  
                        LED7SegPinWrite@val 0020                                savePatch@idx 005D  
              __end_of_I2C1_MasterTRBInsert 0C97                      main@prevFader8bitValue 00DC  
                         ??_LED7SegPinWrite 0020                         blinkyLoop@loopCount 0046  
                                 _loadPatch 0C11                                    ?_putByte 004C  
                    ??_MYI2C_Write2LEDBytes 0030                                _wkFaderValue 00BD  
                            __size_of_delay 0053                                delay@counter 002D  
                    I2C1_MasterRead@trBlock 00CD                              ___wmul@product 0024  
                          main@iChangeCount 00DB                                    _LATCbits 0018  
                                 _savePatch 0D44                                   clear_ram0 09DC  
                                  _PIE3bits 0719         __size_of_INTERRUPT_InterruptManager 001C  
                                  _PIR3bits 070F         LED7SegDisplayValueByDigit@iTensCode 0038  
                                  _SSP1CON1 0190                                    _SSP1CON3 0192  
  MYI2C_Write16EEPROMBytes@iPatchAddressLow 0047                                    _SSP1STAT 018F  
                              ??_blinkyLoop 0042                                   _toggleDly 101C  
                                _ADCON0bits 0093                                  _ADCON1bits 0094  
                                _ADCON2bits 0095                                  _ADCON3bits 0096  
                         ___wmul@multiplier 0020                               _dualADSRdata0 013C  
                             _dualADSRdata1 0134                              savePatch@pData 005B  
                                ?_loadPatch 005A                 updateModelFromPatchMemory@i 002D  
                              ??_initDAC528 0055                             _faderActiveFlag 00A8  
MYI2C_Write16EEPROMBytes@slaveDeviceAddress 004D                          __end_of_blinkyLoop 0E40  
                           _InitmvcChannels 0A80                                  ?_savePatch 0054  
                                _ADSTATbits 0097                __size_of_marshallPatchMemory 00CC  
                              _aPatchMemory 2370               __size_of_I2C1_BusCollisionISR 0001  
                    I2C1_ISR@i2c_bytes_left 0070                     ??_OSCILLATOR_Initialize 0020  
                            delay@delaytime 0026                            __size_of___ftdiv 00A9  
                          __size_of___ftmul 00B4                            __size_of___fttol 0087  
                                  ___awtoft 0B2A                                    ___ftpack 0797  
          __end_of_I2C1_MasterWriteTRBBuild 0B2A                          __end_of_initDAC528 0A51  
                         _LED7SegPulseClock 09C5                                  _ANSELCbits 0F4E  
                        ?_LED7SegPulseClock 0077                    __size_of_ADCC_Initialize 001B  
                        __end_of_maxPatches 1014                         I2C1_ISR@i2c_address 0075  
                                  __ptext10 063A                                    __ptext11 0B2A  
                                  __ptext20 0BD2                                    __ptext12 0DBD  
                                  __ptext21 09BC                                    __ptext13 0CEA  
                                  __ptext30 09B3                                    __ptext22 0A51  
                                  __ptext14 0B71                                    __ptext31 0A80  
                                  __ptext23 0A99                                    __ptext15 0B0A  
                                  __ptext32 0AEC                                    __ptext24 09F4  
                                  __ptext16 0C51                                    __ptext33 0A13  
                                  __ptext25 0B99                                    __ptext17 06EE  
                                  __ptext26 0AD0                                    __ptext18 0797  
                                  __ptext35 037E                                    __ptext27 09C5  
                                  __ptext19 09D0                                    __ptext36 0A68  
                                  __ptext28 0C97                                    __ptext37 0A01  
                                  __ptext29 0AB4                                    __ptext38 07FC  
                        blinkyLoop@maxLoops 0040                                _SSP1CON1bits 0190  
                              _SSP1CON2bits 0191             MYI2C_Write16EEPROMBytes@counter 004F  
                                  _clockpin 1024                                 _mvcChannels 00C9  
                          __size_of_putByte 00B5                                    _maxBanks 1010  
                       ??_LED7SegPulseClock 0031                                    _wkMIDICC 00BC  
           MYI2C_Write16EEPROMBytes@timeOut 004A                                    _latchpin 1026  
                             __size_of_main 031A                        InitPanelInChannels@i 0021  
                             ??_writeDAC528 0058                        __CFG_WDTCWS$WDTCWS_7 0000  
                      _I2C1_MasterTRBInsert 0C51                      writeDAC528@wkDacNumber 0059  
                ??_ADCC_GetSingleConversion 0023                                    int$flags 007E  
        __end_of_INTERRUPT_InterruptManager 0020                  _INTERRUPT_InterruptManager 0004  
                 __end_of_LED7SegPulseClock 09D0          __size_of_LED7SegShiftOutPulseClock 001C  
              ??_updateModelFromPatchMemory 0022                  ?_LED7SegShiftOutPulseClock 0077  
               PIN_MANAGER_Initialize@state 0020                LED7SegShiftOutPulseClock@val 0032  
                            _cMstrClkAdjust 102A                                  _INTCONbits 000B  
         __size_of_MYI2C_Write16EEPROMBytes 009A                                 ??_loadPatch 005C  
                 ?_MYI2C_Write16EEPROMBytes 002E                               ?_LED7SegSetup 0077  
                            __pstringtext10 1020                              __pstringtext11 1022  
                            __pstringtext20 1030                              __pstringtext12 1024  
                            __pstringtext13 1026                              __pstringtext14 1028  
                            __pstringtext15 102A                              __pstringtext16 102C  
                            __pstringtext17 102D                              __pstringtext18 102E  
                            __pstringtext19 102F                     __end_of_InitmvcChannels 0A99  
            __end_of_cPointerByteReadFaders 1030                                    intlevel1 0000  
               ?_LED7SegDisplayValueByDigit 0034              MYI2C_Write16EEPROMBytes@nCount 0048  
                            _mvcPatchNumber 00B9                     ?_PIN_MANAGER_Initialize 0077  
                  __end_of_I2C1_MasterWrite 0B99                                 ??_savePatch 0056  
                         __CFG_CLKOUTEN$OFF 0000              __size_of_I2C1_FunctionComplete 0012  
             __end_of_I2C1_FunctionComplete 0A13            updateModelFromPatchMemory@i_1230 0029  
          updateModelFromPatchMemory@i_1229 0027                                 _PPSLOCKbits 0E8F  
            MYI2C_Write16EEPROMBytes@status 0053                       ?_I2C1_MasterTRBInsert 0020  
                savePatch@iPatchAddressHigh 0059         __size_of_updateModelFromPatchMemory 009F  
                                  putByte@i 0054                             _LED7SegPinWrite 09B3  
                       __end_of_writeDAC528 0B71                      __end_of_cMstrClkAdjust 102C  
                  __size_of_I2C1_Initialize 0017                               __pstringtext1 1000  
                             __pstringtext2 1010                               __pstringtext3 1012  
                             __pstringtext4 1014                               __pstringtext5 1016  
                             __pstringtext6 1018                               __pstringtext7 101A  
                             __pstringtext8 101C                               __pstringtext9 101E  
         __end_of_LED7SegShiftOutPulseClock 0AEC                               main@POT0Value 00DF  
                             main@POT1Value 00E0                              ??_LED7SegSetup 0020  
                  _I2C1_MasterWriteTRBBuild 0B0A                            main@iLoopCounter 00DD  
            __end_of_PIN_MANAGER_Initialize 0C11                           ??_ADCC_Initialize 0020  
                        __size_of_I2C1_Stop 0018                 __end_of_InitPanelInChannels 0B0A  
                 MYI2C_Write16EEPROMBytes@i 0051                         _prevPanelInChannels 00A0  
