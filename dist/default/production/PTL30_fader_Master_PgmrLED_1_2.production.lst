

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 28 19:46:32 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	cinit,global,class=CODE,merge=1,delta=2
    26                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    30                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    31                           	psect	inittext,global,class=CODE,delta=2
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,merge=1,delta=2
    38                           	psect	text2,local,class=CODE,merge=1,delta=2
    39                           	psect	text3,local,class=CODE,merge=1,delta=2
    40                           	psect	text4,local,class=CODE,merge=1,delta=2
    41                           	psect	text5,local,class=CODE,merge=1,delta=2
    42                           	psect	text6,local,class=CODE,merge=1,delta=2
    43                           	psect	text7,local,class=CODE,merge=1,delta=2
    44                           	psect	text8,local,class=CODE,merge=1,delta=2
    45                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text12,local,class=CODE,merge=1,delta=2
    49                           	psect	text13,local,class=CODE,merge=1,delta=2
    50                           	psect	text14,local,class=CODE,merge=1,delta=2
    51                           	psect	text15,local,class=CODE,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,merge=1,delta=2
    53                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text19,local,class=CODE,merge=1,delta=2
    56                           	psect	text20,local,class=CODE,merge=1,delta=2
    57                           	psect	text21,local,class=CODE,merge=1,delta=2
    58                           	psect	text22,local,class=CODE,merge=1,delta=2
    59                           	psect	text23,local,class=CODE,merge=1,delta=2
    60                           	psect	text24,local,class=CODE,merge=1,delta=2
    61                           	psect	text25,local,class=CODE,merge=1,delta=2
    62                           	psect	text26,local,class=CODE,merge=1,delta=2
    63                           	psect	text27,local,class=CODE,merge=1,delta=2
    64                           	psect	text28,local,class=CODE,merge=1,delta=2
    65                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text30,local,class=CODE,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,merge=1,delta=2
    69                           	psect	text33,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text35,local,class=CODE,merge=1,delta=2
    72                           	psect	swtext1,local,class=CONST,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	dabs	1,0x620,48
    77                           	dabs	1,0x5A0,80
    78                           	dabs	1,0x2370,0,_aPatchMemory
    79                           	dabs	1,0x7E,2
    80  0000                     
    81                           ; Version 1.45
    82                           ; Generated 16/11/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC16F18855 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  001C                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  008C                     	;# 
   144  008C                     	;# 
   145  008D                     	;# 
   146  008E                     	;# 
   147  008E                     	;# 
   148  008F                     	;# 
   149  0090                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  0110                     	;# 
   170  0110                     	;# 
   171  0111                     	;# 
   172  0112                     	;# 
   173  0112                     	;# 
   174  0113                     	;# 
   175  0114                     	;# 
   176  0114                     	;# 
   177  0115                     	;# 
   178  0116                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0119                     	;# 
   182  0119                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011A                     	;# 
   186  011A                     	;# 
   187  011B                     	;# 
   188  011B                     	;# 
   189  011B                     	;# 
   190  011B                     	;# 
   191  011B                     	;# 
   192  011C                     	;# 
   193  011C                     	;# 
   194  011C                     	;# 
   195  011D                     	;# 
   196  011D                     	;# 
   197  011D                     	;# 
   198  011E                     	;# 
   199  011E                     	;# 
   200  011E                     	;# 
   201  011F                     	;# 
   202  011F                     	;# 
   203  011F                     	;# 
   204  011F                     	;# 
   205  011F                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  018F                     	;# 
   210  0190                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0196                     	;# 
   214  0197                     	;# 
   215  0198                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  020C                     	;# 
   221  020C                     	;# 
   222  020D                     	;# 
   223  020E                     	;# 
   224  020F                     	;# 
   225  020F                     	;# 
   226  0210                     	;# 
   227  0210                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0216                     	;# 
   237  0216                     	;# 
   238  0217                     	;# 
   239  0217                     	;# 
   240  0218                     	;# 
   241  0218                     	;# 
   242  0219                     	;# 
   243  021A                     	;# 
   244  021B                     	;# 
   245  021B                     	;# 
   246  021C                     	;# 
   247  021C                     	;# 
   248  021D                     	;# 
   249  021D                     	;# 
   250  021E                     	;# 
   251  021F                     	;# 
   252  028C                     	;# 
   253  028C                     	;# 
   254  028D                     	;# 
   255  028D                     	;# 
   256  028E                     	;# 
   257  028F                     	;# 
   258  0290                     	;# 
   259  0290                     	;# 
   260  0291                     	;# 
   261  0292                     	;# 
   262  0292                     	;# 
   263  0293                     	;# 
   264  0293                     	;# 
   265  0294                     	;# 
   266  0295                     	;# 
   267  0296                     	;# 
   268  0296                     	;# 
   269  0297                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  0299                     	;# 
   274  029A                     	;# 
   275  029B                     	;# 
   276  029C                     	;# 
   277  029C                     	;# 
   278  029D                     	;# 
   279  030C                     	;# 
   280  030C                     	;# 
   281  030D                     	;# 
   282  030E                     	;# 
   283  030F                     	;# 
   284  0310                     	;# 
   285  0310                     	;# 
   286  0311                     	;# 
   287  0312                     	;# 
   288  0313                     	;# 
   289  0314                     	;# 
   290  0314                     	;# 
   291  0315                     	;# 
   292  0316                     	;# 
   293  0317                     	;# 
   294  0318                     	;# 
   295  0318                     	;# 
   296  0319                     	;# 
   297  031A                     	;# 
   298  031B                     	;# 
   299  031C                     	;# 
   300  031C                     	;# 
   301  031D                     	;# 
   302  031E                     	;# 
   303  031F                     	;# 
   304  038C                     	;# 
   305  038D                     	;# 
   306  038E                     	;# 
   307  0390                     	;# 
   308  0391                     	;# 
   309  0392                     	;# 
   310  040C                     	;# 
   311  040D                     	;# 
   312  040E                     	;# 
   313  040F                     	;# 
   314  0410                     	;# 
   315  0411                     	;# 
   316  0416                     	;# 
   317  0416                     	;# 
   318  0417                     	;# 
   319  0418                     	;# 
   320  0418                     	;# 
   321  0419                     	;# 
   322  041A                     	;# 
   323  041A                     	;# 
   324  041B                     	;# 
   325  041C                     	;# 
   326  041C                     	;# 
   327  041D                     	;# 
   328  041E                     	;# 
   329  041F                     	;# 
   330  048C                     	;# 
   331  048C                     	;# 
   332  048D                     	;# 
   333  048E                     	;# 
   334  048F                     	;# 
   335  048F                     	;# 
   336  0490                     	;# 
   337  0491                     	;# 
   338  0492                     	;# 
   339  0492                     	;# 
   340  0493                     	;# 
   341  0494                     	;# 
   342  0495                     	;# 
   343  0495                     	;# 
   344  0496                     	;# 
   345  0497                     	;# 
   346  0498                     	;# 
   347  0499                     	;# 
   348  049A                     	;# 
   349  049B                     	;# 
   350  049C                     	;# 
   351  049D                     	;# 
   352  050C                     	;# 
   353  050C                     	;# 
   354  050D                     	;# 
   355  050E                     	;# 
   356  050F                     	;# 
   357  050F                     	;# 
   358  0510                     	;# 
   359  0511                     	;# 
   360  0512                     	;# 
   361  0512                     	;# 
   362  0513                     	;# 
   363  0514                     	;# 
   364  0515                     	;# 
   365  0515                     	;# 
   366  0516                     	;# 
   367  0517                     	;# 
   368  0518                     	;# 
   369  0519                     	;# 
   370  051A                     	;# 
   371  051B                     	;# 
   372  051C                     	;# 
   373  051D                     	;# 
   374  058C                     	;# 
   375  058C                     	;# 
   376  058D                     	;# 
   377  058E                     	;# 
   378  058F                     	;# 
   379  058F                     	;# 
   380  0590                     	;# 
   381  0591                     	;# 
   382  0592                     	;# 
   383  0593                     	;# 
   384  060C                     	;# 
   385  060D                     	;# 
   386  060E                     	;# 
   387  060F                     	;# 
   388  0610                     	;# 
   389  0611                     	;# 
   390  0612                     	;# 
   391  0613                     	;# 
   392  0614                     	;# 
   393  0616                     	;# 
   394  0617                     	;# 
   395  0618                     	;# 
   396  0619                     	;# 
   397  061A                     	;# 
   398  061B                     	;# 
   399  061C                     	;# 
   400  061D                     	;# 
   401  061E                     	;# 
   402  068C                     	;# 
   403  068D                     	;# 
   404  068E                     	;# 
   405  068F                     	;# 
   406  0690                     	;# 
   407  0691                     	;# 
   408  0692                     	;# 
   409  0693                     	;# 
   410  0694                     	;# 
   411  070C                     	;# 
   412  070D                     	;# 
   413  070E                     	;# 
   414  070F                     	;# 
   415  0710                     	;# 
   416  0711                     	;# 
   417  0712                     	;# 
   418  0713                     	;# 
   419  0714                     	;# 
   420  0716                     	;# 
   421  0717                     	;# 
   422  0718                     	;# 
   423  0719                     	;# 
   424  071A                     	;# 
   425  071B                     	;# 
   426  071C                     	;# 
   427  071D                     	;# 
   428  071E                     	;# 
   429  0796                     	;# 
   430  0797                     	;# 
   431  0798                     	;# 
   432  0799                     	;# 
   433  079A                     	;# 
   434  079B                     	;# 
   435  080C                     	;# 
   436  080D                     	;# 
   437  080E                     	;# 
   438  080F                     	;# 
   439  0810                     	;# 
   440  0811                     	;# 
   441  0812                     	;# 
   442  0813                     	;# 
   443  0814                     	;# 
   444  081A                     	;# 
   445  081B                     	;# 
   446  081C                     	;# 
   447  081D                     	;# 
   448  081E                     	;# 
   449  081F                     	;# 
   450  088C                     	;# 
   451  088D                     	;# 
   452  088E                     	;# 
   453  088F                     	;# 
   454  0890                     	;# 
   455  0891                     	;# 
   456  0892                     	;# 
   457  0893                     	;# 
   458  0895                     	;# 
   459  0896                     	;# 
   460  0897                     	;# 
   461  0898                     	;# 
   462  0899                     	;# 
   463  089A                     	;# 
   464  089B                     	;# 
   465  090C                     	;# 
   466  090E                     	;# 
   467  090F                     	;# 
   468  091F                     	;# 
   469  091F                     	;# 
   470  098F                     	;# 
   471  098F                     	;# 
   472  0990                     	;# 
   473  0991                     	;# 
   474  0992                     	;# 
   475  0993                     	;# 
   476  0994                     	;# 
   477  0995                     	;# 
   478  0996                     	;# 
   479  0997                     	;# 
   480  0E0F                     	;# 
   481  0E10                     	;# 
   482  0E11                     	;# 
   483  0E12                     	;# 
   484  0E13                     	;# 
   485  0E14                     	;# 
   486  0E15                     	;# 
   487  0E16                     	;# 
   488  0E17                     	;# 
   489  0E18                     	;# 
   490  0E19                     	;# 
   491  0E1A                     	;# 
   492  0E1B                     	;# 
   493  0E1C                     	;# 
   494  0E1D                     	;# 
   495  0E1E                     	;# 
   496  0E1F                     	;# 
   497  0E20                     	;# 
   498  0E21                     	;# 
   499  0E22                     	;# 
   500  0E23                     	;# 
   501  0E24                     	;# 
   502  0E25                     	;# 
   503  0E26                     	;# 
   504  0E27                     	;# 
   505  0E28                     	;# 
   506  0E29                     	;# 
   507  0E2A                     	;# 
   508  0E2B                     	;# 
   509  0E2C                     	;# 
   510  0E2D                     	;# 
   511  0E2E                     	;# 
   512  0E2F                     	;# 
   513  0E30                     	;# 
   514  0E31                     	;# 
   515  0E32                     	;# 
   516  0E33                     	;# 
   517  0E34                     	;# 
   518  0E35                     	;# 
   519  0E36                     	;# 
   520  0E37                     	;# 
   521  0E8F                     	;# 
   522  0E90                     	;# 
   523  0E91                     	;# 
   524  0E92                     	;# 
   525  0E93                     	;# 
   526  0E94                     	;# 
   527  0E95                     	;# 
   528  0E96                     	;# 
   529  0E97                     	;# 
   530  0E9C                     	;# 
   531  0E9D                     	;# 
   532  0E9E                     	;# 
   533  0EA1                     	;# 
   534  0EA2                     	;# 
   535  0EA3                     	;# 
   536  0EA4                     	;# 
   537  0EA5                     	;# 
   538  0EA9                     	;# 
   539  0EAA                     	;# 
   540  0EAB                     	;# 
   541  0EAC                     	;# 
   542  0EB1                     	;# 
   543  0EB2                     	;# 
   544  0EB3                     	;# 
   545  0EB8                     	;# 
   546  0EB9                     	;# 
   547  0EBA                     	;# 
   548  0EBB                     	;# 
   549  0EBC                     	;# 
   550  0EBD                     	;# 
   551  0EBE                     	;# 
   552  0EC3                     	;# 
   553  0EC5                     	;# 
   554  0EC6                     	;# 
   555  0EC7                     	;# 
   556  0EC8                     	;# 
   557  0EC9                     	;# 
   558  0ECA                     	;# 
   559  0ECB                     	;# 
   560  0ECC                     	;# 
   561  0F10                     	;# 
   562  0F11                     	;# 
   563  0F12                     	;# 
   564  0F13                     	;# 
   565  0F14                     	;# 
   566  0F15                     	;# 
   567  0F16                     	;# 
   568  0F17                     	;# 
   569  0F18                     	;# 
   570  0F19                     	;# 
   571  0F1A                     	;# 
   572  0F1B                     	;# 
   573  0F1C                     	;# 
   574  0F1D                     	;# 
   575  0F1E                     	;# 
   576  0F1F                     	;# 
   577  0F20                     	;# 
   578  0F21                     	;# 
   579  0F22                     	;# 
   580  0F23                     	;# 
   581  0F24                     	;# 
   582  0F25                     	;# 
   583  0F26                     	;# 
   584  0F27                     	;# 
   585  0F38                     	;# 
   586  0F39                     	;# 
   587  0F3A                     	;# 
   588  0F3B                     	;# 
   589  0F3C                     	;# 
   590  0F3D                     	;# 
   591  0F3E                     	;# 
   592  0F3F                     	;# 
   593  0F40                     	;# 
   594  0F41                     	;# 
   595  0F43                     	;# 
   596  0F44                     	;# 
   597  0F45                     	;# 
   598  0F46                     	;# 
   599  0F47                     	;# 
   600  0F48                     	;# 
   601  0F49                     	;# 
   602  0F4A                     	;# 
   603  0F4B                     	;# 
   604  0F4C                     	;# 
   605  0F4E                     	;# 
   606  0F4F                     	;# 
   607  0F50                     	;# 
   608  0F51                     	;# 
   609  0F52                     	;# 
   610  0F53                     	;# 
   611  0F54                     	;# 
   612  0F55                     	;# 
   613  0F56                     	;# 
   614  0F57                     	;# 
   615  0F65                     	;# 
   616  0F68                     	;# 
   617  0F69                     	;# 
   618  0F6A                     	;# 
   619  0F6B                     	;# 
   620  0FE4                     	;# 
   621  0FE5                     	;# 
   622  0FE6                     	;# 
   623  0FE7                     	;# 
   624  0FE8                     	;# 
   625  0FE9                     	;# 
   626  0FEA                     	;# 
   627  0FEB                     	;# 
   628  0FED                     	;# 
   629  0FEE                     	;# 
   630  0FEF                     	;# 
   631  0000                     	;# 
   632  0001                     	;# 
   633  0002                     	;# 
   634  0003                     	;# 
   635  0004                     	;# 
   636  0005                     	;# 
   637  0006                     	;# 
   638  0007                     	;# 
   639  0008                     	;# 
   640  0009                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0016                     	;# 
   651  0017                     	;# 
   652  0018                     	;# 
   653  001C                     	;# 
   654  001C                     	;# 
   655  001D                     	;# 
   656  001D                     	;# 
   657  001E                     	;# 
   658  001F                     	;# 
   659  008C                     	;# 
   660  008C                     	;# 
   661  008D                     	;# 
   662  008E                     	;# 
   663  008E                     	;# 
   664  008F                     	;# 
   665  0090                     	;# 
   666  0090                     	;# 
   667  0091                     	;# 
   668  0093                     	;# 
   669  0094                     	;# 
   670  0095                     	;# 
   671  0096                     	;# 
   672  0097                     	;# 
   673  0098                     	;# 
   674  0099                     	;# 
   675  009A                     	;# 
   676  009B                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009E                     	;# 
   680  010C                     	;# 
   681  010D                     	;# 
   682  010E                     	;# 
   683  010E                     	;# 
   684  010F                     	;# 
   685  0110                     	;# 
   686  0110                     	;# 
   687  0111                     	;# 
   688  0112                     	;# 
   689  0112                     	;# 
   690  0113                     	;# 
   691  0114                     	;# 
   692  0114                     	;# 
   693  0115                     	;# 
   694  0116                     	;# 
   695  0116                     	;# 
   696  0117                     	;# 
   697  0119                     	;# 
   698  0119                     	;# 
   699  0119                     	;# 
   700  011A                     	;# 
   701  011A                     	;# 
   702  011A                     	;# 
   703  011B                     	;# 
   704  011B                     	;# 
   705  011B                     	;# 
   706  011B                     	;# 
   707  011B                     	;# 
   708  011C                     	;# 
   709  011C                     	;# 
   710  011C                     	;# 
   711  011D                     	;# 
   712  011D                     	;# 
   713  011D                     	;# 
   714  011E                     	;# 
   715  011E                     	;# 
   716  011E                     	;# 
   717  011F                     	;# 
   718  011F                     	;# 
   719  011F                     	;# 
   720  011F                     	;# 
   721  011F                     	;# 
   722  018C                     	;# 
   723  018D                     	;# 
   724  018E                     	;# 
   725  018F                     	;# 
   726  0190                     	;# 
   727  0191                     	;# 
   728  0192                     	;# 
   729  0196                     	;# 
   730  0197                     	;# 
   731  0198                     	;# 
   732  0199                     	;# 
   733  019A                     	;# 
   734  019B                     	;# 
   735  019C                     	;# 
   736  020C                     	;# 
   737  020C                     	;# 
   738  020D                     	;# 
   739  020E                     	;# 
   740  020F                     	;# 
   741  020F                     	;# 
   742  0210                     	;# 
   743  0210                     	;# 
   744  0211                     	;# 
   745  0211                     	;# 
   746  0212                     	;# 
   747  0212                     	;# 
   748  0213                     	;# 
   749  0214                     	;# 
   750  0215                     	;# 
   751  0215                     	;# 
   752  0216                     	;# 
   753  0216                     	;# 
   754  0217                     	;# 
   755  0217                     	;# 
   756  0218                     	;# 
   757  0218                     	;# 
   758  0219                     	;# 
   759  021A                     	;# 
   760  021B                     	;# 
   761  021B                     	;# 
   762  021C                     	;# 
   763  021C                     	;# 
   764  021D                     	;# 
   765  021D                     	;# 
   766  021E                     	;# 
   767  021F                     	;# 
   768  028C                     	;# 
   769  028C                     	;# 
   770  028D                     	;# 
   771  028D                     	;# 
   772  028E                     	;# 
   773  028F                     	;# 
   774  0290                     	;# 
   775  0290                     	;# 
   776  0291                     	;# 
   777  0292                     	;# 
   778  0292                     	;# 
   779  0293                     	;# 
   780  0293                     	;# 
   781  0294                     	;# 
   782  0295                     	;# 
   783  0296                     	;# 
   784  0296                     	;# 
   785  0297                     	;# 
   786  0298                     	;# 
   787  0298                     	;# 
   788  0299                     	;# 
   789  0299                     	;# 
   790  029A                     	;# 
   791  029B                     	;# 
   792  029C                     	;# 
   793  029C                     	;# 
   794  029D                     	;# 
   795  030C                     	;# 
   796  030C                     	;# 
   797  030D                     	;# 
   798  030E                     	;# 
   799  030F                     	;# 
   800  0310                     	;# 
   801  0310                     	;# 
   802  0311                     	;# 
   803  0312                     	;# 
   804  0313                     	;# 
   805  0314                     	;# 
   806  0314                     	;# 
   807  0315                     	;# 
   808  0316                     	;# 
   809  0317                     	;# 
   810  0318                     	;# 
   811  0318                     	;# 
   812  0319                     	;# 
   813  031A                     	;# 
   814  031B                     	;# 
   815  031C                     	;# 
   816  031C                     	;# 
   817  031D                     	;# 
   818  031E                     	;# 
   819  031F                     	;# 
   820  038C                     	;# 
   821  038D                     	;# 
   822  038E                     	;# 
   823  0390                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  040C                     	;# 
   827  040D                     	;# 
   828  040E                     	;# 
   829  040F                     	;# 
   830  0410                     	;# 
   831  0411                     	;# 
   832  0416                     	;# 
   833  0416                     	;# 
   834  0417                     	;# 
   835  0418                     	;# 
   836  0418                     	;# 
   837  0419                     	;# 
   838  041A                     	;# 
   839  041A                     	;# 
   840  041B                     	;# 
   841  041C                     	;# 
   842  041C                     	;# 
   843  041D                     	;# 
   844  041E                     	;# 
   845  041F                     	;# 
   846  048C                     	;# 
   847  048C                     	;# 
   848  048D                     	;# 
   849  048E                     	;# 
   850  048F                     	;# 
   851  048F                     	;# 
   852  0490                     	;# 
   853  0491                     	;# 
   854  0492                     	;# 
   855  0492                     	;# 
   856  0493                     	;# 
   857  0494                     	;# 
   858  0495                     	;# 
   859  0495                     	;# 
   860  0496                     	;# 
   861  0497                     	;# 
   862  0498                     	;# 
   863  0499                     	;# 
   864  049A                     	;# 
   865  049B                     	;# 
   866  049C                     	;# 
   867  049D                     	;# 
   868  050C                     	;# 
   869  050C                     	;# 
   870  050D                     	;# 
   871  050E                     	;# 
   872  050F                     	;# 
   873  050F                     	;# 
   874  0510                     	;# 
   875  0511                     	;# 
   876  0512                     	;# 
   877  0512                     	;# 
   878  0513                     	;# 
   879  0514                     	;# 
   880  0515                     	;# 
   881  0515                     	;# 
   882  0516                     	;# 
   883  0517                     	;# 
   884  0518                     	;# 
   885  0519                     	;# 
   886  051A                     	;# 
   887  051B                     	;# 
   888  051C                     	;# 
   889  051D                     	;# 
   890  058C                     	;# 
   891  058C                     	;# 
   892  058D                     	;# 
   893  058E                     	;# 
   894  058F                     	;# 
   895  058F                     	;# 
   896  0590                     	;# 
   897  0591                     	;# 
   898  0592                     	;# 
   899  0593                     	;# 
   900  060C                     	;# 
   901  060D                     	;# 
   902  060E                     	;# 
   903  060F                     	;# 
   904  0610                     	;# 
   905  0611                     	;# 
   906  0612                     	;# 
   907  0613                     	;# 
   908  0614                     	;# 
   909  0616                     	;# 
   910  0617                     	;# 
   911  0618                     	;# 
   912  0619                     	;# 
   913  061A                     	;# 
   914  061B                     	;# 
   915  061C                     	;# 
   916  061D                     	;# 
   917  061E                     	;# 
   918  068C                     	;# 
   919  068D                     	;# 
   920  068E                     	;# 
   921  068F                     	;# 
   922  0690                     	;# 
   923  0691                     	;# 
   924  0692                     	;# 
   925  0693                     	;# 
   926  0694                     	;# 
   927  070C                     	;# 
   928  070D                     	;# 
   929  070E                     	;# 
   930  070F                     	;# 
   931  0710                     	;# 
   932  0711                     	;# 
   933  0712                     	;# 
   934  0713                     	;# 
   935  0714                     	;# 
   936  0716                     	;# 
   937  0717                     	;# 
   938  0718                     	;# 
   939  0719                     	;# 
   940  071A                     	;# 
   941  071B                     	;# 
   942  071C                     	;# 
   943  071D                     	;# 
   944  071E                     	;# 
   945  0796                     	;# 
   946  0797                     	;# 
   947  0798                     	;# 
   948  0799                     	;# 
   949  079A                     	;# 
   950  079B                     	;# 
   951  080C                     	;# 
   952  080D                     	;# 
   953  080E                     	;# 
   954  080F                     	;# 
   955  0810                     	;# 
   956  0811                     	;# 
   957  0812                     	;# 
   958  0813                     	;# 
   959  0814                     	;# 
   960  081A                     	;# 
   961  081B                     	;# 
   962  081C                     	;# 
   963  081D                     	;# 
   964  081E                     	;# 
   965  081F                     	;# 
   966  088C                     	;# 
   967  088D                     	;# 
   968  088E                     	;# 
   969  088F                     	;# 
   970  0890                     	;# 
   971  0891                     	;# 
   972  0892                     	;# 
   973  0893                     	;# 
   974  0895                     	;# 
   975  0896                     	;# 
   976  0897                     	;# 
   977  0898                     	;# 
   978  0899                     	;# 
   979  089A                     	;# 
   980  089B                     	;# 
   981  090C                     	;# 
   982  090E                     	;# 
   983  090F                     	;# 
   984  091F                     	;# 
   985  091F                     	;# 
   986  098F                     	;# 
   987  098F                     	;# 
   988  0990                     	;# 
   989  0991                     	;# 
   990  0992                     	;# 
   991  0993                     	;# 
   992  0994                     	;# 
   993  0995                     	;# 
   994  0996                     	;# 
   995  0997                     	;# 
   996  0E0F                     	;# 
   997  0E10                     	;# 
   998  0E11                     	;# 
   999  0E12                     	;# 
  1000  0E13                     	;# 
  1001  0E14                     	;# 
  1002  0E15                     	;# 
  1003  0E16                     	;# 
  1004  0E17                     	;# 
  1005  0E18                     	;# 
  1006  0E19                     	;# 
  1007  0E1A                     	;# 
  1008  0E1B                     	;# 
  1009  0E1C                     	;# 
  1010  0E1D                     	;# 
  1011  0E1E                     	;# 
  1012  0E1F                     	;# 
  1013  0E20                     	;# 
  1014  0E21                     	;# 
  1015  0E22                     	;# 
  1016  0E23                     	;# 
  1017  0E24                     	;# 
  1018  0E25                     	;# 
  1019  0E26                     	;# 
  1020  0E27                     	;# 
  1021  0E28                     	;# 
  1022  0E29                     	;# 
  1023  0E2A                     	;# 
  1024  0E2B                     	;# 
  1025  0E2C                     	;# 
  1026  0E2D                     	;# 
  1027  0E2E                     	;# 
  1028  0E2F                     	;# 
  1029  0E30                     	;# 
  1030  0E31                     	;# 
  1031  0E32                     	;# 
  1032  0E33                     	;# 
  1033  0E34                     	;# 
  1034  0E35                     	;# 
  1035  0E36                     	;# 
  1036  0E37                     	;# 
  1037  0E8F                     	;# 
  1038  0E90                     	;# 
  1039  0E91                     	;# 
  1040  0E92                     	;# 
  1041  0E93                     	;# 
  1042  0E94                     	;# 
  1043  0E95                     	;# 
  1044  0E96                     	;# 
  1045  0E97                     	;# 
  1046  0E9C                     	;# 
  1047  0E9D                     	;# 
  1048  0E9E                     	;# 
  1049  0EA1                     	;# 
  1050  0EA2                     	;# 
  1051  0EA3                     	;# 
  1052  0EA4                     	;# 
  1053  0EA5                     	;# 
  1054  0EA9                     	;# 
  1055  0EAA                     	;# 
  1056  0EAB                     	;# 
  1057  0EAC                     	;# 
  1058  0EB1                     	;# 
  1059  0EB2                     	;# 
  1060  0EB3                     	;# 
  1061  0EB8                     	;# 
  1062  0EB9                     	;# 
  1063  0EBA                     	;# 
  1064  0EBB                     	;# 
  1065  0EBC                     	;# 
  1066  0EBD                     	;# 
  1067  0EBE                     	;# 
  1068  0EC3                     	;# 
  1069  0EC5                     	;# 
  1070  0EC6                     	;# 
  1071  0EC7                     	;# 
  1072  0EC8                     	;# 
  1073  0EC9                     	;# 
  1074  0ECA                     	;# 
  1075  0ECB                     	;# 
  1076  0ECC                     	;# 
  1077  0F10                     	;# 
  1078  0F11                     	;# 
  1079  0F12                     	;# 
  1080  0F13                     	;# 
  1081  0F14                     	;# 
  1082  0F15                     	;# 
  1083  0F16                     	;# 
  1084  0F17                     	;# 
  1085  0F18                     	;# 
  1086  0F19                     	;# 
  1087  0F1A                     	;# 
  1088  0F1B                     	;# 
  1089  0F1C                     	;# 
  1090  0F1D                     	;# 
  1091  0F1E                     	;# 
  1092  0F1F                     	;# 
  1093  0F20                     	;# 
  1094  0F21                     	;# 
  1095  0F22                     	;# 
  1096  0F23                     	;# 
  1097  0F24                     	;# 
  1098  0F25                     	;# 
  1099  0F26                     	;# 
  1100  0F27                     	;# 
  1101  0F38                     	;# 
  1102  0F39                     	;# 
  1103  0F3A                     	;# 
  1104  0F3B                     	;# 
  1105  0F3C                     	;# 
  1106  0F3D                     	;# 
  1107  0F3E                     	;# 
  1108  0F3F                     	;# 
  1109  0F40                     	;# 
  1110  0F41                     	;# 
  1111  0F43                     	;# 
  1112  0F44                     	;# 
  1113  0F45                     	;# 
  1114  0F46                     	;# 
  1115  0F47                     	;# 
  1116  0F48                     	;# 
  1117  0F49                     	;# 
  1118  0F4A                     	;# 
  1119  0F4B                     	;# 
  1120  0F4C                     	;# 
  1121  0F4E                     	;# 
  1122  0F4F                     	;# 
  1123  0F50                     	;# 
  1124  0F51                     	;# 
  1125  0F52                     	;# 
  1126  0F53                     	;# 
  1127  0F54                     	;# 
  1128  0F55                     	;# 
  1129  0F56                     	;# 
  1130  0F57                     	;# 
  1131  0F65                     	;# 
  1132  0F68                     	;# 
  1133  0F69                     	;# 
  1134  0F6A                     	;# 
  1135  0F6B                     	;# 
  1136  0FE4                     	;# 
  1137  0FE5                     	;# 
  1138  0FE6                     	;# 
  1139  0FE7                     	;# 
  1140  0FE8                     	;# 
  1141  0FE9                     	;# 
  1142  0FEA                     	;# 
  1143  0FEB                     	;# 
  1144  0FED                     	;# 
  1145  0FEE                     	;# 
  1146  0FEF                     	;# 
  1147  0000                     	;# 
  1148  0001                     	;# 
  1149  0002                     	;# 
  1150  0003                     	;# 
  1151  0004                     	;# 
  1152  0005                     	;# 
  1153  0006                     	;# 
  1154  0007                     	;# 
  1155  0008                     	;# 
  1156  0009                     	;# 
  1157  000A                     	;# 
  1158  000B                     	;# 
  1159  000C                     	;# 
  1160  000D                     	;# 
  1161  000E                     	;# 
  1162  0010                     	;# 
  1163  0011                     	;# 
  1164  0012                     	;# 
  1165  0013                     	;# 
  1166  0016                     	;# 
  1167  0017                     	;# 
  1168  0018                     	;# 
  1169  001C                     	;# 
  1170  001C                     	;# 
  1171  001D                     	;# 
  1172  001D                     	;# 
  1173  001E                     	;# 
  1174  001F                     	;# 
  1175  008C                     	;# 
  1176  008C                     	;# 
  1177  008D                     	;# 
  1178  008E                     	;# 
  1179  008E                     	;# 
  1180  008F                     	;# 
  1181  0090                     	;# 
  1182  0090                     	;# 
  1183  0091                     	;# 
  1184  0093                     	;# 
  1185  0094                     	;# 
  1186  0095                     	;# 
  1187  0096                     	;# 
  1188  0097                     	;# 
  1189  0098                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010D                     	;# 
  1198  010E                     	;# 
  1199  010E                     	;# 
  1200  010F                     	;# 
  1201  0110                     	;# 
  1202  0110                     	;# 
  1203  0111                     	;# 
  1204  0112                     	;# 
  1205  0112                     	;# 
  1206  0113                     	;# 
  1207  0114                     	;# 
  1208  0114                     	;# 
  1209  0115                     	;# 
  1210  0116                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  0119                     	;# 
  1214  0119                     	;# 
  1215  0119                     	;# 
  1216  011A                     	;# 
  1217  011A                     	;# 
  1218  011A                     	;# 
  1219  011B                     	;# 
  1220  011B                     	;# 
  1221  011B                     	;# 
  1222  011B                     	;# 
  1223  011B                     	;# 
  1224  011C                     	;# 
  1225  011C                     	;# 
  1226  011C                     	;# 
  1227  011D                     	;# 
  1228  011D                     	;# 
  1229  011D                     	;# 
  1230  011E                     	;# 
  1231  011E                     	;# 
  1232  011E                     	;# 
  1233  011F                     	;# 
  1234  011F                     	;# 
  1235  011F                     	;# 
  1236  011F                     	;# 
  1237  011F                     	;# 
  1238  018C                     	;# 
  1239  018D                     	;# 
  1240  018E                     	;# 
  1241  018F                     	;# 
  1242  0190                     	;# 
  1243  0191                     	;# 
  1244  0192                     	;# 
  1245  0196                     	;# 
  1246  0197                     	;# 
  1247  0198                     	;# 
  1248  0199                     	;# 
  1249  019A                     	;# 
  1250  019B                     	;# 
  1251  019C                     	;# 
  1252  020C                     	;# 
  1253  020C                     	;# 
  1254  020D                     	;# 
  1255  020E                     	;# 
  1256  020F                     	;# 
  1257  020F                     	;# 
  1258  0210                     	;# 
  1259  0210                     	;# 
  1260  0211                     	;# 
  1261  0211                     	;# 
  1262  0212                     	;# 
  1263  0212                     	;# 
  1264  0213                     	;# 
  1265  0214                     	;# 
  1266  0215                     	;# 
  1267  0215                     	;# 
  1268  0216                     	;# 
  1269  0216                     	;# 
  1270  0217                     	;# 
  1271  0217                     	;# 
  1272  0218                     	;# 
  1273  0218                     	;# 
  1274  0219                     	;# 
  1275  021A                     	;# 
  1276  021B                     	;# 
  1277  021B                     	;# 
  1278  021C                     	;# 
  1279  021C                     	;# 
  1280  021D                     	;# 
  1281  021D                     	;# 
  1282  021E                     	;# 
  1283  021F                     	;# 
  1284  028C                     	;# 
  1285  028C                     	;# 
  1286  028D                     	;# 
  1287  028D                     	;# 
  1288  028E                     	;# 
  1289  028F                     	;# 
  1290  0290                     	;# 
  1291  0290                     	;# 
  1292  0291                     	;# 
  1293  0292                     	;# 
  1294  0292                     	;# 
  1295  0293                     	;# 
  1296  0293                     	;# 
  1297  0294                     	;# 
  1298  0295                     	;# 
  1299  0296                     	;# 
  1300  0296                     	;# 
  1301  0297                     	;# 
  1302  0298                     	;# 
  1303  0298                     	;# 
  1304  0299                     	;# 
  1305  0299                     	;# 
  1306  029A                     	;# 
  1307  029B                     	;# 
  1308  029C                     	;# 
  1309  029C                     	;# 
  1310  029D                     	;# 
  1311  030C                     	;# 
  1312  030C                     	;# 
  1313  030D                     	;# 
  1314  030E                     	;# 
  1315  030F                     	;# 
  1316  0310                     	;# 
  1317  0310                     	;# 
  1318  0311                     	;# 
  1319  0312                     	;# 
  1320  0313                     	;# 
  1321  0314                     	;# 
  1322  0314                     	;# 
  1323  0315                     	;# 
  1324  0316                     	;# 
  1325  0317                     	;# 
  1326  0318                     	;# 
  1327  0318                     	;# 
  1328  0319                     	;# 
  1329  031A                     	;# 
  1330  031B                     	;# 
  1331  031C                     	;# 
  1332  031C                     	;# 
  1333  031D                     	;# 
  1334  031E                     	;# 
  1335  031F                     	;# 
  1336  038C                     	;# 
  1337  038D                     	;# 
  1338  038E                     	;# 
  1339  0390                     	;# 
  1340  0391                     	;# 
  1341  0392                     	;# 
  1342  040C                     	;# 
  1343  040D                     	;# 
  1344  040E                     	;# 
  1345  040F                     	;# 
  1346  0410                     	;# 
  1347  0411                     	;# 
  1348  0416                     	;# 
  1349  0416                     	;# 
  1350  0417                     	;# 
  1351  0418                     	;# 
  1352  0418                     	;# 
  1353  0419                     	;# 
  1354  041A                     	;# 
  1355  041A                     	;# 
  1356  041B                     	;# 
  1357  041C                     	;# 
  1358  041C                     	;# 
  1359  041D                     	;# 
  1360  041E                     	;# 
  1361  041F                     	;# 
  1362  048C                     	;# 
  1363  048C                     	;# 
  1364  048D                     	;# 
  1365  048E                     	;# 
  1366  048F                     	;# 
  1367  048F                     	;# 
  1368  0490                     	;# 
  1369  0491                     	;# 
  1370  0492                     	;# 
  1371  0492                     	;# 
  1372  0493                     	;# 
  1373  0494                     	;# 
  1374  0495                     	;# 
  1375  0495                     	;# 
  1376  0496                     	;# 
  1377  0497                     	;# 
  1378  0498                     	;# 
  1379  0499                     	;# 
  1380  049A                     	;# 
  1381  049B                     	;# 
  1382  049C                     	;# 
  1383  049D                     	;# 
  1384  050C                     	;# 
  1385  050C                     	;# 
  1386  050D                     	;# 
  1387  050E                     	;# 
  1388  050F                     	;# 
  1389  050F                     	;# 
  1390  0510                     	;# 
  1391  0511                     	;# 
  1392  0512                     	;# 
  1393  0512                     	;# 
  1394  0513                     	;# 
  1395  0514                     	;# 
  1396  0515                     	;# 
  1397  0515                     	;# 
  1398  0516                     	;# 
  1399  0517                     	;# 
  1400  0518                     	;# 
  1401  0519                     	;# 
  1402  051A                     	;# 
  1403  051B                     	;# 
  1404  051C                     	;# 
  1405  051D                     	;# 
  1406  058C                     	;# 
  1407  058C                     	;# 
  1408  058D                     	;# 
  1409  058E                     	;# 
  1410  058F                     	;# 
  1411  058F                     	;# 
  1412  0590                     	;# 
  1413  0591                     	;# 
  1414  0592                     	;# 
  1415  0593                     	;# 
  1416  060C                     	;# 
  1417  060D                     	;# 
  1418  060E                     	;# 
  1419  060F                     	;# 
  1420  0610                     	;# 
  1421  0611                     	;# 
  1422  0612                     	;# 
  1423  0613                     	;# 
  1424  0614                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061D                     	;# 
  1433  061E                     	;# 
  1434  068C                     	;# 
  1435  068D                     	;# 
  1436  068E                     	;# 
  1437  068F                     	;# 
  1438  0690                     	;# 
  1439  0691                     	;# 
  1440  0692                     	;# 
  1441  0693                     	;# 
  1442  0694                     	;# 
  1443  070C                     	;# 
  1444  070D                     	;# 
  1445  070E                     	;# 
  1446  070F                     	;# 
  1447  0710                     	;# 
  1448  0711                     	;# 
  1449  0712                     	;# 
  1450  0713                     	;# 
  1451  0714                     	;# 
  1452  0716                     	;# 
  1453  0717                     	;# 
  1454  0718                     	;# 
  1455  0719                     	;# 
  1456  071A                     	;# 
  1457  071B                     	;# 
  1458  071C                     	;# 
  1459  071D                     	;# 
  1460  071E                     	;# 
  1461  0796                     	;# 
  1462  0797                     	;# 
  1463  0798                     	;# 
  1464  0799                     	;# 
  1465  079A                     	;# 
  1466  079B                     	;# 
  1467  080C                     	;# 
  1468  080D                     	;# 
  1469  080E                     	;# 
  1470  080F                     	;# 
  1471  0810                     	;# 
  1472  0811                     	;# 
  1473  0812                     	;# 
  1474  0813                     	;# 
  1475  0814                     	;# 
  1476  081A                     	;# 
  1477  081B                     	;# 
  1478  081C                     	;# 
  1479  081D                     	;# 
  1480  081E                     	;# 
  1481  081F                     	;# 
  1482  088C                     	;# 
  1483  088D                     	;# 
  1484  088E                     	;# 
  1485  088F                     	;# 
  1486  0890                     	;# 
  1487  0891                     	;# 
  1488  0892                     	;# 
  1489  0893                     	;# 
  1490  0895                     	;# 
  1491  0896                     	;# 
  1492  0897                     	;# 
  1493  0898                     	;# 
  1494  0899                     	;# 
  1495  089A                     	;# 
  1496  089B                     	;# 
  1497  090C                     	;# 
  1498  090E                     	;# 
  1499  090F                     	;# 
  1500  091F                     	;# 
  1501  091F                     	;# 
  1502  098F                     	;# 
  1503  098F                     	;# 
  1504  0990                     	;# 
  1505  0991                     	;# 
  1506  0992                     	;# 
  1507  0993                     	;# 
  1508  0994                     	;# 
  1509  0995                     	;# 
  1510  0996                     	;# 
  1511  0997                     	;# 
  1512  0E0F                     	;# 
  1513  0E10                     	;# 
  1514  0E11                     	;# 
  1515  0E12                     	;# 
  1516  0E13                     	;# 
  1517  0E14                     	;# 
  1518  0E15                     	;# 
  1519  0E16                     	;# 
  1520  0E17                     	;# 
  1521  0E18                     	;# 
  1522  0E19                     	;# 
  1523  0E1A                     	;# 
  1524  0E1B                     	;# 
  1525  0E1C                     	;# 
  1526  0E1D                     	;# 
  1527  0E1E                     	;# 
  1528  0E1F                     	;# 
  1529  0E20                     	;# 
  1530  0E21                     	;# 
  1531  0E22                     	;# 
  1532  0E23                     	;# 
  1533  0E24                     	;# 
  1534  0E25                     	;# 
  1535  0E26                     	;# 
  1536  0E27                     	;# 
  1537  0E28                     	;# 
  1538  0E29                     	;# 
  1539  0E2A                     	;# 
  1540  0E2B                     	;# 
  1541  0E2C                     	;# 
  1542  0E2D                     	;# 
  1543  0E2E                     	;# 
  1544  0E2F                     	;# 
  1545  0E30                     	;# 
  1546  0E31                     	;# 
  1547  0E32                     	;# 
  1548  0E33                     	;# 
  1549  0E34                     	;# 
  1550  0E35                     	;# 
  1551  0E36                     	;# 
  1552  0E37                     	;# 
  1553  0E8F                     	;# 
  1554  0E90                     	;# 
  1555  0E91                     	;# 
  1556  0E92                     	;# 
  1557  0E93                     	;# 
  1558  0E94                     	;# 
  1559  0E95                     	;# 
  1560  0E96                     	;# 
  1561  0E97                     	;# 
  1562  0E9C                     	;# 
  1563  0E9D                     	;# 
  1564  0E9E                     	;# 
  1565  0EA1                     	;# 
  1566  0EA2                     	;# 
  1567  0EA3                     	;# 
  1568  0EA4                     	;# 
  1569  0EA5                     	;# 
  1570  0EA9                     	;# 
  1571  0EAA                     	;# 
  1572  0EAB                     	;# 
  1573  0EAC                     	;# 
  1574  0EB1                     	;# 
  1575  0EB2                     	;# 
  1576  0EB3                     	;# 
  1577  0EB8                     	;# 
  1578  0EB9                     	;# 
  1579  0EBA                     	;# 
  1580  0EBB                     	;# 
  1581  0EBC                     	;# 
  1582  0EBD                     	;# 
  1583  0EBE                     	;# 
  1584  0EC3                     	;# 
  1585  0EC5                     	;# 
  1586  0EC6                     	;# 
  1587  0EC7                     	;# 
  1588  0EC8                     	;# 
  1589  0EC9                     	;# 
  1590  0ECA                     	;# 
  1591  0ECB                     	;# 
  1592  0ECC                     	;# 
  1593  0F10                     	;# 
  1594  0F11                     	;# 
  1595  0F12                     	;# 
  1596  0F13                     	;# 
  1597  0F14                     	;# 
  1598  0F15                     	;# 
  1599  0F16                     	;# 
  1600  0F17                     	;# 
  1601  0F18                     	;# 
  1602  0F19                     	;# 
  1603  0F1A                     	;# 
  1604  0F1B                     	;# 
  1605  0F1C                     	;# 
  1606  0F1D                     	;# 
  1607  0F1E                     	;# 
  1608  0F1F                     	;# 
  1609  0F20                     	;# 
  1610  0F21                     	;# 
  1611  0F22                     	;# 
  1612  0F23                     	;# 
  1613  0F24                     	;# 
  1614  0F25                     	;# 
  1615  0F26                     	;# 
  1616  0F27                     	;# 
  1617  0F38                     	;# 
  1618  0F39                     	;# 
  1619  0F3A                     	;# 
  1620  0F3B                     	;# 
  1621  0F3C                     	;# 
  1622  0F3D                     	;# 
  1623  0F3E                     	;# 
  1624  0F3F                     	;# 
  1625  0F40                     	;# 
  1626  0F41                     	;# 
  1627  0F43                     	;# 
  1628  0F44                     	;# 
  1629  0F45                     	;# 
  1630  0F46                     	;# 
  1631  0F47                     	;# 
  1632  0F48                     	;# 
  1633  0F49                     	;# 
  1634  0F4A                     	;# 
  1635  0F4B                     	;# 
  1636  0F4C                     	;# 
  1637  0F4E                     	;# 
  1638  0F4F                     	;# 
  1639  0F50                     	;# 
  1640  0F51                     	;# 
  1641  0F52                     	;# 
  1642  0F53                     	;# 
  1643  0F54                     	;# 
  1644  0F55                     	;# 
  1645  0F56                     	;# 
  1646  0F57                     	;# 
  1647  0F65                     	;# 
  1648  0F68                     	;# 
  1649  0F69                     	;# 
  1650  0F6A                     	;# 
  1651  0F6B                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE9                     	;# 
  1658  0FEA                     	;# 
  1659  0FEB                     	;# 
  1660  0FED                     	;# 
  1661  0FEE                     	;# 
  1662  0FEF                     	;# 
  1663  0000                     	;# 
  1664  0001                     	;# 
  1665  0002                     	;# 
  1666  0003                     	;# 
  1667  0004                     	;# 
  1668  0005                     	;# 
  1669  0006                     	;# 
  1670  0007                     	;# 
  1671  0008                     	;# 
  1672  0009                     	;# 
  1673  000A                     	;# 
  1674  000B                     	;# 
  1675  000C                     	;# 
  1676  000D                     	;# 
  1677  000E                     	;# 
  1678  0010                     	;# 
  1679  0011                     	;# 
  1680  0012                     	;# 
  1681  0013                     	;# 
  1682  0016                     	;# 
  1683  0017                     	;# 
  1684  0018                     	;# 
  1685  001C                     	;# 
  1686  001C                     	;# 
  1687  001D                     	;# 
  1688  001D                     	;# 
  1689  001E                     	;# 
  1690  001F                     	;# 
  1691  008C                     	;# 
  1692  008C                     	;# 
  1693  008D                     	;# 
  1694  008E                     	;# 
  1695  008E                     	;# 
  1696  008F                     	;# 
  1697  0090                     	;# 
  1698  0090                     	;# 
  1699  0091                     	;# 
  1700  0093                     	;# 
  1701  0094                     	;# 
  1702  0095                     	;# 
  1703  0096                     	;# 
  1704  0097                     	;# 
  1705  0098                     	;# 
  1706  0099                     	;# 
  1707  009A                     	;# 
  1708  009B                     	;# 
  1709  009C                     	;# 
  1710  009D                     	;# 
  1711  009E                     	;# 
  1712  010C                     	;# 
  1713  010D                     	;# 
  1714  010E                     	;# 
  1715  010E                     	;# 
  1716  010F                     	;# 
  1717  0110                     	;# 
  1718  0110                     	;# 
  1719  0111                     	;# 
  1720  0112                     	;# 
  1721  0112                     	;# 
  1722  0113                     	;# 
  1723  0114                     	;# 
  1724  0114                     	;# 
  1725  0115                     	;# 
  1726  0116                     	;# 
  1727  0116                     	;# 
  1728  0117                     	;# 
  1729  0119                     	;# 
  1730  0119                     	;# 
  1731  0119                     	;# 
  1732  011A                     	;# 
  1733  011A                     	;# 
  1734  011A                     	;# 
  1735  011B                     	;# 
  1736  011B                     	;# 
  1737  011B                     	;# 
  1738  011B                     	;# 
  1739  011B                     	;# 
  1740  011C                     	;# 
  1741  011C                     	;# 
  1742  011C                     	;# 
  1743  011D                     	;# 
  1744  011D                     	;# 
  1745  011D                     	;# 
  1746  011E                     	;# 
  1747  011E                     	;# 
  1748  011E                     	;# 
  1749  011F                     	;# 
  1750  011F                     	;# 
  1751  011F                     	;# 
  1752  011F                     	;# 
  1753  011F                     	;# 
  1754  018C                     	;# 
  1755  018D                     	;# 
  1756  018E                     	;# 
  1757  018F                     	;# 
  1758  0190                     	;# 
  1759  0191                     	;# 
  1760  0192                     	;# 
  1761  0196                     	;# 
  1762  0197                     	;# 
  1763  0198                     	;# 
  1764  0199                     	;# 
  1765  019A                     	;# 
  1766  019B                     	;# 
  1767  019C                     	;# 
  1768  020C                     	;# 
  1769  020C                     	;# 
  1770  020D                     	;# 
  1771  020E                     	;# 
  1772  020F                     	;# 
  1773  020F                     	;# 
  1774  0210                     	;# 
  1775  0210                     	;# 
  1776  0211                     	;# 
  1777  0211                     	;# 
  1778  0212                     	;# 
  1779  0212                     	;# 
  1780  0213                     	;# 
  1781  0214                     	;# 
  1782  0215                     	;# 
  1783  0215                     	;# 
  1784  0216                     	;# 
  1785  0216                     	;# 
  1786  0217                     	;# 
  1787  0217                     	;# 
  1788  0218                     	;# 
  1789  0218                     	;# 
  1790  0219                     	;# 
  1791  021A                     	;# 
  1792  021B                     	;# 
  1793  021B                     	;# 
  1794  021C                     	;# 
  1795  021C                     	;# 
  1796  021D                     	;# 
  1797  021D                     	;# 
  1798  021E                     	;# 
  1799  021F                     	;# 
  1800  028C                     	;# 
  1801  028C                     	;# 
  1802  028D                     	;# 
  1803  028D                     	;# 
  1804  028E                     	;# 
  1805  028F                     	;# 
  1806  0290                     	;# 
  1807  0290                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0293                     	;# 
  1813  0294                     	;# 
  1814  0295                     	;# 
  1815  0296                     	;# 
  1816  0296                     	;# 
  1817  0297                     	;# 
  1818  0298                     	;# 
  1819  0298                     	;# 
  1820  0299                     	;# 
  1821  0299                     	;# 
  1822  029A                     	;# 
  1823  029B                     	;# 
  1824  029C                     	;# 
  1825  029C                     	;# 
  1826  029D                     	;# 
  1827  030C                     	;# 
  1828  030C                     	;# 
  1829  030D                     	;# 
  1830  030E                     	;# 
  1831  030F                     	;# 
  1832  0310                     	;# 
  1833  0310                     	;# 
  1834  0311                     	;# 
  1835  0312                     	;# 
  1836  0313                     	;# 
  1837  0314                     	;# 
  1838  0314                     	;# 
  1839  0315                     	;# 
  1840  0316                     	;# 
  1841  0317                     	;# 
  1842  0318                     	;# 
  1843  0318                     	;# 
  1844  0319                     	;# 
  1845  031A                     	;# 
  1846  031B                     	;# 
  1847  031C                     	;# 
  1848  031C                     	;# 
  1849  031D                     	;# 
  1850  031E                     	;# 
  1851  031F                     	;# 
  1852  038C                     	;# 
  1853  038D                     	;# 
  1854  038E                     	;# 
  1855  0390                     	;# 
  1856  0391                     	;# 
  1857  0392                     	;# 
  1858  040C                     	;# 
  1859  040D                     	;# 
  1860  040E                     	;# 
  1861  040F                     	;# 
  1862  0410                     	;# 
  1863  0411                     	;# 
  1864  0416                     	;# 
  1865  0416                     	;# 
  1866  0417                     	;# 
  1867  0418                     	;# 
  1868  0418                     	;# 
  1869  0419                     	;# 
  1870  041A                     	;# 
  1871  041A                     	;# 
  1872  041B                     	;# 
  1873  041C                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  041F                     	;# 
  1878  048C                     	;# 
  1879  048C                     	;# 
  1880  048D                     	;# 
  1881  048E                     	;# 
  1882  048F                     	;# 
  1883  048F                     	;# 
  1884  0490                     	;# 
  1885  0491                     	;# 
  1886  0492                     	;# 
  1887  0492                     	;# 
  1888  0493                     	;# 
  1889  0494                     	;# 
  1890  0495                     	;# 
  1891  0495                     	;# 
  1892  0496                     	;# 
  1893  0497                     	;# 
  1894  0498                     	;# 
  1895  0499                     	;# 
  1896  049A                     	;# 
  1897  049B                     	;# 
  1898  049C                     	;# 
  1899  049D                     	;# 
  1900  050C                     	;# 
  1901  050C                     	;# 
  1902  050D                     	;# 
  1903  050E                     	;# 
  1904  050F                     	;# 
  1905  050F                     	;# 
  1906  0510                     	;# 
  1907  0511                     	;# 
  1908  0512                     	;# 
  1909  0512                     	;# 
  1910  0513                     	;# 
  1911  0514                     	;# 
  1912  0515                     	;# 
  1913  0515                     	;# 
  1914  0516                     	;# 
  1915  0517                     	;# 
  1916  0518                     	;# 
  1917  0519                     	;# 
  1918  051A                     	;# 
  1919  051B                     	;# 
  1920  051C                     	;# 
  1921  051D                     	;# 
  1922  058C                     	;# 
  1923  058C                     	;# 
  1924  058D                     	;# 
  1925  058E                     	;# 
  1926  058F                     	;# 
  1927  058F                     	;# 
  1928  0590                     	;# 
  1929  0591                     	;# 
  1930  0592                     	;# 
  1931  0593                     	;# 
  1932  060C                     	;# 
  1933  060D                     	;# 
  1934  060E                     	;# 
  1935  060F                     	;# 
  1936  0610                     	;# 
  1937  0611                     	;# 
  1938  0612                     	;# 
  1939  0613                     	;# 
  1940  0614                     	;# 
  1941  0616                     	;# 
  1942  0617                     	;# 
  1943  0618                     	;# 
  1944  0619                     	;# 
  1945  061A                     	;# 
  1946  061B                     	;# 
  1947  061C                     	;# 
  1948  061D                     	;# 
  1949  061E                     	;# 
  1950  068C                     	;# 
  1951  068D                     	;# 
  1952  068E                     	;# 
  1953  068F                     	;# 
  1954  0690                     	;# 
  1955  0691                     	;# 
  1956  0692                     	;# 
  1957  0693                     	;# 
  1958  0694                     	;# 
  1959  070C                     	;# 
  1960  070D                     	;# 
  1961  070E                     	;# 
  1962  070F                     	;# 
  1963  0710                     	;# 
  1964  0711                     	;# 
  1965  0712                     	;# 
  1966  0713                     	;# 
  1967  0714                     	;# 
  1968  0716                     	;# 
  1969  0717                     	;# 
  1970  0718                     	;# 
  1971  0719                     	;# 
  1972  071A                     	;# 
  1973  071B                     	;# 
  1974  071C                     	;# 
  1975  071D                     	;# 
  1976  071E                     	;# 
  1977  0796                     	;# 
  1978  0797                     	;# 
  1979  0798                     	;# 
  1980  0799                     	;# 
  1981  079A                     	;# 
  1982  079B                     	;# 
  1983  080C                     	;# 
  1984  080D                     	;# 
  1985  080E                     	;# 
  1986  080F                     	;# 
  1987  0810                     	;# 
  1988  0811                     	;# 
  1989  0812                     	;# 
  1990  0813                     	;# 
  1991  0814                     	;# 
  1992  081A                     	;# 
  1993  081B                     	;# 
  1994  081C                     	;# 
  1995  081D                     	;# 
  1996  081E                     	;# 
  1997  081F                     	;# 
  1998  088C                     	;# 
  1999  088D                     	;# 
  2000  088E                     	;# 
  2001  088F                     	;# 
  2002  0890                     	;# 
  2003  0891                     	;# 
  2004  0892                     	;# 
  2005  0893                     	;# 
  2006  0895                     	;# 
  2007  0896                     	;# 
  2008  0897                     	;# 
  2009  0898                     	;# 
  2010  0899                     	;# 
  2011  089A                     	;# 
  2012  089B                     	;# 
  2013  090C                     	;# 
  2014  090E                     	;# 
  2015  090F                     	;# 
  2016  091F                     	;# 
  2017  091F                     	;# 
  2018  098F                     	;# 
  2019  098F                     	;# 
  2020  0990                     	;# 
  2021  0991                     	;# 
  2022  0992                     	;# 
  2023  0993                     	;# 
  2024  0994                     	;# 
  2025  0995                     	;# 
  2026  0996                     	;# 
  2027  0997                     	;# 
  2028  0E0F                     	;# 
  2029  0E10                     	;# 
  2030  0E11                     	;# 
  2031  0E12                     	;# 
  2032  0E13                     	;# 
  2033  0E14                     	;# 
  2034  0E15                     	;# 
  2035  0E16                     	;# 
  2036  0E17                     	;# 
  2037  0E18                     	;# 
  2038  0E19                     	;# 
  2039  0E1A                     	;# 
  2040  0E1B                     	;# 
  2041  0E1C                     	;# 
  2042  0E1D                     	;# 
  2043  0E1E                     	;# 
  2044  0E1F                     	;# 
  2045  0E20                     	;# 
  2046  0E21                     	;# 
  2047  0E22                     	;# 
  2048  0E23                     	;# 
  2049  0E24                     	;# 
  2050  0E25                     	;# 
  2051  0E26                     	;# 
  2052  0E27                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E30                     	;# 
  2062  0E31                     	;# 
  2063  0E32                     	;# 
  2064  0E33                     	;# 
  2065  0E34                     	;# 
  2066  0E35                     	;# 
  2067  0E36                     	;# 
  2068  0E37                     	;# 
  2069  0E8F                     	;# 
  2070  0E90                     	;# 
  2071  0E91                     	;# 
  2072  0E92                     	;# 
  2073  0E93                     	;# 
  2074  0E94                     	;# 
  2075  0E95                     	;# 
  2076  0E96                     	;# 
  2077  0E97                     	;# 
  2078  0E9C                     	;# 
  2079  0E9D                     	;# 
  2080  0E9E                     	;# 
  2081  0EA1                     	;# 
  2082  0EA2                     	;# 
  2083  0EA3                     	;# 
  2084  0EA4                     	;# 
  2085  0EA5                     	;# 
  2086  0EA9                     	;# 
  2087  0EAA                     	;# 
  2088  0EAB                     	;# 
  2089  0EAC                     	;# 
  2090  0EB1                     	;# 
  2091  0EB2                     	;# 
  2092  0EB3                     	;# 
  2093  0EB8                     	;# 
  2094  0EB9                     	;# 
  2095  0EBA                     	;# 
  2096  0EBB                     	;# 
  2097  0EBC                     	;# 
  2098  0EBD                     	;# 
  2099  0EBE                     	;# 
  2100  0EC3                     	;# 
  2101  0EC5                     	;# 
  2102  0EC6                     	;# 
  2103  0EC7                     	;# 
  2104  0EC8                     	;# 
  2105  0EC9                     	;# 
  2106  0ECA                     	;# 
  2107  0ECB                     	;# 
  2108  0ECC                     	;# 
  2109  0F10                     	;# 
  2110  0F11                     	;# 
  2111  0F12                     	;# 
  2112  0F13                     	;# 
  2113  0F14                     	;# 
  2114  0F15                     	;# 
  2115  0F16                     	;# 
  2116  0F17                     	;# 
  2117  0F18                     	;# 
  2118  0F19                     	;# 
  2119  0F1A                     	;# 
  2120  0F1B                     	;# 
  2121  0F1C                     	;# 
  2122  0F1D                     	;# 
  2123  0F1E                     	;# 
  2124  0F1F                     	;# 
  2125  0F20                     	;# 
  2126  0F21                     	;# 
  2127  0F22                     	;# 
  2128  0F23                     	;# 
  2129  0F24                     	;# 
  2130  0F25                     	;# 
  2131  0F26                     	;# 
  2132  0F27                     	;# 
  2133  0F38                     	;# 
  2134  0F39                     	;# 
  2135  0F3A                     	;# 
  2136  0F3B                     	;# 
  2137  0F3C                     	;# 
  2138  0F3D                     	;# 
  2139  0F3E                     	;# 
  2140  0F3F                     	;# 
  2141  0F40                     	;# 
  2142  0F41                     	;# 
  2143  0F43                     	;# 
  2144  0F44                     	;# 
  2145  0F45                     	;# 
  2146  0F46                     	;# 
  2147  0F47                     	;# 
  2148  0F48                     	;# 
  2149  0F49                     	;# 
  2150  0F4A                     	;# 
  2151  0F4B                     	;# 
  2152  0F4C                     	;# 
  2153  0F4E                     	;# 
  2154  0F4F                     	;# 
  2155  0F50                     	;# 
  2156  0F51                     	;# 
  2157  0F52                     	;# 
  2158  0F53                     	;# 
  2159  0F54                     	;# 
  2160  0F55                     	;# 
  2161  0F56                     	;# 
  2162  0F57                     	;# 
  2163  0F65                     	;# 
  2164  0F68                     	;# 
  2165  0F69                     	;# 
  2166  0F6A                     	;# 
  2167  0F6B                     	;# 
  2168  0FE4                     	;# 
  2169  0FE5                     	;# 
  2170  0FE6                     	;# 
  2171  0FE7                     	;# 
  2172  0FE8                     	;# 
  2173  0FE9                     	;# 
  2174  0FEA                     	;# 
  2175  0FEB                     	;# 
  2176  0FED                     	;# 
  2177  0FEE                     	;# 
  2178  0FEF                     	;# 
  2179  0000                     	;# 
  2180  0001                     	;# 
  2181  0002                     	;# 
  2182  0003                     	;# 
  2183  0004                     	;# 
  2184  0005                     	;# 
  2185  0006                     	;# 
  2186  0007                     	;# 
  2187  0008                     	;# 
  2188  0009                     	;# 
  2189  000A                     	;# 
  2190  000B                     	;# 
  2191  000C                     	;# 
  2192  000D                     	;# 
  2193  000E                     	;# 
  2194  0010                     	;# 
  2195  0011                     	;# 
  2196  0012                     	;# 
  2197  0013                     	;# 
  2198  0016                     	;# 
  2199  0017                     	;# 
  2200  0018                     	;# 
  2201  001C                     	;# 
  2202  001C                     	;# 
  2203  001D                     	;# 
  2204  001D                     	;# 
  2205  001E                     	;# 
  2206  001F                     	;# 
  2207  008C                     	;# 
  2208  008C                     	;# 
  2209  008D                     	;# 
  2210  008E                     	;# 
  2211  008E                     	;# 
  2212  008F                     	;# 
  2213  0090                     	;# 
  2214  0090                     	;# 
  2215  0091                     	;# 
  2216  0093                     	;# 
  2217  0094                     	;# 
  2218  0095                     	;# 
  2219  0096                     	;# 
  2220  0097                     	;# 
  2221  0098                     	;# 
  2222  0099                     	;# 
  2223  009A                     	;# 
  2224  009B                     	;# 
  2225  009C                     	;# 
  2226  009D                     	;# 
  2227  009E                     	;# 
  2228  010C                     	;# 
  2229  010D                     	;# 
  2230  010E                     	;# 
  2231  010E                     	;# 
  2232  010F                     	;# 
  2233  0110                     	;# 
  2234  0110                     	;# 
  2235  0111                     	;# 
  2236  0112                     	;# 
  2237  0112                     	;# 
  2238  0113                     	;# 
  2239  0114                     	;# 
  2240  0114                     	;# 
  2241  0115                     	;# 
  2242  0116                     	;# 
  2243  0116                     	;# 
  2244  0117                     	;# 
  2245  0119                     	;# 
  2246  0119                     	;# 
  2247  0119                     	;# 
  2248  011A                     	;# 
  2249  011A                     	;# 
  2250  011A                     	;# 
  2251  011B                     	;# 
  2252  011B                     	;# 
  2253  011B                     	;# 
  2254  011B                     	;# 
  2255  011B                     	;# 
  2256  011C                     	;# 
  2257  011C                     	;# 
  2258  011C                     	;# 
  2259  011D                     	;# 
  2260  011D                     	;# 
  2261  011D                     	;# 
  2262  011E                     	;# 
  2263  011E                     	;# 
  2264  011E                     	;# 
  2265  011F                     	;# 
  2266  011F                     	;# 
  2267  011F                     	;# 
  2268  011F                     	;# 
  2269  011F                     	;# 
  2270  018C                     	;# 
  2271  018D                     	;# 
  2272  018E                     	;# 
  2273  018F                     	;# 
  2274  0190                     	;# 
  2275  0191                     	;# 
  2276  0192                     	;# 
  2277  0196                     	;# 
  2278  0197                     	;# 
  2279  0198                     	;# 
  2280  0199                     	;# 
  2281  019A                     	;# 
  2282  019B                     	;# 
  2283  019C                     	;# 
  2284  020C                     	;# 
  2285  020C                     	;# 
  2286  020D                     	;# 
  2287  020E                     	;# 
  2288  020F                     	;# 
  2289  020F                     	;# 
  2290  0210                     	;# 
  2291  0210                     	;# 
  2292  0211                     	;# 
  2293  0211                     	;# 
  2294  0212                     	;# 
  2295  0212                     	;# 
  2296  0213                     	;# 
  2297  0214                     	;# 
  2298  0215                     	;# 
  2299  0215                     	;# 
  2300  0216                     	;# 
  2301  0216                     	;# 
  2302  0217                     	;# 
  2303  0217                     	;# 
  2304  0218                     	;# 
  2305  0218                     	;# 
  2306  0219                     	;# 
  2307  021A                     	;# 
  2308  021B                     	;# 
  2309  021B                     	;# 
  2310  021C                     	;# 
  2311  021C                     	;# 
  2312  021D                     	;# 
  2313  021D                     	;# 
  2314  021E                     	;# 
  2315  021F                     	;# 
  2316  028C                     	;# 
  2317  028C                     	;# 
  2318  028D                     	;# 
  2319  028D                     	;# 
  2320  028E                     	;# 
  2321  028F                     	;# 
  2322  0290                     	;# 
  2323  0290                     	;# 
  2324  0291                     	;# 
  2325  0292                     	;# 
  2326  0292                     	;# 
  2327  0293                     	;# 
  2328  0293                     	;# 
  2329  0294                     	;# 
  2330  0295                     	;# 
  2331  0296                     	;# 
  2332  0296                     	;# 
  2333  0297                     	;# 
  2334  0298                     	;# 
  2335  0298                     	;# 
  2336  0299                     	;# 
  2337  0299                     	;# 
  2338  029A                     	;# 
  2339  029B                     	;# 
  2340  029C                     	;# 
  2341  029C                     	;# 
  2342  029D                     	;# 
  2343  030C                     	;# 
  2344  030C                     	;# 
  2345  030D                     	;# 
  2346  030E                     	;# 
  2347  030F                     	;# 
  2348  0310                     	;# 
  2349  0310                     	;# 
  2350  0311                     	;# 
  2351  0312                     	;# 
  2352  0313                     	;# 
  2353  0314                     	;# 
  2354  0314                     	;# 
  2355  0315                     	;# 
  2356  0316                     	;# 
  2357  0317                     	;# 
  2358  0318                     	;# 
  2359  0318                     	;# 
  2360  0319                     	;# 
  2361  031A                     	;# 
  2362  031B                     	;# 
  2363  031C                     	;# 
  2364  031C                     	;# 
  2365  031D                     	;# 
  2366  031E                     	;# 
  2367  031F                     	;# 
  2368  038C                     	;# 
  2369  038D                     	;# 
  2370  038E                     	;# 
  2371  0390                     	;# 
  2372  0391                     	;# 
  2373  0392                     	;# 
  2374  040C                     	;# 
  2375  040D                     	;# 
  2376  040E                     	;# 
  2377  040F                     	;# 
  2378  0410                     	;# 
  2379  0411                     	;# 
  2380  0416                     	;# 
  2381  0416                     	;# 
  2382  0417                     	;# 
  2383  0418                     	;# 
  2384  0418                     	;# 
  2385  0419                     	;# 
  2386  041A                     	;# 
  2387  041A                     	;# 
  2388  041B                     	;# 
  2389  041C                     	;# 
  2390  041C                     	;# 
  2391  041D                     	;# 
  2392  041E                     	;# 
  2393  041F                     	;# 
  2394  048C                     	;# 
  2395  048C                     	;# 
  2396  048D                     	;# 
  2397  048E                     	;# 
  2398  048F                     	;# 
  2399  048F                     	;# 
  2400  0490                     	;# 
  2401  0491                     	;# 
  2402  0492                     	;# 
  2403  0492                     	;# 
  2404  0493                     	;# 
  2405  0494                     	;# 
  2406  0495                     	;# 
  2407  0495                     	;# 
  2408  0496                     	;# 
  2409  0497                     	;# 
  2410  0498                     	;# 
  2411  0499                     	;# 
  2412  049A                     	;# 
  2413  049B                     	;# 
  2414  049C                     	;# 
  2415  049D                     	;# 
  2416  050C                     	;# 
  2417  050C                     	;# 
  2418  050D                     	;# 
  2419  050E                     	;# 
  2420  050F                     	;# 
  2421  050F                     	;# 
  2422  0510                     	;# 
  2423  0511                     	;# 
  2424  0512                     	;# 
  2425  0512                     	;# 
  2426  0513                     	;# 
  2427  0514                     	;# 
  2428  0515                     	;# 
  2429  0515                     	;# 
  2430  0516                     	;# 
  2431  0517                     	;# 
  2432  0518                     	;# 
  2433  0519                     	;# 
  2434  051A                     	;# 
  2435  051B                     	;# 
  2436  051C                     	;# 
  2437  051D                     	;# 
  2438  058C                     	;# 
  2439  058C                     	;# 
  2440  058D                     	;# 
  2441  058E                     	;# 
  2442  058F                     	;# 
  2443  058F                     	;# 
  2444  0590                     	;# 
  2445  0591                     	;# 
  2446  0592                     	;# 
  2447  0593                     	;# 
  2448  060C                     	;# 
  2449  060D                     	;# 
  2450  060E                     	;# 
  2451  060F                     	;# 
  2452  0610                     	;# 
  2453  0611                     	;# 
  2454  0612                     	;# 
  2455  0613                     	;# 
  2456  0614                     	;# 
  2457  0616                     	;# 
  2458  0617                     	;# 
  2459  0618                     	;# 
  2460  0619                     	;# 
  2461  061A                     	;# 
  2462  061B                     	;# 
  2463  061C                     	;# 
  2464  061D                     	;# 
  2465  061E                     	;# 
  2466  068C                     	;# 
  2467  068D                     	;# 
  2468  068E                     	;# 
  2469  068F                     	;# 
  2470  0690                     	;# 
  2471  0691                     	;# 
  2472  0692                     	;# 
  2473  0693                     	;# 
  2474  0694                     	;# 
  2475  070C                     	;# 
  2476  070D                     	;# 
  2477  070E                     	;# 
  2478  070F                     	;# 
  2479  0710                     	;# 
  2480  0711                     	;# 
  2481  0712                     	;# 
  2482  0713                     	;# 
  2483  0714                     	;# 
  2484  0716                     	;# 
  2485  0717                     	;# 
  2486  0718                     	;# 
  2487  0719                     	;# 
  2488  071A                     	;# 
  2489  071B                     	;# 
  2490  071C                     	;# 
  2491  071D                     	;# 
  2492  071E                     	;# 
  2493  0796                     	;# 
  2494  0797                     	;# 
  2495  0798                     	;# 
  2496  0799                     	;# 
  2497  079A                     	;# 
  2498  079B                     	;# 
  2499  080C                     	;# 
  2500  080D                     	;# 
  2501  080E                     	;# 
  2502  080F                     	;# 
  2503  0810                     	;# 
  2504  0811                     	;# 
  2505  0812                     	;# 
  2506  0813                     	;# 
  2507  0814                     	;# 
  2508  081A                     	;# 
  2509  081B                     	;# 
  2510  081C                     	;# 
  2511  081D                     	;# 
  2512  081E                     	;# 
  2513  081F                     	;# 
  2514  088C                     	;# 
  2515  088D                     	;# 
  2516  088E                     	;# 
  2517  088F                     	;# 
  2518  0890                     	;# 
  2519  0891                     	;# 
  2520  0892                     	;# 
  2521  0893                     	;# 
  2522  0895                     	;# 
  2523  0896                     	;# 
  2524  0897                     	;# 
  2525  0898                     	;# 
  2526  0899                     	;# 
  2527  089A                     	;# 
  2528  089B                     	;# 
  2529  090C                     	;# 
  2530  090E                     	;# 
  2531  090F                     	;# 
  2532  091F                     	;# 
  2533  091F                     	;# 
  2534  098F                     	;# 
  2535  098F                     	;# 
  2536  0990                     	;# 
  2537  0991                     	;# 
  2538  0992                     	;# 
  2539  0993                     	;# 
  2540  0994                     	;# 
  2541  0995                     	;# 
  2542  0996                     	;# 
  2543  0997                     	;# 
  2544  0E0F                     	;# 
  2545  0E10                     	;# 
  2546  0E11                     	;# 
  2547  0E12                     	;# 
  2548  0E13                     	;# 
  2549  0E14                     	;# 
  2550  0E15                     	;# 
  2551  0E16                     	;# 
  2552  0E17                     	;# 
  2553  0E18                     	;# 
  2554  0E19                     	;# 
  2555  0E1A                     	;# 
  2556  0E1B                     	;# 
  2557  0E1C                     	;# 
  2558  0E1D                     	;# 
  2559  0E1E                     	;# 
  2560  0E1F                     	;# 
  2561  0E20                     	;# 
  2562  0E21                     	;# 
  2563  0E22                     	;# 
  2564  0E23                     	;# 
  2565  0E24                     	;# 
  2566  0E25                     	;# 
  2567  0E26                     	;# 
  2568  0E27                     	;# 
  2569  0E28                     	;# 
  2570  0E29                     	;# 
  2571  0E2A                     	;# 
  2572  0E2B                     	;# 
  2573  0E2C                     	;# 
  2574  0E2D                     	;# 
  2575  0E2E                     	;# 
  2576  0E2F                     	;# 
  2577  0E30                     	;# 
  2578  0E31                     	;# 
  2579  0E32                     	;# 
  2580  0E33                     	;# 
  2581  0E34                     	;# 
  2582  0E35                     	;# 
  2583  0E36                     	;# 
  2584  0E37                     	;# 
  2585  0E8F                     	;# 
  2586  0E90                     	;# 
  2587  0E91                     	;# 
  2588  0E92                     	;# 
  2589  0E93                     	;# 
  2590  0E94                     	;# 
  2591  0E95                     	;# 
  2592  0E96                     	;# 
  2593  0E97                     	;# 
  2594  0E9C                     	;# 
  2595  0E9D                     	;# 
  2596  0E9E                     	;# 
  2597  0EA1                     	;# 
  2598  0EA2                     	;# 
  2599  0EA3                     	;# 
  2600  0EA4                     	;# 
  2601  0EA5                     	;# 
  2602  0EA9                     	;# 
  2603  0EAA                     	;# 
  2604  0EAB                     	;# 
  2605  0EAC                     	;# 
  2606  0EB1                     	;# 
  2607  0EB2                     	;# 
  2608  0EB3                     	;# 
  2609  0EB8                     	;# 
  2610  0EB9                     	;# 
  2611  0EBA                     	;# 
  2612  0EBB                     	;# 
  2613  0EBC                     	;# 
  2614  0EBD                     	;# 
  2615  0EBE                     	;# 
  2616  0EC3                     	;# 
  2617  0EC5                     	;# 
  2618  0EC6                     	;# 
  2619  0EC7                     	;# 
  2620  0EC8                     	;# 
  2621  0EC9                     	;# 
  2622  0ECA                     	;# 
  2623  0ECB                     	;# 
  2624  0ECC                     	;# 
  2625  0F10                     	;# 
  2626  0F11                     	;# 
  2627  0F12                     	;# 
  2628  0F13                     	;# 
  2629  0F14                     	;# 
  2630  0F15                     	;# 
  2631  0F16                     	;# 
  2632  0F17                     	;# 
  2633  0F18                     	;# 
  2634  0F19                     	;# 
  2635  0F1A                     	;# 
  2636  0F1B                     	;# 
  2637  0F1C                     	;# 
  2638  0F1D                     	;# 
  2639  0F1E                     	;# 
  2640  0F1F                     	;# 
  2641  0F20                     	;# 
  2642  0F21                     	;# 
  2643  0F22                     	;# 
  2644  0F23                     	;# 
  2645  0F24                     	;# 
  2646  0F25                     	;# 
  2647  0F26                     	;# 
  2648  0F27                     	;# 
  2649  0F38                     	;# 
  2650  0F39                     	;# 
  2651  0F3A                     	;# 
  2652  0F3B                     	;# 
  2653  0F3C                     	;# 
  2654  0F3D                     	;# 
  2655  0F3E                     	;# 
  2656  0F3F                     	;# 
  2657  0F40                     	;# 
  2658  0F41                     	;# 
  2659  0F43                     	;# 
  2660  0F44                     	;# 
  2661  0F45                     	;# 
  2662  0F46                     	;# 
  2663  0F47                     	;# 
  2664  0F48                     	;# 
  2665  0F49                     	;# 
  2666  0F4A                     	;# 
  2667  0F4B                     	;# 
  2668  0F4C                     	;# 
  2669  0F4E                     	;# 
  2670  0F4F                     	;# 
  2671  0F50                     	;# 
  2672  0F51                     	;# 
  2673  0F52                     	;# 
  2674  0F53                     	;# 
  2675  0F54                     	;# 
  2676  0F55                     	;# 
  2677  0F56                     	;# 
  2678  0F57                     	;# 
  2679  0F65                     	;# 
  2680  0F68                     	;# 
  2681  0F69                     	;# 
  2682  0F6A                     	;# 
  2683  0F6B                     	;# 
  2684  0FE4                     	;# 
  2685  0FE5                     	;# 
  2686  0FE6                     	;# 
  2687  0FE7                     	;# 
  2688  0FE8                     	;# 
  2689  0FE9                     	;# 
  2690  0FEA                     	;# 
  2691  0FEB                     	;# 
  2692  0FED                     	;# 
  2693  0FEE                     	;# 
  2694  0FEF                     	;# 
  2695  0000                     	;# 
  2696  0001                     	;# 
  2697  0002                     	;# 
  2698  0003                     	;# 
  2699  0004                     	;# 
  2700  0005                     	;# 
  2701  0006                     	;# 
  2702  0007                     	;# 
  2703  0008                     	;# 
  2704  0009                     	;# 
  2705  000A                     	;# 
  2706  000B                     	;# 
  2707  000C                     	;# 
  2708  000D                     	;# 
  2709  000E                     	;# 
  2710  0010                     	;# 
  2711  0011                     	;# 
  2712  0012                     	;# 
  2713  0013                     	;# 
  2714  0016                     	;# 
  2715  0017                     	;# 
  2716  0018                     	;# 
  2717  001C                     	;# 
  2718  001C                     	;# 
  2719  001D                     	;# 
  2720  001D                     	;# 
  2721  001E                     	;# 
  2722  001F                     	;# 
  2723  008C                     	;# 
  2724  008C                     	;# 
  2725  008D                     	;# 
  2726  008E                     	;# 
  2727  008E                     	;# 
  2728  008F                     	;# 
  2729  0090                     	;# 
  2730  0090                     	;# 
  2731  0091                     	;# 
  2732  0093                     	;# 
  2733  0094                     	;# 
  2734  0095                     	;# 
  2735  0096                     	;# 
  2736  0097                     	;# 
  2737  0098                     	;# 
  2738  0099                     	;# 
  2739  009A                     	;# 
  2740  009B                     	;# 
  2741  009C                     	;# 
  2742  009D                     	;# 
  2743  009E                     	;# 
  2744  010C                     	;# 
  2745  010D                     	;# 
  2746  010E                     	;# 
  2747  010E                     	;# 
  2748  010F                     	;# 
  2749  0110                     	;# 
  2750  0110                     	;# 
  2751  0111                     	;# 
  2752  0112                     	;# 
  2753  0112                     	;# 
  2754  0113                     	;# 
  2755  0114                     	;# 
  2756  0114                     	;# 
  2757  0115                     	;# 
  2758  0116                     	;# 
  2759  0116                     	;# 
  2760  0117                     	;# 
  2761  0119                     	;# 
  2762  0119                     	;# 
  2763  0119                     	;# 
  2764  011A                     	;# 
  2765  011A                     	;# 
  2766  011A                     	;# 
  2767  011B                     	;# 
  2768  011B                     	;# 
  2769  011B                     	;# 
  2770  011B                     	;# 
  2771  011B                     	;# 
  2772  011C                     	;# 
  2773  011C                     	;# 
  2774  011C                     	;# 
  2775  011D                     	;# 
  2776  011D                     	;# 
  2777  011D                     	;# 
  2778  011E                     	;# 
  2779  011E                     	;# 
  2780  011E                     	;# 
  2781  011F                     	;# 
  2782  011F                     	;# 
  2783  011F                     	;# 
  2784  011F                     	;# 
  2785  011F                     	;# 
  2786  018C                     	;# 
  2787  018D                     	;# 
  2788  018E                     	;# 
  2789  018F                     	;# 
  2790  0190                     	;# 
  2791  0191                     	;# 
  2792  0192                     	;# 
  2793  0196                     	;# 
  2794  0197                     	;# 
  2795  0198                     	;# 
  2796  0199                     	;# 
  2797  019A                     	;# 
  2798  019B                     	;# 
  2799  019C                     	;# 
  2800  020C                     	;# 
  2801  020C                     	;# 
  2802  020D                     	;# 
  2803  020E                     	;# 
  2804  020F                     	;# 
  2805  020F                     	;# 
  2806  0210                     	;# 
  2807  0210                     	;# 
  2808  0211                     	;# 
  2809  0211                     	;# 
  2810  0212                     	;# 
  2811  0212                     	;# 
  2812  0213                     	;# 
  2813  0214                     	;# 
  2814  0215                     	;# 
  2815  0215                     	;# 
  2816  0216                     	;# 
  2817  0216                     	;# 
  2818  0217                     	;# 
  2819  0217                     	;# 
  2820  0218                     	;# 
  2821  0218                     	;# 
  2822  0219                     	;# 
  2823  021A                     	;# 
  2824  021B                     	;# 
  2825  021B                     	;# 
  2826  021C                     	;# 
  2827  021C                     	;# 
  2828  021D                     	;# 
  2829  021D                     	;# 
  2830  021E                     	;# 
  2831  021F                     	;# 
  2832  028C                     	;# 
  2833  028C                     	;# 
  2834  028D                     	;# 
  2835  028D                     	;# 
  2836  028E                     	;# 
  2837  028F                     	;# 
  2838  0290                     	;# 
  2839  0290                     	;# 
  2840  0291                     	;# 
  2841  0292                     	;# 
  2842  0292                     	;# 
  2843  0293                     	;# 
  2844  0293                     	;# 
  2845  0294                     	;# 
  2846  0295                     	;# 
  2847  0296                     	;# 
  2848  0296                     	;# 
  2849  0297                     	;# 
  2850  0298                     	;# 
  2851  0298                     	;# 
  2852  0299                     	;# 
  2853  0299                     	;# 
  2854  029A                     	;# 
  2855  029B                     	;# 
  2856  029C                     	;# 
  2857  029C                     	;# 
  2858  029D                     	;# 
  2859  030C                     	;# 
  2860  030C                     	;# 
  2861  030D                     	;# 
  2862  030E                     	;# 
  2863  030F                     	;# 
  2864  0310                     	;# 
  2865  0310                     	;# 
  2866  0311                     	;# 
  2867  0312                     	;# 
  2868  0313                     	;# 
  2869  0314                     	;# 
  2870  0314                     	;# 
  2871  0315                     	;# 
  2872  0316                     	;# 
  2873  0317                     	;# 
  2874  0318                     	;# 
  2875  0318                     	;# 
  2876  0319                     	;# 
  2877  031A                     	;# 
  2878  031B                     	;# 
  2879  031C                     	;# 
  2880  031C                     	;# 
  2881  031D                     	;# 
  2882  031E                     	;# 
  2883  031F                     	;# 
  2884  038C                     	;# 
  2885  038D                     	;# 
  2886  038E                     	;# 
  2887  0390                     	;# 
  2888  0391                     	;# 
  2889  0392                     	;# 
  2890  040C                     	;# 
  2891  040D                     	;# 
  2892  040E                     	;# 
  2893  040F                     	;# 
  2894  0410                     	;# 
  2895  0411                     	;# 
  2896  0416                     	;# 
  2897  0416                     	;# 
  2898  0417                     	;# 
  2899  0418                     	;# 
  2900  0418                     	;# 
  2901  0419                     	;# 
  2902  041A                     	;# 
  2903  041A                     	;# 
  2904  041B                     	;# 
  2905  041C                     	;# 
  2906  041C                     	;# 
  2907  041D                     	;# 
  2908  041E                     	;# 
  2909  041F                     	;# 
  2910  048C                     	;# 
  2911  048C                     	;# 
  2912  048D                     	;# 
  2913  048E                     	;# 
  2914  048F                     	;# 
  2915  048F                     	;# 
  2916  0490                     	;# 
  2917  0491                     	;# 
  2918  0492                     	;# 
  2919  0492                     	;# 
  2920  0493                     	;# 
  2921  0494                     	;# 
  2922  0495                     	;# 
  2923  0495                     	;# 
  2924  0496                     	;# 
  2925  0497                     	;# 
  2926  0498                     	;# 
  2927  0499                     	;# 
  2928  049A                     	;# 
  2929  049B                     	;# 
  2930  049C                     	;# 
  2931  049D                     	;# 
  2932  050C                     	;# 
  2933  050C                     	;# 
  2934  050D                     	;# 
  2935  050E                     	;# 
  2936  050F                     	;# 
  2937  050F                     	;# 
  2938  0510                     	;# 
  2939  0511                     	;# 
  2940  0512                     	;# 
  2941  0512                     	;# 
  2942  0513                     	;# 
  2943  0514                     	;# 
  2944  0515                     	;# 
  2945  0515                     	;# 
  2946  0516                     	;# 
  2947  0517                     	;# 
  2948  0518                     	;# 
  2949  0519                     	;# 
  2950  051A                     	;# 
  2951  051B                     	;# 
  2952  051C                     	;# 
  2953  051D                     	;# 
  2954  058C                     	;# 
  2955  058C                     	;# 
  2956  058D                     	;# 
  2957  058E                     	;# 
  2958  058F                     	;# 
  2959  058F                     	;# 
  2960  0590                     	;# 
  2961  0591                     	;# 
  2962  0592                     	;# 
  2963  0593                     	;# 
  2964  060C                     	;# 
  2965  060D                     	;# 
  2966  060E                     	;# 
  2967  060F                     	;# 
  2968  0610                     	;# 
  2969  0611                     	;# 
  2970  0612                     	;# 
  2971  0613                     	;# 
  2972  0614                     	;# 
  2973  0616                     	;# 
  2974  0617                     	;# 
  2975  0618                     	;# 
  2976  0619                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061D                     	;# 
  2981  061E                     	;# 
  2982  068C                     	;# 
  2983  068D                     	;# 
  2984  068E                     	;# 
  2985  068F                     	;# 
  2986  0690                     	;# 
  2987  0691                     	;# 
  2988  0692                     	;# 
  2989  0693                     	;# 
  2990  0694                     	;# 
  2991  070C                     	;# 
  2992  070D                     	;# 
  2993  070E                     	;# 
  2994  070F                     	;# 
  2995  0710                     	;# 
  2996  0711                     	;# 
  2997  0712                     	;# 
  2998  0713                     	;# 
  2999  0714                     	;# 
  3000  0716                     	;# 
  3001  0717                     	;# 
  3002  0718                     	;# 
  3003  0719                     	;# 
  3004  071A                     	;# 
  3005  071B                     	;# 
  3006  071C                     	;# 
  3007  071D                     	;# 
  3008  071E                     	;# 
  3009  0796                     	;# 
  3010  0797                     	;# 
  3011  0798                     	;# 
  3012  0799                     	;# 
  3013  079A                     	;# 
  3014  079B                     	;# 
  3015  080C                     	;# 
  3016  080D                     	;# 
  3017  080E                     	;# 
  3018  080F                     	;# 
  3019  0810                     	;# 
  3020  0811                     	;# 
  3021  0812                     	;# 
  3022  0813                     	;# 
  3023  0814                     	;# 
  3024  081A                     	;# 
  3025  081B                     	;# 
  3026  081C                     	;# 
  3027  081D                     	;# 
  3028  081E                     	;# 
  3029  081F                     	;# 
  3030  088C                     	;# 
  3031  088D                     	;# 
  3032  088E                     	;# 
  3033  088F                     	;# 
  3034  0890                     	;# 
  3035  0891                     	;# 
  3036  0892                     	;# 
  3037  0893                     	;# 
  3038  0895                     	;# 
  3039  0896                     	;# 
  3040  0897                     	;# 
  3041  0898                     	;# 
  3042  0899                     	;# 
  3043  089A                     	;# 
  3044  089B                     	;# 
  3045  090C                     	;# 
  3046  090E                     	;# 
  3047  090F                     	;# 
  3048  091F                     	;# 
  3049  091F                     	;# 
  3050  098F                     	;# 
  3051  098F                     	;# 
  3052  0990                     	;# 
  3053  0991                     	;# 
  3054  0992                     	;# 
  3055  0993                     	;# 
  3056  0994                     	;# 
  3057  0995                     	;# 
  3058  0996                     	;# 
  3059  0997                     	;# 
  3060  0E0F                     	;# 
  3061  0E10                     	;# 
  3062  0E11                     	;# 
  3063  0E12                     	;# 
  3064  0E13                     	;# 
  3065  0E14                     	;# 
  3066  0E15                     	;# 
  3067  0E16                     	;# 
  3068  0E17                     	;# 
  3069  0E18                     	;# 
  3070  0E19                     	;# 
  3071  0E1A                     	;# 
  3072  0E1B                     	;# 
  3073  0E1C                     	;# 
  3074  0E1D                     	;# 
  3075  0E1E                     	;# 
  3076  0E1F                     	;# 
  3077  0E20                     	;# 
  3078  0E21                     	;# 
  3079  0E22                     	;# 
  3080  0E23                     	;# 
  3081  0E24                     	;# 
  3082  0E25                     	;# 
  3083  0E26                     	;# 
  3084  0E27                     	;# 
  3085  0E28                     	;# 
  3086  0E29                     	;# 
  3087  0E2A                     	;# 
  3088  0E2B                     	;# 
  3089  0E2C                     	;# 
  3090  0E2D                     	;# 
  3091  0E2E                     	;# 
  3092  0E2F                     	;# 
  3093  0E30                     	;# 
  3094  0E31                     	;# 
  3095  0E32                     	;# 
  3096  0E33                     	;# 
  3097  0E34                     	;# 
  3098  0E35                     	;# 
  3099  0E36                     	;# 
  3100  0E37                     	;# 
  3101  0E8F                     	;# 
  3102  0E90                     	;# 
  3103  0E91                     	;# 
  3104  0E92                     	;# 
  3105  0E93                     	;# 
  3106  0E94                     	;# 
  3107  0E95                     	;# 
  3108  0E96                     	;# 
  3109  0E97                     	;# 
  3110  0E9C                     	;# 
  3111  0E9D                     	;# 
  3112  0E9E                     	;# 
  3113  0EA1                     	;# 
  3114  0EA2                     	;# 
  3115  0EA3                     	;# 
  3116  0EA4                     	;# 
  3117  0EA5                     	;# 
  3118  0EA9                     	;# 
  3119  0EAA                     	;# 
  3120  0EAB                     	;# 
  3121  0EAC                     	;# 
  3122  0EB1                     	;# 
  3123  0EB2                     	;# 
  3124  0EB3                     	;# 
  3125  0EB8                     	;# 
  3126  0EB9                     	;# 
  3127  0EBA                     	;# 
  3128  0EBB                     	;# 
  3129  0EBC                     	;# 
  3130  0EBD                     	;# 
  3131  0EBE                     	;# 
  3132  0EC3                     	;# 
  3133  0EC5                     	;# 
  3134  0EC6                     	;# 
  3135  0EC7                     	;# 
  3136  0EC8                     	;# 
  3137  0EC9                     	;# 
  3138  0ECA                     	;# 
  3139  0ECB                     	;# 
  3140  0ECC                     	;# 
  3141  0F10                     	;# 
  3142  0F11                     	;# 
  3143  0F12                     	;# 
  3144  0F13                     	;# 
  3145  0F14                     	;# 
  3146  0F15                     	;# 
  3147  0F16                     	;# 
  3148  0F17                     	;# 
  3149  0F18                     	;# 
  3150  0F19                     	;# 
  3151  0F1A                     	;# 
  3152  0F1B                     	;# 
  3153  0F1C                     	;# 
  3154  0F1D                     	;# 
  3155  0F1E                     	;# 
  3156  0F1F                     	;# 
  3157  0F20                     	;# 
  3158  0F21                     	;# 
  3159  0F22                     	;# 
  3160  0F23                     	;# 
  3161  0F24                     	;# 
  3162  0F25                     	;# 
  3163  0F26                     	;# 
  3164  0F27                     	;# 
  3165  0F38                     	;# 
  3166  0F39                     	;# 
  3167  0F3A                     	;# 
  3168  0F3B                     	;# 
  3169  0F3C                     	;# 
  3170  0F3D                     	;# 
  3171  0F3E                     	;# 
  3172  0F3F                     	;# 
  3173  0F40                     	;# 
  3174  0F41                     	;# 
  3175  0F43                     	;# 
  3176  0F44                     	;# 
  3177  0F45                     	;# 
  3178  0F46                     	;# 
  3179  0F47                     	;# 
  3180  0F48                     	;# 
  3181  0F49                     	;# 
  3182  0F4A                     	;# 
  3183  0F4B                     	;# 
  3184  0F4C                     	;# 
  3185  0F4E                     	;# 
  3186  0F4F                     	;# 
  3187  0F50                     	;# 
  3188  0F51                     	;# 
  3189  0F52                     	;# 
  3190  0F53                     	;# 
  3191  0F54                     	;# 
  3192  0F55                     	;# 
  3193  0F56                     	;# 
  3194  0F57                     	;# 
  3195  0F65                     	;# 
  3196  0F68                     	;# 
  3197  0F69                     	;# 
  3198  0F6A                     	;# 
  3199  0F6B                     	;# 
  3200  0FE4                     	;# 
  3201  0FE5                     	;# 
  3202  0FE6                     	;# 
  3203  0FE7                     	;# 
  3204  0FE8                     	;# 
  3205  0FE9                     	;# 
  3206  0FEA                     	;# 
  3207  0FEB                     	;# 
  3208  0FED                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0000                     	;# 
  3212  0001                     	;# 
  3213  0002                     	;# 
  3214  0003                     	;# 
  3215  0004                     	;# 
  3216  0005                     	;# 
  3217  0006                     	;# 
  3218  0007                     	;# 
  3219  0008                     	;# 
  3220  0009                     	;# 
  3221  000A                     	;# 
  3222  000B                     	;# 
  3223  000C                     	;# 
  3224  000D                     	;# 
  3225  000E                     	;# 
  3226  0010                     	;# 
  3227  0011                     	;# 
  3228  0012                     	;# 
  3229  0013                     	;# 
  3230  0016                     	;# 
  3231  0017                     	;# 
  3232  0018                     	;# 
  3233  001C                     	;# 
  3234  001C                     	;# 
  3235  001D                     	;# 
  3236  001D                     	;# 
  3237  001E                     	;# 
  3238  001F                     	;# 
  3239  008C                     	;# 
  3240  008C                     	;# 
  3241  008D                     	;# 
  3242  008E                     	;# 
  3243  008E                     	;# 
  3244  008F                     	;# 
  3245  0090                     	;# 
  3246  0090                     	;# 
  3247  0091                     	;# 
  3248  0093                     	;# 
  3249  0094                     	;# 
  3250  0095                     	;# 
  3251  0096                     	;# 
  3252  0097                     	;# 
  3253  0098                     	;# 
  3254  0099                     	;# 
  3255  009A                     	;# 
  3256  009B                     	;# 
  3257  009C                     	;# 
  3258  009D                     	;# 
  3259  009E                     	;# 
  3260  010C                     	;# 
  3261  010D                     	;# 
  3262  010E                     	;# 
  3263  010E                     	;# 
  3264  010F                     	;# 
  3265  0110                     	;# 
  3266  0110                     	;# 
  3267  0111                     	;# 
  3268  0112                     	;# 
  3269  0112                     	;# 
  3270  0113                     	;# 
  3271  0114                     	;# 
  3272  0114                     	;# 
  3273  0115                     	;# 
  3274  0116                     	;# 
  3275  0116                     	;# 
  3276  0117                     	;# 
  3277  0119                     	;# 
  3278  0119                     	;# 
  3279  0119                     	;# 
  3280  011A                     	;# 
  3281  011A                     	;# 
  3282  011A                     	;# 
  3283  011B                     	;# 
  3284  011B                     	;# 
  3285  011B                     	;# 
  3286  011B                     	;# 
  3287  011B                     	;# 
  3288  011C                     	;# 
  3289  011C                     	;# 
  3290  011C                     	;# 
  3291  011D                     	;# 
  3292  011D                     	;# 
  3293  011D                     	;# 
  3294  011E                     	;# 
  3295  011E                     	;# 
  3296  011E                     	;# 
  3297  011F                     	;# 
  3298  011F                     	;# 
  3299  011F                     	;# 
  3300  011F                     	;# 
  3301  011F                     	;# 
  3302  018C                     	;# 
  3303  018D                     	;# 
  3304  018E                     	;# 
  3305  018F                     	;# 
  3306  0190                     	;# 
  3307  0191                     	;# 
  3308  0192                     	;# 
  3309  0196                     	;# 
  3310  0197                     	;# 
  3311  0198                     	;# 
  3312  0199                     	;# 
  3313  019A                     	;# 
  3314  019B                     	;# 
  3315  019C                     	;# 
  3316  020C                     	;# 
  3317  020C                     	;# 
  3318  020D                     	;# 
  3319  020E                     	;# 
  3320  020F                     	;# 
  3321  020F                     	;# 
  3322  0210                     	;# 
  3323  0210                     	;# 
  3324  0211                     	;# 
  3325  0211                     	;# 
  3326  0212                     	;# 
  3327  0212                     	;# 
  3328  0213                     	;# 
  3329  0214                     	;# 
  3330  0215                     	;# 
  3331  0215                     	;# 
  3332  0216                     	;# 
  3333  0216                     	;# 
  3334  0217                     	;# 
  3335  0217                     	;# 
  3336  0218                     	;# 
  3337  0218                     	;# 
  3338  0219                     	;# 
  3339  021A                     	;# 
  3340  021B                     	;# 
  3341  021B                     	;# 
  3342  021C                     	;# 
  3343  021C                     	;# 
  3344  021D                     	;# 
  3345  021D                     	;# 
  3346  021E                     	;# 
  3347  021F                     	;# 
  3348  028C                     	;# 
  3349  028C                     	;# 
  3350  028D                     	;# 
  3351  028D                     	;# 
  3352  028E                     	;# 
  3353  028F                     	;# 
  3354  0290                     	;# 
  3355  0290                     	;# 
  3356  0291                     	;# 
  3357  0292                     	;# 
  3358  0292                     	;# 
  3359  0293                     	;# 
  3360  0293                     	;# 
  3361  0294                     	;# 
  3362  0295                     	;# 
  3363  0296                     	;# 
  3364  0296                     	;# 
  3365  0297                     	;# 
  3366  0298                     	;# 
  3367  0298                     	;# 
  3368  0299                     	;# 
  3369  0299                     	;# 
  3370  029A                     	;# 
  3371  029B                     	;# 
  3372  029C                     	;# 
  3373  029C                     	;# 
  3374  029D                     	;# 
  3375  030C                     	;# 
  3376  030C                     	;# 
  3377  030D                     	;# 
  3378  030E                     	;# 
  3379  030F                     	;# 
  3380  0310                     	;# 
  3381  0310                     	;# 
  3382  0311                     	;# 
  3383  0312                     	;# 
  3384  0313                     	;# 
  3385  0314                     	;# 
  3386  0314                     	;# 
  3387  0315                     	;# 
  3388  0316                     	;# 
  3389  0317                     	;# 
  3390  0318                     	;# 
  3391  0318                     	;# 
  3392  0319                     	;# 
  3393  031A                     	;# 
  3394  031B                     	;# 
  3395  031C                     	;# 
  3396  031C                     	;# 
  3397  031D                     	;# 
  3398  031E                     	;# 
  3399  031F                     	;# 
  3400  038C                     	;# 
  3401  038D                     	;# 
  3402  038E                     	;# 
  3403  0390                     	;# 
  3404  0391                     	;# 
  3405  0392                     	;# 
  3406  040C                     	;# 
  3407  040D                     	;# 
  3408  040E                     	;# 
  3409  040F                     	;# 
  3410  0410                     	;# 
  3411  0411                     	;# 
  3412  0416                     	;# 
  3413  0416                     	;# 
  3414  0417                     	;# 
  3415  0418                     	;# 
  3416  0418                     	;# 
  3417  0419                     	;# 
  3418  041A                     	;# 
  3419  041A                     	;# 
  3420  041B                     	;# 
  3421  041C                     	;# 
  3422  041C                     	;# 
  3423  041D                     	;# 
  3424  041E                     	;# 
  3425  041F                     	;# 
  3426  048C                     	;# 
  3427  048C                     	;# 
  3428  048D                     	;# 
  3429  048E                     	;# 
  3430  048F                     	;# 
  3431  048F                     	;# 
  3432  0490                     	;# 
  3433  0491                     	;# 
  3434  0492                     	;# 
  3435  0492                     	;# 
  3436  0493                     	;# 
  3437  0494                     	;# 
  3438  0495                     	;# 
  3439  0495                     	;# 
  3440  0496                     	;# 
  3441  0497                     	;# 
  3442  0498                     	;# 
  3443  0499                     	;# 
  3444  049A                     	;# 
  3445  049B                     	;# 
  3446  049C                     	;# 
  3447  049D                     	;# 
  3448  050C                     	;# 
  3449  050C                     	;# 
  3450  050D                     	;# 
  3451  050E                     	;# 
  3452  050F                     	;# 
  3453  050F                     	;# 
  3454  0510                     	;# 
  3455  0511                     	;# 
  3456  0512                     	;# 
  3457  0512                     	;# 
  3458  0513                     	;# 
  3459  0514                     	;# 
  3460  0515                     	;# 
  3461  0515                     	;# 
  3462  0516                     	;# 
  3463  0517                     	;# 
  3464  0518                     	;# 
  3465  0519                     	;# 
  3466  051A                     	;# 
  3467  051B                     	;# 
  3468  051C                     	;# 
  3469  051D                     	;# 
  3470  058C                     	;# 
  3471  058C                     	;# 
  3472  058D                     	;# 
  3473  058E                     	;# 
  3474  058F                     	;# 
  3475  058F                     	;# 
  3476  0590                     	;# 
  3477  0591                     	;# 
  3478  0592                     	;# 
  3479  0593                     	;# 
  3480  060C                     	;# 
  3481  060D                     	;# 
  3482  060E                     	;# 
  3483  060F                     	;# 
  3484  0610                     	;# 
  3485  0611                     	;# 
  3486  0612                     	;# 
  3487  0613                     	;# 
  3488  0614                     	;# 
  3489  0616                     	;# 
  3490  0617                     	;# 
  3491  0618                     	;# 
  3492  0619                     	;# 
  3493  061A                     	;# 
  3494  061B                     	;# 
  3495  061C                     	;# 
  3496  061D                     	;# 
  3497  061E                     	;# 
  3498  068C                     	;# 
  3499  068D                     	;# 
  3500  068E                     	;# 
  3501  068F                     	;# 
  3502  0690                     	;# 
  3503  0691                     	;# 
  3504  0692                     	;# 
  3505  0693                     	;# 
  3506  0694                     	;# 
  3507  070C                     	;# 
  3508  070D                     	;# 
  3509  070E                     	;# 
  3510  070F                     	;# 
  3511  0710                     	;# 
  3512  0711                     	;# 
  3513  0712                     	;# 
  3514  0713                     	;# 
  3515  0714                     	;# 
  3516  0716                     	;# 
  3517  0717                     	;# 
  3518  0718                     	;# 
  3519  0719                     	;# 
  3520  071A                     	;# 
  3521  071B                     	;# 
  3522  071C                     	;# 
  3523  071D                     	;# 
  3524  071E                     	;# 
  3525  0796                     	;# 
  3526  0797                     	;# 
  3527  0798                     	;# 
  3528  0799                     	;# 
  3529  079A                     	;# 
  3530  079B                     	;# 
  3531  080C                     	;# 
  3532  080D                     	;# 
  3533  080E                     	;# 
  3534  080F                     	;# 
  3535  0810                     	;# 
  3536  0811                     	;# 
  3537  0812                     	;# 
  3538  0813                     	;# 
  3539  0814                     	;# 
  3540  081A                     	;# 
  3541  081B                     	;# 
  3542  081C                     	;# 
  3543  081D                     	;# 
  3544  081E                     	;# 
  3545  081F                     	;# 
  3546  088C                     	;# 
  3547  088D                     	;# 
  3548  088E                     	;# 
  3549  088F                     	;# 
  3550  0890                     	;# 
  3551  0891                     	;# 
  3552  0892                     	;# 
  3553  0893                     	;# 
  3554  0895                     	;# 
  3555  0896                     	;# 
  3556  0897                     	;# 
  3557  0898                     	;# 
  3558  0899                     	;# 
  3559  089A                     	;# 
  3560  089B                     	;# 
  3561  090C                     	;# 
  3562  090E                     	;# 
  3563  090F                     	;# 
  3564  091F                     	;# 
  3565  091F                     	;# 
  3566  098F                     	;# 
  3567  098F                     	;# 
  3568  0990                     	;# 
  3569  0991                     	;# 
  3570  0992                     	;# 
  3571  0993                     	;# 
  3572  0994                     	;# 
  3573  0995                     	;# 
  3574  0996                     	;# 
  3575  0997                     	;# 
  3576  0E0F                     	;# 
  3577  0E10                     	;# 
  3578  0E11                     	;# 
  3579  0E12                     	;# 
  3580  0E13                     	;# 
  3581  0E14                     	;# 
  3582  0E15                     	;# 
  3583  0E16                     	;# 
  3584  0E17                     	;# 
  3585  0E18                     	;# 
  3586  0E19                     	;# 
  3587  0E1A                     	;# 
  3588  0E1B                     	;# 
  3589  0E1C                     	;# 
  3590  0E1D                     	;# 
  3591  0E1E                     	;# 
  3592  0E1F                     	;# 
  3593  0E20                     	;# 
  3594  0E21                     	;# 
  3595  0E22                     	;# 
  3596  0E23                     	;# 
  3597  0E24                     	;# 
  3598  0E25                     	;# 
  3599  0E26                     	;# 
  3600  0E27                     	;# 
  3601  0E28                     	;# 
  3602  0E29                     	;# 
  3603  0E2A                     	;# 
  3604  0E2B                     	;# 
  3605  0E2C                     	;# 
  3606  0E2D                     	;# 
  3607  0E2E                     	;# 
  3608  0E2F                     	;# 
  3609  0E30                     	;# 
  3610  0E31                     	;# 
  3611  0E32                     	;# 
  3612  0E33                     	;# 
  3613  0E34                     	;# 
  3614  0E35                     	;# 
  3615  0E36                     	;# 
  3616  0E37                     	;# 
  3617  0E8F                     	;# 
  3618  0E90                     	;# 
  3619  0E91                     	;# 
  3620  0E92                     	;# 
  3621  0E93                     	;# 
  3622  0E94                     	;# 
  3623  0E95                     	;# 
  3624  0E96                     	;# 
  3625  0E97                     	;# 
  3626  0E9C                     	;# 
  3627  0E9D                     	;# 
  3628  0E9E                     	;# 
  3629  0EA1                     	;# 
  3630  0EA2                     	;# 
  3631  0EA3                     	;# 
  3632  0EA4                     	;# 
  3633  0EA5                     	;# 
  3634  0EA9                     	;# 
  3635  0EAA                     	;# 
  3636  0EAB                     	;# 
  3637  0EAC                     	;# 
  3638  0EB1                     	;# 
  3639  0EB2                     	;# 
  3640  0EB3                     	;# 
  3641  0EB8                     	;# 
  3642  0EB9                     	;# 
  3643  0EBA                     	;# 
  3644  0EBB                     	;# 
  3645  0EBC                     	;# 
  3646  0EBD                     	;# 
  3647  0EBE                     	;# 
  3648  0EC3                     	;# 
  3649  0EC5                     	;# 
  3650  0EC6                     	;# 
  3651  0EC7                     	;# 
  3652  0EC8                     	;# 
  3653  0EC9                     	;# 
  3654  0ECA                     	;# 
  3655  0ECB                     	;# 
  3656  0ECC                     	;# 
  3657  0F10                     	;# 
  3658  0F11                     	;# 
  3659  0F12                     	;# 
  3660  0F13                     	;# 
  3661  0F14                     	;# 
  3662  0F15                     	;# 
  3663  0F16                     	;# 
  3664  0F17                     	;# 
  3665  0F18                     	;# 
  3666  0F19                     	;# 
  3667  0F1A                     	;# 
  3668  0F1B                     	;# 
  3669  0F1C                     	;# 
  3670  0F1D                     	;# 
  3671  0F1E                     	;# 
  3672  0F1F                     	;# 
  3673  0F20                     	;# 
  3674  0F21                     	;# 
  3675  0F22                     	;# 
  3676  0F23                     	;# 
  3677  0F24                     	;# 
  3678  0F25                     	;# 
  3679  0F26                     	;# 
  3680  0F27                     	;# 
  3681  0F38                     	;# 
  3682  0F39                     	;# 
  3683  0F3A                     	;# 
  3684  0F3B                     	;# 
  3685  0F3C                     	;# 
  3686  0F3D                     	;# 
  3687  0F3E                     	;# 
  3688  0F3F                     	;# 
  3689  0F40                     	;# 
  3690  0F41                     	;# 
  3691  0F43                     	;# 
  3692  0F44                     	;# 
  3693  0F45                     	;# 
  3694  0F46                     	;# 
  3695  0F47                     	;# 
  3696  0F48                     	;# 
  3697  0F49                     	;# 
  3698  0F4A                     	;# 
  3699  0F4B                     	;# 
  3700  0F4C                     	;# 
  3701  0F4E                     	;# 
  3702  0F4F                     	;# 
  3703  0F50                     	;# 
  3704  0F51                     	;# 
  3705  0F52                     	;# 
  3706  0F53                     	;# 
  3707  0F54                     	;# 
  3708  0F55                     	;# 
  3709  0F56                     	;# 
  3710  0F57                     	;# 
  3711  0F65                     	;# 
  3712  0F68                     	;# 
  3713  0F69                     	;# 
  3714  0F6A                     	;# 
  3715  0F6B                     	;# 
  3716  0FE4                     	;# 
  3717  0FE5                     	;# 
  3718  0FE6                     	;# 
  3719  0FE7                     	;# 
  3720  0FE8                     	;# 
  3721  0FE9                     	;# 
  3722  0FEA                     	;# 
  3723  0FEB                     	;# 
  3724  0FED                     	;# 
  3725  0FEE                     	;# 
  3726  0FEF                     	;# 
  3727  0000                     	;# 
  3728  0001                     	;# 
  3729  0002                     	;# 
  3730  0003                     	;# 
  3731  0004                     	;# 
  3732  0005                     	;# 
  3733  0006                     	;# 
  3734  0007                     	;# 
  3735  0008                     	;# 
  3736  0009                     	;# 
  3737  000A                     	;# 
  3738  000B                     	;# 
  3739  000C                     	;# 
  3740  000D                     	;# 
  3741  000E                     	;# 
  3742  0010                     	;# 
  3743  0011                     	;# 
  3744  0012                     	;# 
  3745  0013                     	;# 
  3746  0016                     	;# 
  3747  0017                     	;# 
  3748  0018                     	;# 
  3749  001C                     	;# 
  3750  001C                     	;# 
  3751  001D                     	;# 
  3752  001D                     	;# 
  3753  001E                     	;# 
  3754  001F                     	;# 
  3755  008C                     	;# 
  3756  008C                     	;# 
  3757  008D                     	;# 
  3758  008E                     	;# 
  3759  008E                     	;# 
  3760  008F                     	;# 
  3761  0090                     	;# 
  3762  0090                     	;# 
  3763  0091                     	;# 
  3764  0093                     	;# 
  3765  0094                     	;# 
  3766  0095                     	;# 
  3767  0096                     	;# 
  3768  0097                     	;# 
  3769  0098                     	;# 
  3770  0099                     	;# 
  3771  009A                     	;# 
  3772  009B                     	;# 
  3773  009C                     	;# 
  3774  009D                     	;# 
  3775  009E                     	;# 
  3776  010C                     	;# 
  3777  010D                     	;# 
  3778  010E                     	;# 
  3779  010E                     	;# 
  3780  010F                     	;# 
  3781  0110                     	;# 
  3782  0110                     	;# 
  3783  0111                     	;# 
  3784  0112                     	;# 
  3785  0112                     	;# 
  3786  0113                     	;# 
  3787  0114                     	;# 
  3788  0114                     	;# 
  3789  0115                     	;# 
  3790  0116                     	;# 
  3791  0116                     	;# 
  3792  0117                     	;# 
  3793  0119                     	;# 
  3794  0119                     	;# 
  3795  0119                     	;# 
  3796  011A                     	;# 
  3797  011A                     	;# 
  3798  011A                     	;# 
  3799  011B                     	;# 
  3800  011B                     	;# 
  3801  011B                     	;# 
  3802  011B                     	;# 
  3803  011B                     	;# 
  3804  011C                     	;# 
  3805  011C                     	;# 
  3806  011C                     	;# 
  3807  011D                     	;# 
  3808  011D                     	;# 
  3809  011D                     	;# 
  3810  011E                     	;# 
  3811  011E                     	;# 
  3812  011E                     	;# 
  3813  011F                     	;# 
  3814  011F                     	;# 
  3815  011F                     	;# 
  3816  011F                     	;# 
  3817  011F                     	;# 
  3818  018C                     	;# 
  3819  018D                     	;# 
  3820  018E                     	;# 
  3821  018F                     	;# 
  3822  0190                     	;# 
  3823  0191                     	;# 
  3824  0192                     	;# 
  3825  0196                     	;# 
  3826  0197                     	;# 
  3827  0198                     	;# 
  3828  0199                     	;# 
  3829  019A                     	;# 
  3830  019B                     	;# 
  3831  019C                     	;# 
  3832  020C                     	;# 
  3833  020C                     	;# 
  3834  020D                     	;# 
  3835  020E                     	;# 
  3836  020F                     	;# 
  3837  020F                     	;# 
  3838  0210                     	;# 
  3839  0210                     	;# 
  3840  0211                     	;# 
  3841  0211                     	;# 
  3842  0212                     	;# 
  3843  0212                     	;# 
  3844  0213                     	;# 
  3845  0214                     	;# 
  3846  0215                     	;# 
  3847  0215                     	;# 
  3848  0216                     	;# 
  3849  0216                     	;# 
  3850  0217                     	;# 
  3851  0217                     	;# 
  3852  0218                     	;# 
  3853  0218                     	;# 
  3854  0219                     	;# 
  3855  021A                     	;# 
  3856  021B                     	;# 
  3857  021B                     	;# 
  3858  021C                     	;# 
  3859  021C                     	;# 
  3860  021D                     	;# 
  3861  021D                     	;# 
  3862  021E                     	;# 
  3863  021F                     	;# 
  3864  028C                     	;# 
  3865  028C                     	;# 
  3866  028D                     	;# 
  3867  028D                     	;# 
  3868  028E                     	;# 
  3869  028F                     	;# 
  3870  0290                     	;# 
  3871  0290                     	;# 
  3872  0291                     	;# 
  3873  0292                     	;# 
  3874  0292                     	;# 
  3875  0293                     	;# 
  3876  0293                     	;# 
  3877  0294                     	;# 
  3878  0295                     	;# 
  3879  0296                     	;# 
  3880  0296                     	;# 
  3881  0297                     	;# 
  3882  0298                     	;# 
  3883  0298                     	;# 
  3884  0299                     	;# 
  3885  0299                     	;# 
  3886  029A                     	;# 
  3887  029B                     	;# 
  3888  029C                     	;# 
  3889  029C                     	;# 
  3890  029D                     	;# 
  3891  030C                     	;# 
  3892  030C                     	;# 
  3893  030D                     	;# 
  3894  030E                     	;# 
  3895  030F                     	;# 
  3896  0310                     	;# 
  3897  0310                     	;# 
  3898  0311                     	;# 
  3899  0312                     	;# 
  3900  0313                     	;# 
  3901  0314                     	;# 
  3902  0314                     	;# 
  3903  0315                     	;# 
  3904  0316                     	;# 
  3905  0317                     	;# 
  3906  0318                     	;# 
  3907  0318                     	;# 
  3908  0319                     	;# 
  3909  031A                     	;# 
  3910  031B                     	;# 
  3911  031C                     	;# 
  3912  031C                     	;# 
  3913  031D                     	;# 
  3914  031E                     	;# 
  3915  031F                     	;# 
  3916  038C                     	;# 
  3917  038D                     	;# 
  3918  038E                     	;# 
  3919  0390                     	;# 
  3920  0391                     	;# 
  3921  0392                     	;# 
  3922  040C                     	;# 
  3923  040D                     	;# 
  3924  040E                     	;# 
  3925  040F                     	;# 
  3926  0410                     	;# 
  3927  0411                     	;# 
  3928  0416                     	;# 
  3929  0416                     	;# 
  3930  0417                     	;# 
  3931  0418                     	;# 
  3932  0418                     	;# 
  3933  0419                     	;# 
  3934  041A                     	;# 
  3935  041A                     	;# 
  3936  041B                     	;# 
  3937  041C                     	;# 
  3938  041C                     	;# 
  3939  041D                     	;# 
  3940  041E                     	;# 
  3941  041F                     	;# 
  3942  048C                     	;# 
  3943  048C                     	;# 
  3944  048D                     	;# 
  3945  048E                     	;# 
  3946  048F                     	;# 
  3947  048F                     	;# 
  3948  0490                     	;# 
  3949  0491                     	;# 
  3950  0492                     	;# 
  3951  0492                     	;# 
  3952  0493                     	;# 
  3953  0494                     	;# 
  3954  0495                     	;# 
  3955  0495                     	;# 
  3956  0496                     	;# 
  3957  0497                     	;# 
  3958  0498                     	;# 
  3959  0499                     	;# 
  3960  049A                     	;# 
  3961  049B                     	;# 
  3962  049C                     	;# 
  3963  049D                     	;# 
  3964  050C                     	;# 
  3965  050C                     	;# 
  3966  050D                     	;# 
  3967  050E                     	;# 
  3968  050F                     	;# 
  3969  050F                     	;# 
  3970  0510                     	;# 
  3971  0511                     	;# 
  3972  0512                     	;# 
  3973  0512                     	;# 
  3974  0513                     	;# 
  3975  0514                     	;# 
  3976  0515                     	;# 
  3977  0515                     	;# 
  3978  0516                     	;# 
  3979  0517                     	;# 
  3980  0518                     	;# 
  3981  0519                     	;# 
  3982  051A                     	;# 
  3983  051B                     	;# 
  3984  051C                     	;# 
  3985  051D                     	;# 
  3986  058C                     	;# 
  3987  058C                     	;# 
  3988  058D                     	;# 
  3989  058E                     	;# 
  3990  058F                     	;# 
  3991  058F                     	;# 
  3992  0590                     	;# 
  3993  0591                     	;# 
  3994  0592                     	;# 
  3995  0593                     	;# 
  3996  060C                     	;# 
  3997  060D                     	;# 
  3998  060E                     	;# 
  3999  060F                     	;# 
  4000  0610                     	;# 
  4001  0611                     	;# 
  4002  0612                     	;# 
  4003  0613                     	;# 
  4004  0614                     	;# 
  4005  0616                     	;# 
  4006  0617                     	;# 
  4007  0618                     	;# 
  4008  0619                     	;# 
  4009  061A                     	;# 
  4010  061B                     	;# 
  4011  061C                     	;# 
  4012  061D                     	;# 
  4013  061E                     	;# 
  4014  068C                     	;# 
  4015  068D                     	;# 
  4016  068E                     	;# 
  4017  068F                     	;# 
  4018  0690                     	;# 
  4019  0691                     	;# 
  4020  0692                     	;# 
  4021  0693                     	;# 
  4022  0694                     	;# 
  4023  070C                     	;# 
  4024  070D                     	;# 
  4025  070E                     	;# 
  4026  070F                     	;# 
  4027  0710                     	;# 
  4028  0711                     	;# 
  4029  0712                     	;# 
  4030  0713                     	;# 
  4031  0714                     	;# 
  4032  0716                     	;# 
  4033  0717                     	;# 
  4034  0718                     	;# 
  4035  0719                     	;# 
  4036  071A                     	;# 
  4037  071B                     	;# 
  4038  071C                     	;# 
  4039  071D                     	;# 
  4040  071E                     	;# 
  4041  0796                     	;# 
  4042  0797                     	;# 
  4043  0798                     	;# 
  4044  0799                     	;# 
  4045  079A                     	;# 
  4046  079B                     	;# 
  4047  080C                     	;# 
  4048  080D                     	;# 
  4049  080E                     	;# 
  4050  080F                     	;# 
  4051  0810                     	;# 
  4052  0811                     	;# 
  4053  0812                     	;# 
  4054  0813                     	;# 
  4055  0814                     	;# 
  4056  081A                     	;# 
  4057  081B                     	;# 
  4058  081C                     	;# 
  4059  081D                     	;# 
  4060  081E                     	;# 
  4061  081F                     	;# 
  4062  088C                     	;# 
  4063  088D                     	;# 
  4064  088E                     	;# 
  4065  088F                     	;# 
  4066  0890                     	;# 
  4067  0891                     	;# 
  4068  0892                     	;# 
  4069  0893                     	;# 
  4070  0895                     	;# 
  4071  0896                     	;# 
  4072  0897                     	;# 
  4073  0898                     	;# 
  4074  0899                     	;# 
  4075  089A                     	;# 
  4076  089B                     	;# 
  4077  090C                     	;# 
  4078  090E                     	;# 
  4079  090F                     	;# 
  4080  091F                     	;# 
  4081  091F                     	;# 
  4082  098F                     	;# 
  4083  098F                     	;# 
  4084  0990                     	;# 
  4085  0991                     	;# 
  4086  0992                     	;# 
  4087  0993                     	;# 
  4088  0994                     	;# 
  4089  0995                     	;# 
  4090  0996                     	;# 
  4091  0997                     	;# 
  4092  0E0F                     	;# 
  4093  0E10                     	;# 
  4094  0E11                     	;# 
  4095  0E12                     	;# 
  4096  0E13                     	;# 
  4097  0E14                     	;# 
  4098  0E15                     	;# 
  4099  0E16                     	;# 
  4100  0E17                     	;# 
  4101  0E18                     	;# 
  4102  0E19                     	;# 
  4103  0E1A                     	;# 
  4104  0E1B                     	;# 
  4105  0E1C                     	;# 
  4106  0E1D                     	;# 
  4107  0E1E                     	;# 
  4108  0E1F                     	;# 
  4109  0E20                     	;# 
  4110  0E21                     	;# 
  4111  0E22                     	;# 
  4112  0E23                     	;# 
  4113  0E24                     	;# 
  4114  0E25                     	;# 
  4115  0E26                     	;# 
  4116  0E27                     	;# 
  4117  0E28                     	;# 
  4118  0E29                     	;# 
  4119  0E2A                     	;# 
  4120  0E2B                     	;# 
  4121  0E2C                     	;# 
  4122  0E2D                     	;# 
  4123  0E2E                     	;# 
  4124  0E2F                     	;# 
  4125  0E30                     	;# 
  4126  0E31                     	;# 
  4127  0E32                     	;# 
  4128  0E33                     	;# 
  4129  0E34                     	;# 
  4130  0E35                     	;# 
  4131  0E36                     	;# 
  4132  0E37                     	;# 
  4133  0E8F                     	;# 
  4134  0E90                     	;# 
  4135  0E91                     	;# 
  4136  0E92                     	;# 
  4137  0E93                     	;# 
  4138  0E94                     	;# 
  4139  0E95                     	;# 
  4140  0E96                     	;# 
  4141  0E97                     	;# 
  4142  0E9C                     	;# 
  4143  0E9D                     	;# 
  4144  0E9E                     	;# 
  4145  0EA1                     	;# 
  4146  0EA2                     	;# 
  4147  0EA3                     	;# 
  4148  0EA4                     	;# 
  4149  0EA5                     	;# 
  4150  0EA9                     	;# 
  4151  0EAA                     	;# 
  4152  0EAB                     	;# 
  4153  0EAC                     	;# 
  4154  0EB1                     	;# 
  4155  0EB2                     	;# 
  4156  0EB3                     	;# 
  4157  0EB8                     	;# 
  4158  0EB9                     	;# 
  4159  0EBA                     	;# 
  4160  0EBB                     	;# 
  4161  0EBC                     	;# 
  4162  0EBD                     	;# 
  4163  0EBE                     	;# 
  4164  0EC3                     	;# 
  4165  0EC5                     	;# 
  4166  0EC6                     	;# 
  4167  0EC7                     	;# 
  4168  0EC8                     	;# 
  4169  0EC9                     	;# 
  4170  0ECA                     	;# 
  4171  0ECB                     	;# 
  4172  0ECC                     	;# 
  4173  0F10                     	;# 
  4174  0F11                     	;# 
  4175  0F12                     	;# 
  4176  0F13                     	;# 
  4177  0F14                     	;# 
  4178  0F15                     	;# 
  4179  0F16                     	;# 
  4180  0F17                     	;# 
  4181  0F18                     	;# 
  4182  0F19                     	;# 
  4183  0F1A                     	;# 
  4184  0F1B                     	;# 
  4185  0F1C                     	;# 
  4186  0F1D                     	;# 
  4187  0F1E                     	;# 
  4188  0F1F                     	;# 
  4189  0F20                     	;# 
  4190  0F21                     	;# 
  4191  0F22                     	;# 
  4192  0F23                     	;# 
  4193  0F24                     	;# 
  4194  0F25                     	;# 
  4195  0F26                     	;# 
  4196  0F27                     	;# 
  4197  0F38                     	;# 
  4198  0F39                     	;# 
  4199  0F3A                     	;# 
  4200  0F3B                     	;# 
  4201  0F3C                     	;# 
  4202  0F3D                     	;# 
  4203  0F3E                     	;# 
  4204  0F3F                     	;# 
  4205  0F40                     	;# 
  4206  0F41                     	;# 
  4207  0F43                     	;# 
  4208  0F44                     	;# 
  4209  0F45                     	;# 
  4210  0F46                     	;# 
  4211  0F47                     	;# 
  4212  0F48                     	;# 
  4213  0F49                     	;# 
  4214  0F4A                     	;# 
  4215  0F4B                     	;# 
  4216  0F4C                     	;# 
  4217  0F4E                     	;# 
  4218  0F4F                     	;# 
  4219  0F50                     	;# 
  4220  0F51                     	;# 
  4221  0F52                     	;# 
  4222  0F53                     	;# 
  4223  0F54                     	;# 
  4224  0F55                     	;# 
  4225  0F56                     	;# 
  4226  0F57                     	;# 
  4227  0F65                     	;# 
  4228  0F68                     	;# 
  4229  0F69                     	;# 
  4230  0F6A                     	;# 
  4231  0F6B                     	;# 
  4232  0FE4                     	;# 
  4233  0FE5                     	;# 
  4234  0FE6                     	;# 
  4235  0FE7                     	;# 
  4236  0FE8                     	;# 
  4237  0FE9                     	;# 
  4238  0FEA                     	;# 
  4239  0FEB                     	;# 
  4240  0FED                     	;# 
  4241  0FEE                     	;# 
  4242  0FEF                     	;# 
  4243  0000                     	;# 
  4244  0001                     	;# 
  4245  0002                     	;# 
  4246  0003                     	;# 
  4247  0004                     	;# 
  4248  0005                     	;# 
  4249  0006                     	;# 
  4250  0007                     	;# 
  4251  0008                     	;# 
  4252  0009                     	;# 
  4253  000A                     	;# 
  4254  000B                     	;# 
  4255  000C                     	;# 
  4256  000D                     	;# 
  4257  000E                     	;# 
  4258  0010                     	;# 
  4259  0011                     	;# 
  4260  0012                     	;# 
  4261  0013                     	;# 
  4262  0016                     	;# 
  4263  0017                     	;# 
  4264  0018                     	;# 
  4265  001C                     	;# 
  4266  001C                     	;# 
  4267  001D                     	;# 
  4268  001D                     	;# 
  4269  001E                     	;# 
  4270  001F                     	;# 
  4271  008C                     	;# 
  4272  008C                     	;# 
  4273  008D                     	;# 
  4274  008E                     	;# 
  4275  008E                     	;# 
  4276  008F                     	;# 
  4277  0090                     	;# 
  4278  0090                     	;# 
  4279  0091                     	;# 
  4280  0093                     	;# 
  4281  0094                     	;# 
  4282  0095                     	;# 
  4283  0096                     	;# 
  4284  0097                     	;# 
  4285  0098                     	;# 
  4286  0099                     	;# 
  4287  009A                     	;# 
  4288  009B                     	;# 
  4289  009C                     	;# 
  4290  009D                     	;# 
  4291  009E                     	;# 
  4292  010C                     	;# 
  4293  010D                     	;# 
  4294  010E                     	;# 
  4295  010E                     	;# 
  4296  010F                     	;# 
  4297  0110                     	;# 
  4298  0110                     	;# 
  4299  0111                     	;# 
  4300  0112                     	;# 
  4301  0112                     	;# 
  4302  0113                     	;# 
  4303  0114                     	;# 
  4304  0114                     	;# 
  4305  0115                     	;# 
  4306  0116                     	;# 
  4307  0116                     	;# 
  4308  0117                     	;# 
  4309  0119                     	;# 
  4310  0119                     	;# 
  4311  0119                     	;# 
  4312  011A                     	;# 
  4313  011A                     	;# 
  4314  011A                     	;# 
  4315  011B                     	;# 
  4316  011B                     	;# 
  4317  011B                     	;# 
  4318  011B                     	;# 
  4319  011B                     	;# 
  4320  011C                     	;# 
  4321  011C                     	;# 
  4322  011C                     	;# 
  4323  011D                     	;# 
  4324  011D                     	;# 
  4325  011D                     	;# 
  4326  011E                     	;# 
  4327  011E                     	;# 
  4328  011E                     	;# 
  4329  011F                     	;# 
  4330  011F                     	;# 
  4331  011F                     	;# 
  4332  011F                     	;# 
  4333  011F                     	;# 
  4334  018C                     	;# 
  4335  018D                     	;# 
  4336  018E                     	;# 
  4337  018F                     	;# 
  4338  0190                     	;# 
  4339  0191                     	;# 
  4340  0192                     	;# 
  4341  0196                     	;# 
  4342  0197                     	;# 
  4343  0198                     	;# 
  4344  0199                     	;# 
  4345  019A                     	;# 
  4346  019B                     	;# 
  4347  019C                     	;# 
  4348  020C                     	;# 
  4349  020C                     	;# 
  4350  020D                     	;# 
  4351  020E                     	;# 
  4352  020F                     	;# 
  4353  020F                     	;# 
  4354  0210                     	;# 
  4355  0210                     	;# 
  4356  0211                     	;# 
  4357  0211                     	;# 
  4358  0212                     	;# 
  4359  0212                     	;# 
  4360  0213                     	;# 
  4361  0214                     	;# 
  4362  0215                     	;# 
  4363  0215                     	;# 
  4364  0216                     	;# 
  4365  0216                     	;# 
  4366  0217                     	;# 
  4367  0217                     	;# 
  4368  0218                     	;# 
  4369  0218                     	;# 
  4370  0219                     	;# 
  4371  021A                     	;# 
  4372  021B                     	;# 
  4373  021B                     	;# 
  4374  021C                     	;# 
  4375  021C                     	;# 
  4376  021D                     	;# 
  4377  021D                     	;# 
  4378  021E                     	;# 
  4379  021F                     	;# 
  4380  028C                     	;# 
  4381  028C                     	;# 
  4382  028D                     	;# 
  4383  028D                     	;# 
  4384  028E                     	;# 
  4385  028F                     	;# 
  4386  0290                     	;# 
  4387  0290                     	;# 
  4388  0291                     	;# 
  4389  0292                     	;# 
  4390  0292                     	;# 
  4391  0293                     	;# 
  4392  0293                     	;# 
  4393  0294                     	;# 
  4394  0295                     	;# 
  4395  0296                     	;# 
  4396  0296                     	;# 
  4397  0297                     	;# 
  4398  0298                     	;# 
  4399  0298                     	;# 
  4400  0299                     	;# 
  4401  0299                     	;# 
  4402  029A                     	;# 
  4403  029B                     	;# 
  4404  029C                     	;# 
  4405  029C                     	;# 
  4406  029D                     	;# 
  4407  030C                     	;# 
  4408  030C                     	;# 
  4409  030D                     	;# 
  4410  030E                     	;# 
  4411  030F                     	;# 
  4412  0310                     	;# 
  4413  0310                     	;# 
  4414  0311                     	;# 
  4415  0312                     	;# 
  4416  0313                     	;# 
  4417  0314                     	;# 
  4418  0314                     	;# 
  4419  0315                     	;# 
  4420  0316                     	;# 
  4421  0317                     	;# 
  4422  0318                     	;# 
  4423  0318                     	;# 
  4424  0319                     	;# 
  4425  031A                     	;# 
  4426  031B                     	;# 
  4427  031C                     	;# 
  4428  031C                     	;# 
  4429  031D                     	;# 
  4430  031E                     	;# 
  4431  031F                     	;# 
  4432  038C                     	;# 
  4433  038D                     	;# 
  4434  038E                     	;# 
  4435  0390                     	;# 
  4436  0391                     	;# 
  4437  0392                     	;# 
  4438  040C                     	;# 
  4439  040D                     	;# 
  4440  040E                     	;# 
  4441  040F                     	;# 
  4442  0410                     	;# 
  4443  0411                     	;# 
  4444  0416                     	;# 
  4445  0416                     	;# 
  4446  0417                     	;# 
  4447  0418                     	;# 
  4448  0418                     	;# 
  4449  0419                     	;# 
  4450  041A                     	;# 
  4451  041A                     	;# 
  4452  041B                     	;# 
  4453  041C                     	;# 
  4454  041C                     	;# 
  4455  041D                     	;# 
  4456  041E                     	;# 
  4457  041F                     	;# 
  4458  048C                     	;# 
  4459  048C                     	;# 
  4460  048D                     	;# 
  4461  048E                     	;# 
  4462  048F                     	;# 
  4463  048F                     	;# 
  4464  0490                     	;# 
  4465  0491                     	;# 
  4466  0492                     	;# 
  4467  0492                     	;# 
  4468  0493                     	;# 
  4469  0494                     	;# 
  4470  0495                     	;# 
  4471  0495                     	;# 
  4472  0496                     	;# 
  4473  0497                     	;# 
  4474  0498                     	;# 
  4475  0499                     	;# 
  4476  049A                     	;# 
  4477  049B                     	;# 
  4478  049C                     	;# 
  4479  049D                     	;# 
  4480  050C                     	;# 
  4481  050C                     	;# 
  4482  050D                     	;# 
  4483  050E                     	;# 
  4484  050F                     	;# 
  4485  050F                     	;# 
  4486  0510                     	;# 
  4487  0511                     	;# 
  4488  0512                     	;# 
  4489  0512                     	;# 
  4490  0513                     	;# 
  4491  0514                     	;# 
  4492  0515                     	;# 
  4493  0515                     	;# 
  4494  0516                     	;# 
  4495  0517                     	;# 
  4496  0518                     	;# 
  4497  0519                     	;# 
  4498  051A                     	;# 
  4499  051B                     	;# 
  4500  051C                     	;# 
  4501  051D                     	;# 
  4502  058C                     	;# 
  4503  058C                     	;# 
  4504  058D                     	;# 
  4505  058E                     	;# 
  4506  058F                     	;# 
  4507  058F                     	;# 
  4508  0590                     	;# 
  4509  0591                     	;# 
  4510  0592                     	;# 
  4511  0593                     	;# 
  4512  060C                     	;# 
  4513  060D                     	;# 
  4514  060E                     	;# 
  4515  060F                     	;# 
  4516  0610                     	;# 
  4517  0611                     	;# 
  4518  0612                     	;# 
  4519  0613                     	;# 
  4520  0614                     	;# 
  4521  0616                     	;# 
  4522  0617                     	;# 
  4523  0618                     	;# 
  4524  0619                     	;# 
  4525  061A                     	;# 
  4526  061B                     	;# 
  4527  061C                     	;# 
  4528  061D                     	;# 
  4529  061E                     	;# 
  4530  068C                     	;# 
  4531  068D                     	;# 
  4532  068E                     	;# 
  4533  068F                     	;# 
  4534  0690                     	;# 
  4535  0691                     	;# 
  4536  0692                     	;# 
  4537  0693                     	;# 
  4538  0694                     	;# 
  4539  070C                     	;# 
  4540  070D                     	;# 
  4541  070E                     	;# 
  4542  070F                     	;# 
  4543  0710                     	;# 
  4544  0711                     	;# 
  4545  0712                     	;# 
  4546  0713                     	;# 
  4547  0714                     	;# 
  4548  0716                     	;# 
  4549  0717                     	;# 
  4550  0718                     	;# 
  4551  0719                     	;# 
  4552  071A                     	;# 
  4553  071B                     	;# 
  4554  071C                     	;# 
  4555  071D                     	;# 
  4556  071E                     	;# 
  4557  0796                     	;# 
  4558  0797                     	;# 
  4559  0798                     	;# 
  4560  0799                     	;# 
  4561  079A                     	;# 
  4562  079B                     	;# 
  4563  080C                     	;# 
  4564  080D                     	;# 
  4565  080E                     	;# 
  4566  080F                     	;# 
  4567  0810                     	;# 
  4568  0811                     	;# 
  4569  0812                     	;# 
  4570  0813                     	;# 
  4571  0814                     	;# 
  4572  081A                     	;# 
  4573  081B                     	;# 
  4574  081C                     	;# 
  4575  081D                     	;# 
  4576  081E                     	;# 
  4577  081F                     	;# 
  4578  088C                     	;# 
  4579  088D                     	;# 
  4580  088E                     	;# 
  4581  088F                     	;# 
  4582  0890                     	;# 
  4583  0891                     	;# 
  4584  0892                     	;# 
  4585  0893                     	;# 
  4586  0895                     	;# 
  4587  0896                     	;# 
  4588  0897                     	;# 
  4589  0898                     	;# 
  4590  0899                     	;# 
  4591  089A                     	;# 
  4592  089B                     	;# 
  4593  090C                     	;# 
  4594  090E                     	;# 
  4595  090F                     	;# 
  4596  091F                     	;# 
  4597  091F                     	;# 
  4598  098F                     	;# 
  4599  098F                     	;# 
  4600  0990                     	;# 
  4601  0991                     	;# 
  4602  0992                     	;# 
  4603  0993                     	;# 
  4604  0994                     	;# 
  4605  0995                     	;# 
  4606  0996                     	;# 
  4607  0997                     	;# 
  4608  0E0F                     	;# 
  4609  0E10                     	;# 
  4610  0E11                     	;# 
  4611  0E12                     	;# 
  4612  0E13                     	;# 
  4613  0E14                     	;# 
  4614  0E15                     	;# 
  4615  0E16                     	;# 
  4616  0E17                     	;# 
  4617  0E18                     	;# 
  4618  0E19                     	;# 
  4619  0E1A                     	;# 
  4620  0E1B                     	;# 
  4621  0E1C                     	;# 
  4622  0E1D                     	;# 
  4623  0E1E                     	;# 
  4624  0E1F                     	;# 
  4625  0E20                     	;# 
  4626  0E21                     	;# 
  4627  0E22                     	;# 
  4628  0E23                     	;# 
  4629  0E24                     	;# 
  4630  0E25                     	;# 
  4631  0E26                     	;# 
  4632  0E27                     	;# 
  4633  0E28                     	;# 
  4634  0E29                     	;# 
  4635  0E2A                     	;# 
  4636  0E2B                     	;# 
  4637  0E2C                     	;# 
  4638  0E2D                     	;# 
  4639  0E2E                     	;# 
  4640  0E2F                     	;# 
  4641  0E30                     	;# 
  4642  0E31                     	;# 
  4643  0E32                     	;# 
  4644  0E33                     	;# 
  4645  0E34                     	;# 
  4646  0E35                     	;# 
  4647  0E36                     	;# 
  4648  0E37                     	;# 
  4649  0E8F                     	;# 
  4650  0E90                     	;# 
  4651  0E91                     	;# 
  4652  0E92                     	;# 
  4653  0E93                     	;# 
  4654  0E94                     	;# 
  4655  0E95                     	;# 
  4656  0E96                     	;# 
  4657  0E97                     	;# 
  4658  0E9C                     	;# 
  4659  0E9D                     	;# 
  4660  0E9E                     	;# 
  4661  0EA1                     	;# 
  4662  0EA2                     	;# 
  4663  0EA3                     	;# 
  4664  0EA4                     	;# 
  4665  0EA5                     	;# 
  4666  0EA9                     	;# 
  4667  0EAA                     	;# 
  4668  0EAB                     	;# 
  4669  0EAC                     	;# 
  4670  0EB1                     	;# 
  4671  0EB2                     	;# 
  4672  0EB3                     	;# 
  4673  0EB8                     	;# 
  4674  0EB9                     	;# 
  4675  0EBA                     	;# 
  4676  0EBB                     	;# 
  4677  0EBC                     	;# 
  4678  0EBD                     	;# 
  4679  0EBE                     	;# 
  4680  0EC3                     	;# 
  4681  0EC5                     	;# 
  4682  0EC6                     	;# 
  4683  0EC7                     	;# 
  4684  0EC8                     	;# 
  4685  0EC9                     	;# 
  4686  0ECA                     	;# 
  4687  0ECB                     	;# 
  4688  0ECC                     	;# 
  4689  0F10                     	;# 
  4690  0F11                     	;# 
  4691  0F12                     	;# 
  4692  0F13                     	;# 
  4693  0F14                     	;# 
  4694  0F15                     	;# 
  4695  0F16                     	;# 
  4696  0F17                     	;# 
  4697  0F18                     	;# 
  4698  0F19                     	;# 
  4699  0F1A                     	;# 
  4700  0F1B                     	;# 
  4701  0F1C                     	;# 
  4702  0F1D                     	;# 
  4703  0F1E                     	;# 
  4704  0F1F                     	;# 
  4705  0F20                     	;# 
  4706  0F21                     	;# 
  4707  0F22                     	;# 
  4708  0F23                     	;# 
  4709  0F24                     	;# 
  4710  0F25                     	;# 
  4711  0F26                     	;# 
  4712  0F27                     	;# 
  4713  0F38                     	;# 
  4714  0F39                     	;# 
  4715  0F3A                     	;# 
  4716  0F3B                     	;# 
  4717  0F3C                     	;# 
  4718  0F3D                     	;# 
  4719  0F3E                     	;# 
  4720  0F3F                     	;# 
  4721  0F40                     	;# 
  4722  0F41                     	;# 
  4723  0F43                     	;# 
  4724  0F44                     	;# 
  4725  0F45                     	;# 
  4726  0F46                     	;# 
  4727  0F47                     	;# 
  4728  0F48                     	;# 
  4729  0F49                     	;# 
  4730  0F4A                     	;# 
  4731  0F4B                     	;# 
  4732  0F4C                     	;# 
  4733  0F4E                     	;# 
  4734  0F4F                     	;# 
  4735  0F50                     	;# 
  4736  0F51                     	;# 
  4737  0F52                     	;# 
  4738  0F53                     	;# 
  4739  0F54                     	;# 
  4740  0F55                     	;# 
  4741  0F56                     	;# 
  4742  0F57                     	;# 
  4743  0F65                     	;# 
  4744  0F68                     	;# 
  4745  0F69                     	;# 
  4746  0F6A                     	;# 
  4747  0F6B                     	;# 
  4748  0FE4                     	;# 
  4749  0FE5                     	;# 
  4750  0FE6                     	;# 
  4751  0FE7                     	;# 
  4752  0FE8                     	;# 
  4753  0FE9                     	;# 
  4754  0FEA                     	;# 
  4755  0FEB                     	;# 
  4756  0FED                     	;# 
  4757  0FEE                     	;# 
  4758  0FEF                     	;_aPatchMemory
  4759                           
  4760                           	psect	idataBANK2
  4761  0A27                     __pidataBANK2:	
  4762                           
  4763                           ;initializer for _segdisp
  4764  0A27  3403               	retlw	3
  4765  0A28  3400               	retlw	0
  4766  0A29  349F               	retlw	159
  4767  0A2A  3400               	retlw	0
  4768  0A2B  3425               	retlw	37
  4769  0A2C  3400               	retlw	0
  4770  0A2D  340D               	retlw	13
  4771  0A2E  3400               	retlw	0
  4772  0A2F  3499               	retlw	153
  4773  0A30  3400               	retlw	0
  4774  0A31  3449               	retlw	73
  4775  0A32  3400               	retlw	0
  4776  0A33  3441               	retlw	65
  4777  0A34  3400               	retlw	0
  4778  0A35  341B               	retlw	27
  4779  0A36  3400               	retlw	0
  4780  0A37  3401               	retlw	1
  4781  0A38  3400               	retlw	0
  4782  0A39  3409               	retlw	9
  4783  0A3A  3400               	retlw	0
  4784                           
  4785                           	psect	stringtext1
  4786  1000                     __pstringtext1:	
  4787  1000                     _cPowerOfTwo:	
  4788  1000  3401               	retlw	1
  4789  1001  3400               	retlw	0
  4790  1002  3402               	retlw	2
  4791  1003  3400               	retlw	0
  4792  1004  3404               	retlw	4
  4793  1005  3400               	retlw	0
  4794  1006  3408               	retlw	8
  4795  1007  3400               	retlw	0
  4796  1008  3410               	retlw	16
  4797  1009  3400               	retlw	0
  4798  100A  3420               	retlw	32
  4799  100B  3400               	retlw	0
  4800  100C  3440               	retlw	64
  4801  100D  3400               	retlw	0
  4802  100E  3480               	retlw	128
  4803  100F  3400               	retlw	0
  4804  1010                     __end_of_cPowerOfTwo:	
  4805                           
  4806                           	psect	stringtext2
  4807  1010                     __pstringtext2:	
  4808  1010                     _maxBanks:	
  4809  1010  3401               	retlw	1
  4810  1011  3400               	retlw	0
  4811  1012                     __end_of_maxBanks:	
  4812                           
  4813                           	psect	stringtext3
  4814  1012                     __pstringtext3:	
  4815  1012                     _maxPatches:	
  4816  1012  3464               	retlw	100
  4817  1013  3400               	retlw	0
  4818  1014                     __end_of_maxPatches:	
  4819                           
  4820                           	psect	stringtext4
  4821  1014                     __pstringtext4:	
  4822  1014                     _MvcMaxValue:	
  4823  1014  34FF               	retlw	255
  4824  1015  3403               	retlw	3
  4825  1016                     __end_of_MvcMaxValue:	
  4826                           
  4827                           	psect	stringtext5
  4828  1016                     __pstringtext5:	
  4829  1016                     _MvcMinValue:	
  4830  1016  3400               	retlw	0
  4831  1017  3400               	retlw	0
  4832  1018                     __end_of_MvcMinValue:	
  4833                           
  4834                           	psect	stringtext6
  4835  1018                     __pstringtext6:	
  4836  1018                     _clockMicroTime:	
  4837  1018  34C8               	retlw	200
  4838  1019  3400               	retlw	0
  4839  101A                     __end_of_clockMicroTime:	
  4840                           
  4841                           	psect	stringtext7
  4842  101A                     __pstringtext7:	
  4843  101A                     _lineSettleMicroTime:	
  4844  101A  3490               	retlw	144
  4845  101B  3401               	retlw	1
  4846  101C                     __end_of_lineSettleMicroTime:	
  4847                           
  4848                           	psect	stringtext8
  4849  101C                     __pstringtext8:	
  4850  101C                     _toggleDly:	
  4851  101C  340A               	retlw	10
  4852  101D  3400               	retlw	0
  4853  101E                     __end_of_toggleDly:	
  4854                           
  4855                           	psect	stringtext9
  4856  101E                     __pstringtext9:	
  4857  101E                     _twoK:	
  4858  101E  3410               	retlw	16
  4859  101F  3427               	retlw	39
  4860  1020                     __end_of_twoK:	
  4861                           
  4862                           	psect	stringtext10
  4863  1020                     __pstringtext10:	
  4864  1020                     _speed:	
  4865  1020  3432               	retlw	50
  4866  1021  3400               	retlw	0
  4867  1022                     __end_of_speed:	
  4868                           
  4869                           	psect	stringtext11
  4870  1022                     __pstringtext11:	
  4871  1022                     _datapin:	
  4872  1022  3412               	retlw	18
  4873  1023  3400               	retlw	0
  4874  1024                     __end_of_datapin:	
  4875                           
  4876                           	psect	stringtext12
  4877  1024                     __pstringtext12:	
  4878  1024                     _clockpin:	
  4879  1024  3411               	retlw	17
  4880  1025  3400               	retlw	0
  4881  1026                     __end_of_clockpin:	
  4882                           
  4883                           	psect	stringtext13
  4884  1026                     __pstringtext13:	
  4885  1026                     _latchpin:	
  4886  1026  3410               	retlw	16
  4887  1027  3400               	retlw	0
  4888  1028                     __end_of_latchpin:	
  4889                           
  4890                           	psect	stringtext14
  4891  1028                     __pstringtext14:	
  4892  1028                     main@iResetValue:	
  4893  1028  3464               	retlw	100
  4894  1029  3400               	retlw	0
  4895  102A                     __end_ofmain@iResetValue:	
  4896                           
  4897                           	psect	stringtext15
  4898  102A                     __pstringtext15:	
  4899  102A                     _cMstrClkAdjust:	
  4900  102A  3420               	retlw	32
  4901  102B  3400               	retlw	0
  4902  102C                     __end_of_cMstrClkAdjust:	
  4903                           
  4904                           	psect	stringtext16
  4905  102C                     __pstringtext16:	
  4906  102C                     _i2c_addr_dualADSR1:	
  4907  102C  3469               	retlw	105
  4908  102D                     __end_of_i2c_addr_dualADSR1:	
  4909                           
  4910                           	psect	stringtext17
  4911  102D                     __pstringtext17:	
  4912  102D                     _i2c_addr_dualADSR0:	
  4913  102D  3468               	retlw	104
  4914  102E                     __end_of_i2c_addr_dualADSR0:	
  4915                           
  4916                           	psect	stringtext18
  4917  102E                     __pstringtext18:	
  4918  102E                     _cPointerByteWriteLED:	
  4919  102E  3410               	retlw	16
  4920  102F                     __end_of_cPointerByteWriteLED:	
  4921                           
  4922                           	psect	stringtext19
  4923  102F                     __pstringtext19:	
  4924  102F                     _cPointerByteReadFaders:	
  4925  102F  3420               	retlw	32
  4926  1030                     __end_of_cPointerByteReadFaders:	
  4927                           
  4928                           	psect	stringtext20
  4929  1030                     __pstringtext20:	
  4930  1030                     _cPointerByteWriteFaders:	
  4931  1030  3430               	retlw	48
  4932  1031                     __end_of_cPointerByteWriteFaders:	
  4933  0018                     _LATCbits	set	24
  4934  0013                     _TRISCbits	set	19
  4935  000D                     _PORTBbits	set	13
  4936  000E                     _PORTC	set	14
  4937  000D                     _PORTB	set	13
  4938  000B                     _INTCONbits	set	11
  4939  0013                     _TRISC	set	19
  4940  0012                     _TRISB	set	18
  4941  0011                     _TRISA	set	17
  4942  0018                     _LATC	set	24
  4943  0017                     _LATB	set	23
  4944  0016                     _LATA	set	22
  4945  005F                     _GIE	set	95
  4946  0094                     _ADCON1bits	set	148
  4947  008E                     _ADPREVL	set	142
  4948  008F                     _ADPREVH	set	143
  4949  0097                     _ADSTATbits	set	151
  4950  0090                     _ADACCL	set	144
  4951  0091                     _ADACCH	set	145
  4952  0095                     _ADCON2bits	set	149
  4953  0096                     _ADCON3bits	set	150
  4954  008C                     _ADRESL	set	140
  4955  008D                     _ADRESH	set	141
  4956  0093                     _ADCON0bits	set	147
  4957  0093                     _ADCON0	set	147
  4958  009E                     _ADPCH	set	158
  4959  009D                     _ADACQ	set	157
  4960  009C                     _ADPRE	set	156
  4961  009B                     _ADCAP	set	155
  4962  009A                     _ADREF	set	154
  4963  0098                     _ADCLK	set	152
  4964  0097                     _ADSTAT	set	151
  4965  0099                     _ADACT	set	153
  4966  0096                     _ADCON3	set	150
  4967  0095                     _ADCON2	set	149
  4968  0094                     _ADCON1	set	148
  4969  0116                     _ADERRL	set	278
  4970  0117                     _ADERRH	set	279
  4971  0114                     _ADFLTRL	set	276
  4972  0115                     _ADFLTRH	set	277
  4973  010C                     _ADCNT	set	268
  4974  0113                     _ADSTPTH	set	275
  4975  0112                     _ADSTPTL	set	274
  4976  0111                     _ADUTHH	set	273
  4977  0110                     _ADUTHL	set	272
  4978  010F                     _ADLTHH	set	271
  4979  010E                     _ADLTHL	set	270
  4980  010D                     _ADRPT	set	269
  4981  018C                     _SSP1BUF	set	396
  4982  0191                     _SSP1CON2bits	set	401
  4983  0190                     _SSP1CON1bits	set	400
  4984  018D                     _SSP1ADD	set	397
  4985  0192                     _SSP1CON3	set	402
  4986  0190                     _SSP1CON1	set	400
  4987  018F                     _SSP1STAT	set	399
  4988  0719                     _PIE3bits	set	1817
  4989  070F                     _PIR3bits	set	1807
  4990  0892                     _OSCTUNE	set	2194
  4991  0893                     _OSCFRQ	set	2195
  4992  0891                     _OSCEN	set	2193
  4993  088F                     _OSCCON3	set	2191
  4994  088D                     _OSCCON1	set	2189
  4995  0EC5                     _SSP1CLKPPSbits	set	3781
  4996  0EC6                     _SSP1DATPPSbits	set	3782
  4997  0E8F                     _PPSLOCKbits	set	3727
  4998  0E8F                     _PPSLOCK	set	3727
  4999  0F4E                     _ANSELCbits	set	3918
  5000  0F24                     _RC4PPS	set	3876
  5001  0F23                     _RC3PPS	set	3875
  5002  0F50                     _ODCONC	set	3920
  5003  0F45                     _ODCONB	set	3909
  5004  0F3A                     _ODCONA	set	3898
  5005  0F4F                     _WPUC	set	3919
  5006  0F39                     _WPUA	set	3897
  5007  0F44                     _WPUB	set	3908
  5008  0F65                     _WPUE	set	3941
  5009  0F38                     _ANSELA	set	3896
  5010  0F43                     _ANSELB	set	3907
  5011  0F4E                     _ANSELC	set	3918
  5012                           
  5013                           ; #config settings
  5014  0000                     
  5015                           	psect	cinit
  5016  0022                     start_initialization:	
  5017  0022                     __initialization:		;BIGRAM
  5018                           
  5019                           ; Initialize objects allocated to BANK2
  5020  0022  3027               	movlw	low __pidataBANK2
  5021  0023  0084               	movwf	4
  5022  0024  308A               	movlw	(high __pidataBANK2)| (0+128)
  5023  0025  0085               	movwf	5
  5024  0026  3020               	movlw	low __pdataBANK2
  5025  0027  0086               	movwf	6
  5026  0028  3001               	movlw	high __pdataBANK2
  5027  0029  0087               	movwf	7
  5028  002A  3000               	movlw	0
  5029  002B  00FF               	movwf	btemp+1
  5030  002C  3014               	movlw	20
  5031  002D  3189  21E8  3180   	fcall	init_ram
  5032                           
  5033                           ; Clear objects allocated to BIGRAM
  5034  0030  3070               	movlw	low (0+9072)
  5035  0031  0084               	movwf	4
  5036  0032  3023               	movlw	high (0+9072)
  5037  0033  0085               	movwf	5
  5038  0034  3080               	movlw	128
  5039  0035  00FE               	movwf	btemp
  5040  0036  3000               	movlw	0
  5041  0037  00FF               	movwf	btemp+1
  5042  0038  3189  21DC  3180   	fcall	clear_ram0
  5043                           
  5044                           ; Clear objects allocated to COMMON
  5045  003B  01F0               	clrf	__pbssCOMMON& (0+127)
  5046  003C  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5047  003D  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5048  003E  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5049  003F  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5050  0040  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5051  0041  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  5052                           
  5053                           ; Clear objects allocated to BANK0
  5054  0042  01E7               	clrf	__pbssBANK0& (0+127)
  5055  0043  01E8               	clrf	(__pbssBANK0+1)& (0+127)
  5056  0044  01E9               	clrf	(__pbssBANK0+2)& (0+127)
  5057  0045  01EA               	clrf	(__pbssBANK0+3)& (0+127)
  5058  0046  01EB               	clrf	(__pbssBANK0+4)& (0+127)
  5059  0047  01EC               	clrf	(__pbssBANK0+5)& (0+127)
  5060  0048  01ED               	clrf	(__pbssBANK0+6)& (0+127)
  5061  0049  01EE               	clrf	(__pbssBANK0+7)& (0+127)
  5062  004A  01EF               	clrf	(__pbssBANK0+8)& (0+127)
  5063                           
  5064                           ; Clear objects allocated to BANK1
  5065  004B  30A0               	movlw	low __pbssBANK1
  5066  004C  0084               	movwf	4
  5067  004D  3000               	movlw	high __pbssBANK1
  5068  004E  0085               	movwf	5
  5069  004F  3038               	movlw	56
  5070  0050  00FE               	movwf	btemp
  5071  0051  3000               	movlw	0
  5072  0052  00FF               	movwf	btemp+1
  5073  0053  3189  21DC  3180   	fcall	clear_ram0
  5074                           
  5075                           ; Clear objects allocated to BANK2
  5076  0056  3034               	movlw	low __pbssBANK2
  5077  0057  0084               	movwf	4
  5078  0058  3001               	movlw	high __pbssBANK2
  5079  0059  0085               	movwf	5
  5080  005A  3010               	movlw	16
  5081  005B  00FE               	movwf	btemp
  5082  005C  3000               	movlw	0
  5083  005D  00FF               	movwf	btemp+1
  5084  005E  3189  21DC         	fcall	clear_ram0
  5085  0060                     end_of_initialization:	
  5086                           ;End of C runtime variable initialization code
  5087                           
  5088  0060                     __end_of__initialization:	
  5089  0060  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5090  0061  0020               	movlb	0
  5091  0062  3180  2864         	ljmp	_main	;jump to C main() function
  5092                           
  5093                           	psect	bssCOMMON
  5094  0070                     __pbssCOMMON:	
  5095  0070                     I2C1_ISR@i2c_bytes_left:	
  5096  0070                     	ds	1
  5097  0071                     I2C1_ISR@pi2c_buf_ptr:	
  5098  0071                     	ds	1
  5099  0072                     _p_i2c1_current:	
  5100  0072                     	ds	1
  5101  0073                     _p_i2c1_trb_current:	
  5102  0073                     	ds	1
  5103  0074                     _i2c1_trb_count:	
  5104  0074                     	ds	1
  5105  0075                     I2C1_ISR@i2c_address:	
  5106  0075                     	ds	2
  5107                           
  5108                           	psect	bssBANK0
  5109  0067                     __pbssBANK0:	
  5110  0067                     _i2c1_object:	
  5111  0067                     	ds	5
  5112  006C                     _iLEDs0_MSB:	
  5113  006C                     	ds	1
  5114  006D                     _MY_CONSTS:	
  5115  006D                     	ds	1
  5116  006E                     I2C1_ISR@i2c_10bit_address_restart:	
  5117  006E                     	ds	1
  5118  006F                     _i2c1_state:	
  5119  006F                     	ds	1
  5120                           
  5121                           	psect	bssBANK1
  5122  00A0                     __pbssBANK1:	
  5123  00A0                     _prevPanelInChannels:	
  5124  00A0                     	ds	4
  5125  00A4                     _PanelInChannels:	
  5126  00A4                     	ds	4
  5127  00A8                     _faderActiveFlag:	
  5128  00A8                     	ds	4
  5129  00AC                     _d:	
  5130  00AC                     	ds	3
  5131  00AF                     _b:	
  5132  00AF                     	ds	3
  5133  00B2                     _wkFloat:	
  5134  00B2                     	ds	3
  5135  00B5                     _e:	
  5136  00B5                     	ds	2
  5137  00B7                     _c:	
  5138  00B7                     	ds	2
  5139  00B9                     _mvcPatchNumber:	
  5140  00B9                     	ds	2
  5141  00BB                     _wkByte:	
  5142  00BB                     	ds	1
  5143  00BC                     _wkMIDICC:	
  5144  00BC                     	ds	1
  5145  00BD                     _wkFaderValue:	
  5146  00BD                     	ds	1
  5147  00BE                     _iLEDs1_LSB:	
  5148  00BE                     	ds	1
  5149  00BF                     _iLEDs1_MSB:	
  5150  00BF                     	ds	1
  5151  00C0                     _iLEDs0_LSB:	
  5152  00C0                     	ds	1
  5153  00C1                     _iI2CFaderValue:	
  5154  00C1                     	ds	8
  5155  00C9                     _mvcChannels:	
  5156  00C9                     	ds	4
  5157  00CD                     I2C1_MasterRead@trBlock:	
  5158  00CD                     	ds	4
  5159  00D1                     I2C1_MasterWrite@trBlock:	
  5160  00D1                     	ds	4
  5161  00D5                     _i2c1_tr_queue:	
  5162  00D5                     	ds	3
  5163                           
  5164                           	psect	bssBANK2
  5165  0134                     __pbssBANK2:	
  5166  0134                     _dualADSRdata1:	
  5167  0134                     	ds	8
  5168  013C                     _dualADSRdata0:	
  5169  013C                     	ds	8
  5170                           
  5171                           	psect	dataBANK2
  5172  0120                     __pdataBANK2:	
  5173  0120                     _segdisp:	
  5174  0120                     	ds	20
  5175                           
  5176                           	psect	inittext
  5177  09E8                     init_ram:	
  5178  09E8  00FE               	movwf	126
  5179  09E9                     initloop:	
  5180  09E9  0012               	moviw fsr0++
  5181  09EA  001E               	movwi fsr1++
  5182  09EB  3001               	movlw	1
  5183  09EC  02FE               	subwf	126,f
  5184  09ED  3000               	movlw	0
  5185  09EE  3BFF               	subwfb	127,f
  5186  09EF  087F               	movf	127,w
  5187  09F0  047E               	iorwf	126,w
  5188  09F1  1903               	btfsc	3,2
  5189  09F2  3400               	retlw	0
  5190  09F3  29E9               	goto	initloop
  5191                           
  5192                           	psect	clrtext
  5193  09DC                     clear_ram0:	
  5194                           ;	Called with FSR0 containing the base address, and
  5195                           ;	btemp/btemp+1 has the size to clear
  5196                           
  5197  09DC  0064               	clrwdt	;clear the watchdog before getting into this loop
  5198  09DD                     clrloop0:	
  5199  09DD  0180               	clrf	0	;clear RAM location pointed to by FSR
  5200  09DE  3101               	addfsr 0,1
  5201  09DF  3001               	movlw	1
  5202  09E0  02FE               	subwf	126,f
  5203  09E1  3000               	movlw	0
  5204  09E2  3BFF               	subwfb	127,f
  5205  09E3  087F               	movf	127,w
  5206  09E4  047E               	iorwf	126,w
  5207  09E5  1903               	btfsc	3,2
  5208  09E6  3400               	retlw	0	;all done for this memory range, return
  5209  09E7  29DD               	goto	clrloop0	;have we reached the end yet?
  5210                           
  5211                           	psect	cstackBANK1
  5212  00D8                     __pcstackBANK1:	
  5213  00D8                     main@readStatus:	
  5214                           
  5215                           ; 1 bytes @ 0x0
  5216  00D8                     	ds	1
  5217  00D9                     main@iCounter:	
  5218                           
  5219                           ; 2 bytes @ 0x1
  5220  00D9                     	ds	2
  5221  00DB                     main@iChangeCount:	
  5222                           
  5223                           ; 1 bytes @ 0x3
  5224  00DB                     	ds	1
  5225  00DC                     main@prevFader8bitValue:	
  5226                           
  5227                           ; 1 bytes @ 0x4
  5228  00DC                     	ds	1
  5229  00DD                     main@iLoopCounter:	
  5230                           
  5231                           ; 2 bytes @ 0x5
  5232  00DD                     	ds	2
  5233  00DF                     main@POT0Value:	
  5234                           
  5235                           ; 1 bytes @ 0x7
  5236  00DF                     	ds	1
  5237  00E0                     main@POT1Value:	
  5238                           
  5239                           ; 1 bytes @ 0x8
  5240  00E0                     	ds	1
  5241  00E1                     main@LoadDebounceCount:	
  5242                           
  5243                           ; 2 bytes @ 0x9
  5244  00E1                     	ds	2
  5245  00E3                     main@SaveDebounceCount:	
  5246                           
  5247                           ; 2 bytes @ 0xB
  5248  00E3                     	ds	2
  5249  00E5                     main@fader8bitValue:	
  5250                           
  5251                           ; 1 bytes @ 0xD
  5252  00E5                     	ds	1
  5253  00E6                     main@fx:	
  5254                           
  5255                           ; 2 bytes @ 0xE
  5256  00E6                     	ds	2
  5257  00E8                     main@faderValue:	
  5258                           
  5259                           ; 2 bytes @ 0x10
  5260  00E8                     	ds	2
  5261  00EA                     main@fx_978:	
  5262                           
  5263                           ; 2 bytes @ 0x12
  5264  00EA                     	ds	2
  5265                           
  5266                           	psect	cstackCOMMON
  5267  0077                     __pcstackCOMMON:	
  5268  0077                     ?_OSCILLATOR_Initialize:	
  5269  0077                     ?_I2C1_Initialize:	
  5270                           ; 1 bytes @ 0x0
  5271                           
  5272  0077                     ?_ADCC_Initialize:	
  5273                           ; 1 bytes @ 0x0
  5274                           
  5275  0077                     ?_I2C1_Stop:	
  5276                           ; 1 bytes @ 0x0
  5277                           
  5278  0077                     ??_I2C1_Stop:	
  5279                           ; 1 bytes @ 0x0
  5280                           
  5281  0077                     ?_I2C1_FunctionComplete:	
  5282                           ; 1 bytes @ 0x0
  5283                           
  5284  0077                     ??_I2C1_FunctionComplete:	
  5285                           ; 1 bytes @ 0x0
  5286                           
  5287  0077                     ?_initDAC528:	
  5288                           ; 1 bytes @ 0x0
  5289                           
  5290  0077                     ?_LED7SegSetup:	
  5291                           ; 1 bytes @ 0x0
  5292                           
  5293  0077                     ?_PIN_MANAGER_Initialize:	
  5294                           ; 1 bytes @ 0x0
  5295                           
  5296  0077                     ?_SYSTEM_Initialize:	
  5297                           ; 1 bytes @ 0x0
  5298                           
  5299  0077                     ?_I2C1_ISR:	
  5300                           ; 1 bytes @ 0x0
  5301                           
  5302  0077                     ?_I2C1_BusCollisionISR:	
  5303                           ; 1 bytes @ 0x0
  5304                           
  5305  0077                     ??_I2C1_BusCollisionISR:	
  5306                           ; 1 bytes @ 0x0
  5307                           
  5308  0077                     ?_INTERRUPT_InterruptManager:	
  5309                           ; 1 bytes @ 0x0
  5310                           
  5311  0077                     ?_InitPanelInChannels:	
  5312                           ; 1 bytes @ 0x0
  5313                           
  5314  0077                     ?_InitmvcChannels:	
  5315                           ; 1 bytes @ 0x0
  5316                           
  5317  0077                     ?_main:	
  5318                           ; 1 bytes @ 0x0
  5319                           
  5320  0077                     ?_LED7SegPinWrite:	
  5321                           ; 1 bytes @ 0x0
  5322                           
  5323  0077                     ?_LED7SegPulseClock:	
  5324                           ; 1 bytes @ 0x0
  5325                           
  5326  0077                     ?_LED7SegShiftOutPulseClock:	
  5327                           ; 1 bytes @ 0x0
  5328                           
  5329                           
  5330                           ; 1 bytes @ 0x0
  5331  0077                     	ds	1
  5332  0078                     I2C1_Stop@completion_code:	
  5333                           
  5334                           ; 1 bytes @ 0x1
  5335  0078                     	ds	1
  5336  0079                     ??_I2C1_ISR:	
  5337                           
  5338                           ; 1 bytes @ 0x2
  5339  0079                     	ds	4
  5340  007D                     ??_INTERRUPT_InterruptManager:	
  5341                           
  5342                           ; 1 bytes @ 0x6
  5343  007D                     	ds	1
  5344                           
  5345                           	psect	cstackBANK0
  5346  0020                     __pcstackBANK0:	
  5347  0020                     ??_OSCILLATOR_Initialize:	
  5348  0020                     ??_I2C1_Initialize:	
  5349                           ; 1 bytes @ 0x0
  5350                           
  5351  0020                     ??_ADCC_Initialize:	
  5352                           ; 1 bytes @ 0x0
  5353                           
  5354  0020                     ?_I2C1_MasterWriteTRBBuild:	
  5355                           ; 1 bytes @ 0x0
  5356                           
  5357  0020                     ?_I2C1_MasterTRBInsert:	
  5358                           ; 1 bytes @ 0x0
  5359                           
  5360  0020                     ??_LED7SegSetup:	
  5361                           ; 1 bytes @ 0x0
  5362                           
  5363  0020                     ?_marshallPatchMemory:	
  5364                           ; 1 bytes @ 0x0
  5365                           
  5366  0020                     ?_updateModelFromPatchMemory:	
  5367                           ; 1 bytes @ 0x0
  5368                           
  5369  0020                     ??_PIN_MANAGER_Initialize:	
  5370                           ; 1 bytes @ 0x0
  5371                           
  5372  0020                     ??_InitPanelInChannels:	
  5373                           ; 1 bytes @ 0x0
  5374                           
  5375  0020                     ??_InitmvcChannels:	
  5376                           ; 1 bytes @ 0x0
  5377                           
  5378  0020                     ??_LED7SegPinWrite:	
  5379                           ; 1 bytes @ 0x0
  5380                           
  5381  0020                     ?_ADCC_GetSingleConversion:	
  5382                           ; 1 bytes @ 0x0
  5383                           
  5384  0020                     ?___wmul:	
  5385                           ; 2 bytes @ 0x0
  5386                           
  5387  0020                     ?___ftpack:	
  5388                           ; 2 bytes @ 0x0
  5389                           
  5390  0020                     PIN_MANAGER_Initialize@state:	
  5391                           ; 3 bytes @ 0x0
  5392                           
  5393  0020                     I2C1_MasterTRBInsert@ptrb_list:	
  5394                           ; 1 bytes @ 0x0
  5395                           
  5396  0020                     I2C1_MasterWriteTRBBuild@pdata:	
  5397                           ; 1 bytes @ 0x0
  5398                           
  5399  0020                     LED7SegPinWrite@val:	
  5400                           ; 1 bytes @ 0x0
  5401                           
  5402  0020                     marshallPatchMemory@dualADSRdata0:	
  5403                           ; 1 bytes @ 0x0
  5404                           
  5405  0020                     updateModelFromPatchMemory@dualADSRdata0:	
  5406                           ; 1 bytes @ 0x0
  5407                           
  5408  0020                     ___wmul@multiplier:	
  5409                           ; 1 bytes @ 0x0
  5410                           
  5411  0020                     ___ftpack@arg:	
  5412                           ; 2 bytes @ 0x0
  5413                           
  5414                           
  5415                           ; 3 bytes @ 0x0
  5416  0020                     	ds	1
  5417  0021                     ??_SYSTEM_Initialize:	
  5418  0021                     I2C1_MasterTRBInsert@pflag:	
  5419                           ; 1 bytes @ 0x1
  5420                           
  5421  0021                     I2C1_MasterWriteTRBBuild@length:	
  5422                           ; 1 bytes @ 0x1
  5423                           
  5424  0021                     marshallPatchMemory@dualADSRdata1:	
  5425                           ; 1 bytes @ 0x1
  5426                           
  5427  0021                     updateModelFromPatchMemory@dualADSRdata1:	
  5428                           ; 1 bytes @ 0x1
  5429                           
  5430  0021                     InitPanelInChannels@i:	
  5431                           ; 1 bytes @ 0x1
  5432                           
  5433  0021                     InitmvcChannels@i:	
  5434                           ; 2 bytes @ 0x1
  5435                           
  5436                           
  5437                           ; 2 bytes @ 0x1
  5438  0021                     	ds	1
  5439  0022                     ??_I2C1_MasterTRBInsert:	
  5440  0022                     ??_marshallPatchMemory:	
  5441                           ; 1 bytes @ 0x2
  5442                           
  5443  0022                     ??_updateModelFromPatchMemory:	
  5444                           ; 1 bytes @ 0x2
  5445                           
  5446  0022                     I2C1_MasterWriteTRBBuild@address:	
  5447                           ; 1 bytes @ 0x2
  5448                           
  5449  0022                     ___wmul@multiplicand:	
  5450                           ; 2 bytes @ 0x2
  5451                           
  5452                           
  5453                           ; 2 bytes @ 0x2
  5454  0022                     	ds	1
  5455  0023                     ??_ADCC_GetSingleConversion:	
  5456  0023                     ADCC_GetSingleConversion@channel:	
  5457                           ; 1 bytes @ 0x3
  5458                           
  5459  0023                     I2C1_MasterTRBInsert@count:	
  5460                           ; 1 bytes @ 0x3
  5461                           
  5462  0023                     ___ftpack@exp:	
  5463                           ; 1 bytes @ 0x3
  5464                           
  5465                           
  5466                           ; 1 bytes @ 0x3
  5467  0023                     	ds	1
  5468  0024                     ??_I2C1_MasterWriteTRBBuild:	
  5469  0024                     ??___wmul:	
  5470                           ; 1 bytes @ 0x4
  5471                           
  5472  0024                     ___ftpack@sign:	
  5473                           ; 1 bytes @ 0x4
  5474                           
  5475  0024                     ___wmul@product:	
  5476                           ; 1 bytes @ 0x4
  5477                           
  5478                           
  5479                           ; 2 bytes @ 0x4
  5480  0024                     	ds	1
  5481  0025                     ??___ftpack:	
  5482                           
  5483                           ; 1 bytes @ 0x5
  5484  0025                     	ds	1
  5485  0026                     ?_delay:	
  5486  0026                     I2C1_MasterWriteTRBBuild@ptrb:	
  5487                           ; 1 bytes @ 0x6
  5488                           
  5489  0026                     updateModelFromPatchMemory@mvcChannels:	
  5490                           ; 1 bytes @ 0x6
  5491                           
  5492  0026                     delay@delaytime:	
  5493                           ; 1 bytes @ 0x6
  5494                           
  5495                           
  5496                           ; 2 bytes @ 0x6
  5497  0026                     	ds	1
  5498  0027                     ?_I2C1_MasterWrite:	
  5499  0027                     I2C1_MasterWrite@length:	
  5500                           ; 1 bytes @ 0x7
  5501                           
  5502  0027                     updateModelFromPatchMemory@i_1229:	
  5503                           ; 1 bytes @ 0x7
  5504                           
  5505                           
  5506                           ; 2 bytes @ 0x7
  5507  0027                     	ds	1
  5508  0028                     ??_delay:	
  5509  0028                     ?___awtoft:	
  5510                           ; 1 bytes @ 0x8
  5511                           
  5512  0028                     marshallPatchMemory@mvcChannels:	
  5513                           ; 3 bytes @ 0x8
  5514                           
  5515  0028                     I2C1_MasterWrite@address:	
  5516                           ; 1 bytes @ 0x8
  5517                           
  5518  0028                     ___awtoft@c:	
  5519                           ; 2 bytes @ 0x8
  5520                           
  5521                           
  5522                           ; 2 bytes @ 0x8
  5523  0028                     	ds	1
  5524  0029                     marshallPatchMemory@i:	
  5525  0029                     updateModelFromPatchMemory@i_1230:	
  5526                           ; 2 bytes @ 0x9
  5527                           
  5528  0029                     delay@adjustedDelaytime:	
  5529                           ; 2 bytes @ 0x9
  5530                           
  5531                           
  5532                           ; 4 bytes @ 0x9
  5533  0029                     	ds	1
  5534  002A                     I2C1_MasterWrite@pflag:	
  5535                           
  5536                           ; 1 bytes @ 0xA
  5537  002A                     	ds	1
  5538  002B                     ??_I2C1_MasterWrite:	
  5539  002B                     ??___awtoft:	
  5540                           ; 1 bytes @ 0xB
  5541                           
  5542  002B                     marshallPatchMemory@i_1221:	
  5543                           ; 1 bytes @ 0xB
  5544                           
  5545  002B                     updateModelFromPatchMemory@iPatchMemoryNDX:	
  5546                           ; 2 bytes @ 0xB
  5547                           
  5548                           
  5549                           ; 2 bytes @ 0xB
  5550  002B                     	ds	2
  5551  002D                     I2C1_MasterWrite@pdata:	
  5552  002D                     ___awtoft@sign:	
  5553                           ; 1 bytes @ 0xD
  5554                           
  5555  002D                     marshallPatchMemory@i_1222:	
  5556                           ; 1 bytes @ 0xD
  5557                           
  5558  002D                     updateModelFromPatchMemory@i:	
  5559                           ; 2 bytes @ 0xD
  5560                           
  5561  002D                     delay@counter:	
  5562                           ; 2 bytes @ 0xD
  5563                           
  5564                           
  5565                           ; 4 bytes @ 0xD
  5566  002D                     	ds	1
  5567  002E                     ?_MYI2C_Write2LEDBytes:	
  5568  002E                     ?_MYI2C_Write16EEPROMBytes:	
  5569                           ; 1 bytes @ 0xE
  5570                           
  5571  002E                     ?___ftdiv:	
  5572                           ; 1 bytes @ 0xE
  5573                           
  5574  002E                     ?___ftmul:	
  5575                           ; 3 bytes @ 0xE
  5576                           
  5577  002E                     MYI2C_Write2LEDBytes@MSBWriteByte:	
  5578                           ; 3 bytes @ 0xE
  5579                           
  5580  002E                     MYI2C_Write16EEPROMBytes@writeAddress:	
  5581                           ; 1 bytes @ 0xE
  5582                           
  5583  002E                     ___ftdiv@f2:	
  5584                           ; 2 bytes @ 0xE
  5585                           
  5586  002E                     ___ftmul@f1:	
  5587                           ; 3 bytes @ 0xE
  5588                           
  5589                           
  5590                           ; 3 bytes @ 0xE
  5591  002E                     	ds	1
  5592  002F                     MYI2C_Write2LEDBytes@LSBWriteByte:	
  5593  002F                     marshallPatchMemory@iPatchMemoryNDX:	
  5594                           ; 1 bytes @ 0xF
  5595                           
  5596                           
  5597                           ; 2 bytes @ 0xF
  5598  002F                     	ds	1
  5599  0030                     ??_MYI2C_Write2LEDBytes:	
  5600  0030                     MYI2C_Write16EEPROMBytes@pData:	
  5601                           ; 1 bytes @ 0x10
  5602                           
  5603                           
  5604                           ; 2 bytes @ 0x10
  5605  0030                     	ds	1
  5606  0031                     ??_LED7SegPulseClock:	
  5607  0031                     ??_LED7SegShiftOutPulseClock:	
  5608                           ; 1 bytes @ 0x11
  5609                           
  5610  0031                     ___ftdiv@f1:	
  5611                           ; 1 bytes @ 0x11
  5612                           
  5613  0031                     ___ftmul@f2:	
  5614                           ; 3 bytes @ 0x11
  5615                           
  5616                           
  5617                           ; 3 bytes @ 0x11
  5618  0031                     	ds	1
  5619  0032                     ??_MYI2C_Write16EEPROMBytes:	
  5620  0032                     LED7SegShiftOutPulseClock@val:	
  5621                           ; 1 bytes @ 0x12
  5622                           
  5623                           
  5624                           ; 1 bytes @ 0x12
  5625  0032                     	ds	1
  5626  0033                     LED7SegShiftOutPulseClock@i:	
  5627                           
  5628                           ; 1 bytes @ 0x13
  5629  0033                     	ds	1
  5630  0034                     ?_LED7SegDisplayValueByDigit:	
  5631  0034                     ??___ftdiv:	
  5632                           ; 1 bytes @ 0x14
  5633                           
  5634  0034                     ??___ftmul:	
  5635                           ; 1 bytes @ 0x14
  5636                           
  5637  0034                     MYI2C_Write2LEDBytes@nCount:	
  5638                           ; 1 bytes @ 0x14
  5639                           
  5640  0034                     LED7SegDisplayValueByDigit@iTensDigit:	
  5641                           ; 2 bytes @ 0x14
  5642                           
  5643                           
  5644                           ; 2 bytes @ 0x14
  5645  0034                     	ds	2
  5646  0036                     MYI2C_Write2LEDBytes@slaveDeviceAddress:	
  5647  0036                     LED7SegDisplayValueByDigit@iUnitsDigit:	
  5648                           ; 1 bytes @ 0x16
  5649                           
  5650  0036                     MYI2C_Write16EEPROMBytes@writeBuffer:	
  5651                           ; 2 bytes @ 0x16
  5652                           
  5653                           
  5654                           ; 17 bytes @ 0x16
  5655  0036                     	ds	1
  5656  0037                     MYI2C_Write2LEDBytes@counter:	
  5657                           
  5658                           ; 2 bytes @ 0x17
  5659  0037                     	ds	1
  5660  0038                     ??_LED7SegDisplayValueByDigit:	
  5661  0038                     ___ftdiv@cntr:	
  5662                           ; 1 bytes @ 0x18
  5663                           
  5664  0038                     ___ftmul@exp:	
  5665                           ; 1 bytes @ 0x18
  5666                           
  5667  0038                     LED7SegDisplayValueByDigit@iTensCode:	
  5668                           ; 1 bytes @ 0x18
  5669                           
  5670                           
  5671                           ; 2 bytes @ 0x18
  5672  0038                     	ds	1
  5673  0039                     MYI2C_Write2LEDBytes@timeOut:	
  5674  0039                     ___ftdiv@f3:	
  5675                           ; 2 bytes @ 0x19
  5676                           
  5677  0039                     ___ftmul@f3_as_product:	
  5678                           ; 3 bytes @ 0x19
  5679                           
  5680                           
  5681                           ; 3 bytes @ 0x19
  5682  0039                     	ds	2
  5683  003B                     MYI2C_Write2LEDBytes@pointerByte:	
  5684                           
  5685                           ; 1 bytes @ 0x1B
  5686  003B                     	ds	1
  5687  003C                     ___ftdiv@exp:	
  5688  003C                     ___ftmul@cntr:	
  5689                           ; 1 bytes @ 0x1C
  5690                           
  5691  003C                     MYI2C_Write2LEDBytes@writeBuffer:	
  5692                           ; 1 bytes @ 0x1C
  5693                           
  5694                           
  5695                           ; 3 bytes @ 0x1C
  5696  003C                     	ds	1
  5697  003D                     ___ftdiv@sign:	
  5698  003D                     ___ftmul@sign:	
  5699                           ; 1 bytes @ 0x1D
  5700                           
  5701                           
  5702                           ; 1 bytes @ 0x1D
  5703  003D                     	ds	1
  5704  003E                     ?___fttol:	
  5705  003E                     ___fttol@f1:	
  5706                           ; 4 bytes @ 0x1E
  5707                           
  5708                           
  5709                           ; 3 bytes @ 0x1E
  5710  003E                     	ds	1
  5711  003F                     MYI2C_Write2LEDBytes@status:	
  5712                           
  5713                           ; 1 bytes @ 0x1F
  5714  003F                     	ds	1
  5715  0040                     ?_blinkyLoop:	
  5716  0040                     blinkyLoop@maxLoops:	
  5717                           ; 1 bytes @ 0x20
  5718                           
  5719                           
  5720                           ; 2 bytes @ 0x20
  5721  0040                     	ds	2
  5722  0042                     ??_blinkyLoop:	
  5723  0042                     ??___fttol:	
  5724                           ; 1 bytes @ 0x22
  5725                           
  5726                           
  5727                           ; 1 bytes @ 0x22
  5728  0042                     	ds	2
  5729  0044                     blinkyLoop@delayTime:	
  5730                           
  5731                           ; 2 bytes @ 0x24
  5732  0044                     	ds	2
  5733  0046                     ___fttol@sign1:	
  5734  0046                     blinkyLoop@loopCount:	
  5735                           ; 1 bytes @ 0x26
  5736                           
  5737                           
  5738                           ; 2 bytes @ 0x26
  5739  0046                     	ds	1
  5740  0047                     MYI2C_Write16EEPROMBytes@iPatchAddressLow:	
  5741  0047                     ___fttol@lval:	
  5742                           ; 1 bytes @ 0x27
  5743                           
  5744                           
  5745                           ; 4 bytes @ 0x27
  5746  0047                     	ds	1
  5747  0048                     MYI2C_Write16EEPROMBytes@nCount:	
  5748                           
  5749                           ; 2 bytes @ 0x28
  5750  0048                     	ds	2
  5751  004A                     MYI2C_Write16EEPROMBytes@timeOut:	
  5752                           
  5753                           ; 2 bytes @ 0x2A
  5754  004A                     	ds	1
  5755  004B                     ___fttol@exp1:	
  5756                           
  5757                           ; 1 bytes @ 0x2B
  5758  004B                     	ds	1
  5759  004C                     ?_putByte:	
  5760  004C                     MYI2C_Write16EEPROMBytes@pointerByte:	
  5761                           ; 1 bytes @ 0x2C
  5762                           
  5763  004C                     putByte@clockPin:	
  5764                           ; 1 bytes @ 0x2C
  5765                           
  5766                           
  5767                           ; 2 bytes @ 0x2C
  5768  004C                     	ds	1
  5769  004D                     MYI2C_Write16EEPROMBytes@slaveDeviceAddress:	
  5770                           
  5771                           ; 1 bytes @ 0x2D
  5772  004D                     	ds	1
  5773  004E                     ??_putByte:	
  5774  004E                     MYI2C_Write16EEPROMBytes@iPatchAddressHigh:	
  5775                           ; 1 bytes @ 0x2E
  5776                           
  5777                           
  5778                           ; 1 bytes @ 0x2E
  5779  004E                     	ds	1
  5780  004F                     MYI2C_Write16EEPROMBytes@counter:	
  5781                           
  5782                           ; 2 bytes @ 0x2F
  5783  004F                     	ds	2
  5784  0051                     MYI2C_Write16EEPROMBytes@i:	
  5785                           
  5786                           ; 2 bytes @ 0x31
  5787  0051                     	ds	1
  5788  0052                     putByte@data:	
  5789                           
  5790                           ; 1 bytes @ 0x32
  5791  0052                     	ds	1
  5792  0053                     putByte@mask:	
  5793  0053                     MYI2C_Write16EEPROMBytes@status:	
  5794                           ; 1 bytes @ 0x33
  5795                           
  5796                           
  5797                           ; 1 bytes @ 0x33
  5798  0053                     	ds	1
  5799  0054                     ?_savePatch:	
  5800  0054                     putByte@i:	
  5801                           ; 1 bytes @ 0x34
  5802                           
  5803  0054                     savePatch@PatchNumber:	
  5804                           ; 1 bytes @ 0x34
  5805                           
  5806                           
  5807                           ; 2 bytes @ 0x34
  5808  0054                     	ds	1
  5809  0055                     ??_initDAC528:	
  5810  0055                     ?_writeDAC528:	
  5811                           ; 1 bytes @ 0x35
  5812                           
  5813  0055                     writeDAC528@dacNumber:	
  5814                           ; 1 bytes @ 0x35
  5815                           
  5816                           
  5817                           ; 2 bytes @ 0x35
  5818  0055                     	ds	1
  5819  0056                     ??_savePatch:	
  5820                           
  5821                           ; 1 bytes @ 0x36
  5822  0056                     	ds	1
  5823  0057                     writeDAC528@dacData:	
  5824                           
  5825                           ; 1 bytes @ 0x37
  5826  0057                     	ds	1
  5827  0058                     ??_writeDAC528:	
  5828                           
  5829                           ; 1 bytes @ 0x38
  5830  0058                     	ds	1
  5831  0059                     savePatch@iPatchAddressHigh:	
  5832  0059                     writeDAC528@wkDacNumber:	
  5833                           ; 1 bytes @ 0x39
  5834                           
  5835                           
  5836                           ; 1 bytes @ 0x39
  5837  0059                     	ds	1
  5838  005A                     ?_loadPatch:	
  5839  005A                     savePatch@iPatchAddressLow:	
  5840                           ; 1 bytes @ 0x3A
  5841                           
  5842  005A                     loadPatch@PatchNumber:	
  5843                           ; 1 bytes @ 0x3A
  5844                           
  5845                           
  5846                           ; 2 bytes @ 0x3A
  5847  005A                     	ds	1
  5848  005B                     savePatch@pData:	
  5849                           
  5850                           ; 2 bytes @ 0x3B
  5851  005B                     	ds	1
  5852  005C                     ??_loadPatch:	
  5853                           
  5854                           ; 1 bytes @ 0x3C
  5855  005C                     	ds	1
  5856  005D                     savePatch@idx:	
  5857                           
  5858                           ; 2 bytes @ 0x3D
  5859  005D                     	ds	1
  5860  005E                     loadPatch@iPatchAddress:	
  5861                           
  5862                           ; 2 bytes @ 0x3E
  5863  005E                     	ds	1
  5864  005F                     savePatch@batchNum:	
  5865                           
  5866                           ; 2 bytes @ 0x3F
  5867  005F                     	ds	1
  5868  0060                     loadPatch@i:	
  5869                           
  5870                           ; 2 bytes @ 0x40
  5871  0060                     	ds	1
  5872  0061                     savePatch@iPatchAddress:	
  5873                           
  5874                           ; 2 bytes @ 0x41
  5875  0061                     	ds	2
  5876  0063                     ??_main:	
  5877                           
  5878                           ; 1 bytes @ 0x43
  5879  0063                     	ds	4
  5880                           
  5881                           	psect	maintext
  5882  0064                     __pmaintext:	
  5883 ;;
  5884 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  5885 ;;
  5886 ;; *************** function _main *****************
  5887 ;; Defined at:
  5888 ;;		line 250 in file "main.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;		None
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  fx              2   18[BANK1 ] int 
  5893 ;;  fx              2   14[BANK1 ] int 
  5894 ;;  dFader8bitVa    3    0        int 
  5895 ;;  faderValue      2   16[BANK1 ] int 
  5896 ;;  SaveDebounce    2   11[BANK1 ] int 
  5897 ;;  LoadDebounce    2    9[BANK1 ] int 
  5898 ;;  iLoopCounter    2    5[BANK1 ] unsigned int 
  5899 ;;  iCounter        2    1[BANK1 ] unsigned int 
  5900 ;;  iLSByte         2    0        unsigned int 
  5901 ;;  iMSByte         2    0        unsigned int 
  5902 ;;  fader8bitVal    1   13[BANK1 ] unsigned char 
  5903 ;;  POT1Value       1    8[BANK1 ] unsigned char 
  5904 ;;  POT0Value       1    7[BANK1 ] unsigned char 
  5905 ;;  prevFader8bi    1    4[BANK1 ] unsigned char 
  5906 ;;  iChangeCount    1    3[BANK1 ] unsigned char 
  5907 ;;  readStatus      1    0[BANK1 ] enum E14335
  5908 ;;  DACDataValue    1    0        unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : B1F/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;      Totals:         0       4      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;Total ram usage:       24 bytes
  5923 ;; Hardware stack levels required when called:    8
  5924 ;; This function calls:
  5925 ;;		_ADCC_GetSingleConversion
  5926 ;;		_InitPanelInChannels
  5927 ;;		_InitmvcChannels
  5928 ;;		_LED7SegDisplayValueByDigit
  5929 ;;		_LED7SegSetup
  5930 ;;		_SYSTEM_Initialize
  5931 ;;		___awtoft
  5932 ;;		___ftdiv
  5933 ;;		___fttol
  5934 ;;		___wmul
  5935 ;;		_blinkyLoop
  5936 ;;		_delay
  5937 ;;		_initDAC528
  5938 ;;		_loadPatch
  5939 ;;		_savePatch
  5940 ;;		_writeDAC528
  5941 ;; This function is called by:
  5942 ;;		Startup code after reset
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           
  5947                           ;psect for function _main
  5948  0064                     _main:	
  5949                           
  5950                           ;main.c: 252: uint16_t iCounter=0;
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5954  0064  0021               	movlb	1	; select bank1
  5955  0065  01D9               	clrf	main@iCounter^(0+128)
  5956  0066  01DA               	clrf	(main@iCounter+1)^(0+128)
  5957                           
  5958                           ;main.c: 253: uint16_t iMSByte;
  5959                           ;main.c: 254: uint16_t iLSByte;
  5960                           ;main.c: 255: const uint16_t iResetValue=100;
  5961                           ;main.c: 256: uint16_t iLoopCounter=0;
  5962  0067  01DD               	clrf	main@iLoopCounter^(0+128)
  5963  0068  01DE               	clrf	(main@iLoopCounter+1)^(0+128)
  5964                           
  5965                           ;main.c: 257: uint8_t iChangeCount=0;
  5966  0069  01DB               	clrf	main@iChangeCount^(0+128)
  5967                           
  5968                           ;main.c: 258: int faderValue;
  5969                           ;main.c: 259: uint8_t fader8bitValue;
  5970                           ;main.c: 260: uint8_t prevFader8bitValue;
  5971                           ;main.c: 261: uint8_t POT0Value;
  5972                           ;main.c: 262: uint8_t POT1Value;
  5973                           ;main.c: 263: uint8_t DACDataValue;
  5974                           ;main.c: 264: double dFader8bitValue;
  5975                           ;main.c: 265: int LoadDebounceCount=0;
  5976  006A  01E1               	clrf	main@LoadDebounceCount^(0+128)
  5977  006B  01E2               	clrf	(main@LoadDebounceCount+1)^(0+128)
  5978                           
  5979                           ;main.c: 266: int SaveDebounceCount=0;
  5980  006C  01E3               	clrf	main@SaveDebounceCount^(0+128)
  5981  006D  01E4               	clrf	(main@SaveDebounceCount+1)^(0+128)
  5982                           
  5983                           ;main.c: 268: I2C1_MESSAGE_STATUS readStatus=0;
  5984  006E  01D8               	clrf	main@readStatus^(0+128)
  5985                           
  5986                           ;main.c: 271: SYSTEM_Initialize();
  5987  006F  3189  21D0  3180   	fcall	_SYSTEM_Initialize
  5988                           
  5989                           ;main.c: 272: initDAC528();
  5990  0072  318A  223B  3180   	fcall	_initDAC528
  5991                           
  5992                           ;main.c: 273: LED7SegSetup();
  5993  0075  3189  21F4  3180   	fcall	_LED7SegSetup
  5994                           
  5995                           ;main.c: 275: InitPanelInChannels();
  5996  0078  318A  22EC  3180   	fcall	_InitPanelInChannels
  5997                           
  5998                           ;main.c: 276: InitmvcChannels();
  5999  007B  318A  2280  3180   	fcall	_InitmvcChannels
  6000                           
  6001                           ;main.c: 281: (INTCONbits.GIE = 1);
  6002  007E  178B               	bsf	11,7	;volatile
  6003                           
  6004                           ;main.c: 284: (INTCONbits.PEIE = 1);
  6005  007F  170B               	bsf	11,6	;volatile
  6006                           
  6007                           ;main.c: 295: for(int fx=0;fx<4;fx++){
  6008  0080  0021               	movlb	1	; select bank1
  6009  0081  01E6               	clrf	main@fx^(0+128)
  6010  0082  01E7               	clrf	(main@fx+1)^(0+128)
  6011  0083  0867               	movf	(main@fx+1)^(0+128),w
  6012  0084  3A80               	xorlw	128
  6013  0085  0020               	movlb	0	; select bank0
  6014  0086  00E3               	movwf	??_main
  6015  0087  3080               	movlw	128
  6016  0088  0263               	subwf	??_main,w
  6017  0089  1D03               	skipz
  6018  008A  288E               	goto	u4165
  6019  008B  3004               	movlw	4
  6020  008C  0021               	movlb	1	; select bank1
  6021  008D  0266               	subwf	main@fx^(0+128),w
  6022  008E                     u4165:	
  6023  008E  1803               	btfsc	3,0
  6024  008F  28D9               	goto	l4432
  6025  0090                     l4422:	
  6026                           
  6027                           ;main.c: 296: faderValue=ADCC_GetSingleConversion(fx);
  6028  0090  0021               	movlb	1	; select bank1
  6029  0091  0866               	movf	main@fx^(0+128),w
  6030  0092  318A  2213  3180   	fcall	_ADCC_GetSingleConversion
  6031  0095  0020               	movlb	0	; select bank0
  6032  0096  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6033  0097  0021               	movlb	1	; select bank1
  6034  0098  00E9               	movwf	(main@faderValue+1)^(0+128)
  6035  0099  0020               	movlb	0	; select bank0
  6036  009A  0820               	movf	?_ADCC_GetSingleConversion,w
  6037  009B  0021               	movlb	1	; select bank1
  6038  009C  00E8               	movwf	main@faderValue^(0+128)
  6039                           
  6040                           ;main.c: 297: PanelInChannels[fx]=255-(faderValue>>2);
  6041  009D  0869               	movf	(main@faderValue+1)^(0+128),w
  6042  009E  0020               	movlb	0	; select bank0
  6043  009F  00E4               	movwf	??_main+1
  6044  00A0  0021               	movlb	1	; select bank1
  6045  00A1  0868               	movf	main@faderValue^(0+128),w
  6046  00A2  0020               	movlb	0	; select bank0
  6047  00A3  00E3               	movwf	??_main
  6048  00A4  0D64               	rlf	??_main+1,w
  6049  00A5  0CE4               	rrf	??_main+1,f
  6050  00A6  0CE3               	rrf	??_main,f
  6051  00A7  0D64               	rlf	??_main+1,w
  6052  00A8  0CE4               	rrf	??_main+1,f
  6053  00A9  0CE3               	rrf	??_main,f
  6054  00AA  0863               	movf	??_main,w
  6055  00AB  3AFF               	xorlw	255
  6056  00AC  3E01               	addlw	1
  6057  00AD  3EFF               	addlw	255
  6058  00AE  00E5               	movwf	??_main+2
  6059  00AF  0021               	movlb	1	; select bank1
  6060  00B0  0866               	movf	main@fx^(0+128),w
  6061  00B1  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6062  00B2  0086               	movwf	6
  6063  00B3  0187               	clrf	7
  6064  00B4  0020               	movlb	0	; select bank0
  6065  00B5  0865               	movf	??_main+2,w
  6066  00B6  0081               	movwf	1
  6067                           
  6068                           ;main.c: 298: prevPanelInChannels[fx]= PanelInChannels[fx];
  6069  00B7  0021               	movlb	1	; select bank1
  6070  00B8  0866               	movf	main@fx^(0+128),w
  6071  00B9  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6072  00BA  0086               	movwf	6
  6073  00BB  0187               	clrf	7
  6074  00BC  0801               	movf	1,w
  6075  00BD  0020               	movlb	0	; select bank0
  6076  00BE  00E3               	movwf	??_main
  6077  00BF  0021               	movlb	1	; select bank1
  6078  00C0  0866               	movf	main@fx^(0+128),w
  6079  00C1  3EA0               	addlw	(low (_prevPanelInChannels| 0))& (0+255)
  6080  00C2  0086               	movwf	6
  6081  00C3  0187               	clrf	7
  6082  00C4  0020               	movlb	0	; select bank0
  6083  00C5  0863               	movf	??_main,w
  6084  00C6  0081               	movwf	1
  6085  00C7  3001               	movlw	1
  6086  00C8  0021               	movlb	1	; select bank1
  6087  00C9  07E6               	addwf	main@fx^(0+128),f
  6088  00CA  3000               	movlw	0
  6089  00CB  3DE7               	addwfc	(main@fx+1)^(0+128),f
  6090  00CC  0867               	movf	(main@fx+1)^(0+128),w
  6091  00CD  3A80               	xorlw	128
  6092  00CE  0020               	movlb	0	; select bank0
  6093  00CF  00E3               	movwf	??_main
  6094  00D0  3080               	movlw	128
  6095  00D1  0263               	subwf	??_main,w
  6096  00D2  1D03               	skipz
  6097  00D3  28D7               	goto	u4175
  6098  00D4  3004               	movlw	4
  6099  00D5  0021               	movlb	1	; select bank1
  6100  00D6  0266               	subwf	main@fx^(0+128),w
  6101  00D7                     u4175:	
  6102  00D7  1C03               	skipc
  6103  00D8  2890               	goto	l4422
  6104  00D9                     l4432:	
  6105                           
  6106                           ;main.c: 299: }
  6107                           ;main.c: 301: blinkyLoop(10);
  6108  00D9  300A               	movlw	10
  6109  00DA  0020               	movlb	0	; select bank0
  6110  00DB  00C0               	movwf	blinkyLoop@maxLoops
  6111  00DC  3000               	movlw	0
  6112  00DD  00C1               	movwf	blinkyLoop@maxLoops+1
  6113  00DE  318D  25BD  3180   	fcall	_blinkyLoop
  6114                           
  6115                           ;main.c: 306: PORTB |= 0x0F;
  6116  00E1  300F               	movlw	15
  6117  00E2  0020               	movlb	0	; select bank0
  6118  00E3  00E3               	movwf	??_main
  6119  00E4  0863               	movf	??_main,w
  6120  00E5  048D               	iorwf	13,f	;volatile
  6121                           
  6122                           ;main.c: 307: PORTC |= 0xE0;
  6123  00E6  30E0               	movlw	224
  6124  00E7  00E3               	movwf	??_main
  6125  00E8  0863               	movf	??_main,w
  6126  00E9  048E               	iorwf	14,f	;volatile
  6127                           
  6128                           ;main.c: 308: ODCONB &= 0xF0;
  6129  00EA  30F0               	movlw	240
  6130  00EB  00E3               	movwf	??_main
  6131  00EC  0863               	movf	??_main,w
  6132  00ED  003E               	movlb	30	; select bank30
  6133  00EE  05C5               	andwf	69,f	;volatile
  6134                           
  6135                           ;main.c: 309: ODCONC &= 0x1F;
  6136  00EF  301F               	movlw	31
  6137  00F0  0020               	movlb	0	; select bank0
  6138  00F1  00E3               	movwf	??_main
  6139  00F2  0863               	movf	??_main,w
  6140  00F3  003E               	movlb	30	; select bank30
  6141  00F4  05D0               	andwf	80,f	;volatile
  6142  00F5                     l4442:	
  6143                           ;main.c: 311: while (1) {
  6144                           
  6145                           
  6146                           ;main.c: 312: iLoopCounter++;
  6147  00F5  3001               	movlw	1
  6148  00F6  0021               	movlb	1	; select bank1
  6149  00F7  07DD               	addwf	main@iLoopCounter^(0+128),f
  6150  00F8  3000               	movlw	0
  6151  00F9  3DDE               	addwfc	(main@iLoopCounter+1)^(0+128),f
  6152                           
  6153                           ;main.c: 313: if (iResetValue<=iLoopCounter) iLoopCounter=0;
  6154  00FA  3028               	movlw	low (main@iResetValue| (0+32768))
  6155  00FB  0084               	movwf	4
  6156  00FC  3090               	movlw	high (main@iResetValue| (0+32768))
  6157  00FD  0085               	movwf	5
  6158  00FE  3F00               	moviw [0]fsr0
  6159  00FF  0020               	movlb	0	; select bank0
  6160  0100  00E3               	movwf	??_main
  6161  0101  3F01               	moviw [1]fsr0
  6162  0102  00E4               	movwf	??_main+1
  6163  0103  0864               	movf	??_main+1,w
  6164  0104  0021               	movlb	1	; select bank1
  6165  0105  025E               	subwf	(main@iLoopCounter+1)^(0+128),w
  6166  0106  1D03               	skipz
  6167  0107  290C               	goto	u4185
  6168  0108  0020               	movlb	0	; select bank0
  6169  0109  0863               	movf	??_main,w
  6170  010A  0021               	movlb	1	; select bank1
  6171  010B  025D               	subwf	main@iLoopCounter^(0+128),w
  6172  010C                     u4185:	
  6173  010C  1C03               	skipc
  6174  010D  2910               	goto	l523
  6175  010E  01DD               	clrf	main@iLoopCounter^(0+128)
  6176  010F  01DE               	clrf	(main@iLoopCounter+1)^(0+128)
  6177  0110                     l523:	
  6178                           
  6179                           ;main.c: 316: {
  6180                           ;main.c: 318: for(int fx=0;fx<cMixFaderCount;fx++){
  6181  0110  01EA               	clrf	main@fx_978^(0+128)
  6182  0111  01EB               	clrf	(main@fx_978+1)^(0+128)
  6183  0112  086B               	movf	(main@fx_978+1)^(0+128),w
  6184  0113  3A80               	xorlw	128
  6185  0114  0020               	movlb	0	; select bank0
  6186  0115  00E3               	movwf	??_main
  6187  0116  3080               	movlw	128
  6188  0117  0263               	subwf	??_main,w
  6189  0118  1D03               	skipz
  6190  0119  291D               	goto	u4195
  6191  011A  3004               	movlw	4
  6192  011B  0021               	movlb	1	; select bank1
  6193  011C  026A               	subwf	main@fx_978^(0+128),w
  6194  011D                     u4195:	
  6195  011D  1803               	btfsc	3,0
  6196  011E  29E4               	goto	l4476
  6197  011F                     l4452:	
  6198                           
  6199                           ;main.c: 319: faderValue=ADCC_GetSingleConversion(fx);
  6200  011F  0021               	movlb	1	; select bank1
  6201  0120  086A               	movf	main@fx_978^(0+128),w
  6202  0121  318A  2213  3180   	fcall	_ADCC_GetSingleConversion
  6203  0124  0020               	movlb	0	; select bank0
  6204  0125  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6205  0126  0021               	movlb	1	; select bank1
  6206  0127  00E9               	movwf	(main@faderValue+1)^(0+128)
  6207  0128  0020               	movlb	0	; select bank0
  6208  0129  0820               	movf	?_ADCC_GetSingleConversion,w
  6209  012A  0021               	movlb	1	; select bank1
  6210  012B  00E8               	movwf	main@faderValue^(0+128)
  6211                           
  6212                           ;main.c: 320: PanelInChannels[fx]=255-(faderValue>>2);
  6213  012C  0869               	movf	(main@faderValue+1)^(0+128),w
  6214  012D  0020               	movlb	0	; select bank0
  6215  012E  00E4               	movwf	??_main+1
  6216  012F  0021               	movlb	1	; select bank1
  6217  0130  0868               	movf	main@faderValue^(0+128),w
  6218  0131  0020               	movlb	0	; select bank0
  6219  0132  00E3               	movwf	??_main
  6220  0133  0D64               	rlf	??_main+1,w
  6221  0134  0CE4               	rrf	??_main+1,f
  6222  0135  0CE3               	rrf	??_main,f
  6223  0136  0D64               	rlf	??_main+1,w
  6224  0137  0CE4               	rrf	??_main+1,f
  6225  0138  0CE3               	rrf	??_main,f
  6226  0139  0863               	movf	??_main,w
  6227  013A  3AFF               	xorlw	255
  6228  013B  3E01               	addlw	1
  6229  013C  3EFF               	addlw	255
  6230  013D  00E5               	movwf	??_main+2
  6231  013E  0021               	movlb	1	; select bank1
  6232  013F  086A               	movf	main@fx_978^(0+128),w
  6233  0140  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6234  0141  0086               	movwf	6
  6235  0142  0187               	clrf	7
  6236  0143  0020               	movlb	0	; select bank0
  6237  0144  0865               	movf	??_main+2,w
  6238  0145  0081               	movwf	1
  6239                           
  6240                           ;main.c: 322: fader8bitValue=PanelInChannels[fx];
  6241  0146  0021               	movlb	1	; select bank1
  6242  0147  086A               	movf	main@fx_978^(0+128),w
  6243  0148  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6244  0149  0086               	movwf	6
  6245  014A  0187               	clrf	7
  6246  014B  0801               	movf	1,w
  6247  014C  0020               	movlb	0	; select bank0
  6248  014D  00E3               	movwf	??_main
  6249  014E  0863               	movf	??_main,w
  6250  014F  0021               	movlb	1	; select bank1
  6251  0150  00E5               	movwf	main@fader8bitValue^(0+128)
  6252                           
  6253                           ;main.c: 323: if( (PanelInChannels[fx]<(mvcChannels[fx]+4))
  6254                           ;main.c: 324: && (PanelInChannels[fx]>(mvcChannels[fx]-4)) ) {
  6255  0151  086A               	movf	main@fx_978^(0+128),w
  6256  0152  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6257  0153  0086               	movwf	6
  6258  0154  0187               	clrf	7
  6259  0155  0801               	movf	1,w
  6260  0156  3E04               	addlw	4
  6261  0157  0020               	movlb	0	; select bank0
  6262  0158  00E3               	movwf	??_main
  6263  0159  3000               	movlw	0
  6264  015A  1803               	skipnc
  6265  015B  3001               	movlw	1
  6266  015C  00E4               	movwf	??_main+1
  6267  015D  0021               	movlb	1	; select bank1
  6268  015E  086A               	movf	main@fx_978^(0+128),w
  6269  015F  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6270  0160  0086               	movwf	6
  6271  0161  0187               	clrf	7
  6272  0162  0020               	movlb	0	; select bank0
  6273  0163  0864               	movf	??_main+1,w
  6274  0164  3A80               	xorlw	128
  6275  0165  3C80               	sublw	128
  6276  0166  1D03               	skipz
  6277  0167  296A               	goto	u4205
  6278  0168  0863               	movf	??_main,w
  6279  0169  0201               	subwf	1,w
  6280  016A                     u4205:	
  6281  016A  1803               	skipnc
  6282  016B  2991               	goto	l526
  6283  016C  0021               	movlb	1	; select bank1
  6284  016D  086A               	movf	main@fx_978^(0+128),w
  6285  016E  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6286  016F  0086               	movwf	6
  6287  0170  0187               	clrf	7
  6288  0171  086A               	movf	main@fx_978^(0+128),w
  6289  0172  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6290  0173  0084               	movwf	4
  6291  0174  0185               	clrf	5
  6292  0175  0800               	movf	0,w
  6293  0176  3EFC               	addlw	252
  6294  0177  0020               	movlb	0	; select bank0
  6295  0178  00E3               	movwf	??_main
  6296  0179  30FF               	movlw	255
  6297  017A  1803               	skipnc
  6298  017B  3000               	movlw	0
  6299  017C  00E4               	movwf	??_main+1
  6300  017D  0864               	movf	??_main+1,w
  6301  017E  3A80               	xorlw	128
  6302  017F  00E5               	movwf	??_main+2
  6303  0180  3080               	movlw	128
  6304  0181  0265               	subwf	??_main+2,w
  6305  0182  1D03               	skipz
  6306  0183  2986               	goto	u4215
  6307  0184  0801               	movf	1,w
  6308  0185  0263               	subwf	??_main,w
  6309  0186                     u4215:	
  6310  0186  1803               	skipnc
  6311  0187  2991               	goto	l526
  6312                           
  6313                           ;main.c: 325: faderActiveFlag[fx]=1;
  6314  0188  0021               	movlb	1	; select bank1
  6315  0189  086A               	movf	main@fx_978^(0+128),w
  6316  018A  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  6317  018B  0086               	movwf	6
  6318  018C  0187               	clrf	7
  6319  018D  0181               	clrf	1
  6320  018E  0A81               	incf	1,f
  6321                           
  6322                           ;main.c: 326: LATB |= 0b00000010 ;
  6323  018F  0020               	movlb	0	; select bank0
  6324  0190  1497               	bsf	23,1	;volatile
  6325  0191                     l526:	
  6326                           
  6327                           ;main.c: 327: }
  6328                           ;main.c: 328: if(faderActiveFlag[fx]>0){
  6329  0191  0021               	movlb	1	; select bank1
  6330  0192  086A               	movf	main@fx_978^(0+128),w
  6331  0193  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  6332  0194  0086               	movwf	6
  6333  0195  0187               	clrf	7
  6334  0196  0801               	movf	1,w
  6335  0197  1903               	btfsc	3,2
  6336  0198  29BB               	goto	l4470
  6337                           
  6338                           ;main.c: 329: mvcChannels[fx]=PanelInChannels[fx];
  6339  0199  086A               	movf	main@fx_978^(0+128),w
  6340  019A  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6341  019B  0086               	movwf	6
  6342  019C  0187               	clrf	7
  6343  019D  0801               	movf	1,w
  6344  019E  0020               	movlb	0	; select bank0
  6345  019F  00E3               	movwf	??_main
  6346  01A0  0021               	movlb	1	; select bank1
  6347  01A1  086A               	movf	main@fx_978^(0+128),w
  6348  01A2  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6349  01A3  0086               	movwf	6
  6350  01A4  0187               	clrf	7
  6351  01A5  0020               	movlb	0	; select bank0
  6352  01A6  0863               	movf	??_main,w
  6353  01A7  0081               	movwf	1
  6354                           
  6355                           ;main.c: 330: writeDAC528(fx+4,fader8bitValue);
  6356  01A8  0021               	movlb	1	; select bank1
  6357  01A9  086A               	movf	main@fx_978^(0+128),w
  6358  01AA  3E04               	addlw	4
  6359  01AB  0020               	movlb	0	; select bank0
  6360  01AC  00D5               	movwf	writeDAC528@dacNumber
  6361  01AD  3000               	movlw	0
  6362  01AE  0021               	movlb	1	; select bank1
  6363  01AF  3D6B               	addwfc	(main@fx_978+1)^(0+128),w
  6364  01B0  0020               	movlb	0	; select bank0
  6365  01B1  00D6               	movwf	writeDAC528@dacNumber+1
  6366  01B2  0021               	movlb	1	; select bank1
  6367  01B3  0865               	movf	main@fader8bitValue^(0+128),w
  6368  01B4  0020               	movlb	0	; select bank0
  6369  01B5  00E3               	movwf	??_main
  6370  01B6  0863               	movf	??_main,w
  6371  01B7  00D7               	movwf	writeDAC528@dacData
  6372  01B8  318B  234C  3180   	fcall	_writeDAC528
  6373  01BB                     l4470:	
  6374                           
  6375                           ;main.c: 331: }
  6376                           ;main.c: 332: prevPanelInChannels[fx]=PanelInChannels[fx];
  6377  01BB  0021               	movlb	1	; select bank1
  6378  01BC  086A               	movf	main@fx_978^(0+128),w
  6379  01BD  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6380  01BE  0086               	movwf	6
  6381  01BF  0187               	clrf	7
  6382  01C0  0801               	movf	1,w
  6383  01C1  0020               	movlb	0	; select bank0
  6384  01C2  00E3               	movwf	??_main
  6385  01C3  0021               	movlb	1	; select bank1
  6386  01C4  086A               	movf	main@fx_978^(0+128),w
  6387  01C5  3EA0               	addlw	(low (_prevPanelInChannels| 0))& (0+255)
  6388  01C6  0086               	movwf	6
  6389  01C7  0187               	clrf	7
  6390  01C8  0020               	movlb	0	; select bank0
  6391  01C9  0863               	movf	??_main,w
  6392  01CA  0081               	movwf	1
  6393                           
  6394                           ;main.c: 334: delay(10);
  6395  01CB  300A               	movlw	10
  6396  01CC  00A6               	movwf	delay@delaytime
  6397  01CD  3000               	movlw	0
  6398  01CE  00A7               	movwf	delay@delaytime+1
  6399  01CF  318C  2497  3180   	fcall	_delay
  6400  01D2  3001               	movlw	1
  6401  01D3  0021               	movlb	1	; select bank1
  6402  01D4  07EA               	addwf	main@fx_978^(0+128),f
  6403  01D5  3000               	movlw	0
  6404  01D6  3DEB               	addwfc	(main@fx_978+1)^(0+128),f
  6405  01D7  086B               	movf	(main@fx_978+1)^(0+128),w
  6406  01D8  3A80               	xorlw	128
  6407  01D9  0020               	movlb	0	; select bank0
  6408  01DA  00E3               	movwf	??_main
  6409  01DB  3080               	movlw	128
  6410  01DC  0263               	subwf	??_main,w
  6411  01DD  1D03               	skipz
  6412  01DE  29E2               	goto	u4235
  6413  01DF  3004               	movlw	4
  6414  01E0  0021               	movlb	1	; select bank1
  6415  01E1  026A               	subwf	main@fx_978^(0+128),w
  6416  01E2                     u4235:	
  6417  01E2  1C03               	skipc
  6418  01E3  291F               	goto	l4452
  6419  01E4                     l4476:	
  6420                           
  6421                           ;main.c: 335: }
  6422                           ;main.c: 338: delay(10);
  6423  01E4  300A               	movlw	10
  6424  01E5  0020               	movlb	0	; select bank0
  6425  01E6  00A6               	movwf	delay@delaytime
  6426  01E7  3000               	movlw	0
  6427  01E8  00A7               	movwf	delay@delaytime+1
  6428  01E9  318C  2497  3180   	fcall	_delay
  6429                           
  6430                           ;main.c: 339: faderValue=ADCC_GetSingleConversion(POT0);
  6431  01EC  3004               	movlw	4
  6432  01ED  318A  2213  3180   	fcall	_ADCC_GetSingleConversion
  6433  01F0  0020               	movlb	0	; select bank0
  6434  01F1  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6435  01F2  0021               	movlb	1	; select bank1
  6436  01F3  00E9               	movwf	(main@faderValue+1)^(0+128)
  6437  01F4  0020               	movlb	0	; select bank0
  6438  01F5  0820               	movf	?_ADCC_GetSingleConversion,w
  6439  01F6  0021               	movlb	1	; select bank1
  6440  01F7  00E8               	movwf	main@faderValue^(0+128)
  6441                           
  6442                           ;main.c: 340: faderValue=1023-faderValue;
  6443  01F8  0968               	comf	main@faderValue^(0+128),w
  6444  01F9  0020               	movlb	0	; select bank0
  6445  01FA  00E3               	movwf	??_main
  6446  01FB  0021               	movlb	1	; select bank1
  6447  01FC  0969               	comf	(main@faderValue+1)^(0+128),w
  6448  01FD  0020               	movlb	0	; select bank0
  6449  01FE  00E4               	movwf	??_main+1
  6450  01FF  0AE3               	incf	??_main,f
  6451  0200  1903               	skipnz
  6452  0201  0AE4               	incf	??_main+1,f
  6453  0202  0863               	movf	??_main,w
  6454  0203  3EFF               	addlw	255
  6455  0204  0021               	movlb	1	; select bank1
  6456  0205  00E8               	movwf	main@faderValue^(0+128)
  6457  0206  3003               	movlw	3
  6458  0207  0020               	movlb	0	; select bank0
  6459  0208  3D64               	addwfc	??_main+1,w
  6460  0209  0021               	movlb	1	; select bank1
  6461  020A  00E9               	movwf	(main@faderValue+1)^(0+128)
  6462                           
  6463                           ;main.c: 342: POT0Value=faderValue/102.3;
  6464  020B  0869               	movf	(main@faderValue+1)^(0+128),w
  6465  020C  0020               	movlb	0	; select bank0
  6466  020D  00A9               	movwf	___awtoft@c+1
  6467  020E  0021               	movlb	1	; select bank1
  6468  020F  0868               	movf	main@faderValue^(0+128),w
  6469  0210  0020               	movlb	0	; select bank0
  6470  0211  00A8               	movwf	___awtoft@c
  6471  0212  318B  232A  3180   	fcall	___awtoft
  6472  0215  0020               	movlb	0	; select bank0
  6473  0216  0828               	movf	?___awtoft,w
  6474  0217  00B1               	movwf	___ftdiv@f1
  6475  0218  0829               	movf	?___awtoft+1,w
  6476  0219  00B2               	movwf	___ftdiv@f1+1
  6477  021A  082A               	movf	?___awtoft+2,w
  6478  021B  00B3               	movwf	___ftdiv@f1+2
  6479  021C  309A               	movlw	154
  6480  021D  00AE               	movwf	___ftdiv@f2
  6481  021E  30CC               	movlw	204
  6482  021F  00AF               	movwf	___ftdiv@f2+1
  6483  0220  3042               	movlw	66
  6484  0221  00B0               	movwf	___ftdiv@f2+2
  6485  0222  3186  26EA  3180   	fcall	___ftdiv
  6486  0225  0020               	movlb	0	; select bank0
  6487  0226  082E               	movf	?___ftdiv,w
  6488  0227  00BE               	movwf	___fttol@f1
  6489  0228  082F               	movf	?___ftdiv+1,w
  6490  0229  00BF               	movwf	___fttol@f1+1
  6491  022A  0830               	movf	?___ftdiv+2,w
  6492  022B  00C0               	movwf	___fttol@f1+2
  6493  022C  318E  2640  3180   	fcall	___fttol
  6494  022F  0020               	movlb	0	; select bank0
  6495  0230  083E               	movf	?___fttol,w
  6496  0231  00E3               	movwf	??_main
  6497  0232  0863               	movf	??_main,w
  6498  0233  0021               	movlb	1	; select bank1
  6499  0234  00DF               	movwf	main@POT0Value^(0+128)
  6500                           
  6501                           ;main.c: 343: delay(10);
  6502  0235  300A               	movlw	10
  6503  0236  0020               	movlb	0	; select bank0
  6504  0237  00A6               	movwf	delay@delaytime
  6505  0238  3000               	movlw	0
  6506  0239  00A7               	movwf	delay@delaytime+1
  6507  023A  318C  2497  3180   	fcall	_delay
  6508                           
  6509                           ;main.c: 344: faderValue=ADCC_GetSingleConversion(POT1);
  6510  023D  3005               	movlw	5
  6511  023E  318A  2213  3180   	fcall	_ADCC_GetSingleConversion
  6512  0241  0020               	movlb	0	; select bank0
  6513  0242  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6514  0243  0021               	movlb	1	; select bank1
  6515  0244  00E9               	movwf	(main@faderValue+1)^(0+128)
  6516  0245  0020               	movlb	0	; select bank0
  6517  0246  0820               	movf	?_ADCC_GetSingleConversion,w
  6518  0247  0021               	movlb	1	; select bank1
  6519  0248  00E8               	movwf	main@faderValue^(0+128)
  6520                           
  6521                           ;main.c: 345: faderValue=1023-faderValue;
  6522  0249  0968               	comf	main@faderValue^(0+128),w
  6523  024A  0020               	movlb	0	; select bank0
  6524  024B  00E3               	movwf	??_main
  6525  024C  0021               	movlb	1	; select bank1
  6526  024D  0969               	comf	(main@faderValue+1)^(0+128),w
  6527  024E  0020               	movlb	0	; select bank0
  6528  024F  00E4               	movwf	??_main+1
  6529  0250  0AE3               	incf	??_main,f
  6530  0251  1903               	skipnz
  6531  0252  0AE4               	incf	??_main+1,f
  6532  0253  0863               	movf	??_main,w
  6533  0254  3EFF               	addlw	255
  6534  0255  0021               	movlb	1	; select bank1
  6535  0256  00E8               	movwf	main@faderValue^(0+128)
  6536  0257  3003               	movlw	3
  6537  0258  0020               	movlb	0	; select bank0
  6538  0259  3D64               	addwfc	??_main+1,w
  6539  025A  0021               	movlb	1	; select bank1
  6540  025B  00E9               	movwf	(main@faderValue+1)^(0+128)
  6541                           
  6542                           ;main.c: 346: POT1Value=faderValue/102.3;
  6543  025C  0869               	movf	(main@faderValue+1)^(0+128),w
  6544  025D  0020               	movlb	0	; select bank0
  6545  025E  00A9               	movwf	___awtoft@c+1
  6546  025F  0021               	movlb	1	; select bank1
  6547  0260  0868               	movf	main@faderValue^(0+128),w
  6548  0261  0020               	movlb	0	; select bank0
  6549  0262  00A8               	movwf	___awtoft@c
  6550  0263  318B  232A  3180   	fcall	___awtoft
  6551  0266  0020               	movlb	0	; select bank0
  6552  0267  0828               	movf	?___awtoft,w
  6553  0268  00B1               	movwf	___ftdiv@f1
  6554  0269  0829               	movf	?___awtoft+1,w
  6555  026A  00B2               	movwf	___ftdiv@f1+1
  6556  026B  082A               	movf	?___awtoft+2,w
  6557  026C  00B3               	movwf	___ftdiv@f1+2
  6558  026D  309A               	movlw	154
  6559  026E  00AE               	movwf	___ftdiv@f2
  6560  026F  30CC               	movlw	204
  6561  0270  00AF               	movwf	___ftdiv@f2+1
  6562  0271  3042               	movlw	66
  6563  0272  00B0               	movwf	___ftdiv@f2+2
  6564  0273  3186  26EA  3180   	fcall	___ftdiv
  6565  0276  0020               	movlb	0	; select bank0
  6566  0277  082E               	movf	?___ftdiv,w
  6567  0278  00BE               	movwf	___fttol@f1
  6568  0279  082F               	movf	?___ftdiv+1,w
  6569  027A  00BF               	movwf	___fttol@f1+1
  6570  027B  0830               	movf	?___ftdiv+2,w
  6571  027C  00C0               	movwf	___fttol@f1+2
  6572  027D  318E  2640  3180   	fcall	___fttol
  6573  0280  0020               	movlb	0	; select bank0
  6574  0281  083E               	movf	?___fttol,w
  6575  0282  00E3               	movwf	??_main
  6576  0283  0863               	movf	??_main,w
  6577  0284  0021               	movlb	1	; select bank1
  6578  0285  00E0               	movwf	main@POT1Value^(0+128)
  6579                           
  6580                           ;main.c: 347: }
  6581                           ;main.c: 410: if (prevFader8bitValue!=fader8bitValue) {
  6582  0286  085C               	movf	main@prevFader8bitValue^(0+128),w
  6583  0287  0665               	xorwf	main@fader8bitValue^(0+128),w
  6584  0288  1903               	skipnz
  6585  0289  2A90               	goto	l4494
  6586                           
  6587                           ;main.c: 411: iChangeCount++;
  6588  028A  3001               	movlw	1
  6589  028B  0020               	movlb	0	; select bank0
  6590  028C  00E3               	movwf	??_main
  6591  028D  0863               	movf	??_main,w
  6592  028E  0021               	movlb	1	; select bank1
  6593  028F  07DB               	addwf	main@iChangeCount^(0+128),f
  6594  0290                     l4494:	
  6595                           
  6596                           ;main.c: 413: }
  6597                           ;main.c: 414: prevFader8bitValue=fader8bitValue;
  6598  0290  0865               	movf	main@fader8bitValue^(0+128),w
  6599  0291  0020               	movlb	0	; select bank0
  6600  0292  00E3               	movwf	??_main
  6601  0293  0863               	movf	??_main,w
  6602  0294  0021               	movlb	1	; select bank1
  6603  0295  00DC               	movwf	main@prevFader8bitValue^(0+128)
  6604                           
  6605                           ;main.c: 417: iCounter++;
  6606  0296  3001               	movlw	1
  6607  0297  07D9               	addwf	main@iCounter^(0+128),f
  6608  0298  3000               	movlw	0
  6609  0299  3DDA               	addwfc	(main@iCounter+1)^(0+128),f
  6610                           
  6611                           ;main.c: 418: if (fader8bitValue<252)
  6612  029A  30FC               	movlw	252
  6613  029B  0265               	subwf	main@fader8bitValue^(0+128),w
  6614  029C  1803               	skipnc
  6615  029D  2AB0               	goto	l4502
  6616                           
  6617                           ;main.c: 419: delay(1*(255-fader8bitValue));
  6618  029E  0865               	movf	main@fader8bitValue^(0+128),w
  6619  029F  0020               	movlb	0	; select bank0
  6620  02A0  00E3               	movwf	??_main
  6621  02A1  01E4               	clrf	??_main+1
  6622  02A2  09E3               	comf	??_main,f
  6623  02A3  09E4               	comf	??_main+1,f
  6624  02A4  0AE3               	incf	??_main,f
  6625  02A5  1903               	skipnz
  6626  02A6  0AE4               	incf	??_main+1,f
  6627  02A7  0863               	movf	??_main,w
  6628  02A8  3EFF               	addlw	255
  6629  02A9  00A6               	movwf	delay@delaytime
  6630  02AA  3000               	movlw	0
  6631  02AB  3D64               	addwfc	??_main+1,w
  6632  02AC  00A7               	movwf	delay@delaytime+1
  6633  02AD  318C  2497  3180   	fcall	_delay
  6634  02B0                     l4502:	
  6635                           
  6636                           ;main.c: 425: mvcPatchNumber=(POT1Value*10)+POT0Value;
  6637  02B0  0021               	movlb	1	; select bank1
  6638  02B1  085F               	movf	main@POT0Value^(0+128),w
  6639  02B2  0020               	movlb	0	; select bank0
  6640  02B3  00E3               	movwf	??_main
  6641  02B4  01E4               	clrf	??_main+1
  6642  02B5  0021               	movlb	1	; select bank1
  6643  02B6  0860               	movf	main@POT1Value^(0+128),w
  6644  02B7  0020               	movlb	0	; select bank0
  6645  02B8  00E5               	movwf	??_main+2
  6646  02B9  01E6               	clrf	??_main+3
  6647  02BA  0865               	movf	??_main+2,w
  6648  02BB  00A0               	movwf	___wmul@multiplier
  6649  02BC  0866               	movf	??_main+3,w
  6650  02BD  00A1               	movwf	___wmul@multiplier+1
  6651  02BE  300A               	movlw	10
  6652  02BF  00A2               	movwf	___wmul@multiplicand
  6653  02C0  3000               	movlw	0
  6654  02C1  00A3               	movwf	___wmul@multiplicand+1
  6655  02C2  318A  22B4  3180   	fcall	___wmul
  6656  02C5  0020               	movlb	0	; select bank0
  6657  02C6  0863               	movf	??_main,w
  6658  02C7  0720               	addwf	?___wmul,w
  6659  02C8  0021               	movlb	1	; select bank1
  6660  02C9  00B9               	movwf	_mvcPatchNumber^(0+128)
  6661  02CA  0020               	movlb	0	; select bank0
  6662  02CB  0864               	movf	??_main+1,w
  6663  02CC  3D21               	addwfc	?___wmul+1,w
  6664  02CD  0021               	movlb	1	; select bank1
  6665  02CE  00BA               	movwf	(_mvcPatchNumber+1)^(0+128)
  6666                           
  6667                           ;main.c: 426: LED7SegDisplayValueByDigit(POT1Value,POT0Value);
  6668  02CF  0860               	movf	main@POT1Value^(0+128),w
  6669  02D0  0020               	movlb	0	; select bank0
  6670  02D1  00E3               	movwf	??_main
  6671  02D2  01E4               	clrf	??_main+1
  6672  02D3  0863               	movf	??_main,w
  6673  02D4  00B4               	movwf	LED7SegDisplayValueByDigit@iTensDigit
  6674  02D5  0864               	movf	??_main+1,w
  6675  02D6  00B5               	movwf	LED7SegDisplayValueByDigit@iTensDigit+1
  6676  02D7  0021               	movlb	1	; select bank1
  6677  02D8  085F               	movf	main@POT0Value^(0+128),w
  6678  02D9  0020               	movlb	0	; select bank0
  6679  02DA  00E5               	movwf	??_main+2
  6680  02DB  01E6               	clrf	??_main+3
  6681  02DC  0865               	movf	??_main+2,w
  6682  02DD  00B6               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit
  6683  02DE  0866               	movf	??_main+3,w
  6684  02DF  00B7               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit+1
  6685  02E0  318B  2399  3180   	fcall	_LED7SegDisplayValueByDigit
  6686                           
  6687                           ;main.c: 431: if (PORTBbits.RB4 == 0){
  6688  02E3  0020               	movlb	0	; select bank0
  6689  02E4  1A0D               	btfsc	13,4	;volatile
  6690  02E5  2B1B               	goto	l4518
  6691                           
  6692                           ;main.c: 433: LoadDebounceCount++;
  6693  02E6  3001               	movlw	1
  6694  02E7  0021               	movlb	1	; select bank1
  6695  02E8  07E1               	addwf	main@LoadDebounceCount^(0+128),f
  6696  02E9  3000               	movlw	0
  6697  02EA  3DE2               	addwfc	(main@LoadDebounceCount+1)^(0+128),f
  6698                           
  6699                           ;main.c: 434: if(5<LoadDebounceCount) {
  6700  02EB  0862               	movf	(main@LoadDebounceCount+1)^(0+128),w
  6701  02EC  3A80               	xorlw	128
  6702  02ED  0020               	movlb	0	; select bank0
  6703  02EE  00E3               	movwf	??_main
  6704  02EF  3080               	movlw	128
  6705  02F0  0263               	subwf	??_main,w
  6706  02F1  1D03               	skipz
  6707  02F2  2AF6               	goto	u4275
  6708  02F3  3006               	movlw	6
  6709  02F4  0021               	movlb	1	; select bank1
  6710  02F5  0261               	subwf	main@LoadDebounceCount^(0+128),w
  6711  02F6                     u4275:	
  6712  02F6  1C03               	skipc
  6713  02F7  2B2E               	goto	l4524
  6714                           
  6715                           ;main.c: 435: LATB &= 0b10011110 ;
  6716  02F8  309E               	movlw	158
  6717  02F9  0020               	movlb	0	; select bank0
  6718  02FA  00E3               	movwf	??_main
  6719  02FB  0863               	movf	??_main,w
  6720  02FC  0597               	andwf	23,f	;volatile
  6721                           
  6722                           ;main.c: 437: loadPatch(mvcPatchNumber);
  6723  02FD  0021               	movlb	1	; select bank1
  6724  02FE  083A               	movf	(_mvcPatchNumber+1)^(0+128),w
  6725  02FF  0020               	movlb	0	; select bank0
  6726  0300  00DB               	movwf	loadPatch@PatchNumber+1
  6727  0301  0021               	movlb	1	; select bank1
  6728  0302  0839               	movf	_mvcPatchNumber^(0+128),w
  6729  0303  0020               	movlb	0	; select bank0
  6730  0304  00DA               	movwf	loadPatch@PatchNumber
  6731  0305  318C  2411  3180   	fcall	_loadPatch
  6732                           
  6733                           ;main.c: 439: LoadDebounceCount=1;
  6734  0308  3001               	movlw	1
  6735  0309  0021               	movlb	1	; select bank1
  6736  030A  00E1               	movwf	main@LoadDebounceCount^(0+128)
  6737  030B  3000               	movlw	0
  6738  030C  00E2               	movwf	(main@LoadDebounceCount^(0+128)+1)
  6739                           
  6740                           ;main.c: 440: _delay((unsigned long)((500)*(32000000/4000.0)));
  6741  030D  3015               	movlw	21
  6742  030E  0020               	movlb	0	; select bank0
  6743  030F  00E4               	movwf	??_main+1
  6744  0310  304B               	movlw	75
  6745  0311  00E3               	movwf	??_main
  6746  0312  30BE               	movlw	190
  6747  0313                     u4407:	
  6748  0313  0B89               	decfsz	9,f
  6749  0314  2B13               	goto	u4407
  6750  0315  0BE3               	decfsz	??_main,f
  6751  0316  2B13               	goto	u4407
  6752  0317  0BE4               	decfsz	??_main+1,f
  6753  0318  2B13               	goto	u4407
  6754  0319  0000               	nop
  6755                           
  6756                           ;main.c: 441: }
  6757                           ;main.c: 442: }else{
  6758  031A  2B2E               	goto	l4524
  6759  031B                     l4518:	
  6760                           
  6761                           ;main.c: 443: if(0<LoadDebounceCount){
  6762  031B  0021               	movlb	1	; select bank1
  6763  031C  0862               	movf	(main@LoadDebounceCount+1)^(0+128),w
  6764  031D  3A80               	xorlw	128
  6765  031E  0020               	movlb	0	; select bank0
  6766  031F  00E3               	movwf	??_main
  6767  0320  3080               	movlw	128
  6768  0321  0263               	subwf	??_main,w
  6769  0322  1D03               	skipz
  6770  0323  2B27               	goto	u4285
  6771  0324  3001               	movlw	1
  6772  0325  0021               	movlb	1	; select bank1
  6773  0326  0261               	subwf	main@LoadDebounceCount^(0+128),w
  6774  0327                     u4285:	
  6775  0327  1C03               	skipc
  6776  0328  2B2E               	goto	l4524
  6777                           
  6778                           ;main.c: 444: LoadDebounceCount=0;
  6779  0329  0021               	movlb	1	; select bank1
  6780  032A  01E1               	clrf	main@LoadDebounceCount^(0+128)
  6781  032B  01E2               	clrf	(main@LoadDebounceCount+1)^(0+128)
  6782                           
  6783                           ;main.c: 445: LATB |= 0b00000001 ;
  6784  032C  0020               	movlb	0	; select bank0
  6785  032D  1417               	bsf	23,0	;volatile
  6786  032E                     l4524:	
  6787                           
  6788                           ;main.c: 446: }
  6789                           ;main.c: 447: }
  6790                           ;main.c: 448: if (PORTBbits.RB5 == 0){
  6791  032E  0020               	movlb	0	; select bank0
  6792  032F  1A8D               	btfsc	13,5	;volatile
  6793  0330  2B66               	goto	l4536
  6794                           
  6795                           ;main.c: 450: SaveDebounceCount++;
  6796  0331  3001               	movlw	1
  6797  0332  0021               	movlb	1	; select bank1
  6798  0333  07E3               	addwf	main@SaveDebounceCount^(0+128),f
  6799  0334  3000               	movlw	0
  6800  0335  3DE4               	addwfc	(main@SaveDebounceCount+1)^(0+128),f
  6801                           
  6802                           ;main.c: 451: if(5<SaveDebounceCount) {
  6803  0336  0864               	movf	(main@SaveDebounceCount+1)^(0+128),w
  6804  0337  3A80               	xorlw	128
  6805  0338  0020               	movlb	0	; select bank0
  6806  0339  00E3               	movwf	??_main
  6807  033A  3080               	movlw	128
  6808  033B  0263               	subwf	??_main,w
  6809  033C  1D03               	skipz
  6810  033D  2B41               	goto	u4305
  6811  033E  3006               	movlw	6
  6812  033F  0021               	movlb	1	; select bank1
  6813  0340  0263               	subwf	main@SaveDebounceCount^(0+128),w
  6814  0341                     u4305:	
  6815  0341  1C03               	skipc
  6816  0342  28F5               	goto	l4442
  6817                           
  6818                           ;main.c: 452: LATB &= 0b10011101 ;
  6819  0343  309D               	movlw	157
  6820  0344  0020               	movlb	0	; select bank0
  6821  0345  00E3               	movwf	??_main
  6822  0346  0863               	movf	??_main,w
  6823  0347  0597               	andwf	23,f	;volatile
  6824                           
  6825                           ;main.c: 471: savePatch(mvcPatchNumber);
  6826  0348  0021               	movlb	1	; select bank1
  6827  0349  083A               	movf	(_mvcPatchNumber+1)^(0+128),w
  6828  034A  0020               	movlb	0	; select bank0
  6829  034B  00D5               	movwf	savePatch@PatchNumber+1
  6830  034C  0021               	movlb	1	; select bank1
  6831  034D  0839               	movf	_mvcPatchNumber^(0+128),w
  6832  034E  0020               	movlb	0	; select bank0
  6833  034F  00D4               	movwf	savePatch@PatchNumber
  6834  0350  318D  2544  3180   	fcall	_savePatch
  6835                           
  6836                           ;main.c: 476: SaveDebounceCount=1;
  6837  0353  3001               	movlw	1
  6838  0354  0021               	movlb	1	; select bank1
  6839  0355  00E3               	movwf	main@SaveDebounceCount^(0+128)
  6840  0356  3000               	movlw	0
  6841  0357  00E4               	movwf	(main@SaveDebounceCount^(0+128)+1)
  6842                           
  6843                           ;main.c: 477: _delay((unsigned long)((500)*(32000000/4000.0)));
  6844  0358  3015               	movlw	21
  6845  0359  0020               	movlb	0	; select bank0
  6846  035A  00E4               	movwf	??_main+1
  6847  035B  304B               	movlw	75
  6848  035C  00E3               	movwf	??_main
  6849  035D  30BE               	movlw	190
  6850  035E                     u4417:	
  6851  035E  0B89               	decfsz	9,f
  6852  035F  2B5E               	goto	u4417
  6853  0360  0BE3               	decfsz	??_main,f
  6854  0361  2B5E               	goto	u4417
  6855  0362  0BE4               	decfsz	??_main+1,f
  6856  0363  2B5E               	goto	u4417
  6857  0364  0000               	nop
  6858                           
  6859                           ;main.c: 478: }
  6860                           ;main.c: 479: }else{
  6861  0365  28F5               	goto	l4442
  6862  0366                     l4536:	
  6863                           
  6864                           ;main.c: 480: if(0<SaveDebounceCount){
  6865  0366  0021               	movlb	1	; select bank1
  6866  0367  0864               	movf	(main@SaveDebounceCount+1)^(0+128),w
  6867  0368  3A80               	xorlw	128
  6868  0369  0020               	movlb	0	; select bank0
  6869  036A  00E3               	movwf	??_main
  6870  036B  3080               	movlw	128
  6871  036C  0263               	subwf	??_main,w
  6872  036D  1D03               	skipz
  6873  036E  2B72               	goto	u4315
  6874  036F  3001               	movlw	1
  6875  0370  0021               	movlb	1	; select bank1
  6876  0371  0263               	subwf	main@SaveDebounceCount^(0+128),w
  6877  0372                     u4315:	
  6878  0372  1C03               	skipc
  6879  0373  28F5               	goto	l4442
  6880                           
  6881                           ;main.c: 481: SaveDebounceCount=0;
  6882  0374  0021               	movlb	1	; select bank1
  6883  0375  01E3               	clrf	main@SaveDebounceCount^(0+128)
  6884  0376  01E4               	clrf	(main@SaveDebounceCount+1)^(0+128)
  6885                           
  6886                           ;main.c: 482: LATB |= 0b00000010;
  6887  0377  0020               	movlb	0	; select bank0
  6888  0378  1497               	bsf	23,1	;volatile
  6889  0379  28F5               	goto	l4442
  6890  037A                     __end_of_main:	
  6891                           
  6892                           	psect	text1
  6893  0D44                     __ptext1:	
  6894 ;; *************** function _savePatch *****************
  6895 ;; Defined at:
  6896 ;;		line 816 in file "main.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  PatchNumber     2   52[BANK0 ] int 
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;  batchNum        2   63[BANK0 ] int 
  6901 ;;  iPatchAddres    2   65[BANK0 ] int 
  6902 ;;  idx             2   61[BANK0 ] int 
  6903 ;;  pData           2   59[BANK0 ] PTR unsigned char 
  6904 ;;		 -> aPatchMemory(128), 
  6905 ;;  iPatchAddres    1   58[BANK0 ] unsigned char 
  6906 ;;  iPatchAddres    1   57[BANK0 ] unsigned char 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6916 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6918 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6919 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;Total ram usage:       15 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    6
  6923 ;; This function calls:
  6924 ;;		_MYI2C_Write16EEPROMBytes
  6925 ;;		_marshallPatchMemory
  6926 ;; This function is called by:
  6927 ;;		_main
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           
  6932                           ;psect for function _savePatch
  6933  0D44                     _savePatch:	
  6934                           
  6935                           ;main.c: 817: int iPatchAddress=PatchNumber*cPatchSize;
  6936                           
  6937                           ;incstack = 0
  6938                           ; Regs used in _savePatch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6939  0D44  0020               	movlb	0	; select bank0
  6940  0D45  0855               	movf	savePatch@PatchNumber+1,w
  6941  0D46  00D7               	movwf	??_savePatch+1
  6942  0D47  0854               	movf	savePatch@PatchNumber,w
  6943  0D48  00D6               	movwf	??_savePatch
  6944  0D49  3007               	movlw	7
  6945  0D4A                     u3095:	
  6946  0D4A  35D6               	lslf	??_savePatch,f
  6947  0D4B  0DD7               	rlf	??_savePatch+1,f
  6948  0D4C  0B89               	decfsz	9,f
  6949  0D4D  2D4A               	goto	u3095
  6950  0D4E  0856               	movf	??_savePatch,w
  6951  0D4F  00E1               	movwf	savePatch@iPatchAddress
  6952  0D50  0857               	movf	??_savePatch+1,w
  6953  0D51  00E2               	movwf	savePatch@iPatchAddress+1
  6954                           
  6955                           ;main.c: 818: uint8_t iPatchAddressHigh=iPatchAddress>>8;
  6956  0D52  0862               	movf	savePatch@iPatchAddress+1,w
  6957  0D53  00D6               	movwf	??_savePatch
  6958  0D54  0856               	movf	??_savePatch,w
  6959  0D55  00D9               	movwf	savePatch@iPatchAddressHigh
  6960                           
  6961                           ;main.c: 819: uint8_t iPatchAddressLow=iPatchAddress&0xFF;
  6962  0D56  0861               	movf	savePatch@iPatchAddress,w
  6963  0D57  00D6               	movwf	??_savePatch
  6964  0D58  0856               	movf	??_savePatch,w
  6965  0D59  00DA               	movwf	savePatch@iPatchAddressLow
  6966                           
  6967                           ;main.c: 822: marshallPatchMemory(mvcChannels,dualADSRdata0,dualADSRdata1);
  6968  0D5A  303C               	movlw	(low (_dualADSRdata0| (0+256)))& (0+255)
  6969  0D5B  00D6               	movwf	??_savePatch
  6970  0D5C  0856               	movf	??_savePatch,w
  6971  0D5D  00A0               	movwf	marshallPatchMemory@dualADSRdata0
  6972  0D5E  3034               	movlw	(low (_dualADSRdata1| (0+256)))& (0+255)
  6973  0D5F  00D7               	movwf	??_savePatch+1
  6974  0D60  0857               	movf	??_savePatch+1,w
  6975  0D61  00A1               	movwf	marshallPatchMemory@dualADSRdata1
  6976  0D62  30C9               	movlw	(low (_mvcChannels| 0))& (0+255)
  6977  0D63  3184  24B5  318D   	fcall	_marshallPatchMemory
  6978                           
  6979                           ;main.c: 825: uint8_t *pData;
  6980                           ;main.c: 826: int idx;
  6981                           ;main.c: 829: for(int batchNum=0;(batchNum*ciBatchSize)<cPatchSize;batchNum++){
  6982  0D66  0020               	movlb	0	; select bank0
  6983  0D67  01DF               	clrf	savePatch@batchNum
  6984  0D68  01E0               	clrf	savePatch@batchNum+1
  6985  0D69                     l3604:	
  6986  0D69  0860               	movf	savePatch@batchNum+1,w
  6987  0D6A  00D7               	movwf	??_savePatch+1
  6988  0D6B  085F               	movf	savePatch@batchNum,w
  6989  0D6C  00D6               	movwf	??_savePatch
  6990  0D6D  0ED6               	swapf	??_savePatch,f
  6991  0D6E  0ED7               	swapf	??_savePatch+1,f
  6992  0D6F  30F0               	movlw	240
  6993  0D70  05D7               	andwf	??_savePatch+1,f
  6994  0D71  0856               	movf	??_savePatch,w
  6995  0D72  390F               	andlw	15
  6996  0D73  04D7               	iorwf	??_savePatch+1,f
  6997  0D74  30F0               	movlw	240
  6998  0D75  05D6               	andwf	??_savePatch,f
  6999  0D76  0857               	movf	??_savePatch+1,w
  7000  0D77  3A80               	xorlw	128
  7001  0D78  00D8               	movwf	??_savePatch+2
  7002  0D79  3080               	movlw	128
  7003  0D7A  0258               	subwf	??_savePatch+2,w
  7004  0D7B  1D03               	skipz
  7005  0D7C  2D7F               	goto	u3105
  7006  0D7D  3080               	movlw	128
  7007  0D7E  0256               	subwf	??_savePatch,w
  7008  0D7F                     u3105:	
  7009  0D7F  1803               	btfsc	3,0
  7010  0D80  0008               	return
  7011                           
  7012                           ;main.c: 831: idx=batchNum*ciBatchSize;
  7013  0D81  0020               	movlb	0	; select bank0
  7014  0D82  0860               	movf	savePatch@batchNum+1,w
  7015  0D83  00D7               	movwf	??_savePatch+1
  7016  0D84  085F               	movf	savePatch@batchNum,w
  7017  0D85  00D6               	movwf	??_savePatch
  7018  0D86  0ED6               	swapf	??_savePatch,f
  7019  0D87  0ED7               	swapf	??_savePatch+1,f
  7020  0D88  30F0               	movlw	240
  7021  0D89  05D7               	andwf	??_savePatch+1,f
  7022  0D8A  0856               	movf	??_savePatch,w
  7023  0D8B  390F               	andlw	15
  7024  0D8C  04D7               	iorwf	??_savePatch+1,f
  7025  0D8D  30F0               	movlw	240
  7026  0D8E  05D6               	andwf	??_savePatch,f
  7027  0D8F  0856               	movf	??_savePatch,w
  7028  0D90  00DD               	movwf	savePatch@idx
  7029  0D91  0857               	movf	??_savePatch+1,w
  7030  0D92  00DE               	movwf	savePatch@idx+1
  7031                           
  7032                           ;main.c: 832: pData=&aPatchMemory[idx];
  7033  0D93  3070               	movlw	112
  7034  0D94  00D6               	movwf	??_savePatch
  7035  0D95  3023               	movlw	35
  7036  0D96  00D7               	movwf	??_savePatch+1
  7037  0D97  085D               	movf	savePatch@idx,w
  7038  0D98  0756               	addwf	??_savePatch,w
  7039  0D99  00DB               	movwf	savePatch@pData
  7040  0D9A  085E               	movf	savePatch@idx+1,w
  7041  0D9B  3D57               	addwfc	??_savePatch+1,w
  7042  0D9C  00DC               	movwf	savePatch@pData+1
  7043                           
  7044                           ;main.c: 833: MYI2C_Write16EEPROMBytes(ciI2C_EEPROM_DEVICE_ADDRESS,iPatchAddress,pData);
  7045  0D9D  0862               	movf	savePatch@iPatchAddress+1,w
  7046  0D9E  00AF               	movwf	MYI2C_Write16EEPROMBytes@writeAddress+1
  7047  0D9F  0861               	movf	savePatch@iPatchAddress,w
  7048  0DA0  00AE               	movwf	MYI2C_Write16EEPROMBytes@writeAddress
  7049  0DA1  085C               	movf	savePatch@pData+1,w
  7050  0DA2  00B1               	movwf	MYI2C_Write16EEPROMBytes@pData+1
  7051  0DA3  085B               	movf	savePatch@pData,w
  7052  0DA4  00B0               	movwf	MYI2C_Write16EEPROMBytes@pData
  7053  0DA5  3050               	movlw	80
  7054  0DA6  318E  26C7  318D   	fcall	_MYI2C_Write16EEPROMBytes
  7055                           
  7056                           ;main.c: 835: iPatchAddress+=ciBatchSize;
  7057  0DA9  3010               	movlw	16
  7058  0DAA  0020               	movlb	0	; select bank0
  7059  0DAB  07E1               	addwf	savePatch@iPatchAddress,f
  7060  0DAC  3000               	movlw	0
  7061  0DAD  3DE2               	addwfc	savePatch@iPatchAddress+1,f
  7062                           
  7063                           ;main.c: 837: _delay((unsigned long)((5)*(32000000/4000.0)));
  7064  0DAE  3034               	movlw	52
  7065  0DAF  0020               	movlb	0	; select bank0
  7066  0DB0  00D6               	movwf	??_savePatch
  7067  0DB1  30F1               	movlw	241
  7068  0DB2                     u4427:	
  7069  0DB2  0B89               	decfsz	9,f
  7070  0DB3  2DB2               	goto	u4427
  7071  0DB4  0BD6               	decfsz	??_savePatch,f
  7072  0DB5  2DB2               	goto	u4427
  7073  0DB6  3200               	nop2
  7074  0DB7  3001               	movlw	1
  7075  0DB8  0020               	movlb	0	; select bank0
  7076  0DB9  07DF               	addwf	savePatch@batchNum,f
  7077  0DBA  3000               	movlw	0
  7078  0DBB  3DE0               	addwfc	savePatch@batchNum+1,f
  7079  0DBC  2D69               	goto	l3604
  7080  0DBD                     __end_of_savePatch:	
  7081                           
  7082                           	psect	text2
  7083  04B5                     __ptext2:	
  7084 ;; *************** function _marshallPatchMemory *****************
  7085 ;; Defined at:
  7086 ;;		line 22 in file "EEPROM_24LC256.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;  mvcChannels     1    wreg     PTR unsigned char 
  7089 ;;		 -> mvcChannels(4), 
  7090 ;;  dualADSRdata    1    0[BANK0 ] PTR unsigned char 
  7091 ;;		 -> dualADSRdata0(8), 
  7092 ;;  dualADSRdata    1    1[BANK0 ] PTR unsigned char 
  7093 ;;		 -> dualADSRdata1(8), 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;  mvcChannels     1    8[BANK0 ] PTR unsigned char 
  7096 ;;		 -> mvcChannels(4), 
  7097 ;;  i               2   13[BANK0 ] int 
  7098 ;;  i               2   11[BANK0 ] int 
  7099 ;;  i               2    9[BANK0 ] int 
  7100 ;;  iPatchMemory    2   15[BANK0 ] int 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      void 
  7103 ;; Registers used:
  7104 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7110 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;Total ram usage:       17 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    3
  7117 ;; This function calls:
  7118 ;;		Nothing
  7119 ;; This function is called by:
  7120 ;;		_savePatch
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           
  7125                           ;psect for function _marshallPatchMemory
  7126  04B5                     _marshallPatchMemory:	
  7127                           
  7128                           ;incstack = 0
  7129                           ; Regs used in _marshallPatchMemory: [wreg+fsr1l+fsr1h+status,2+status,0]
  7130                           ;marshallPatchMemory@mvcChannels stored from wreg
  7131  04B5  0020               	movlb	0	; select bank0
  7132  04B6  00A8               	movwf	marshallPatchMemory@mvcChannels
  7133                           
  7134                           ;EEPROM_24LC256.c: 23: int iPatchMemoryNDX=0;
  7135  04B7  01AF               	clrf	marshallPatchMemory@iPatchMemoryNDX
  7136  04B8  01B0               	clrf	marshallPatchMemory@iPatchMemoryNDX+1
  7137                           
  7138                           ;EEPROM_24LC256.c: 24: for(int i=0; i<cMixFaderCount;i++) {
  7139  04B9  01A9               	clrf	marshallPatchMemory@i
  7140  04BA  01AA               	clrf	marshallPatchMemory@i+1
  7141  04BB  082A               	movf	marshallPatchMemory@i+1,w
  7142  04BC  3A80               	xorlw	128
  7143  04BD  00A2               	movwf	??_marshallPatchMemory
  7144  04BE  3080               	movlw	128
  7145  04BF  0222               	subwf	??_marshallPatchMemory,w
  7146  04C0  1D03               	skipz
  7147  04C1  2CC4               	goto	u2545
  7148  04C2  3004               	movlw	4
  7149  04C3  0229               	subwf	marshallPatchMemory@i,w
  7150  04C4                     u2545:	
  7151  04C4  1803               	btfsc	3,0
  7152  04C5  2CF2               	goto	l3162
  7153  04C6                     l3154:	
  7154                           
  7155                           ;EEPROM_24LC256.c: 25: aPatchMemory[iPatchMemoryNDX++]=mvcChannels[i];
  7156  04C6  0020               	movlb	0	; select bank0
  7157  04C7  0829               	movf	marshallPatchMemory@i,w
  7158  04C8  0728               	addwf	marshallPatchMemory@mvcChannels,w
  7159  04C9  00A2               	movwf	??_marshallPatchMemory
  7160  04CA  0822               	movf	??_marshallPatchMemory,w
  7161  04CB  0086               	movwf	6
  7162  04CC  0187               	clrf	7
  7163  04CD  0801               	movf	1,w
  7164  04CE  00A3               	movwf	??_marshallPatchMemory+1
  7165  04CF  3070               	movlw	112
  7166  04D0  00A4               	movwf	??_marshallPatchMemory+2
  7167  04D1  3023               	movlw	35
  7168  04D2  00A5               	movwf	??_marshallPatchMemory+3
  7169  04D3  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7170  04D4  0724               	addwf	??_marshallPatchMemory+2,w
  7171  04D5  00A6               	movwf	??_marshallPatchMemory+4
  7172  04D6  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7173  04D7  3D25               	addwfc	??_marshallPatchMemory+3,w
  7174  04D8  00A7               	movwf	??_marshallPatchMemory+5
  7175  04D9  0826               	movf	??_marshallPatchMemory+4,w
  7176  04DA  0086               	movwf	6
  7177  04DB  0827               	movf	??_marshallPatchMemory+5,w
  7178  04DC  0087               	movwf	7
  7179  04DD  0823               	movf	??_marshallPatchMemory+1,w
  7180  04DE  0081               	movwf	1
  7181  04DF  3001               	movlw	1
  7182  04E0  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7183  04E1  3000               	movlw	0
  7184  04E2  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7185  04E3  3001               	movlw	1
  7186  04E4  07A9               	addwf	marshallPatchMemory@i,f
  7187  04E5  3000               	movlw	0
  7188  04E6  3DAA               	addwfc	marshallPatchMemory@i+1,f
  7189  04E7  082A               	movf	marshallPatchMemory@i+1,w
  7190  04E8  3A80               	xorlw	128
  7191  04E9  00A2               	movwf	??_marshallPatchMemory
  7192  04EA  3080               	movlw	128
  7193  04EB  0222               	subwf	??_marshallPatchMemory,w
  7194  04EC  1D03               	skipz
  7195  04ED  2CF0               	goto	u2555
  7196  04EE  3004               	movlw	4
  7197  04EF  0229               	subwf	marshallPatchMemory@i,w
  7198  04F0                     u2555:	
  7199  04F0  1C03               	skipc
  7200  04F1  2CC6               	goto	l3154
  7201  04F2                     l3162:	
  7202                           
  7203                           ;EEPROM_24LC256.c: 26: }
  7204                           ;EEPROM_24LC256.c: 27: for(int i=0; i<cADSRdataBytes;i++) {
  7205  04F2  0020               	movlb	0	; select bank0
  7206  04F3  01AB               	clrf	marshallPatchMemory@i_1221
  7207  04F4  01AC               	clrf	marshallPatchMemory@i_1221+1
  7208  04F5  082C               	movf	marshallPatchMemory@i_1221+1,w
  7209  04F6  3A80               	xorlw	128
  7210  04F7  00A2               	movwf	??_marshallPatchMemory
  7211  04F8  3080               	movlw	128
  7212  04F9  0222               	subwf	??_marshallPatchMemory,w
  7213  04FA  3008               	movlw	8
  7214  04FB  1903               	btfsc	3,2
  7215  04FC  022B               	subwf	marshallPatchMemory@i_1221,w
  7216  04FD  1803               	btfsc	3,0
  7217  04FE  2D2B               	goto	l3176
  7218  04FF                     l3168:	
  7219                           
  7220                           ;EEPROM_24LC256.c: 28: aPatchMemory[iPatchMemoryNDX++]=dualADSRdata0[i];
  7221  04FF  0020               	movlb	0	; select bank0
  7222  0500  082B               	movf	marshallPatchMemory@i_1221,w
  7223  0501  0720               	addwf	marshallPatchMemory@dualADSRdata0,w
  7224  0502  00A2               	movwf	??_marshallPatchMemory
  7225  0503  0822               	movf	??_marshallPatchMemory,w
  7226  0504  0086               	movwf	6
  7227  0505  3001               	movlw	1	; select bank2/3
  7228  0506  0087               	movwf	7
  7229  0507  0801               	movf	1,w
  7230  0508  00A3               	movwf	??_marshallPatchMemory+1
  7231  0509  3070               	movlw	112
  7232  050A  00A4               	movwf	??_marshallPatchMemory+2
  7233  050B  3023               	movlw	35
  7234  050C  00A5               	movwf	??_marshallPatchMemory+3
  7235  050D  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7236  050E  0724               	addwf	??_marshallPatchMemory+2,w
  7237  050F  00A6               	movwf	??_marshallPatchMemory+4
  7238  0510  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7239  0511  3D25               	addwfc	??_marshallPatchMemory+3,w
  7240  0512  00A7               	movwf	??_marshallPatchMemory+5
  7241  0513  0826               	movf	??_marshallPatchMemory+4,w
  7242  0514  0086               	movwf	6
  7243  0515  0827               	movf	??_marshallPatchMemory+5,w
  7244  0516  0087               	movwf	7
  7245  0517  0823               	movf	??_marshallPatchMemory+1,w
  7246  0518  0081               	movwf	1
  7247  0519  3001               	movlw	1
  7248  051A  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7249  051B  3000               	movlw	0
  7250  051C  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7251  051D  3001               	movlw	1
  7252  051E  07AB               	addwf	marshallPatchMemory@i_1221,f
  7253  051F  3000               	movlw	0
  7254  0520  3DAC               	addwfc	marshallPatchMemory@i_1221+1,f
  7255  0521  082C               	movf	marshallPatchMemory@i_1221+1,w
  7256  0522  3A80               	xorlw	128
  7257  0523  00A2               	movwf	??_marshallPatchMemory
  7258  0524  3080               	movlw	128
  7259  0525  0222               	subwf	??_marshallPatchMemory,w
  7260  0526  3008               	movlw	8
  7261  0527  1903               	btfsc	3,2
  7262  0528  022B               	subwf	marshallPatchMemory@i_1221,w
  7263  0529  1C03               	skipc
  7264  052A  2CFF               	goto	l3168
  7265  052B                     l3176:	
  7266                           
  7267                           ;EEPROM_24LC256.c: 29: }
  7268                           ;EEPROM_24LC256.c: 30: for(int i=0; i<cADSRdataBytes;i++) {
  7269  052B  0020               	movlb	0	; select bank0
  7270  052C  01AD               	clrf	marshallPatchMemory@i_1222
  7271  052D  01AE               	clrf	marshallPatchMemory@i_1222+1
  7272  052E  082E               	movf	marshallPatchMemory@i_1222+1,w
  7273  052F  3A80               	xorlw	128
  7274  0530  00A2               	movwf	??_marshallPatchMemory
  7275  0531  3080               	movlw	128
  7276  0532  0222               	subwf	??_marshallPatchMemory,w
  7277  0533  3008               	movlw	8
  7278  0534  1903               	btfsc	3,2
  7279  0535  022D               	subwf	marshallPatchMemory@i_1222,w
  7280  0536  1803               	btfsc	3,0
  7281  0537  2D64               	goto	l3190
  7282  0538                     l3182:	
  7283                           
  7284                           ;EEPROM_24LC256.c: 31: aPatchMemory[iPatchMemoryNDX++]=dualADSRdata1[i];
  7285  0538  0020               	movlb	0	; select bank0
  7286  0539  082D               	movf	marshallPatchMemory@i_1222,w
  7287  053A  0721               	addwf	marshallPatchMemory@dualADSRdata1,w
  7288  053B  00A2               	movwf	??_marshallPatchMemory
  7289  053C  0822               	movf	??_marshallPatchMemory,w
  7290  053D  0086               	movwf	6
  7291  053E  3001               	movlw	1	; select bank2/3
  7292  053F  0087               	movwf	7
  7293  0540  0801               	movf	1,w
  7294  0541  00A3               	movwf	??_marshallPatchMemory+1
  7295  0542  3070               	movlw	112
  7296  0543  00A4               	movwf	??_marshallPatchMemory+2
  7297  0544  3023               	movlw	35
  7298  0545  00A5               	movwf	??_marshallPatchMemory+3
  7299  0546  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7300  0547  0724               	addwf	??_marshallPatchMemory+2,w
  7301  0548  00A6               	movwf	??_marshallPatchMemory+4
  7302  0549  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7303  054A  3D25               	addwfc	??_marshallPatchMemory+3,w
  7304  054B  00A7               	movwf	??_marshallPatchMemory+5
  7305  054C  0826               	movf	??_marshallPatchMemory+4,w
  7306  054D  0086               	movwf	6
  7307  054E  0827               	movf	??_marshallPatchMemory+5,w
  7308  054F  0087               	movwf	7
  7309  0550  0823               	movf	??_marshallPatchMemory+1,w
  7310  0551  0081               	movwf	1
  7311  0552  3001               	movlw	1
  7312  0553  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7313  0554  3000               	movlw	0
  7314  0555  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7315  0556  3001               	movlw	1
  7316  0557  07AD               	addwf	marshallPatchMemory@i_1222,f
  7317  0558  3000               	movlw	0
  7318  0559  3DAE               	addwfc	marshallPatchMemory@i_1222+1,f
  7319  055A  082E               	movf	marshallPatchMemory@i_1222+1,w
  7320  055B  3A80               	xorlw	128
  7321  055C  00A2               	movwf	??_marshallPatchMemory
  7322  055D  3080               	movlw	128
  7323  055E  0222               	subwf	??_marshallPatchMemory,w
  7324  055F  3008               	movlw	8
  7325  0560  1903               	btfsc	3,2
  7326  0561  022D               	subwf	marshallPatchMemory@i_1222,w
  7327  0562  1C03               	skipc
  7328  0563  2D38               	goto	l3182
  7329  0564                     l3190:	
  7330                           
  7331                           ;EEPROM_24LC256.c: 32: }
  7332                           ;EEPROM_24LC256.c: 34: for(;iPatchMemoryNDX<cPatchSize;iPatchMemoryNDX++){
  7333  0564  0020               	movlb	0	; select bank0
  7334  0565                     L1:	
  7335  0565  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7336  0566  3A80               	xorlw	128
  7337  0567  00A2               	movwf	??_marshallPatchMemory
  7338  0568  3080               	movlw	128
  7339  0569  0222               	subwf	??_marshallPatchMemory,w
  7340  056A  1D03               	skipz
  7341  056B  2D6E               	goto	u2605
  7342  056C  3080               	movlw	128
  7343  056D  022F               	subwf	marshallPatchMemory@iPatchMemoryNDX,w
  7344  056E                     u2605:	
  7345  056E  1803               	btfsc	3,0
  7346  056F  0008               	return
  7347                           
  7348                           ;EEPROM_24LC256.c: 35: aPatchMemory[iPatchMemoryNDX]=0;
  7349  0570  3070               	movlw	112
  7350  0571  0020               	movlb	0	; select bank0
  7351  0572  00A2               	movwf	??_marshallPatchMemory
  7352  0573  3023               	movlw	35
  7353  0574  00A3               	movwf	??_marshallPatchMemory+1
  7354  0575  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7355  0576  0722               	addwf	??_marshallPatchMemory,w
  7356  0577  0086               	movwf	6
  7357  0578  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7358  0579  3D23               	addwfc	??_marshallPatchMemory+1,w
  7359  057A  0087               	movwf	7
  7360  057B  0181               	clrf	1
  7361  057C  3001               	movlw	1
  7362  057D  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7363  057E  3000               	movlw	0
  7364  057F  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7365  0580  2D65               	goto	L1
  7366  0581                     __end_of_marshallPatchMemory:	
  7367                           
  7368                           	psect	text3
  7369  0EC7                     __ptext3:	
  7370 ;; *************** function _MYI2C_Write16EEPROMBytes *****************
  7371 ;; Defined at:
  7372 ;;		line 73 in file "EEPROM_24LC256.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;  slaveDeviceA    1    wreg     unsigned char 
  7375 ;;  writeAddress    2   14[BANK0 ] int 
  7376 ;;  pData           2   16[BANK0 ] PTR unsigned char 
  7377 ;;		 -> aPatchMemory(128), 
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;  slaveDeviceA    1   45[BANK0 ] unsigned char 
  7380 ;;  i               2   49[BANK0 ] int 
  7381 ;;  writeBuffer    17   22[BANK0 ] unsigned char [17]
  7382 ;;  counter         2   47[BANK0 ] unsigned int 
  7383 ;;  timeOut         2   42[BANK0 ] unsigned int 
  7384 ;;  nCount          2   40[BANK0 ] unsigned int 
  7385 ;;  status          1   51[BANK0 ] enum E14260
  7386 ;;  iPatchAddres    1   46[BANK0 ] unsigned char 
  7387 ;;  pointerByte     1   44[BANK0 ] unsigned char 
  7388 ;;  iPatchAddres    1   39[BANK0 ] unsigned char 
  7389 ;; Return value:  Size  Location     Type
  7390 ;;                  1    wreg      void 
  7391 ;; Registers used:
  7392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7398 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;Total ram usage:       38 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    5
  7405 ;; This function calls:
  7406 ;;		_I2C1_MasterWrite
  7407 ;; This function is called by:
  7408 ;;		_savePatch
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           
  7413                           ;psect for function _MYI2C_Write16EEPROMBytes
  7414  0EC7                     _MYI2C_Write16EEPROMBytes:	
  7415                           
  7416                           ;incstack = 0
  7417                           ; Regs used in _MYI2C_Write16EEPROMBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7418                           ;MYI2C_Write16EEPROMBytes@slaveDeviceAddress stored from wreg
  7419  0EC7  0020               	movlb	0	; select bank0
  7420  0EC8  00CD               	movwf	MYI2C_Write16EEPROMBytes@slaveDeviceAddress
  7421                           
  7422                           ;EEPROM_24LC256.c: 75: uint8_t iPatchAddressHigh=writeAddress>>8;
  7423  0EC9  082F               	movf	MYI2C_Write16EEPROMBytes@writeAddress+1,w
  7424  0ECA  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7425  0ECB  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7426  0ECC  00CE               	movwf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh
  7427                           
  7428                           ;EEPROM_24LC256.c: 76: uint8_t iPatchAddressLow=writeAddress&0xFF;
  7429  0ECD  082E               	movf	MYI2C_Write16EEPROMBytes@writeAddress,w
  7430  0ECE  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7431  0ECF  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7432  0ED0  00C7               	movwf	MYI2C_Write16EEPROMBytes@iPatchAddressLow
  7433                           
  7434                           ;EEPROM_24LC256.c: 82: uint16_t nCount;
  7435                           ;EEPROM_24LC256.c: 83: uint8_t writeBuffer[ciBufferSize];
  7436                           ;EEPROM_24LC256.c: 84: uint16_t counter, timeOut;
  7437                           ;EEPROM_24LC256.c: 86: uint8_t pointerByte = 0b10100000;
  7438  0ED1  30A0               	movlw	160
  7439  0ED2  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7440  0ED3  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7441  0ED4  00CC               	movwf	MYI2C_Write16EEPROMBytes@pointerByte
  7442                           
  7443                           ;EEPROM_24LC256.c: 88: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
  7444  0ED5  3002               	movlw	2
  7445  0ED6  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7446  0ED7  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7447  0ED8  00D3               	movwf	MYI2C_Write16EEPROMBytes@status
  7448                           
  7449                           ;EEPROM_24LC256.c: 92: nCount = 2;
  7450  0ED9  3002               	movlw	2
  7451  0EDA  00C8               	movwf	MYI2C_Write16EEPROMBytes@nCount
  7452  0EDB  3000               	movlw	0
  7453  0EDC  00C9               	movwf	MYI2C_Write16EEPROMBytes@nCount+1
  7454                           
  7455                           ;EEPROM_24LC256.c: 95: for (counter = 0; counter < nCount; counter++)
  7456  0EDD  01CF               	clrf	MYI2C_Write16EEPROMBytes@counter
  7457  0EDE  01D0               	clrf	MYI2C_Write16EEPROMBytes@counter+1
  7458  0EDF                     l833:	
  7459  0EDF  0849               	movf	MYI2C_Write16EEPROMBytes@nCount+1,w
  7460  0EE0  0250               	subwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7461  0EE1  1D03               	skipz
  7462  0EE2  2EE5               	goto	u2715
  7463  0EE3  0848               	movf	MYI2C_Write16EEPROMBytes@nCount,w
  7464  0EE4  024F               	subwf	MYI2C_Write16EEPROMBytes@counter,w
  7465  0EE5                     u2715:	
  7466  0EE5  1803               	btfsc	3,0
  7467  0EE6  0008               	return
  7468                           
  7469                           ;EEPROM_24LC256.c: 96: {
  7470                           ;EEPROM_24LC256.c: 99: writeBuffer[0] = pointerByte;
  7471  0EE7  084C               	movf	MYI2C_Write16EEPROMBytes@pointerByte,w
  7472  0EE8  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7473  0EE9  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7474  0EEA  00B6               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer
  7475                           
  7476                           ;EEPROM_24LC256.c: 101: if(0==counter) {
  7477  0EEB  084F               	movf	MYI2C_Write16EEPROMBytes@counter,w
  7478  0EEC  0450               	iorwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7479  0EED  1D03               	btfss	3,2
  7480  0EEE  2EF8               	goto	l3218
  7481                           
  7482                           ;EEPROM_24LC256.c: 103: writeBuffer[1] = iPatchAddressHigh;
  7483  0EEF  084E               	movf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh,w
  7484  0EF0  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7485  0EF1  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7486  0EF2  00B7               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer+1
  7487                           
  7488                           ;EEPROM_24LC256.c: 104: writeBuffer[2] = iPatchAddressHigh;
  7489  0EF3  084E               	movf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh,w
  7490  0EF4  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7491  0EF5  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7492  0EF6  00B8               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer+2
  7493                           
  7494                           ;EEPROM_24LC256.c: 105: }
  7495  0EF7  2F27               	goto	l3230
  7496  0EF8                     l3218:	
  7497                           
  7498                           ;EEPROM_24LC256.c: 106: else
  7499                           ;EEPROM_24LC256.c: 107: {
  7500                           ;EEPROM_24LC256.c: 109: for(int i=1;i<ciBatchSize;i++){
  7501  0EF8  3001               	movlw	1
  7502  0EF9  00D1               	movwf	MYI2C_Write16EEPROMBytes@i
  7503  0EFA  3000               	movlw	0
  7504  0EFB  00D2               	movwf	MYI2C_Write16EEPROMBytes@i+1
  7505  0EFC  0852               	movf	MYI2C_Write16EEPROMBytes@i+1,w
  7506  0EFD  3A80               	xorlw	128
  7507  0EFE  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7508  0EFF  3080               	movlw	128
  7509  0F00  0232               	subwf	??_MYI2C_Write16EEPROMBytes,w
  7510  0F01  1D03               	skipz
  7511  0F02  2F05               	goto	u2635
  7512  0F03  3010               	movlw	16
  7513  0F04  0251               	subwf	MYI2C_Write16EEPROMBytes@i,w
  7514  0F05                     u2635:	
  7515  0F05  1803               	btfsc	3,0
  7516  0F06  2F27               	goto	l3230
  7517  0F07                     l3222:	
  7518                           
  7519                           ;EEPROM_24LC256.c: 110: writeBuffer[i]=(*pData++);
  7520  0F07  0020               	movlb	0	; select bank0
  7521  0F08  0830               	movf	MYI2C_Write16EEPROMBytes@pData,w
  7522  0F09  0086               	movwf	6
  7523  0F0A  0831               	movf	MYI2C_Write16EEPROMBytes@pData+1,w
  7524  0F0B  0087               	movwf	7
  7525  0F0C  0801               	movf	1,w
  7526  0F0D  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7527  0F0E  0851               	movf	MYI2C_Write16EEPROMBytes@i,w
  7528  0F0F  3E36               	addlw	(low (MYI2C_Write16EEPROMBytes@writeBuffer| 0))& (0+255)
  7529  0F10  0086               	movwf	6
  7530  0F11  0187               	clrf	7
  7531  0F12  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7532  0F13  0081               	movwf	1
  7533  0F14  3001               	movlw	1
  7534  0F15  07B0               	addwf	MYI2C_Write16EEPROMBytes@pData,f
  7535  0F16  3000               	movlw	0
  7536  0F17  3DB1               	addwfc	MYI2C_Write16EEPROMBytes@pData+1,f
  7537  0F18  3001               	movlw	1
  7538  0F19  07D1               	addwf	MYI2C_Write16EEPROMBytes@i,f
  7539  0F1A  3000               	movlw	0
  7540  0F1B  3DD2               	addwfc	MYI2C_Write16EEPROMBytes@i+1,f
  7541  0F1C  0852               	movf	MYI2C_Write16EEPROMBytes@i+1,w
  7542  0F1D  3A80               	xorlw	128
  7543  0F1E  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7544  0F1F  3080               	movlw	128
  7545  0F20  0232               	subwf	??_MYI2C_Write16EEPROMBytes,w
  7546  0F21  1D03               	skipz
  7547  0F22  2F25               	goto	u2645
  7548  0F23  3010               	movlw	16
  7549  0F24  0251               	subwf	MYI2C_Write16EEPROMBytes@i,w
  7550  0F25                     u2645:	
  7551  0F25  1C03               	skipc
  7552  0F26  2F07               	goto	l3222
  7553  0F27                     l3230:	
  7554                           
  7555                           ;EEPROM_24LC256.c: 111: }
  7556                           ;EEPROM_24LC256.c: 112: }
  7557                           ;EEPROM_24LC256.c: 117: timeOut = 0;
  7558  0F27  0020               	movlb	0	; select bank0
  7559  0F28  01CA               	clrf	MYI2C_Write16EEPROMBytes@timeOut
  7560  0F29  01CB               	clrf	MYI2C_Write16EEPROMBytes@timeOut+1
  7561  0F2A                     l3252:	
  7562                           ;EEPROM_24LC256.c: 118: while(status != I2C1_MESSAGE_FAIL)
  7563                           
  7564  0F2A  0353               	decf	MYI2C_Write16EEPROMBytes@status,w
  7565  0F2B  1903               	btfsc	3,2
  7566  0F2C  2F59               	goto	l3254
  7567                           
  7568                           ;EEPROM_24LC256.c: 119: {
  7569                           ;EEPROM_24LC256.c: 120: if(0==counter) {
  7570  0F2D  084F               	movf	MYI2C_Write16EEPROMBytes@counter,w
  7571  0F2E  0450               	iorwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7572  0F2F  1D03               	btfss	3,2
  7573  0F30  2F33               	goto	l3236
  7574                           
  7575                           ;EEPROM_24LC256.c: 122: I2C1_MasterWrite( writeBuffer,
  7576                           ;EEPROM_24LC256.c: 123: 3,
  7577                           ;EEPROM_24LC256.c: 124: slaveDeviceAddress,
  7578                           ;EEPROM_24LC256.c: 125: &status);
  7579  0F31  3003               	movlw	3
  7580  0F32  2F35               	goto	L2
  7581  0F33                     l3236:	
  7582                           ;EEPROM_24LC256.c: 126: } else {
  7583                           
  7584                           
  7585                           ;EEPROM_24LC256.c: 128: I2C1_MasterWrite( writeBuffer,
  7586                           ;EEPROM_24LC256.c: 129: ciBatchSize+1,
  7587                           ;EEPROM_24LC256.c: 130: slaveDeviceAddress,
  7588                           ;EEPROM_24LC256.c: 131: &status);
  7589  0F33  3011               	movlw	17
  7590  0F34  0020               	movlb	0	; select bank0
  7591  0F35                     L2:	
  7592  0F35  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7593  0F36  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7594  0F37  00A7               	movwf	I2C1_MasterWrite@length
  7595  0F38  084D               	movf	MYI2C_Write16EEPROMBytes@slaveDeviceAddress,w
  7596  0F39  00B3               	movwf	??_MYI2C_Write16EEPROMBytes+1
  7597  0F3A  01B4               	clrf	??_MYI2C_Write16EEPROMBytes+2
  7598  0F3B  0833               	movf	??_MYI2C_Write16EEPROMBytes+1,w
  7599  0F3C  00A8               	movwf	I2C1_MasterWrite@address
  7600  0F3D  0834               	movf	??_MYI2C_Write16EEPROMBytes+2,w
  7601  0F3E  00A9               	movwf	I2C1_MasterWrite@address+1
  7602  0F3F  3053               	movlw	(low (MYI2C_Write16EEPROMBytes@status| 0))& (0+255)
  7603  0F40  00B5               	movwf	??_MYI2C_Write16EEPROMBytes+3
  7604  0F41  0835               	movf	??_MYI2C_Write16EEPROMBytes+3,w
  7605  0F42  00AA               	movwf	I2C1_MasterWrite@pflag
  7606  0F43  3036               	movlw	(low (MYI2C_Write16EEPROMBytes@writeBuffer| 0))& (0+255)
  7607  0F44  318B  2371  318E   	fcall	_I2C1_MasterWrite
  7608  0F47                     l3238:	
  7609                           ;EEPROM_24LC256.c: 132: }
  7610                           ;EEPROM_24LC256.c: 135: while(status == I2C1_MESSAGE_PENDING);
  7611                           
  7612  0F47  3002               	movlw	2
  7613  0F48  0020               	movlb	0	; select bank0
  7614  0F49  0653               	xorwf	MYI2C_Write16EEPROMBytes@status,w
  7615  0F4A  1903               	btfsc	3,2
  7616  0F4B  2F47               	goto	l3238
  7617                           
  7618                           ;EEPROM_24LC256.c: 137: if (status == I2C1_MESSAGE_COMPLETE)
  7619  0F4C  0853               	movf	MYI2C_Write16EEPROMBytes@status,w
  7620  0F4D  1903               	btfsc	3,2
  7621  0F4E  2F59               	goto	l3254
  7622                           
  7623                           ;EEPROM_24LC256.c: 147: if (timeOut == 100)
  7624                           
  7625                           ;EEPROM_24LC256.c: 138: break;
  7626  0F4F  3064               	movlw	100
  7627  0F50  064A               	xorwf	MYI2C_Write16EEPROMBytes@timeOut,w
  7628  0F51  044B               	iorwf	MYI2C_Write16EEPROMBytes@timeOut+1,w
  7629  0F52  1903               	btfsc	3,2
  7630  0F53  2F59               	goto	l3254
  7631                           
  7632                           ;EEPROM_24LC256.c: 149: else
  7633                           ;EEPROM_24LC256.c: 150: timeOut++;
  7634                           
  7635                           ;EEPROM_24LC256.c: 148: break;
  7636  0F54  3001               	movlw	1
  7637  0F55  07CA               	addwf	MYI2C_Write16EEPROMBytes@timeOut,f
  7638  0F56  3000               	movlw	0
  7639  0F57  3DCB               	addwfc	MYI2C_Write16EEPROMBytes@timeOut+1,f
  7640  0F58  2F2A               	goto	l3252
  7641  0F59                     l3254:	
  7642                           
  7643                           ;EEPROM_24LC256.c: 151: }
  7644                           ;EEPROM_24LC256.c: 153: if (status == I2C1_MESSAGE_FAIL) { break; }
  7645  0F59  0353               	decf	MYI2C_Write16EEPROMBytes@status,w
  7646  0F5A  1903               	btfsc	3,2
  7647  0F5B  0008               	return
  7648  0F5C  3001               	movlw	1
  7649  0F5D  07CF               	addwf	MYI2C_Write16EEPROMBytes@counter,f
  7650  0F5E  3000               	movlw	0
  7651  0F5F  3DD0               	addwfc	MYI2C_Write16EEPROMBytes@counter+1,f
  7652  0F60  2EDF               	goto	l833
  7653  0F61                     __end_of_MYI2C_Write16EEPROMBytes:	
  7654                           
  7655                           	psect	text4
  7656  0C11                     __ptext4:	
  7657 ;; *************** function _loadPatch *****************
  7658 ;; Defined at:
  7659 ;;		line 855 in file "main.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  PatchNumber     2   58[BANK0 ] int 
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;  i               2   64[BANK0 ] int 
  7664 ;;  iPatchAddres    2   62[BANK0 ] int 
  7665 ;;  idx             2    0        int 
  7666 ;;  pData           2    0        PTR unsigned char 
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      void 
  7669 ;; Registers used:
  7670 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7676 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7677 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7678 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7679 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;Total ram usage:        8 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    7
  7683 ;; This function calls:
  7684 ;;		_updateModelFromPatchMemory
  7685 ;;		_writeDAC528
  7686 ;; This function is called by:
  7687 ;;		_main
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           
  7692                           ;psect for function _loadPatch
  7693  0C11                     _loadPatch:	
  7694                           
  7695                           ;main.c: 856: int iPatchAddress=PatchNumber*cPatchSize;
  7696                           
  7697                           ;incstack = 0
  7698                           ; Regs used in _loadPatch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7699  0C11  0020               	movlb	0	; select bank0
  7700  0C12  085B               	movf	loadPatch@PatchNumber+1,w
  7701  0C13  00DD               	movwf	??_loadPatch+1
  7702  0C14  085A               	movf	loadPatch@PatchNumber,w
  7703  0C15  00DC               	movwf	??_loadPatch
  7704  0C16  3007               	movlw	7
  7705  0C17                     u3065:	
  7706  0C17  35DC               	lslf	??_loadPatch,f
  7707  0C18  0DDD               	rlf	??_loadPatch+1,f
  7708  0C19  0B89               	decfsz	9,f
  7709  0C1A  2C17               	goto	u3065
  7710  0C1B  085C               	movf	??_loadPatch,w
  7711  0C1C  00DE               	movwf	loadPatch@iPatchAddress
  7712  0C1D  085D               	movf	??_loadPatch+1,w
  7713  0C1E  00DF               	movwf	loadPatch@iPatchAddress+1
  7714                           
  7715                           ;main.c: 859: uint8_t *pData;
  7716                           ;main.c: 860: int idx;
  7717                           ;main.c: 873: updateModelFromPatchMemory(mvcChannels,dualADSRdata0,dualADSRdata1);
  7718  0C1F  303C               	movlw	(low (_dualADSRdata0| (0+256)))& (0+255)
  7719  0C20  00DC               	movwf	??_loadPatch
  7720  0C21  085C               	movf	??_loadPatch,w
  7721  0C22  00A0               	movwf	updateModelFromPatchMemory@dualADSRdata0
  7722  0C23  3034               	movlw	(low (_dualADSRdata1| (0+256)))& (0+255)
  7723  0C24  00DD               	movwf	??_loadPatch+1
  7724  0C25  085D               	movf	??_loadPatch+1,w
  7725  0C26  00A1               	movwf	updateModelFromPatchMemory@dualADSRdata1
  7726  0C27  30C9               	movlw	(low (_mvcChannels| 0))& (0+255)
  7727  0C28  318F  2761  318C   	fcall	_updateModelFromPatchMemory
  7728                           
  7729                           ;main.c: 876: for(int i=0;i<cMixFaderCount;i++){
  7730  0C2B  0020               	movlb	0	; select bank0
  7731  0C2C  01E0               	clrf	loadPatch@i
  7732  0C2D  01E1               	clrf	loadPatch@i+1
  7733  0C2E                     L3:	
  7734  0C2E  0861               	movf	loadPatch@i+1,w
  7735  0C2F  3A80               	xorlw	128
  7736  0C30  00DC               	movwf	??_loadPatch
  7737  0C31  3080               	movlw	128
  7738  0C32  025C               	subwf	??_loadPatch,w
  7739  0C33  1D03               	skipz
  7740  0C34  2C37               	goto	u3075
  7741  0C35  3004               	movlw	4
  7742  0C36  0260               	subwf	loadPatch@i,w
  7743  0C37                     u3075:	
  7744  0C37  1803               	btfsc	3,0
  7745  0C38  0008               	return
  7746                           
  7747                           ;main.c: 877: writeDAC528(i+4,mvcChannels[i]);
  7748  0C39  0020               	movlb	0	; select bank0
  7749  0C3A  0860               	movf	loadPatch@i,w
  7750  0C3B  3E04               	addlw	4
  7751  0C3C  00D5               	movwf	writeDAC528@dacNumber
  7752  0C3D  3000               	movlw	0
  7753  0C3E  3D61               	addwfc	loadPatch@i+1,w
  7754  0C3F  00D6               	movwf	writeDAC528@dacNumber+1
  7755  0C40  0860               	movf	loadPatch@i,w
  7756  0C41  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  7757  0C42  0086               	movwf	6
  7758  0C43  0187               	clrf	7
  7759  0C44  0801               	movf	1,w
  7760  0C45  00DC               	movwf	??_loadPatch
  7761  0C46  085C               	movf	??_loadPatch,w
  7762  0C47  00D7               	movwf	writeDAC528@dacData
  7763  0C48  318B  234C  318C   	fcall	_writeDAC528
  7764  0C4B  3001               	movlw	1
  7765  0C4C  0020               	movlb	0	; select bank0
  7766  0C4D  07E0               	addwf	loadPatch@i,f
  7767  0C4E  3000               	movlw	0
  7768  0C4F  3DE1               	addwfc	loadPatch@i+1,f
  7769  0C50  2C2E               	goto	L3
  7770  0C51                     __end_of_loadPatch:	
  7771                           
  7772                           	psect	text5
  7773  0B4C                     __ptext5:	
  7774 ;; *************** function _writeDAC528 *****************
  7775 ;; Defined at:
  7776 ;;		line 57 in file "VCAMIX_SPI_Master.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  dacNumber       2   53[BANK0 ] int 
  7779 ;;  dacData         1   55[BANK0 ] unsigned char 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  wkDacNumber     1   57[BANK0 ] unsigned char 
  7782 ;; Return value:  Size  Location     Type
  7783 ;;                  1    wreg      void 
  7784 ;; Registers used:
  7785 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7791 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;Total ram usage:        5 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    6
  7798 ;; This function calls:
  7799 ;;		_putByte
  7800 ;; This function is called by:
  7801 ;;		_main
  7802 ;;		_loadPatch
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           
  7807                           ;psect for function _writeDAC528
  7808  0B4C                     _writeDAC528:	
  7809                           
  7810                           ;VCAMIX_SPI_Master.c: 58: uint8_t wkDacNumber=0;
  7811                           
  7812                           ;incstack = 0
  7813                           ; Regs used in _writeDAC528: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7814  0B4C  0020               	movlb	0	; select bank0
  7815  0B4D  01D9               	clrf	writeDAC528@wkDacNumber
  7816                           
  7817                           ;VCAMIX_SPI_Master.c: 59: wkDacNumber=cPowerOfTwo[dacNumber];
  7818  0B4E  0856               	movf	writeDAC528@dacNumber+1,w
  7819  0B4F  0085               	movwf	5
  7820  0B50  0855               	movf	writeDAC528@dacNumber,w
  7821  0B51  0084               	movwf	4
  7822  0B52  3584               	lslf	4,f
  7823  0B53  0D85               	rlf	5,f
  7824  0B54  3000               	movlw	low (_cPowerOfTwo| (0+32768))
  7825  0B55  0784               	addwf	4,f
  7826  0B56  3090               	movlw	high (_cPowerOfTwo| (0+32768))
  7827  0B57  3D85               	addwfc	5,f
  7828  0B58  0800               	movf	0,w	;code access
  7829  0B59  00D8               	movwf	??_writeDAC528
  7830  0B5A  0858               	movf	??_writeDAC528,w
  7831  0B5B  00D9               	movwf	writeDAC528@wkDacNumber
  7832                           
  7833                           ;VCAMIX_SPI_Master.c: 61: LATA &= 0x7F ;
  7834  0B5C  307F               	movlw	127
  7835  0B5D  00D8               	movwf	??_writeDAC528
  7836  0B5E  0858               	movf	??_writeDAC528,w
  7837  0B5F  0596               	andwf	22,f	;volatile
  7838                           
  7839                           ;VCAMIX_SPI_Master.c: 63: putByte(wkDacNumber,0);
  7840  0B60  3000               	movlw	0
  7841  0B61  00CC               	movwf	putByte@clockPin
  7842  0B62  00CD               	movwf	putByte@clockPin+1
  7843  0B63  0859               	movf	writeDAC528@wkDacNumber,w
  7844  0B64  3185  2581  318B   	fcall	_putByte
  7845                           
  7846                           ;VCAMIX_SPI_Master.c: 65: putByte(dacData,0);
  7847  0B67  3000               	movlw	0
  7848  0B68  0020               	movlb	0	; select bank0
  7849  0B69  00CC               	movwf	putByte@clockPin
  7850  0B6A  00CD               	movwf	putByte@clockPin+1
  7851  0B6B  0857               	movf	writeDAC528@dacData,w
  7852  0B6C  3185  2581         	fcall	_putByte
  7853                           
  7854                           ;VCAMIX_SPI_Master.c: 67: LATA |= 0x80 ;
  7855  0B6E  0020               	movlb	0	; select bank0
  7856  0B6F  1796               	bsf	22,7	;volatile
  7857  0B70  0008               	return
  7858  0B71                     __end_of_writeDAC528:	
  7859                           
  7860                           	psect	text6
  7861  0F61                     __ptext6:	
  7862 ;; *************** function _updateModelFromPatchMemory *****************
  7863 ;; Defined at:
  7864 ;;		line 39 in file "EEPROM_24LC256.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;  mvcChannels     1    wreg     PTR unsigned char 
  7867 ;;		 -> mvcChannels(4), 
  7868 ;;  dualADSRdata    1    0[BANK0 ] PTR unsigned char 
  7869 ;;		 -> dualADSRdata0(8), 
  7870 ;;  dualADSRdata    1    1[BANK0 ] PTR unsigned char 
  7871 ;;		 -> dualADSRdata1(8), 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  mvcChannels     1    6[BANK0 ] PTR unsigned char 
  7874 ;;		 -> mvcChannels(4), 
  7875 ;;  i               2    9[BANK0 ] int 
  7876 ;;  i               2    7[BANK0 ] int 
  7877 ;;  i               2   13[BANK0 ] int 
  7878 ;;  iPatchMemory    2   11[BANK0 ] int 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;                  1    wreg      void 
  7881 ;; Registers used:
  7882 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7888 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;Total ram usage:       15 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    3
  7895 ;; This function calls:
  7896 ;;		Nothing
  7897 ;; This function is called by:
  7898 ;;		_loadPatch
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           
  7903                           ;psect for function _updateModelFromPatchMemory
  7904  0F61                     _updateModelFromPatchMemory:	
  7905                           
  7906                           ;incstack = 0
  7907                           ; Regs used in _updateModelFromPatchMemory: [wreg+fsr1l+fsr1h+status,2+status,0]
  7908                           ;updateModelFromPatchMemory@mvcChannels stored from wreg
  7909  0F61  0020               	movlb	0	; select bank0
  7910  0F62  00A6               	movwf	updateModelFromPatchMemory@mvcChannels
  7911                           
  7912                           ;EEPROM_24LC256.c: 40: int iPatchMemoryNDX=0;
  7913  0F63  01AB               	clrf	updateModelFromPatchMemory@iPatchMemoryNDX
  7914  0F64  01AC               	clrf	updateModelFromPatchMemory@iPatchMemoryNDX+1
  7915                           
  7916                           ;EEPROM_24LC256.c: 41: for(int i=0; i<cMixFaderCount;i++) {
  7917  0F65  01AD               	clrf	updateModelFromPatchMemory@i
  7918  0F66  01AE               	clrf	updateModelFromPatchMemory@i+1
  7919  0F67  082E               	movf	updateModelFromPatchMemory@i+1,w
  7920  0F68  3A80               	xorlw	128
  7921  0F69  00A2               	movwf	??_updateModelFromPatchMemory
  7922  0F6A  3080               	movlw	128
  7923  0F6B  0222               	subwf	??_updateModelFromPatchMemory,w
  7924  0F6C  1D03               	skipz
  7925  0F6D  2F70               	goto	u2725
  7926  0F6E  3004               	movlw	4
  7927  0F6F  022D               	subwf	updateModelFromPatchMemory@i,w
  7928  0F70                     u2725:	
  7929  0F70  1803               	btfsc	3,0
  7930  0F71  2F9F               	goto	l3272
  7931  0F72                     l3266:	
  7932                           
  7933                           ;EEPROM_24LC256.c: 42: mvcChannels[i]=aPatchMemory[iPatchMemoryNDX++];
  7934  0F72  3070               	movlw	112
  7935  0F73  0020               	movlb	0	; select bank0
  7936  0F74  00A2               	movwf	??_updateModelFromPatchMemory
  7937  0F75  3023               	movlw	35
  7938  0F76  00A3               	movwf	??_updateModelFromPatchMemory+1
  7939  0F77  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  7940  0F78  0722               	addwf	??_updateModelFromPatchMemory,w
  7941  0F79  0086               	movwf	6
  7942  0F7A  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  7943  0F7B  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  7944  0F7C  0087               	movwf	7
  7945  0F7D  0801               	movf	1,w
  7946  0F7E  00A4               	movwf	??_updateModelFromPatchMemory+2
  7947  0F7F  082D               	movf	updateModelFromPatchMemory@i,w
  7948  0F80  0726               	addwf	updateModelFromPatchMemory@mvcChannels,w
  7949  0F81  00A5               	movwf	??_updateModelFromPatchMemory+3
  7950  0F82  0825               	movf	??_updateModelFromPatchMemory+3,w
  7951  0F83  0086               	movwf	6
  7952  0F84  0187               	clrf	7
  7953  0F85  0824               	movf	??_updateModelFromPatchMemory+2,w
  7954  0F86  0081               	movwf	1
  7955  0F87  3001               	movlw	1
  7956  0F88  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  7957  0F89  3000               	movlw	0
  7958  0F8A  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  7959                           
  7960                           ;EEPROM_24LC256.c: 43: faderActiveFlag[i]=0;
  7961  0F8B  082D               	movf	updateModelFromPatchMemory@i,w
  7962  0F8C  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  7963  0F8D  0086               	movwf	6
  7964  0F8E  0187               	clrf	7
  7965  0F8F  0181               	clrf	1
  7966  0F90  3001               	movlw	1
  7967  0F91  07AD               	addwf	updateModelFromPatchMemory@i,f
  7968  0F92  3000               	movlw	0
  7969  0F93  3DAE               	addwfc	updateModelFromPatchMemory@i+1,f
  7970  0F94  082E               	movf	updateModelFromPatchMemory@i+1,w
  7971  0F95  3A80               	xorlw	128
  7972  0F96  00A2               	movwf	??_updateModelFromPatchMemory
  7973  0F97  3080               	movlw	128
  7974  0F98  0222               	subwf	??_updateModelFromPatchMemory,w
  7975  0F99  1D03               	skipz
  7976  0F9A  2F9D               	goto	u2735
  7977  0F9B  3004               	movlw	4
  7978  0F9C  022D               	subwf	updateModelFromPatchMemory@i,w
  7979  0F9D                     u2735:	
  7980  0F9D  1C03               	skipc
  7981  0F9E  2F72               	goto	l3266
  7982  0F9F                     l3272:	
  7983                           
  7984                           ;EEPROM_24LC256.c: 44: }
  7985                           ;EEPROM_24LC256.c: 45: for(int i=0; i<cADSRdataBytes;i++) {
  7986  0F9F  0020               	movlb	0	; select bank0
  7987  0FA0  01A7               	clrf	updateModelFromPatchMemory@i_1229
  7988  0FA1  01A8               	clrf	updateModelFromPatchMemory@i_1229+1
  7989  0FA2  0828               	movf	updateModelFromPatchMemory@i_1229+1,w
  7990  0FA3  3A80               	xorlw	128
  7991  0FA4  00A2               	movwf	??_updateModelFromPatchMemory
  7992  0FA5  3080               	movlw	128
  7993  0FA6  0222               	subwf	??_updateModelFromPatchMemory,w
  7994  0FA7  3008               	movlw	8
  7995  0FA8  1903               	btfsc	3,2
  7996  0FA9  0227               	subwf	updateModelFromPatchMemory@i_1229,w
  7997  0FAA  1803               	btfsc	3,0
  7998  0FAB  2FD4               	goto	l3286
  7999  0FAC                     l3278:	
  8000                           
  8001                           ;EEPROM_24LC256.c: 46: dualADSRdata0[i]=aPatchMemory[iPatchMemoryNDX++];
  8002  0FAC  3070               	movlw	112
  8003  0FAD  0020               	movlb	0	; select bank0
  8004  0FAE  00A2               	movwf	??_updateModelFromPatchMemory
  8005  0FAF  3023               	movlw	35
  8006  0FB0  00A3               	movwf	??_updateModelFromPatchMemory+1
  8007  0FB1  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  8008  0FB2  0722               	addwf	??_updateModelFromPatchMemory,w
  8009  0FB3  0086               	movwf	6
  8010  0FB4  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  8011  0FB5  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  8012  0FB6  0087               	movwf	7
  8013  0FB7  0801               	movf	1,w
  8014  0FB8  00A4               	movwf	??_updateModelFromPatchMemory+2
  8015  0FB9  0827               	movf	updateModelFromPatchMemory@i_1229,w
  8016  0FBA  0720               	addwf	updateModelFromPatchMemory@dualADSRdata0,w
  8017  0FBB  00A5               	movwf	??_updateModelFromPatchMemory+3
  8018  0FBC  0825               	movf	??_updateModelFromPatchMemory+3,w
  8019  0FBD  0086               	movwf	6
  8020  0FBE  3001               	movlw	1	; select bank2/3
  8021  0FBF  0087               	movwf	7
  8022  0FC0  0824               	movf	??_updateModelFromPatchMemory+2,w
  8023  0FC1  0081               	movwf	1
  8024  0FC2  3001               	movlw	1
  8025  0FC3  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  8026  0FC4  3000               	movlw	0
  8027  0FC5  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  8028  0FC6  3001               	movlw	1
  8029  0FC7  07A7               	addwf	updateModelFromPatchMemory@i_1229,f
  8030  0FC8  3000               	movlw	0
  8031  0FC9  3DA8               	addwfc	updateModelFromPatchMemory@i_1229+1,f
  8032  0FCA  0828               	movf	updateModelFromPatchMemory@i_1229+1,w
  8033  0FCB  3A80               	xorlw	128
  8034  0FCC  00A2               	movwf	??_updateModelFromPatchMemory
  8035  0FCD  3080               	movlw	128
  8036  0FCE  0222               	subwf	??_updateModelFromPatchMemory,w
  8037  0FCF  3008               	movlw	8
  8038  0FD0  1903               	btfsc	3,2
  8039  0FD1  0227               	subwf	updateModelFromPatchMemory@i_1229,w
  8040  0FD2  1C03               	skipc
  8041  0FD3  2FAC               	goto	l3278
  8042  0FD4                     l3286:	
  8043                           
  8044                           ;EEPROM_24LC256.c: 47: }
  8045                           ;EEPROM_24LC256.c: 48: for(int i=0; i<cADSRdataBytes;i++) {
  8046  0FD4  0020               	movlb	0	; select bank0
  8047  0FD5  01A9               	clrf	updateModelFromPatchMemory@i_1230
  8048  0FD6  01AA               	clrf	updateModelFromPatchMemory@i_1230+1
  8049  0FD7                     L4:	
  8050  0FD7  082A               	movf	updateModelFromPatchMemory@i_1230+1,w
  8051  0FD8  3A80               	xorlw	128
  8052  0FD9  00A2               	movwf	??_updateModelFromPatchMemory
  8053  0FDA  3080               	movlw	128
  8054  0FDB  0222               	subwf	??_updateModelFromPatchMemory,w
  8055  0FDC  3008               	movlw	8
  8056  0FDD  1903               	btfsc	3,2
  8057  0FDE  0229               	subwf	updateModelFromPatchMemory@i_1230,w
  8058  0FDF  1803               	btfsc	3,0
  8059  0FE0  0008               	return
  8060                           
  8061                           ;EEPROM_24LC256.c: 49: dualADSRdata1[i]=aPatchMemory[iPatchMemoryNDX++];
  8062  0FE1  3070               	movlw	112
  8063  0FE2  0020               	movlb	0	; select bank0
  8064  0FE3  00A2               	movwf	??_updateModelFromPatchMemory
  8065  0FE4  3023               	movlw	35
  8066  0FE5  00A3               	movwf	??_updateModelFromPatchMemory+1
  8067  0FE6  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  8068  0FE7  0722               	addwf	??_updateModelFromPatchMemory,w
  8069  0FE8  0086               	movwf	6
  8070  0FE9  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  8071  0FEA  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  8072  0FEB  0087               	movwf	7
  8073  0FEC  0801               	movf	1,w
  8074  0FED  00A4               	movwf	??_updateModelFromPatchMemory+2
  8075  0FEE  0829               	movf	updateModelFromPatchMemory@i_1230,w
  8076  0FEF  0721               	addwf	updateModelFromPatchMemory@dualADSRdata1,w
  8077  0FF0  00A5               	movwf	??_updateModelFromPatchMemory+3
  8078  0FF1  0825               	movf	??_updateModelFromPatchMemory+3,w
  8079  0FF2  0086               	movwf	6
  8080  0FF3  3001               	movlw	1	; select bank2/3
  8081  0FF4  0087               	movwf	7
  8082  0FF5  0824               	movf	??_updateModelFromPatchMemory+2,w
  8083  0FF6  0081               	movwf	1
  8084  0FF7  3001               	movlw	1
  8085  0FF8  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  8086  0FF9  3000               	movlw	0
  8087  0FFA  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  8088  0FFB  3001               	movlw	1
  8089  0FFC  07A9               	addwf	updateModelFromPatchMemory@i_1230,f
  8090  0FFD  3000               	movlw	0
  8091  0FFE  3DAA               	addwfc	updateModelFromPatchMemory@i_1230+1,f
  8092  0FFF  2FD7               	goto	L4
  8093  1000                     __end_of_updateModelFromPatchMemory:	
  8094                           
  8095                           	psect	text7
  8096  0A3B                     __ptext7:	
  8097 ;; *************** function _initDAC528 *****************
  8098 ;; Defined at:
  8099 ;;		line 44 in file "VCAMIX_SPI_Master.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;		None
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;		None
  8104 ;; Return value:  Size  Location     Type
  8105 ;;                  1    wreg      void 
  8106 ;; Registers used:
  8107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8108 ;; Tracked objects:
  8109 ;;		On entry : 0/0
  8110 ;;		On exit  : 0/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;Total ram usage:        1 bytes
  8118 ;; Hardware stack levels used:    1
  8119 ;; Hardware stack levels required when called:    6
  8120 ;; This function calls:
  8121 ;;		_putByte
  8122 ;; This function is called by:
  8123 ;;		_main
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           
  8128                           ;psect for function _initDAC528
  8129  0A3B                     _initDAC528:	
  8130                           
  8131                           ;VCAMIX_SPI_Master.c: 48: LATA &= 0x7F ;
  8132                           
  8133                           ;incstack = 0
  8134                           ; Regs used in _initDAC528: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8135  0A3B  307F               	movlw	127
  8136  0A3C  0020               	movlb	0	; select bank0
  8137  0A3D  00D5               	movwf	??_initDAC528
  8138  0A3E  0855               	movf	??_initDAC528,w
  8139  0A3F  0596               	andwf	22,f	;volatile
  8140                           
  8141                           ;VCAMIX_SPI_Master.c: 50: putByte(0x00,0);
  8142  0A40  3000               	movlw	0
  8143  0A41  00CC               	movwf	putByte@clockPin
  8144  0A42  00CD               	movwf	putByte@clockPin+1
  8145  0A43  3000               	movlw	0
  8146  0A44  3185  2581  318A   	fcall	_putByte
  8147                           
  8148                           ;VCAMIX_SPI_Master.c: 52: putByte(0xFF,0);
  8149  0A47  3000               	movlw	0
  8150  0A48  0020               	movlb	0	; select bank0
  8151  0A49  00CC               	movwf	putByte@clockPin
  8152  0A4A  00CD               	movwf	putByte@clockPin+1
  8153  0A4B  30FF               	movlw	255
  8154  0A4C  3185  2581         	fcall	_putByte
  8155                           
  8156                           ;VCAMIX_SPI_Master.c: 54: LATA |= 0x80 ;
  8157  0A4E  0020               	movlb	0	; select bank0
  8158  0A4F  1796               	bsf	22,7	;volatile
  8159  0A50  0008               	return
  8160  0A51                     __end_of_initDAC528:	
  8161                           
  8162                           	psect	text8
  8163  0581                     __ptext8:	
  8164 ;; *************** function _putByte *****************
  8165 ;; Defined at:
  8166 ;;		line 14 in file "VCAMIX_SPI_Master.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;  data            1    wreg     unsigned char 
  8169 ;;  clockPin        2   44[BANK0 ] int 
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;  data            1   50[BANK0 ] unsigned char 
  8172 ;;  i               1   52[BANK0 ] unsigned char 
  8173 ;;  mask            1   51[BANK0 ] unsigned char 
  8174 ;; Return value:  Size  Location     Type
  8175 ;;                  1    wreg      void 
  8176 ;; Registers used:
  8177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8183 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;Total ram usage:        9 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    5
  8190 ;; This function calls:
  8191 ;;		___awtoft
  8192 ;;		___ftmul
  8193 ;;		___fttol
  8194 ;; This function is called by:
  8195 ;;		_initDAC528
  8196 ;;		_writeDAC528
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           
  8201                           ;psect for function _putByte
  8202  0581                     _putByte:	
  8203                           
  8204                           ;incstack = 0
  8205                           ; Regs used in _putByte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8206                           ;putByte@data stored from wreg
  8207  0581  0020               	movlb	0	; select bank0
  8208  0582  00D2               	movwf	putByte@data
  8209                           
  8210                           ;VCAMIX_SPI_Master.c: 15: uint8_t i = 8;
  8211  0583  3008               	movlw	8
  8212  0584  00CE               	movwf	??_putByte
  8213  0585  084E               	movf	??_putByte,w
  8214  0586  00D4               	movwf	putByte@i
  8215  0587                     l775:	
  8216                           ;VCAMIX_SPI_Master.c: 16: uint8_t mask;
  8217                           ;VCAMIX_SPI_Master.c: 17: while(i > 0) {
  8218                           
  8219  0587  0854               	movf	putByte@i,w
  8220  0588  1903               	btfsc	3,2
  8221  0589  0008               	return
  8222                           
  8223                           ;VCAMIX_SPI_Master.c: 18: mask = 0x01 << (i - 1);
  8224  058A  3001               	movlw	1
  8225  058B  00CE               	movwf	??_putByte
  8226  058C  0854               	movf	putByte@i,w
  8227  058D  3EFF               	addlw	-1
  8228  058E  0A89               	incf	9,f
  8229  058F  2D91               	goto	u2414
  8230  0590                     u2415:	
  8231  0590  35CE               	lslf	??_putByte,f
  8232  0591                     u2414:	
  8233  0591  0B89               	decfsz	9,f
  8234  0592  2D90               	goto	u2415
  8235  0593  084E               	movf	??_putByte,w
  8236  0594  00CF               	movwf	??_putByte+1
  8237  0595  084F               	movf	??_putByte+1,w
  8238  0596  00D3               	movwf	putByte@mask
  8239                           
  8240                           ;VCAMIX_SPI_Master.c: 20: LATB &= 0xBF ;
  8241  0597  30BF               	movlw	191
  8242  0598  00CE               	movwf	??_putByte
  8243  0599  084E               	movf	??_putByte,w
  8244  059A  0597               	andwf	23,f	;volatile
  8245                           
  8246                           ;VCAMIX_SPI_Master.c: 22: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8247  059B  3018               	movlw	low (_clockMicroTime| (0+32768))
  8248  059C  0084               	movwf	4
  8249  059D  3090               	movlw	high (_clockMicroTime| (0+32768))
  8250  059E  0085               	movwf	5
  8251  059F  3F00               	moviw [0]fsr0
  8252  05A0  00A8               	movwf	___awtoft@c
  8253  05A1  3F01               	moviw [1]fsr0
  8254  05A2  00A9               	movwf	___awtoft@c+1
  8255  05A3  318B  232A  3185   	fcall	___awtoft
  8256  05A6  0020               	movlb	0	; select bank0
  8257  05A7  0828               	movf	?___awtoft,w
  8258  05A8  00B1               	movwf	___ftmul@f2
  8259  05A9  0829               	movf	?___awtoft+1,w
  8260  05AA  00B2               	movwf	___ftmul@f2+1
  8261  05AB  082A               	movf	?___awtoft+2,w
  8262  05AC  00B3               	movwf	___ftmul@f2+2
  8263  05AD  3000               	movlw	0
  8264  05AE  00AE               	movwf	___ftmul@f1
  8265  05AF  3000               	movlw	0
  8266  05B0  00AF               	movwf	___ftmul@f1+1
  8267  05B1  3041               	movlw	65
  8268  05B2  00B0               	movwf	___ftmul@f1+2
  8269  05B3  3186  2636  3185   	fcall	___ftmul
  8270  05B6  0020               	movlb	0	; select bank0
  8271  05B7  082E               	movf	?___ftmul,w
  8272  05B8  00BE               	movwf	___fttol@f1
  8273  05B9  082F               	movf	?___ftmul+1,w
  8274  05BA  00BF               	movwf	___fttol@f1+1
  8275  05BB  0830               	movf	?___ftmul+2,w
  8276  05BC  00C0               	movwf	___fttol@f1+2
  8277  05BD  318E  2640  3185   	fcall	___fttol
  8278  05C0  0020               	movlb	0	; select bank0
  8279  05C1  083E               	movf	?___fttol,w
  8280  05C2  00CE               	movwf	??_putByte
  8281  05C3  083F               	movf	?___fttol+1,w
  8282  05C4  00CF               	movwf	??_putByte+1
  8283  05C5  0840               	movf	?___fttol+2,w
  8284  05C6  00D0               	movwf	??_putByte+2
  8285  05C7  0841               	movf	?___fttol+3,w
  8286  05C8  00D1               	movwf	??_putByte+3
  8287                           
  8288                           ;VCAMIX_SPI_Master.c: 23: if (data & mask){
  8289  05C9  0020               	movlb	0	; select bank0
  8290  05CA  0852               	movf	putByte@data,w
  8291  05CB  0553               	andwf	putByte@mask,w
  8292  05CC  1903               	btfsc	3,2
  8293  05CD  2DD0               	goto	l2982
  8294                           
  8295                           ;VCAMIX_SPI_Master.c: 25: LATB |= 0x80 ;
  8296  05CE  1797               	bsf	23,7	;volatile
  8297                           
  8298                           ;VCAMIX_SPI_Master.c: 26: }else{
  8299  05CF  2DD4               	goto	l2984
  8300  05D0                     l2982:	
  8301                           
  8302                           ;VCAMIX_SPI_Master.c: 28: LATB &= 0x7F ;
  8303  05D0  307F               	movlw	127
  8304  05D1  00CE               	movwf	??_putByte
  8305  05D2  084E               	movf	??_putByte,w
  8306  05D3  0597               	andwf	23,f	;volatile
  8307  05D4                     l2984:	
  8308                           
  8309                           ;VCAMIX_SPI_Master.c: 29: }
  8310                           ;VCAMIX_SPI_Master.c: 31: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8311  05D4  3018               	movlw	low (_clockMicroTime| (0+32768))
  8312  05D5  0084               	movwf	4
  8313  05D6  3090               	movlw	high (_clockMicroTime| (0+32768))
  8314  05D7  0085               	movwf	5
  8315  05D8  3F00               	moviw [0]fsr0
  8316  05D9  00A8               	movwf	___awtoft@c
  8317  05DA  3F01               	moviw [1]fsr0
  8318  05DB  00A9               	movwf	___awtoft@c+1
  8319  05DC  318B  232A  3185   	fcall	___awtoft
  8320  05DF  0020               	movlb	0	; select bank0
  8321  05E0  0828               	movf	?___awtoft,w
  8322  05E1  00B1               	movwf	___ftmul@f2
  8323  05E2  0829               	movf	?___awtoft+1,w
  8324  05E3  00B2               	movwf	___ftmul@f2+1
  8325  05E4  082A               	movf	?___awtoft+2,w
  8326  05E5  00B3               	movwf	___ftmul@f2+2
  8327  05E6  3000               	movlw	0
  8328  05E7  00AE               	movwf	___ftmul@f1
  8329  05E8  3000               	movlw	0
  8330  05E9  00AF               	movwf	___ftmul@f1+1
  8331  05EA  3041               	movlw	65
  8332  05EB  00B0               	movwf	___ftmul@f1+2
  8333  05EC  3186  2636  3185   	fcall	___ftmul
  8334  05EF  0020               	movlb	0	; select bank0
  8335  05F0  082E               	movf	?___ftmul,w
  8336  05F1  00BE               	movwf	___fttol@f1
  8337  05F2  082F               	movf	?___ftmul+1,w
  8338  05F3  00BF               	movwf	___fttol@f1+1
  8339  05F4  0830               	movf	?___ftmul+2,w
  8340  05F5  00C0               	movwf	___fttol@f1+2
  8341  05F6  318E  2640  3185   	fcall	___fttol
  8342  05F9  0020               	movlb	0	; select bank0
  8343  05FA  083E               	movf	?___fttol,w
  8344  05FB  00CE               	movwf	??_putByte
  8345  05FC  083F               	movf	?___fttol+1,w
  8346  05FD  00CF               	movwf	??_putByte+1
  8347  05FE  0840               	movf	?___fttol+2,w
  8348  05FF  00D0               	movwf	??_putByte+2
  8349  0600  0841               	movf	?___fttol+3,w
  8350  0601  00D1               	movwf	??_putByte+3
  8351                           
  8352                           ;VCAMIX_SPI_Master.c: 33: LATB |= 0x40 ;
  8353  0602  0020               	movlb	0	; select bank0
  8354  0603  1717               	bsf	23,6	;volatile
  8355                           
  8356                           ;VCAMIX_SPI_Master.c: 35: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8357  0604  3018               	movlw	low (_clockMicroTime| (0+32768))
  8358  0605  0084               	movwf	4
  8359  0606  3090               	movlw	high (_clockMicroTime| (0+32768))
  8360  0607  0085               	movwf	5
  8361  0608  3F00               	moviw [0]fsr0
  8362  0609  00A8               	movwf	___awtoft@c
  8363  060A  3F01               	moviw [1]fsr0
  8364  060B  00A9               	movwf	___awtoft@c+1
  8365  060C  318B  232A  3185   	fcall	___awtoft
  8366  060F  0020               	movlb	0	; select bank0
  8367  0610  0828               	movf	?___awtoft,w
  8368  0611  00B1               	movwf	___ftmul@f2
  8369  0612  0829               	movf	?___awtoft+1,w
  8370  0613  00B2               	movwf	___ftmul@f2+1
  8371  0614  082A               	movf	?___awtoft+2,w
  8372  0615  00B3               	movwf	___ftmul@f2+2
  8373  0616  3000               	movlw	0
  8374  0617  00AE               	movwf	___ftmul@f1
  8375  0618  3000               	movlw	0
  8376  0619  00AF               	movwf	___ftmul@f1+1
  8377  061A  3041               	movlw	65
  8378  061B  00B0               	movwf	___ftmul@f1+2
  8379  061C  3186  2636  3185   	fcall	___ftmul
  8380  061F  0020               	movlb	0	; select bank0
  8381  0620  082E               	movf	?___ftmul,w
  8382  0621  00BE               	movwf	___fttol@f1
  8383  0622  082F               	movf	?___ftmul+1,w
  8384  0623  00BF               	movwf	___fttol@f1+1
  8385  0624  0830               	movf	?___ftmul+2,w
  8386  0625  00C0               	movwf	___fttol@f1+2
  8387  0626  318E  2640  3185   	fcall	___fttol
  8388  0629  0020               	movlb	0	; select bank0
  8389  062A  083E               	movf	?___fttol,w
  8390  062B  00CE               	movwf	??_putByte
  8391  062C  083F               	movf	?___fttol+1,w
  8392  062D  00CF               	movwf	??_putByte+1
  8393  062E  0840               	movf	?___fttol+2,w
  8394  062F  00D0               	movwf	??_putByte+2
  8395  0630  0841               	movf	?___fttol+3,w
  8396  0631  00D1               	movwf	??_putByte+3
  8397                           
  8398                           ;VCAMIX_SPI_Master.c: 36: --i;
  8399  0632  3001               	movlw	1
  8400  0633  0020               	movlb	0	; select bank0
  8401  0634  02D4               	subwf	putByte@i,f
  8402  0635  2D87               	goto	l775
  8403  0636                     __end_of_putByte:	
  8404                           
  8405                           	psect	text9
  8406  0E40                     __ptext9:	
  8407 ;; *************** function ___fttol *****************
  8408 ;; Defined at:
  8409 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  8410 ;; Parameters:    Size  Location     Type
  8411 ;;  f1              3   30[BANK0 ] float 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  lval            4   39[BANK0 ] unsigned long 
  8414 ;;  exp1            1   43[BANK0 ] unsigned char 
  8415 ;;  sign1           1   38[BANK0 ] unsigned char 
  8416 ;; Return value:  Size  Location     Type
  8417 ;;                  4   30[BANK0 ] long 
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, status,0
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8425 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;Total ram usage:       14 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    3
  8432 ;; This function calls:
  8433 ;;		Nothing
  8434 ;; This function is called by:
  8435 ;;		_main
  8436 ;;		_putByte
  8437 ;;		_LED7SegDisplayValue
  8438 ;; This function uses a non-reentrant model
  8439 ;;
  8440                           
  8441                           
  8442                           ;psect for function ___fttol
  8443  0E40                     ___fttol:	
  8444                           
  8445                           ;incstack = 0
  8446                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8447  0E40  0020               	movlb	0	; select bank0
  8448  0E41  083E               	movf	___fttol@f1,w
  8449  0E42  00C2               	movwf	??___fttol
  8450  0E43  083F               	movf	___fttol@f1+1,w
  8451  0E44  00C3               	movwf	??___fttol+1
  8452  0E45  0840               	movf	___fttol@f1+2,w
  8453  0E46  00C4               	movwf	??___fttol+2
  8454  0E47  1003               	clrc
  8455  0E48  0D43               	rlf	??___fttol+1,w
  8456  0E49  0D44               	rlf	??___fttol+2,w
  8457  0E4A  00C5               	movwf	??___fttol+3
  8458  0E4B  0845               	movf	??___fttol+3,w
  8459  0E4C  00CB               	movwf	___fttol@exp1
  8460  0E4D  084B               	movf	___fttol@exp1,w
  8461  0E4E  1D03               	btfss	3,2
  8462  0E4F  2E59               	goto	l2924
  8463  0E50  3000               	movlw	0
  8464  0E51  00C1               	movwf	?___fttol+3
  8465  0E52  3000               	movlw	0
  8466  0E53  00C0               	movwf	?___fttol+2
  8467  0E54  3000               	movlw	0
  8468  0E55  00BF               	movwf	?___fttol+1
  8469  0E56  3000               	movlw	0
  8470  0E57  00BE               	movwf	?___fttol
  8471  0E58  0008               	return
  8472  0E59                     l2924:	
  8473  0E59  083E               	movf	___fttol@f1,w
  8474  0E5A  00C2               	movwf	??___fttol
  8475  0E5B  083F               	movf	___fttol@f1+1,w
  8476  0E5C  00C3               	movwf	??___fttol+1
  8477  0E5D  0840               	movf	___fttol@f1+2,w
  8478  0E5E  00C4               	movwf	??___fttol+2
  8479  0E5F  3017               	movlw	23
  8480  0E60                     u2305:	
  8481  0E60  36C4               	lsrf	??___fttol+2,f
  8482  0E61  0CC3               	rrf	??___fttol+1,f
  8483  0E62  0CC2               	rrf	??___fttol,f
  8484  0E63  0B89               	decfsz	9,f
  8485  0E64  2E60               	goto	u2305
  8486  0E65  0842               	movf	??___fttol,w
  8487  0E66  00C5               	movwf	??___fttol+3
  8488  0E67  0845               	movf	??___fttol+3,w
  8489  0E68  00C6               	movwf	___fttol@sign1
  8490  0E69  17BF               	bsf	___fttol@f1+1,7
  8491  0E6A  30FF               	movlw	255
  8492  0E6B  05BE               	andwf	___fttol@f1,f
  8493  0E6C  30FF               	movlw	255
  8494  0E6D  05BF               	andwf	___fttol@f1+1,f
  8495  0E6E  3000               	movlw	0
  8496  0E6F  05C0               	andwf	___fttol@f1+2,f
  8497  0E70  083E               	movf	___fttol@f1,w
  8498  0E71  00C7               	movwf	___fttol@lval
  8499  0E72  083F               	movf	___fttol@f1+1,w
  8500  0E73  00C8               	movwf	___fttol@lval+1
  8501  0E74  0840               	movf	___fttol@f1+2,w
  8502  0E75  00C9               	movwf	___fttol@lval+2
  8503  0E76  01CA               	clrf	___fttol@lval+3
  8504  0E77  308E               	movlw	142
  8505  0E78  02CB               	subwf	___fttol@exp1,f
  8506  0E79  1FCB               	btfss	___fttol@exp1,7
  8507  0E7A  2E97               	goto	l2944
  8508  0E7B  084B               	movf	___fttol@exp1,w
  8509  0E7C  3A80               	xorlw	128
  8510  0E7D  3E8F               	addlw	143
  8511  0E7E  1803               	skipnc
  8512  0E7F  2E89               	goto	l2942
  8513  0E80  3000               	movlw	0
  8514  0E81  00C1               	movwf	?___fttol+3
  8515  0E82  3000               	movlw	0
  8516  0E83  00C0               	movwf	?___fttol+2
  8517  0E84  3000               	movlw	0
  8518  0E85  00BF               	movwf	?___fttol+1
  8519  0E86  3000               	movlw	0
  8520  0E87  00BE               	movwf	?___fttol
  8521  0E88  0008               	return
  8522  0E89                     l2942:	
  8523  0E89  3001               	movlw	1
  8524  0E8A                     u2335:	
  8525  0E8A  36CA               	lsrf	___fttol@lval+3,f
  8526  0E8B  0CC9               	rrf	___fttol@lval+2,f
  8527  0E8C  0CC8               	rrf	___fttol@lval+1,f
  8528  0E8D  0CC7               	rrf	___fttol@lval,f
  8529  0E8E  0B89               	decfsz	9,f
  8530  0E8F  2E8A               	goto	u2335
  8531  0E90  3001               	movlw	1
  8532  0E91  00C2               	movwf	??___fttol
  8533  0E92  0842               	movf	??___fttol,w
  8534  0E93  07CB               	addwf	___fttol@exp1,f
  8535  0E94  1903               	btfsc	3,2
  8536  0E95  2EB0               	goto	l2952
  8537  0E96  2E89               	goto	l2942
  8538  0E97                     l2944:	
  8539  0E97  3018               	movlw	24
  8540  0E98  024B               	subwf	___fttol@exp1,w
  8541  0E99  1C03               	skipc
  8542  0E9A  2EAD               	goto	l1202
  8543  0E9B  3000               	movlw	0
  8544  0E9C  00C1               	movwf	?___fttol+3
  8545  0E9D  3000               	movlw	0
  8546  0E9E  00C0               	movwf	?___fttol+2
  8547  0E9F  3000               	movlw	0
  8548  0EA0  00BF               	movwf	?___fttol+1
  8549  0EA1  3000               	movlw	0
  8550  0EA2  00BE               	movwf	?___fttol
  8551  0EA3  0008               	return
  8552  0EA4                     l2950:	
  8553  0EA4  3001               	movlw	1
  8554  0EA5                     u2365:	
  8555  0EA5  35C7               	lslf	___fttol@lval,f
  8556  0EA6  0DC8               	rlf	___fttol@lval+1,f
  8557  0EA7  0DC9               	rlf	___fttol@lval+2,f
  8558  0EA8  0DCA               	rlf	___fttol@lval+3,f
  8559  0EA9  0B89               	decfsz	9,f
  8560  0EAA  2EA5               	goto	u2365
  8561  0EAB  3001               	movlw	1
  8562  0EAC  02CB               	subwf	___fttol@exp1,f
  8563  0EAD                     l1202:	
  8564  0EAD  084B               	movf	___fttol@exp1,w
  8565  0EAE  1D03               	btfss	3,2
  8566  0EAF  2EA4               	goto	l2950
  8567  0EB0                     l2952:	
  8568  0EB0  0846               	movf	___fttol@sign1,w
  8569  0EB1  1903               	btfsc	3,2
  8570  0EB2  2EBE               	goto	l2956
  8571  0EB3  09C7               	comf	___fttol@lval,f
  8572  0EB4  09C8               	comf	___fttol@lval+1,f
  8573  0EB5  09C9               	comf	___fttol@lval+2,f
  8574  0EB6  09CA               	comf	___fttol@lval+3,f
  8575  0EB7  0AC7               	incf	___fttol@lval,f
  8576  0EB8  1903               	skipnz
  8577  0EB9  0AC8               	incf	___fttol@lval+1,f
  8578  0EBA  1903               	skipnz
  8579  0EBB  0AC9               	incf	___fttol@lval+2,f
  8580  0EBC  1903               	skipnz
  8581  0EBD  0ACA               	incf	___fttol@lval+3,f
  8582  0EBE                     l2956:	
  8583  0EBE  084A               	movf	___fttol@lval+3,w
  8584  0EBF  00C1               	movwf	?___fttol+3
  8585  0EC0  0849               	movf	___fttol@lval+2,w
  8586  0EC1  00C0               	movwf	?___fttol+2
  8587  0EC2  0848               	movf	___fttol@lval+1,w
  8588  0EC3  00BF               	movwf	?___fttol+1
  8589  0EC4  0847               	movf	___fttol@lval,w
  8590  0EC5  00BE               	movwf	?___fttol
  8591  0EC6  0008               	return
  8592  0EC7                     __end_of___fttol:	
  8593                           
  8594                           	psect	text10
  8595  0636                     __ptext10:	
  8596 ;; *************** function ___ftmul *****************
  8597 ;; Defined at:
  8598 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;  f1              3   14[BANK0 ] float 
  8601 ;;  f2              3   17[BANK0 ] float 
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8604 ;;  sign            1   29[BANK0 ] unsigned char 
  8605 ;;  cntr            1   28[BANK0 ] unsigned char 
  8606 ;;  exp             1   24[BANK0 ] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  3   14[BANK0 ] float 
  8609 ;; Registers used:
  8610 ;;		wreg, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8616 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;Total ram usage:       16 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    4
  8623 ;; This function calls:
  8624 ;;		___ftpack
  8625 ;; This function is called by:
  8626 ;;		_putByte
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           
  8631                           ;psect for function ___ftmul
  8632  0636                     ___ftmul:	
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8636  0636  0020               	movlb	0	; select bank0
  8637  0637  082E               	movf	___ftmul@f1,w
  8638  0638  00B4               	movwf	??___ftmul
  8639  0639  082F               	movf	___ftmul@f1+1,w
  8640  063A  00B5               	movwf	??___ftmul+1
  8641  063B  0830               	movf	___ftmul@f1+2,w
  8642  063C  00B6               	movwf	??___ftmul+2
  8643  063D  1003               	clrc
  8644  063E  0D35               	rlf	??___ftmul+1,w
  8645  063F  0D36               	rlf	??___ftmul+2,w
  8646  0640  00B7               	movwf	??___ftmul+3
  8647  0641  0837               	movf	??___ftmul+3,w
  8648  0642  00B8               	movwf	___ftmul@exp
  8649  0643  0838               	movf	___ftmul@exp,w
  8650  0644  1D03               	btfss	3,2
  8651  0645  2E4D               	goto	l2874
  8652  0646  3000               	movlw	0
  8653  0647  00AE               	movwf	?___ftmul
  8654  0648  3000               	movlw	0
  8655  0649  00AF               	movwf	?___ftmul+1
  8656  064A  3000               	movlw	0
  8657  064B  00B0               	movwf	?___ftmul+2
  8658  064C  0008               	return
  8659  064D                     l2874:	
  8660  064D  0831               	movf	___ftmul@f2,w
  8661  064E  00B4               	movwf	??___ftmul
  8662  064F  0832               	movf	___ftmul@f2+1,w
  8663  0650  00B5               	movwf	??___ftmul+1
  8664  0651  0833               	movf	___ftmul@f2+2,w
  8665  0652  00B6               	movwf	??___ftmul+2
  8666  0653  1003               	clrc
  8667  0654  0D35               	rlf	??___ftmul+1,w
  8668  0655  0D36               	rlf	??___ftmul+2,w
  8669  0656  00B7               	movwf	??___ftmul+3
  8670  0657  0837               	movf	??___ftmul+3,w
  8671  0658  00BD               	movwf	___ftmul@sign
  8672  0659  083D               	movf	___ftmul@sign,w
  8673  065A  1D03               	btfss	3,2
  8674  065B  2E63               	goto	l2880
  8675  065C  3000               	movlw	0
  8676  065D  00AE               	movwf	?___ftmul
  8677  065E  3000               	movlw	0
  8678  065F  00AF               	movwf	?___ftmul+1
  8679  0660  3000               	movlw	0
  8680  0661  00B0               	movwf	?___ftmul+2
  8681  0662  0008               	return
  8682  0663                     l2880:	
  8683  0663  083D               	movf	___ftmul@sign,w
  8684  0664  3E7B               	addlw	123
  8685  0665  00B4               	movwf	??___ftmul
  8686  0666  0834               	movf	??___ftmul,w
  8687  0667  07B8               	addwf	___ftmul@exp,f
  8688  0668  082E               	movf	___ftmul@f1,w
  8689  0669  00B4               	movwf	??___ftmul
  8690  066A  082F               	movf	___ftmul@f1+1,w
  8691  066B  00B5               	movwf	??___ftmul+1
  8692  066C  0830               	movf	___ftmul@f1+2,w
  8693  066D  00B6               	movwf	??___ftmul+2
  8694  066E  3010               	movlw	16
  8695  066F                     u2195:	
  8696  066F  36B6               	lsrf	??___ftmul+2,f
  8697  0670  0CB5               	rrf	??___ftmul+1,f
  8698  0671  0CB4               	rrf	??___ftmul,f
  8699  0672  0B89               	decfsz	9,f
  8700  0673  2E6F               	goto	u2195
  8701  0674  0834               	movf	??___ftmul,w
  8702  0675  00B7               	movwf	??___ftmul+3
  8703  0676  0837               	movf	??___ftmul+3,w
  8704  0677  00BD               	movwf	___ftmul@sign
  8705  0678  0831               	movf	___ftmul@f2,w
  8706  0679  00B4               	movwf	??___ftmul
  8707  067A  0832               	movf	___ftmul@f2+1,w
  8708  067B  00B5               	movwf	??___ftmul+1
  8709  067C  0833               	movf	___ftmul@f2+2,w
  8710  067D  00B6               	movwf	??___ftmul+2
  8711  067E  3010               	movlw	16
  8712  067F                     u2205:	
  8713  067F  36B6               	lsrf	??___ftmul+2,f
  8714  0680  0CB5               	rrf	??___ftmul+1,f
  8715  0681  0CB4               	rrf	??___ftmul,f
  8716  0682  0B89               	decfsz	9,f
  8717  0683  2E7F               	goto	u2205
  8718  0684  0834               	movf	??___ftmul,w
  8719  0685  00B7               	movwf	??___ftmul+3
  8720  0686  0837               	movf	??___ftmul+3,w
  8721  0687  06BD               	xorwf	___ftmul@sign,f
  8722  0688  3080               	movlw	128
  8723  0689  00B4               	movwf	??___ftmul
  8724  068A  0834               	movf	??___ftmul,w
  8725  068B  05BD               	andwf	___ftmul@sign,f
  8726  068C  17AF               	bsf	___ftmul@f1+1,7
  8727  068D  17B2               	bsf	___ftmul@f2+1,7
  8728  068E  30FF               	movlw	255
  8729  068F  05B1               	andwf	___ftmul@f2,f
  8730  0690  30FF               	movlw	255
  8731  0691  05B2               	andwf	___ftmul@f2+1,f
  8732  0692  3000               	movlw	0
  8733  0693  05B3               	andwf	___ftmul@f2+2,f
  8734  0694  3000               	movlw	0
  8735  0695  00B9               	movwf	___ftmul@f3_as_product
  8736  0696  3000               	movlw	0
  8737  0697  00BA               	movwf	___ftmul@f3_as_product+1
  8738  0698  3000               	movlw	0
  8739  0699  00BB               	movwf	___ftmul@f3_as_product+2
  8740  069A  3007               	movlw	7
  8741  069B  00B4               	movwf	??___ftmul
  8742  069C  0834               	movf	??___ftmul,w
  8743  069D  00BC               	movwf	___ftmul@cntr
  8744  069E                     l2892:	
  8745  069E  1C2E               	btfss	___ftmul@f1,0
  8746  069F  2EA6               	goto	l2896
  8747  06A0  0831               	movf	___ftmul@f2,w
  8748  06A1  07B9               	addwf	___ftmul@f3_as_product,f
  8749  06A2  0832               	movf	___ftmul@f2+1,w
  8750  06A3  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8751  06A4  0833               	movf	___ftmul@f2+2,w
  8752  06A5  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8753  06A6                     l2896:	
  8754  06A6  3001               	movlw	1
  8755  06A7                     u2225:	
  8756  06A7  36B0               	lsrf	___ftmul@f1+2,f
  8757  06A8  0CAF               	rrf	___ftmul@f1+1,f
  8758  06A9  0CAE               	rrf	___ftmul@f1,f
  8759  06AA  0B89               	decfsz	9,f
  8760  06AB  2EA7               	goto	u2225
  8761  06AC  3001               	movlw	1
  8762  06AD                     u2235:	
  8763  06AD  35B1               	lslf	___ftmul@f2,f
  8764  06AE  0DB2               	rlf	___ftmul@f2+1,f
  8765  06AF  0DB3               	rlf	___ftmul@f2+2,f
  8766  06B0  0B89               	decfsz	9,f
  8767  06B1  2EAD               	goto	u2235
  8768  06B2  3001               	movlw	1
  8769  06B3  02BC               	subwf	___ftmul@cntr,f
  8770  06B4  1D03               	btfss	3,2
  8771  06B5  2E9E               	goto	l2892
  8772  06B6  3009               	movlw	9
  8773  06B7  00B4               	movwf	??___ftmul
  8774  06B8  0834               	movf	??___ftmul,w
  8775  06B9  00BC               	movwf	___ftmul@cntr
  8776  06BA                     l2904:	
  8777  06BA  1C2E               	btfss	___ftmul@f1,0
  8778  06BB  2EC2               	goto	l2908
  8779  06BC  0831               	movf	___ftmul@f2,w
  8780  06BD  07B9               	addwf	___ftmul@f3_as_product,f
  8781  06BE  0832               	movf	___ftmul@f2+1,w
  8782  06BF  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8783  06C0  0833               	movf	___ftmul@f2+2,w
  8784  06C1  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8785  06C2                     l2908:	
  8786  06C2  3001               	movlw	1
  8787  06C3                     u2265:	
  8788  06C3  36B0               	lsrf	___ftmul@f1+2,f
  8789  06C4  0CAF               	rrf	___ftmul@f1+1,f
  8790  06C5  0CAE               	rrf	___ftmul@f1,f
  8791  06C6  0B89               	decfsz	9,f
  8792  06C7  2EC3               	goto	u2265
  8793  06C8  3001               	movlw	1
  8794  06C9                     u2275:	
  8795  06C9  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8796  06CA  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8797  06CB  0CB9               	rrf	___ftmul@f3_as_product,f
  8798  06CC  0B89               	decfsz	9,f
  8799  06CD  2EC9               	goto	u2275
  8800  06CE  3001               	movlw	1
  8801  06CF  02BC               	subwf	___ftmul@cntr,f
  8802  06D0  1D03               	btfss	3,2
  8803  06D1  2EBA               	goto	l2904
  8804  06D2  0839               	movf	___ftmul@f3_as_product,w
  8805  06D3  00A0               	movwf	___ftpack@arg
  8806  06D4  083A               	movf	___ftmul@f3_as_product+1,w
  8807  06D5  00A1               	movwf	___ftpack@arg+1
  8808  06D6  083B               	movf	___ftmul@f3_as_product+2,w
  8809  06D7  00A2               	movwf	___ftpack@arg+2
  8810  06D8  0838               	movf	___ftmul@exp,w
  8811  06D9  00B4               	movwf	??___ftmul
  8812  06DA  0834               	movf	??___ftmul,w
  8813  06DB  00A3               	movwf	___ftpack@exp
  8814  06DC  083D               	movf	___ftmul@sign,w
  8815  06DD  00B5               	movwf	??___ftmul+1
  8816  06DE  0835               	movf	??___ftmul+1,w
  8817  06DF  00A4               	movwf	___ftpack@sign
  8818  06E0  3187  2793         	fcall	___ftpack
  8819  06E2  0020               	movlb	0	; select bank0
  8820  06E3  0820               	movf	?___ftpack,w
  8821  06E4  00AE               	movwf	?___ftmul
  8822  06E5  0821               	movf	?___ftpack+1,w
  8823  06E6  00AF               	movwf	?___ftmul+1
  8824  06E7  0822               	movf	?___ftpack+2,w
  8825  06E8  00B0               	movwf	?___ftmul+2
  8826  06E9  0008               	return
  8827  06EA                     __end_of___ftmul:	
  8828                           
  8829                           	psect	text11
  8830  0B2A                     __ptext11:	
  8831 ;; *************** function ___awtoft *****************
  8832 ;; Defined at:
  8833 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;  c               2    8[BANK0 ] int 
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;  sign            1   13[BANK0 ] unsigned char 
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  3    8[BANK0 ] float 
  8840 ;; Registers used:
  8841 ;;		wreg, status,2, status,0, pclath, cstack
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8847 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;Total ram usage:        6 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    4
  8854 ;; This function calls:
  8855 ;;		___ftpack
  8856 ;; This function is called by:
  8857 ;;		_main
  8858 ;;		_putByte
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           
  8863                           ;psect for function ___awtoft
  8864  0B2A                     ___awtoft:	
  8865                           
  8866                           ;incstack = 0
  8867                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8868  0B2A  0020               	movlb	0	; select bank0
  8869  0B2B  01AD               	clrf	___awtoft@sign
  8870  0B2C  1FA9               	btfss	___awtoft@c+1,7
  8871  0B2D  2B35               	goto	l2864
  8872  0B2E  09A8               	comf	___awtoft@c,f
  8873  0B2F  09A9               	comf	___awtoft@c+1,f
  8874  0B30  0AA8               	incf	___awtoft@c,f
  8875  0B31  1903               	skipnz
  8876  0B32  0AA9               	incf	___awtoft@c+1,f
  8877  0B33  01AD               	clrf	___awtoft@sign
  8878  0B34  0AAD               	incf	___awtoft@sign,f
  8879  0B35                     l2864:	
  8880  0B35  0828               	movf	___awtoft@c,w
  8881  0B36  00A0               	movwf	___ftpack@arg
  8882  0B37  0829               	movf	___awtoft@c+1,w
  8883  0B38  00A1               	movwf	___ftpack@arg+1
  8884  0B39  01A2               	clrf	___ftpack@arg+2
  8885  0B3A  308E               	movlw	142
  8886  0B3B  00AB               	movwf	??___awtoft
  8887  0B3C  082B               	movf	??___awtoft,w
  8888  0B3D  00A3               	movwf	___ftpack@exp
  8889  0B3E  082D               	movf	___awtoft@sign,w
  8890  0B3F  00AC               	movwf	??___awtoft+1
  8891  0B40  082C               	movf	??___awtoft+1,w
  8892  0B41  00A4               	movwf	___ftpack@sign
  8893  0B42  3187  2793         	fcall	___ftpack
  8894  0B44  0020               	movlb	0	; select bank0
  8895  0B45  0820               	movf	?___ftpack,w
  8896  0B46  00A8               	movwf	?___awtoft
  8897  0B47  0821               	movf	?___ftpack+1,w
  8898  0B48  00A9               	movwf	?___awtoft+1
  8899  0B49  0822               	movf	?___ftpack+2,w
  8900  0B4A  00AA               	movwf	?___awtoft+2
  8901  0B4B  0008               	return
  8902  0B4C                     __end_of___awtoft:	
  8903                           
  8904                           	psect	text12
  8905  0DBD                     __ptext12:	
  8906 ;; *************** function _blinkyLoop *****************
  8907 ;; Defined at:
  8908 ;;		line 217 in file "main.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;  maxLoops        2   32[BANK0 ] int 
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  loopCount       2   38[BANK0 ] int 
  8913 ;;  delayTime       2   36[BANK0 ] int 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      void 
  8916 ;; Registers used:
  8917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8923 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;Total ram usage:        8 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    6
  8930 ;; This function calls:
  8931 ;;		_MYI2C_Write2LEDBytes
  8932 ;;		___wmul
  8933 ;;		_delay
  8934 ;; This function is called by:
  8935 ;;		_main
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           
  8940                           ;psect for function _blinkyLoop
  8941  0DBD                     _blinkyLoop:	
  8942                           
  8943                           ;main.c: 218: int loopCount=maxLoops;
  8944                           
  8945                           ;incstack = 0
  8946                           ; Regs used in _blinkyLoop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8947  0DBD  0020               	movlb	0	; select bank0
  8948  0DBE  0841               	movf	blinkyLoop@maxLoops+1,w
  8949  0DBF  00C7               	movwf	blinkyLoop@loopCount+1
  8950  0DC0  0840               	movf	blinkyLoop@maxLoops,w
  8951  0DC1  00C6               	movwf	blinkyLoop@loopCount
  8952                           
  8953                           ;main.c: 219: int delayTime;
  8954                           ;main.c: 221: ODCONB &= 0xF0;
  8955  0DC2  30F0               	movlw	240
  8956  0DC3  00C2               	movwf	??_blinkyLoop
  8957  0DC4  0842               	movf	??_blinkyLoop,w
  8958  0DC5  003E               	movlb	30	; select bank30
  8959  0DC6  05C5               	andwf	69,f	;volatile
  8960                           
  8961                           ;main.c: 222: ODCONC &= 0x1F;
  8962  0DC7  301F               	movlw	31
  8963  0DC8  0020               	movlb	0	; select bank0
  8964  0DC9  00C2               	movwf	??_blinkyLoop
  8965  0DCA  0842               	movf	??_blinkyLoop,w
  8966  0DCB  003E               	movlb	30	; select bank30
  8967  0DCC  05D0               	andwf	80,f	;volatile
  8968  0DCD                     l4338:	
  8969                           ;main.c: 224: while(loopCount>0){
  8970                           
  8971  0DCD  0020               	movlb	0	; select bank0
  8972  0DCE  0847               	movf	blinkyLoop@loopCount+1,w
  8973  0DCF  3A80               	xorlw	128
  8974  0DD0  00C2               	movwf	??_blinkyLoop
  8975  0DD1  3080               	movlw	128
  8976  0DD2  0242               	subwf	??_blinkyLoop,w
  8977  0DD3  1D03               	skipz
  8978  0DD4  2DD7               	goto	u4115
  8979  0DD5  3001               	movlw	1
  8980  0DD6  0246               	subwf	blinkyLoop@loopCount,w
  8981  0DD7                     u4115:	
  8982  0DD7  1C03               	btfss	3,0
  8983  0DD8  2E23               	goto	l4340
  8984                           
  8985                           ;main.c: 225: delayTime=loopCount*400;
  8986  0DD9  0020               	movlb	0	; select bank0
  8987  0DDA  0847               	movf	blinkyLoop@loopCount+1,w
  8988  0DDB  00A1               	movwf	___wmul@multiplier+1
  8989  0DDC  0846               	movf	blinkyLoop@loopCount,w
  8990  0DDD  00A0               	movwf	___wmul@multiplier
  8991  0DDE  3090               	movlw	144
  8992  0DDF  00A2               	movwf	___wmul@multiplicand
  8993  0DE0  3001               	movlw	1
  8994  0DE1  00A3               	movwf	___wmul@multiplicand+1
  8995  0DE2  318A  22B4  318D   	fcall	___wmul
  8996  0DE5  0020               	movlb	0	; select bank0
  8997  0DE6  0821               	movf	?___wmul+1,w
  8998  0DE7  00C5               	movwf	blinkyLoop@delayTime+1
  8999  0DE8  0820               	movf	?___wmul,w
  9000  0DE9  00C4               	movwf	blinkyLoop@delayTime
  9001                           
  9002                           ;main.c: 228: LATB |= 0x0F;
  9003  0DEA  300F               	movlw	15
  9004  0DEB  00C2               	movwf	??_blinkyLoop
  9005  0DEC  0842               	movf	??_blinkyLoop,w
  9006  0DED  0497               	iorwf	23,f	;volatile
  9007                           
  9008                           ;main.c: 230: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0xFF,0xFF);
  9009  0DEE  30FF               	movlw	255
  9010  0DEF  00C2               	movwf	??_blinkyLoop
  9011  0DF0  0842               	movf	??_blinkyLoop,w
  9012  0DF1  00AE               	movwf	MYI2C_Write2LEDBytes@MSBWriteByte
  9013  0DF2  30FF               	movlw	255
  9014  0DF3  00C3               	movwf	??_blinkyLoop+1
  9015  0DF4  0843               	movf	??_blinkyLoop+1,w
  9016  0DF5  00AF               	movwf	MYI2C_Write2LEDBytes@LSBWriteByte
  9017  0DF6  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9018  0DF7  0084               	movwf	4
  9019  0DF8  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9020  0DF9  0085               	movwf	5
  9021  0DFA  0800               	movf	0,w	;code access
  9022  0DFB  318C  24EA  318D   	fcall	_MYI2C_Write2LEDBytes
  9023                           
  9024                           ;main.c: 231: delay(delayTime);
  9025  0DFE  0020               	movlb	0	; select bank0
  9026  0DFF  0845               	movf	blinkyLoop@delayTime+1,w
  9027  0E00  00A7               	movwf	delay@delaytime+1
  9028  0E01  0844               	movf	blinkyLoop@delayTime,w
  9029  0E02  00A6               	movwf	delay@delaytime
  9030  0E03  318C  2497  318D   	fcall	_delay
  9031                           
  9032                           ;main.c: 233: LATB &= 0xF0;
  9033  0E06  30F0               	movlw	240
  9034  0E07  0020               	movlb	0	; select bank0
  9035  0E08  00C2               	movwf	??_blinkyLoop
  9036  0E09  0842               	movf	??_blinkyLoop,w
  9037  0E0A  0597               	andwf	23,f	;volatile
  9038                           
  9039                           ;main.c: 235: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0x0,0x0);
  9040  0E0B  01AE               	clrf	MYI2C_Write2LEDBytes@MSBWriteByte
  9041  0E0C  01AF               	clrf	MYI2C_Write2LEDBytes@LSBWriteByte
  9042  0E0D  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9043  0E0E  0084               	movwf	4
  9044  0E0F  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9045  0E10  0085               	movwf	5
  9046  0E11  0800               	movf	0,w	;code access
  9047  0E12  318C  24EA  318D   	fcall	_MYI2C_Write2LEDBytes
  9048                           
  9049                           ;main.c: 236: delay(delayTime);
  9050  0E15  0020               	movlb	0	; select bank0
  9051  0E16  0845               	movf	blinkyLoop@delayTime+1,w
  9052  0E17  00A7               	movwf	delay@delaytime+1
  9053  0E18  0844               	movf	blinkyLoop@delayTime,w
  9054  0E19  00A6               	movwf	delay@delaytime
  9055  0E1A  318C  2497  318D   	fcall	_delay
  9056                           
  9057                           ;main.c: 238: loopCount--;
  9058  0E1D  30FF               	movlw	255
  9059  0E1E  0020               	movlb	0	; select bank0
  9060  0E1F  07C6               	addwf	blinkyLoop@loopCount,f
  9061  0E20  30FF               	movlw	255
  9062  0E21  3DC7               	addwfc	blinkyLoop@loopCount+1,f
  9063  0E22  2DCD               	goto	l4338
  9064  0E23                     l4340:	
  9065                           
  9066                           ;main.c: 239: }
  9067                           ;main.c: 240: LATB |= 0x0F;
  9068  0E23  300F               	movlw	15
  9069  0E24  0020               	movlb	0	; select bank0
  9070  0E25  00C2               	movwf	??_blinkyLoop
  9071  0E26  0842               	movf	??_blinkyLoop,w
  9072  0E27  0497               	iorwf	23,f	;volatile
  9073                           
  9074                           ;main.c: 242: delay(5000);
  9075  0E28  3088               	movlw	136
  9076  0E29  00A6               	movwf	delay@delaytime
  9077  0E2A  3013               	movlw	19
  9078  0E2B  00A7               	movwf	delay@delaytime+1
  9079  0E2C  318C  2497  318D   	fcall	_delay
  9080                           
  9081                           ;main.c: 243: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0xFF,0xFF);
  9082  0E2F  30FF               	movlw	255
  9083  0E30  0020               	movlb	0	; select bank0
  9084  0E31  00C2               	movwf	??_blinkyLoop
  9085  0E32  0842               	movf	??_blinkyLoop,w
  9086  0E33  00AE               	movwf	MYI2C_Write2LEDBytes@MSBWriteByte
  9087  0E34  30FF               	movlw	255
  9088  0E35  00C3               	movwf	??_blinkyLoop+1
  9089  0E36  0843               	movf	??_blinkyLoop+1,w
  9090  0E37  00AF               	movwf	MYI2C_Write2LEDBytes@LSBWriteByte
  9091  0E38  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9092  0E39  0084               	movwf	4
  9093  0E3A  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9094  0E3B  0085               	movwf	5
  9095  0E3C  0800               	movf	0,w	;code access
  9096  0E3D  318C  24EA         	fcall	_MYI2C_Write2LEDBytes
  9097  0E3F  0008               	return
  9098  0E40                     __end_of_blinkyLoop:	
  9099                           ;main.c: 244: return;
  9100                           
  9101                           
  9102                           	psect	text13
  9103  0CEA                     __ptext13:	
  9104 ;; *************** function _MYI2C_Write2LEDBytes *****************
  9105 ;; Defined at:
  9106 ;;		line 750 in file "main.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  slaveDeviceA    1    wreg     unsigned char 
  9109 ;;  MSBWriteByte    1   14[BANK0 ] unsigned char 
  9110 ;;  LSBWriteByte    1   15[BANK0 ] unsigned char 
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;  slaveDeviceA    1   22[BANK0 ] unsigned char 
  9113 ;;  writeBuffer     3   28[BANK0 ] unsigned char [3]
  9114 ;;  timeOut         2   25[BANK0 ] unsigned int 
  9115 ;;  counter         2   23[BANK0 ] unsigned int 
  9116 ;;  nCount          2   20[BANK0 ] unsigned int 
  9117 ;;  pData           2    0        PTR unsigned char 
  9118 ;;  status          1   31[BANK0 ] enum E14335
  9119 ;;  pointerByte     1   27[BANK0 ] unsigned char 
  9120 ;; Return value:  Size  Location     Type
  9121 ;;                  1    wreg      void 
  9122 ;; Registers used:
  9123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9124 ;; Tracked objects:
  9125 ;;		On entry : 0/0
  9126 ;;		On exit  : 0/0
  9127 ;;		Unchanged: 0/0
  9128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9129 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;Total ram usage:       18 bytes
  9134 ;; Hardware stack levels used:    1
  9135 ;; Hardware stack levels required when called:    5
  9136 ;; This function calls:
  9137 ;;		_I2C1_MasterWrite
  9138 ;; This function is called by:
  9139 ;;		_blinkyLoop
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           
  9144                           ;psect for function _MYI2C_Write2LEDBytes
  9145  0CEA                     _MYI2C_Write2LEDBytes:	
  9146                           
  9147                           ;incstack = 0
  9148                           ; Regs used in _MYI2C_Write2LEDBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9149                           ;MYI2C_Write2LEDBytes@slaveDeviceAddress stored from wreg
  9150  0CEA  0020               	movlb	0	; select bank0
  9151  0CEB  00B6               	movwf	MYI2C_Write2LEDBytes@slaveDeviceAddress
  9152                           
  9153                           ;main.c: 754: uint8_t *pData;
  9154                           ;main.c: 755: uint16_t nCount;
  9155                           ;main.c: 757: uint8_t writeBuffer[3];
  9156                           ;main.c: 759: uint16_t counter, timeOut;
  9157                           ;main.c: 760: uint8_t pointerByte = cPointerByteWriteLED;
  9158  0CEC  302E               	movlw	low (_cPointerByteWriteLED| (0+32768))
  9159  0CED  0084               	movwf	4
  9160  0CEE  3090               	movlw	high (_cPointerByteWriteLED| (0+32768))
  9161  0CEF  0085               	movwf	5
  9162  0CF0  0800               	movf	0,w	;code access
  9163  0CF1  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9164  0CF2  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9165  0CF3  00BB               	movwf	MYI2C_Write2LEDBytes@pointerByte
  9166                           
  9167                           ;main.c: 762: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
  9168  0CF4  3002               	movlw	2
  9169  0CF5  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9170  0CF6  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9171  0CF7  00BF               	movwf	MYI2C_Write2LEDBytes@status
  9172                           
  9173                           ;main.c: 766: nCount = 1;
  9174  0CF8  3001               	movlw	1
  9175  0CF9  00B4               	movwf	MYI2C_Write2LEDBytes@nCount
  9176  0CFA  3000               	movlw	0
  9177  0CFB  00B5               	movwf	MYI2C_Write2LEDBytes@nCount+1
  9178                           
  9179                           ;main.c: 768: for (counter = 0; counter < nCount; counter++)
  9180  0CFC  01B7               	clrf	MYI2C_Write2LEDBytes@counter
  9181  0CFD  01B8               	clrf	MYI2C_Write2LEDBytes@counter+1
  9182  0CFE                     l621:	
  9183  0CFE  0835               	movf	MYI2C_Write2LEDBytes@nCount+1,w
  9184  0CFF  0238               	subwf	MYI2C_Write2LEDBytes@counter+1,w
  9185  0D00  1D03               	skipz
  9186  0D01  2D04               	goto	u2535
  9187  0D02  0834               	movf	MYI2C_Write2LEDBytes@nCount,w
  9188  0D03  0237               	subwf	MYI2C_Write2LEDBytes@counter,w
  9189  0D04                     u2535:	
  9190  0D04  1803               	btfsc	3,0
  9191  0D05  0008               	return
  9192                           
  9193                           ;main.c: 769: {
  9194                           ;main.c: 772: writeBuffer[0] = pointerByte;
  9195  0D06  083B               	movf	MYI2C_Write2LEDBytes@pointerByte,w
  9196  0D07  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9197  0D08  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9198  0D09  00BC               	movwf	MYI2C_Write2LEDBytes@writeBuffer
  9199                           
  9200                           ;main.c: 774: writeBuffer[1] = (MSBWriteByte);
  9201  0D0A  082E               	movf	MYI2C_Write2LEDBytes@MSBWriteByte,w
  9202  0D0B  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9203  0D0C  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9204  0D0D  00BD               	movwf	MYI2C_Write2LEDBytes@writeBuffer+1
  9205                           
  9206                           ;main.c: 775: writeBuffer[2] = (LSBWriteByte);
  9207  0D0E  082F               	movf	MYI2C_Write2LEDBytes@LSBWriteByte,w
  9208  0D0F  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9209  0D10  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9210  0D11  00BE               	movwf	MYI2C_Write2LEDBytes@writeBuffer+2
  9211                           
  9212                           ;main.c: 780: timeOut = 0;
  9213  0D12  01B9               	clrf	MYI2C_Write2LEDBytes@timeOut
  9214  0D13  01BA               	clrf	MYI2C_Write2LEDBytes@timeOut+1
  9215  0D14                     l3128:	
  9216                           ;main.c: 781: while(status != I2C1_MESSAGE_FAIL)
  9217                           
  9218  0D14  033F               	decf	MYI2C_Write2LEDBytes@status,w
  9219  0D15  1903               	btfsc	3,2
  9220  0D16  2D3C               	goto	l3130
  9221                           
  9222                           ;main.c: 782: {
  9223                           ;main.c: 784: I2C1_MasterWrite( writeBuffer,
  9224                           ;main.c: 785: 3,
  9225                           ;main.c: 786: slaveDeviceAddress,
  9226                           ;main.c: 787: &status);
  9227  0D17  3003               	movlw	3
  9228  0D18  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9229  0D19  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9230  0D1A  00A7               	movwf	I2C1_MasterWrite@length
  9231  0D1B  0836               	movf	MYI2C_Write2LEDBytes@slaveDeviceAddress,w
  9232  0D1C  00B1               	movwf	??_MYI2C_Write2LEDBytes+1
  9233  0D1D  01B2               	clrf	??_MYI2C_Write2LEDBytes+2
  9234  0D1E  0831               	movf	??_MYI2C_Write2LEDBytes+1,w
  9235  0D1F  00A8               	movwf	I2C1_MasterWrite@address
  9236  0D20  0832               	movf	??_MYI2C_Write2LEDBytes+2,w
  9237  0D21  00A9               	movwf	I2C1_MasterWrite@address+1
  9238  0D22  303F               	movlw	(low (MYI2C_Write2LEDBytes@status| 0))& (0+255)
  9239  0D23  00B3               	movwf	??_MYI2C_Write2LEDBytes+3
  9240  0D24  0833               	movf	??_MYI2C_Write2LEDBytes+3,w
  9241  0D25  00AA               	movwf	I2C1_MasterWrite@pflag
  9242  0D26  303C               	movlw	(low (MYI2C_Write2LEDBytes@writeBuffer| 0))& (0+255)
  9243  0D27  318B  2371  318C   	fcall	_I2C1_MasterWrite
  9244  0D2A                     l3114:	
  9245                           ;main.c: 790: while(status == I2C1_MESSAGE_PENDING);
  9246                           
  9247  0D2A  3002               	movlw	2
  9248  0D2B  0020               	movlb	0	; select bank0
  9249  0D2C  063F               	xorwf	MYI2C_Write2LEDBytes@status,w
  9250  0D2D  1903               	btfsc	3,2
  9251  0D2E  2D2A               	goto	l3114
  9252                           
  9253                           ;main.c: 792: if (status == I2C1_MESSAGE_COMPLETE)
  9254  0D2F  083F               	movf	MYI2C_Write2LEDBytes@status,w
  9255  0D30  1903               	btfsc	3,2
  9256  0D31  2D3C               	goto	l3130
  9257                           
  9258                           ;main.c: 802: if (timeOut == 100)
  9259                           
  9260                           ;main.c: 793: break;
  9261  0D32  3064               	movlw	100
  9262  0D33  0639               	xorwf	MYI2C_Write2LEDBytes@timeOut,w
  9263  0D34  043A               	iorwf	MYI2C_Write2LEDBytes@timeOut+1,w
  9264  0D35  1903               	btfsc	3,2
  9265  0D36  2D3C               	goto	l3130
  9266                           
  9267                           ;main.c: 804: else
  9268                           ;main.c: 805: timeOut++;
  9269                           
  9270                           ;main.c: 803: break;
  9271  0D37  3001               	movlw	1
  9272  0D38  07B9               	addwf	MYI2C_Write2LEDBytes@timeOut,f
  9273  0D39  3000               	movlw	0
  9274  0D3A  3DBA               	addwfc	MYI2C_Write2LEDBytes@timeOut+1,f
  9275  0D3B  2D14               	goto	l3128
  9276  0D3C                     l3130:	
  9277                           
  9278                           ;main.c: 806: }
  9279                           ;main.c: 808: if (status == I2C1_MESSAGE_FAIL)
  9280  0D3C  033F               	decf	MYI2C_Write2LEDBytes@status,w
  9281  0D3D  1903               	btfsc	3,2
  9282  0D3E  0008               	return
  9283                           
  9284                           ;main.c: 809: {
  9285                           ;main.c: 810: break;
  9286  0D3F  3001               	movlw	1
  9287  0D40  07B7               	addwf	MYI2C_Write2LEDBytes@counter,f
  9288  0D41  3000               	movlw	0
  9289  0D42  3DB8               	addwfc	MYI2C_Write2LEDBytes@counter+1,f
  9290  0D43  2CFE               	goto	l621
  9291  0D44                     __end_of_MYI2C_Write2LEDBytes:	
  9292                           
  9293                           	psect	text14
  9294  0B71                     __ptext14:	
  9295 ;; *************** function _I2C1_MasterWrite *****************
  9296 ;; Defined at:
  9297 ;;		line 598 in file "mcc_generated_files/i2c1.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;  pdata           1    wreg     PTR unsigned char 
  9300 ;;		 -> MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), MYI2C_WriteFaders@writeBuffer(9),
      + 
  9301 ;;  length          1    7[BANK0 ] unsigned char 
  9302 ;;  address         2    8[BANK0 ] unsigned int 
  9303 ;;  pflag           1   10[BANK0 ] PTR enum E14260
  9304 ;;		 -> MYI2C_Write16EEPROMBytes@status(1), MYI2C_Write2LEDBytes@status(1), MYI2C_WriteFaders@status(1), 
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  9307 ;;		 -> MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), MYI2C_WriteFaders@writeBuffer(9),
      + 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;                  1    wreg      void 
  9310 ;; Registers used:
  9311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9317 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;Total ram usage:        7 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    4
  9324 ;; This function calls:
  9325 ;;		_I2C1_MasterTRBInsert
  9326 ;;		_I2C1_MasterWriteTRBBuild
  9327 ;; This function is called by:
  9328 ;;		_MYI2C_Write2LEDBytes
  9329 ;;		_MYI2C_Write16EEPROMBytes
  9330 ;;		_MYI2C_WriteFaders
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           
  9335                           ;psect for function _I2C1_MasterWrite
  9336  0B71                     _I2C1_MasterWrite:	
  9337                           
  9338                           ;incstack = 0
  9339                           ; Regs used in _I2C1_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9340                           ;I2C1_MasterWrite@pdata stored from wreg
  9341  0B71  0020               	movlb	0	; select bank0
  9342  0B72  00AD               	movwf	I2C1_MasterWrite@pdata
  9343                           
  9344                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9345                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
  9346  0B73  1869               	btfsc	_i2c1_object+2,0
  9347  0B74  2B92               	goto	l2964
  9348                           
  9349                           ;i2c1.c: 608: {
  9350                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  9351  0B75  082D               	movf	I2C1_MasterWrite@pdata,w
  9352  0B76  00AB               	movwf	??_I2C1_MasterWrite
  9353  0B77  082B               	movf	??_I2C1_MasterWrite,w
  9354  0B78  00A0               	movwf	I2C1_MasterWriteTRBBuild@pdata
  9355  0B79  0827               	movf	I2C1_MasterWrite@length,w
  9356  0B7A  00AC               	movwf	??_I2C1_MasterWrite+1
  9357  0B7B  082C               	movf	??_I2C1_MasterWrite+1,w
  9358  0B7C  00A1               	movwf	I2C1_MasterWriteTRBBuild@length
  9359  0B7D  0829               	movf	I2C1_MasterWrite@address+1,w
  9360  0B7E  00A3               	movwf	I2C1_MasterWriteTRBBuild@address+1
  9361  0B7F  0828               	movf	I2C1_MasterWrite@address,w
  9362  0B80  00A2               	movwf	I2C1_MasterWriteTRBBuild@address
  9363  0B81  30D1               	movlw	(low (I2C1_MasterWrite@trBlock| 0))& (0+255)
  9364  0B82  318B  230A  318B   	fcall	_I2C1_MasterWriteTRBBuild
  9365                           
  9366                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9367  0B85  30D1               	movlw	(low (I2C1_MasterWrite@trBlock| 0))& (0+255)
  9368  0B86  0020               	movlb	0	; select bank0
  9369  0B87  00AB               	movwf	??_I2C1_MasterWrite
  9370  0B88  082B               	movf	??_I2C1_MasterWrite,w
  9371  0B89  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9372  0B8A  082A               	movf	I2C1_MasterWrite@pflag,w
  9373  0B8B  00AC               	movwf	??_I2C1_MasterWrite+1
  9374  0B8C  082C               	movf	??_I2C1_MasterWrite+1,w
  9375  0B8D  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9376  0B8E  3001               	movlw	1
  9377  0B8F  318C  2451         	fcall	_I2C1_MasterTRBInsert
  9378                           
  9379                           ;i2c1.c: 611: }
  9380  0B91  0008               	return
  9381  0B92                     l2964:	
  9382                           
  9383                           ;i2c1.c: 612: else
  9384                           ;i2c1.c: 613: {
  9385                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
  9386  0B92  0020               	movlb	0	; select bank0
  9387  0B93  082A               	movf	I2C1_MasterWrite@pflag,w
  9388  0B94  0086               	movwf	6
  9389  0B95  0187               	clrf	7
  9390  0B96  0181               	clrf	1
  9391  0B97  0A81               	incf	1,f
  9392  0B98  0008               	return
  9393  0B99                     __end_of_I2C1_MasterWrite:	
  9394                           
  9395                           	psect	text15
  9396  0B0A                     __ptext15:	
  9397 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  9398 ;; Defined at:
  9399 ;;		line 707 in file "mcc_generated_files/i2c1.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;  ptrb            1    wreg     PTR struct .
  9402 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterWrite@trBlock(4), 
  9403 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  9404 ;;		 -> MYI2C_ReadPatch@pointerByte(1), MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), M
      +YI2C_WriteFaders@writeBuffer(9), 
  9405 ;;		 -> MYI2C_ReadFaders@pointerByte(1), 
  9406 ;;  length          1    1[BANK0 ] unsigned char 
  9407 ;;  address         2    2[BANK0 ] unsigned int 
  9408 ;; Auto vars:     Size  Location     Type
  9409 ;;  ptrb            1    6[BANK0 ] PTR struct .
  9410 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterWrite@trBlock(4), 
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      void 
  9413 ;; Registers used:
  9414 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9420 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;Total ram usage:        7 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    3
  9427 ;; This function calls:
  9428 ;;		Nothing
  9429 ;; This function is called by:
  9430 ;;		_I2C1_MasterWrite
  9431 ;;		_MYI2C_ReadFaders
  9432 ;;		_MYI2C_ReadPatch
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           
  9437                           ;psect for function _I2C1_MasterWriteTRBBuild
  9438  0B0A                     _I2C1_MasterWriteTRBBuild:	
  9439                           
  9440                           ;incstack = 0
  9441                           ; Regs used in _I2C1_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9442                           ;I2C1_MasterWriteTRBBuild@ptrb stored from wreg
  9443  0B0A  0020               	movlb	0	; select bank0
  9444  0B0B  00A6               	movwf	I2C1_MasterWriteTRBBuild@ptrb
  9445                           
  9446                           ;i2c1.c: 713: ptrb->address = address << 1;
  9447  0B0C  0823               	movf	I2C1_MasterWriteTRBBuild@address+1,w
  9448  0B0D  00A5               	movwf	??_I2C1_MasterWriteTRBBuild+1
  9449  0B0E  0822               	movf	I2C1_MasterWriteTRBBuild@address,w
  9450  0B0F  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9451  0B10  35A4               	lslf	??_I2C1_MasterWriteTRBBuild,f
  9452  0B11  0DA5               	rlf	??_I2C1_MasterWriteTRBBuild+1,f
  9453  0B12  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9454  0B13  0086               	movwf	6
  9455  0B14  0187               	clrf	7
  9456  0B15  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9457  0B16  3FC0               	movwi [0]fsr1
  9458  0B17  0825               	movf	??_I2C1_MasterWriteTRBBuild+1,w
  9459  0B18  3FC1               	movwi [1]fsr1
  9460                           
  9461                           ;i2c1.c: 714: ptrb->length = length;
  9462  0B19  0821               	movf	I2C1_MasterWriteTRBBuild@length,w
  9463  0B1A  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9464  0B1B  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9465  0B1C  3E02               	addlw	2
  9466  0B1D  0086               	movwf	6
  9467  0B1E  0187               	clrf	7
  9468  0B1F  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9469  0B20  0081               	movwf	1
  9470                           
  9471                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
  9472  0B21  0820               	movf	I2C1_MasterWriteTRBBuild@pdata,w
  9473  0B22  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9474  0B23  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9475  0B24  3E03               	addlw	3
  9476  0B25  0086               	movwf	6
  9477  0B26  0187               	clrf	7
  9478  0B27  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9479  0B28  0081               	movwf	1
  9480  0B29  0008               	return
  9481  0B2A                     __end_of_I2C1_MasterWriteTRBBuild:	
  9482                           
  9483                           	psect	text16
  9484  0C51                     __ptext16:	
  9485 ;; *************** function _I2C1_MasterTRBInsert *****************
  9486 ;; Defined at:
  9487 ;;		line 641 in file "mcc_generated_files/i2c1.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;  count           1    wreg     unsigned char 
  9490 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  9491 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterRead@trBlock(4), I2C1_MasterWrite@trBlock(4)
      +, 
  9492 ;;  pflag           1    1[BANK0 ] PTR enum E14260
  9493 ;;		 -> MYI2C_ReadPatch@status(1), MYI2C_Write16EEPROMBytes@status(1), MYI2C_Write2LEDBytes@status(1), MYI2C_WriteFaders
      +@status(1), 
  9494 ;;		 -> MYI2C_ReadFaders@status(1), 
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;  count           1    3[BANK0 ] unsigned char 
  9497 ;; Return value:  Size  Location     Type
  9498 ;;                  1    wreg      void 
  9499 ;; Registers used:
  9500 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9501 ;; Tracked objects:
  9502 ;;		On entry : 0/0
  9503 ;;		On exit  : 0/0
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9506 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;Total ram usage:        4 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    3
  9513 ;; This function calls:
  9514 ;;		Nothing
  9515 ;; This function is called by:
  9516 ;;		_I2C1_MasterWrite
  9517 ;;		_I2C1_MasterRead
  9518 ;;		_MYI2C_ReadFaders
  9519 ;;		_MYI2C_ReadPatch
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           
  9524                           ;psect for function _I2C1_MasterTRBInsert
  9525  0C51                     _I2C1_MasterTRBInsert:	
  9526                           
  9527                           ;incstack = 0
  9528                           ; Regs used in _I2C1_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9529                           ;I2C1_MasterTRBInsert@count stored from wreg
  9530  0C51  0020               	movlb	0	; select bank0
  9531  0C52  00A3               	movwf	I2C1_MasterTRBInsert@count
  9532                           
  9533                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
  9534  0C53  1869               	btfsc	_i2c1_object+2,0
  9535  0C54  2C85               	goto	l2838
  9536                           
  9537                           ;i2c1.c: 649: {
  9538                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
  9539  0C55  3002               	movlw	2
  9540  0C56  00A2               	movwf	??_I2C1_MasterTRBInsert
  9541  0C57  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9542  0C58  0086               	movwf	6
  9543  0C59  0187               	clrf	7
  9544  0C5A  0822               	movf	??_I2C1_MasterTRBInsert,w
  9545  0C5B  0081               	movwf	1
  9546                           
  9547                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  9548  0C5C  0820               	movf	I2C1_MasterTRBInsert@ptrb_list,w
  9549  0C5D  00A2               	movwf	??_I2C1_MasterTRBInsert
  9550  0C5E  0A67               	incf	_i2c1_object,w
  9551  0C5F  0086               	movwf	6
  9552  0C60  0187               	clrf	7
  9553  0C61  0822               	movf	??_I2C1_MasterTRBInsert,w
  9554  0C62  0081               	movwf	1
  9555                           
  9556                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
  9557  0C63  0823               	movf	I2C1_MasterTRBInsert@count,w
  9558  0C64  00A2               	movwf	??_I2C1_MasterTRBInsert
  9559  0C65  0867               	movf	_i2c1_object,w
  9560  0C66  0086               	movwf	6
  9561  0C67  0187               	clrf	7
  9562  0C68  0822               	movf	??_I2C1_MasterTRBInsert,w
  9563  0C69  0081               	movwf	1
  9564                           
  9565                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
  9566  0C6A  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9567  0C6B  00A2               	movwf	??_I2C1_MasterTRBInsert
  9568  0C6C  0867               	movf	_i2c1_object,w
  9569  0C6D  3E02               	addlw	2
  9570  0C6E  0086               	movwf	6
  9571  0C6F  0187               	clrf	7
  9572  0C70  0822               	movf	??_I2C1_MasterTRBInsert,w
  9573  0C71  0081               	movwf	1
  9574                           
  9575                           ;i2c1.c: 655: i2c1_object.pTrTail++;
  9576  0C72  3003               	movlw	3
  9577  0C73  00A2               	movwf	??_I2C1_MasterTRBInsert
  9578  0C74  0822               	movf	??_I2C1_MasterTRBInsert,w
  9579  0C75  07E7               	addwf	_i2c1_object,f
  9580                           
  9581                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  9582  0C76  0867               	movf	_i2c1_object,w
  9583  0C77  3AD8               	xorlw	(low ((_i2c1_tr_queue| 0+3)))& (0+255)
  9584  0C78  1D03               	skipz
  9585  0C79  2C7E               	goto	l2834
  9586                           
  9587                           ;i2c1.c: 659: {
  9588                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
  9589  0C7A  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
  9590  0C7B  00A2               	movwf	??_I2C1_MasterTRBInsert
  9591  0C7C  0822               	movf	??_I2C1_MasterTRBInsert,w
  9592  0C7D  00E7               	movwf	_i2c1_object
  9593  0C7E                     l2834:	
  9594                           
  9595                           ;i2c1.c: 662: }
  9596                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
  9597  0C7E  10E9               	bcf	_i2c1_object+2,1
  9598                           
  9599                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  9600  0C7F  0868               	movf	low ((_i2c1_object| 0+1)),w
  9601  0C80  0667               	xorwf	_i2c1_object,w
  9602  0C81  1D03               	skipz
  9603  0C82  2C8A               	goto	l2840
  9604                           
  9605                           ;i2c1.c: 670: {
  9606                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
  9607  0C83  1469               	bsf	_i2c1_object+2,0
  9608                           
  9609                           ;i2c1.c: 673: }
  9610                           ;i2c1.c: 675: }
  9611  0C84  2C8A               	goto	l2840
  9612  0C85                     l2838:	
  9613                           
  9614                           ;i2c1.c: 676: else
  9615                           ;i2c1.c: 677: {
  9616                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
  9617  0C85  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9618  0C86  0086               	movwf	6
  9619  0C87  0187               	clrf	7
  9620  0C88  0181               	clrf	1
  9621  0C89  0A81               	incf	1,f
  9622  0C8A                     l2840:	
  9623                           
  9624                           ;i2c1.c: 679: }
  9625                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
  9626  0C8A  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9627  0C8B  0086               	movwf	6
  9628  0C8C  0187               	clrf	7
  9629  0C8D  3002               	movlw	2
  9630  0C8E  0601               	xorwf	1,w
  9631  0C8F  1D03               	btfss	3,2
  9632  0C90  0008               	return
  9633  0C91                     l2844:	
  9634                           ;i2c1.c: 683: {
  9635                           ;i2c1.c: 684: while(i2c1_state != S_MASTER_IDLE);
  9636                           
  9637  0C91  086F               	movf	_i2c1_state,w
  9638  0C92  1D03               	btfss	3,2
  9639  0C93  2C91               	goto	l2844
  9640                           
  9641                           ;i2c1.c: 685: {
  9642                           ;i2c1.c: 688: PIR3bits.SSP1IF = 1;
  9643  0C94  002E               	movlb	14	; select bank14
  9644  0C95  140F               	bsf	15,0	;volatile
  9645  0C96  0008               	return
  9646  0C97                     __end_of_I2C1_MasterTRBInsert:	
  9647                           
  9648                           	psect	text17
  9649  06EA                     __ptext17:	
  9650 ;; *************** function ___ftdiv *****************
  9651 ;; Defined at:
  9652 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  f2              3   14[BANK0 ] float 
  9655 ;;  f1              3   17[BANK0 ] float 
  9656 ;; Auto vars:     Size  Location     Type
  9657 ;;  f3              3   25[BANK0 ] float 
  9658 ;;  sign            1   29[BANK0 ] unsigned char 
  9659 ;;  exp             1   28[BANK0 ] unsigned char 
  9660 ;;  cntr            1   24[BANK0 ] unsigned char 
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  3   14[BANK0 ] float 
  9663 ;; Registers used:
  9664 ;;		wreg, status,2, status,0, pclath, cstack
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9670 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;Total ram usage:       16 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    4
  9677 ;; This function calls:
  9678 ;;		___ftpack
  9679 ;; This function is called by:
  9680 ;;		_main
  9681 ;; This function uses a non-reentrant model
  9682 ;;
  9683                           
  9684                           
  9685                           ;psect for function ___ftdiv
  9686  06EA                     ___ftdiv:	
  9687                           
  9688                           ;incstack = 0
  9689                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9690  06EA  0020               	movlb	0	; select bank0
  9691  06EB  0831               	movf	___ftdiv@f1,w
  9692  06EC  00B4               	movwf	??___ftdiv
  9693  06ED  0832               	movf	___ftdiv@f1+1,w
  9694  06EE  00B5               	movwf	??___ftdiv+1
  9695  06EF  0833               	movf	___ftdiv@f1+2,w
  9696  06F0  00B6               	movwf	??___ftdiv+2
  9697  06F1  1003               	clrc
  9698  06F2  0D35               	rlf	??___ftdiv+1,w
  9699  06F3  0D36               	rlf	??___ftdiv+2,w
  9700  06F4  00B7               	movwf	??___ftdiv+3
  9701  06F5  0837               	movf	??___ftdiv+3,w
  9702  06F6  00BC               	movwf	___ftdiv@exp
  9703  06F7  083C               	movf	___ftdiv@exp,w
  9704  06F8  1D03               	btfss	3,2
  9705  06F9  2F01               	goto	l3680
  9706  06FA  3000               	movlw	0
  9707  06FB  00AE               	movwf	?___ftdiv
  9708  06FC  3000               	movlw	0
  9709  06FD  00AF               	movwf	?___ftdiv+1
  9710  06FE  3000               	movlw	0
  9711  06FF  00B0               	movwf	?___ftdiv+2
  9712  0700  0008               	return
  9713  0701                     l3680:	
  9714  0701  082E               	movf	___ftdiv@f2,w
  9715  0702  00B4               	movwf	??___ftdiv
  9716  0703  082F               	movf	___ftdiv@f2+1,w
  9717  0704  00B5               	movwf	??___ftdiv+1
  9718  0705  0830               	movf	___ftdiv@f2+2,w
  9719  0706  00B6               	movwf	??___ftdiv+2
  9720  0707  1003               	clrc
  9721  0708  0D35               	rlf	??___ftdiv+1,w
  9722  0709  0D36               	rlf	??___ftdiv+2,w
  9723  070A  00B7               	movwf	??___ftdiv+3
  9724  070B  0837               	movf	??___ftdiv+3,w
  9725  070C  00BD               	movwf	___ftdiv@sign
  9726  070D  083D               	movf	___ftdiv@sign,w
  9727  070E  1D03               	btfss	3,2
  9728  070F  2F17               	goto	l3686
  9729  0710  3000               	movlw	0
  9730  0711  00AE               	movwf	?___ftdiv
  9731  0712  3000               	movlw	0
  9732  0713  00AF               	movwf	?___ftdiv+1
  9733  0714  3000               	movlw	0
  9734  0715  00B0               	movwf	?___ftdiv+2
  9735  0716  0008               	return
  9736  0717                     l3686:	
  9737  0717  3000               	movlw	0
  9738  0718  00B9               	movwf	___ftdiv@f3
  9739  0719  3000               	movlw	0
  9740  071A  00BA               	movwf	___ftdiv@f3+1
  9741  071B  3000               	movlw	0
  9742  071C  00BB               	movwf	___ftdiv@f3+2
  9743  071D  3089               	movlw	137
  9744  071E  073D               	addwf	___ftdiv@sign,w
  9745  071F  00B4               	movwf	??___ftdiv
  9746  0720  0834               	movf	??___ftdiv,w
  9747  0721  02BC               	subwf	___ftdiv@exp,f
  9748  0722  0831               	movf	___ftdiv@f1,w
  9749  0723  00B4               	movwf	??___ftdiv
  9750  0724  0832               	movf	___ftdiv@f1+1,w
  9751  0725  00B5               	movwf	??___ftdiv+1
  9752  0726  0833               	movf	___ftdiv@f1+2,w
  9753  0727  00B6               	movwf	??___ftdiv+2
  9754  0728  3010               	movlw	16
  9755  0729                     u3225:	
  9756  0729  36B6               	lsrf	??___ftdiv+2,f
  9757  072A  0CB5               	rrf	??___ftdiv+1,f
  9758  072B  0CB4               	rrf	??___ftdiv,f
  9759  072C  0B89               	decfsz	9,f
  9760  072D  2F29               	goto	u3225
  9761  072E  0834               	movf	??___ftdiv,w
  9762  072F  00B7               	movwf	??___ftdiv+3
  9763  0730  0837               	movf	??___ftdiv+3,w
  9764  0731  00BD               	movwf	___ftdiv@sign
  9765  0732  082E               	movf	___ftdiv@f2,w
  9766  0733  00B4               	movwf	??___ftdiv
  9767  0734  082F               	movf	___ftdiv@f2+1,w
  9768  0735  00B5               	movwf	??___ftdiv+1
  9769  0736  0830               	movf	___ftdiv@f2+2,w
  9770  0737  00B6               	movwf	??___ftdiv+2
  9771  0738  3010               	movlw	16
  9772  0739                     u3235:	
  9773  0739  36B6               	lsrf	??___ftdiv+2,f
  9774  073A  0CB5               	rrf	??___ftdiv+1,f
  9775  073B  0CB4               	rrf	??___ftdiv,f
  9776  073C  0B89               	decfsz	9,f
  9777  073D  2F39               	goto	u3235
  9778  073E  0834               	movf	??___ftdiv,w
  9779  073F  00B7               	movwf	??___ftdiv+3
  9780  0740  0837               	movf	??___ftdiv+3,w
  9781  0741  06BD               	xorwf	___ftdiv@sign,f
  9782  0742  3080               	movlw	128
  9783  0743  00B4               	movwf	??___ftdiv
  9784  0744  0834               	movf	??___ftdiv,w
  9785  0745  05BD               	andwf	___ftdiv@sign,f
  9786  0746  17B2               	bsf	___ftdiv@f1+1,7
  9787  0747  30FF               	movlw	255
  9788  0748  05B1               	andwf	___ftdiv@f1,f
  9789  0749  30FF               	movlw	255
  9790  074A  05B2               	andwf	___ftdiv@f1+1,f
  9791  074B  3000               	movlw	0
  9792  074C  05B3               	andwf	___ftdiv@f1+2,f
  9793  074D  17AF               	bsf	___ftdiv@f2+1,7
  9794  074E  30FF               	movlw	255
  9795  074F  05AE               	andwf	___ftdiv@f2,f
  9796  0750  30FF               	movlw	255
  9797  0751  05AF               	andwf	___ftdiv@f2+1,f
  9798  0752  3000               	movlw	0
  9799  0753  05B0               	andwf	___ftdiv@f2+2,f
  9800  0754  3018               	movlw	24
  9801  0755  00B4               	movwf	??___ftdiv
  9802  0756  0834               	movf	??___ftdiv,w
  9803  0757  00B8               	movwf	___ftdiv@cntr
  9804  0758                     l3700:	
  9805  0758  3001               	movlw	1
  9806  0759                     u3245:	
  9807  0759  35B9               	lslf	___ftdiv@f3,f
  9808  075A  0DBA               	rlf	___ftdiv@f3+1,f
  9809  075B  0DBB               	rlf	___ftdiv@f3+2,f
  9810  075C  0B89               	decfsz	9,f
  9811  075D  2F59               	goto	u3245
  9812  075E  0830               	movf	___ftdiv@f2+2,w
  9813  075F  0233               	subwf	___ftdiv@f1+2,w
  9814  0760  1D03               	skipz
  9815  0761  2F68               	goto	u3255
  9816  0762  082F               	movf	___ftdiv@f2+1,w
  9817  0763  0232               	subwf	___ftdiv@f1+1,w
  9818  0764  1D03               	skipz
  9819  0765  2F68               	goto	u3255
  9820  0766  082E               	movf	___ftdiv@f2,w
  9821  0767  0231               	subwf	___ftdiv@f1,w
  9822  0768                     u3255:	
  9823  0768  1C03               	skipc
  9824  0769  2F71               	goto	l3708
  9825  076A  082E               	movf	___ftdiv@f2,w
  9826  076B  02B1               	subwf	___ftdiv@f1,f
  9827  076C  082F               	movf	___ftdiv@f2+1,w
  9828  076D  3BB2               	subwfb	___ftdiv@f1+1,f
  9829  076E  0830               	movf	___ftdiv@f2+2,w
  9830  076F  3BB3               	subwfb	___ftdiv@f1+2,f
  9831  0770  1439               	bsf	___ftdiv@f3,0
  9832  0771                     l3708:	
  9833  0771  3001               	movlw	1
  9834  0772                     u3265:	
  9835  0772  35B1               	lslf	___ftdiv@f1,f
  9836  0773  0DB2               	rlf	___ftdiv@f1+1,f
  9837  0774  0DB3               	rlf	___ftdiv@f1+2,f
  9838  0775  0B89               	decfsz	9,f
  9839  0776  2F72               	goto	u3265
  9840  0777  3001               	movlw	1
  9841  0778  02B8               	subwf	___ftdiv@cntr,f
  9842  0779  1D03               	btfss	3,2
  9843  077A  2F58               	goto	l3700
  9844  077B  0839               	movf	___ftdiv@f3,w
  9845  077C  00A0               	movwf	___ftpack@arg
  9846  077D  083A               	movf	___ftdiv@f3+1,w
  9847  077E  00A1               	movwf	___ftpack@arg+1
  9848  077F  083B               	movf	___ftdiv@f3+2,w
  9849  0780  00A2               	movwf	___ftpack@arg+2
  9850  0781  083C               	movf	___ftdiv@exp,w
  9851  0782  00B4               	movwf	??___ftdiv
  9852  0783  0834               	movf	??___ftdiv,w
  9853  0784  00A3               	movwf	___ftpack@exp
  9854  0785  083D               	movf	___ftdiv@sign,w
  9855  0786  00B5               	movwf	??___ftdiv+1
  9856  0787  0835               	movf	??___ftdiv+1,w
  9857  0788  00A4               	movwf	___ftpack@sign
  9858  0789  3187  2793         	fcall	___ftpack
  9859  078B  0020               	movlb	0	; select bank0
  9860  078C  0820               	movf	?___ftpack,w
  9861  078D  00AE               	movwf	?___ftdiv
  9862  078E  0821               	movf	?___ftpack+1,w
  9863  078F  00AF               	movwf	?___ftdiv+1
  9864  0790  0822               	movf	?___ftpack+2,w
  9865  0791  00B0               	movwf	?___ftdiv+2
  9866  0792  0008               	return
  9867  0793                     __end_of___ftdiv:	
  9868                           
  9869                           	psect	text18
  9870  0793                     __ptext18:	
  9871 ;; *************** function ___ftpack *****************
  9872 ;; Defined at:
  9873 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9874 ;; Parameters:    Size  Location     Type
  9875 ;;  arg             3    0[BANK0 ] unsigned um
  9876 ;;  exp             1    3[BANK0 ] unsigned char 
  9877 ;;  sign            1    4[BANK0 ] unsigned char 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;		None
  9880 ;; Return value:  Size  Location     Type
  9881 ;;                  3    0[BANK0 ] float 
  9882 ;; Registers used:
  9883 ;;		wreg, status,2, status,0
  9884 ;; Tracked objects:
  9885 ;;		On entry : 0/0
  9886 ;;		On exit  : 0/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9889 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;Total ram usage:        8 bytes
  9894 ;; Hardware stack levels used:    1
  9895 ;; Hardware stack levels required when called:    3
  9896 ;; This function calls:
  9897 ;;		Nothing
  9898 ;; This function is called by:
  9899 ;;		___awtoft
  9900 ;;		___ftdiv
  9901 ;;		___ftmul
  9902 ;;		___lwtoft
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           
  9907                           ;psect for function ___ftpack
  9908  0793                     ___ftpack:	
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9912  0793  0020               	movlb	0	; select bank0
  9913  0794  0823               	movf	___ftpack@exp,w
  9914  0795  1903               	btfsc	3,2
  9915  0796  2F9C               	goto	l2794
  9916  0797  0822               	movf	___ftpack@arg+2,w
  9917  0798  0421               	iorwf	___ftpack@arg+1,w
  9918  0799  0420               	iorwf	___ftpack@arg,w
  9919  079A  1D03               	skipz
  9920  079B  2FAD               	goto	l2800
  9921  079C                     l2794:	
  9922  079C  3000               	movlw	0
  9923  079D  00A0               	movwf	?___ftpack
  9924  079E  3000               	movlw	0
  9925  079F  00A1               	movwf	?___ftpack+1
  9926  07A0  3000               	movlw	0
  9927  07A1  00A2               	movwf	?___ftpack+2
  9928  07A2  0008               	return
  9929  07A3                     l2798:	
  9930  07A3  3001               	movlw	1
  9931  07A4  00A5               	movwf	??___ftpack
  9932  07A5  0825               	movf	??___ftpack,w
  9933  07A6  07A3               	addwf	___ftpack@exp,f
  9934  07A7  3001               	movlw	1
  9935  07A8                     u1995:	
  9936  07A8  36A2               	lsrf	___ftpack@arg+2,f
  9937  07A9  0CA1               	rrf	___ftpack@arg+1,f
  9938  07AA  0CA0               	rrf	___ftpack@arg,f
  9939  07AB  0B89               	decfsz	9,f
  9940  07AC  2FA8               	goto	u1995
  9941  07AD                     l2800:	
  9942  07AD  30FE               	movlw	254
  9943  07AE  0522               	andwf	___ftpack@arg+2,w
  9944  07AF  1903               	btfsc	3,2
  9945  07B0  2FC6               	goto	l1111
  9946  07B1  2FA3               	goto	l2798
  9947  07B2                     l2802:	
  9948  07B2  3001               	movlw	1
  9949  07B3  00A5               	movwf	??___ftpack
  9950  07B4  0825               	movf	??___ftpack,w
  9951  07B5  07A3               	addwf	___ftpack@exp,f
  9952  07B6  3001               	movlw	1
  9953  07B7  07A0               	addwf	___ftpack@arg,f
  9954  07B8  3000               	movlw	0
  9955  07B9  1803               	skipnc
  9956  07BA  3001               	movlw	1
  9957  07BB  07A1               	addwf	___ftpack@arg+1,f
  9958  07BC  3000               	movlw	0
  9959  07BD  1803               	skipnc
  9960  07BE  3001               	movlw	1
  9961  07BF  07A2               	addwf	___ftpack@arg+2,f
  9962  07C0  3001               	movlw	1
  9963  07C1                     u2015:	
  9964  07C1  36A2               	lsrf	___ftpack@arg+2,f
  9965  07C2  0CA1               	rrf	___ftpack@arg+1,f
  9966  07C3  0CA0               	rrf	___ftpack@arg,f
  9967  07C4  0B89               	decfsz	9,f
  9968  07C5  2FC1               	goto	u2015
  9969  07C6                     l1111:	
  9970  07C6  30FF               	movlw	255
  9971  07C7  0522               	andwf	___ftpack@arg+2,w
  9972  07C8  1903               	btfsc	3,2
  9973  07C9  2FD3               	goto	l2810
  9974  07CA  2FB2               	goto	l2802
  9975  07CB                     l2808:	
  9976  07CB  3001               	movlw	1
  9977  07CC  02A3               	subwf	___ftpack@exp,f
  9978  07CD  3001               	movlw	1
  9979  07CE                     u2035:	
  9980  07CE  35A0               	lslf	___ftpack@arg,f
  9981  07CF  0DA1               	rlf	___ftpack@arg+1,f
  9982  07D0  0DA2               	rlf	___ftpack@arg+2,f
  9983  07D1  0B89               	decfsz	9,f
  9984  07D2  2FCE               	goto	u2035
  9985  07D3                     l2810:	
  9986  07D3  1BA1               	btfsc	___ftpack@arg+1,7
  9987  07D4  2FD9               	goto	l1118
  9988  07D5  3002               	movlw	2
  9989  07D6  0223               	subwf	___ftpack@exp,w
  9990  07D7  1803               	skipnc
  9991  07D8  2FCB               	goto	l2808
  9992  07D9                     l1118:	
  9993  07D9  1823               	btfsc	___ftpack@exp,0
  9994  07DA  2FE1               	goto	l1119
  9995  07DB  30FF               	movlw	255
  9996  07DC  05A0               	andwf	___ftpack@arg,f
  9997  07DD  307F               	movlw	127
  9998  07DE  05A1               	andwf	___ftpack@arg+1,f
  9999  07DF  30FF               	movlw	255
 10000  07E0  05A2               	andwf	___ftpack@arg+2,f
 10001  07E1                     l1119:	
 10002  07E1  1003               	clrc
 10003  07E2  0CA3               	rrf	___ftpack@exp,f
 10004  07E3  0823               	movf	___ftpack@exp,w
 10005  07E4  00A5               	movwf	??___ftpack
 10006  07E5  01A6               	clrf	??___ftpack+1
 10007  07E6  01A7               	clrf	??___ftpack+2
 10008  07E7  3010               	movlw	16
 10009  07E8                     u2075:	
 10010  07E8  35A5               	lslf	??___ftpack,f
 10011  07E9  0DA6               	rlf	??___ftpack+1,f
 10012  07EA  0DA7               	rlf	??___ftpack+2,f
 10013  07EB  0B89               	decfsz	9,f
 10014  07EC  2FE8               	goto	u2075
 10015  07ED  0825               	movf	??___ftpack,w
 10016  07EE  04A0               	iorwf	___ftpack@arg,f
 10017  07EF  0826               	movf	??___ftpack+1,w
 10018  07F0  04A1               	iorwf	___ftpack@arg+1,f
 10019  07F1  0827               	movf	??___ftpack+2,w
 10020  07F2  04A2               	iorwf	___ftpack@arg+2,f
 10021  07F3  0824               	movf	___ftpack@sign,w
 10022  07F4  1903               	btfsc	3,2
 10023  07F5  0008               	return
 10024  07F6  17A2               	bsf	___ftpack@arg+2,7
 10025  07F7  0008               	return
 10026  07F8                     __end_of___ftpack:	
 10027                           
 10028                           	psect	text19
 10029  09D0                     __ptext19:	
 10030 ;; *************** function _SYSTEM_Initialize *****************
 10031 ;; Defined at:
 10032 ;;		line 83 in file "mcc_generated_files/mcc.c"
 10033 ;; Parameters:    Size  Location     Type
 10034 ;;		None
 10035 ;; Auto vars:     Size  Location     Type
 10036 ;;		None
 10037 ;; Return value:  Size  Location     Type
 10038 ;;                  1    wreg      void 
 10039 ;; Registers used:
 10040 ;;		wreg, status,2, status,0, pclath, cstack
 10041 ;; Tracked objects:
 10042 ;;		On entry : 0/0
 10043 ;;		On exit  : 0/0
 10044 ;;		Unchanged: 0/0
 10045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;Total ram usage:        0 bytes
 10051 ;; Hardware stack levels used:    1
 10052 ;; Hardware stack levels required when called:    4
 10053 ;; This function calls:
 10054 ;;		_ADCC_Initialize
 10055 ;;		_I2C1_Initialize
 10056 ;;		_OSCILLATOR_Initialize
 10057 ;;		_PIN_MANAGER_Initialize
 10058 ;; This function is called by:
 10059 ;;		_main
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           
 10064                           ;psect for function _SYSTEM_Initialize
 10065  09D0                     _SYSTEM_Initialize:	
 10066                           
 10067                           ;mcc.c: 86: PIN_MANAGER_Initialize();
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10071  09D0  318B  23D2  3189   	fcall	_PIN_MANAGER_Initialize
 10072                           
 10073                           ;mcc.c: 87: OSCILLATOR_Initialize();
 10074  09D3  3189  21BC  3189   	fcall	_OSCILLATOR_Initialize
 10075                           
 10076                           ;mcc.c: 88: I2C1_Initialize();
 10077  09D6  318A  2251  3189   	fcall	_I2C1_Initialize
 10078                           
 10079                           ;mcc.c: 89: ADCC_Initialize();
 10080  09D9  318A  2299         	fcall	_ADCC_Initialize
 10081  09DB  0008               	return
 10082  09DC                     __end_of_SYSTEM_Initialize:	
 10083                           
 10084                           	psect	text20
 10085  0BD2                     __ptext20:	
 10086 ;; *************** function _PIN_MANAGER_Initialize *****************
 10087 ;; Defined at:
 10088 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;		None
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;  state           1    0[BANK0 ] unsigned char 
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  1    wreg      void 
 10095 ;; Registers used:
 10096 ;;		wreg, status,2, status,0
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;Total ram usage:        1 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    3
 10109 ;; This function calls:
 10110 ;;		Nothing
 10111 ;; This function is called by:
 10112 ;;		_SYSTEM_Initialize
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           
 10117                           ;psect for function _PIN_MANAGER_Initialize
 10118  0BD2                     _PIN_MANAGER_Initialize:	
 10119                           
 10120                           ;pin_manager.c: 57: LATA = 0x00;
 10121                           
 10122                           ;incstack = 0
 10123                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 10124  0BD2  0020               	movlb	0	; select bank0
 10125  0BD3  0196               	clrf	22	;volatile
 10126                           
 10127                           ;pin_manager.c: 58: LATB = 0x00;
 10128  0BD4  0197               	clrf	23	;volatile
 10129                           
 10130                           ;pin_manager.c: 59: LATC = 0x00;
 10131  0BD5  0198               	clrf	24	;volatile
 10132                           
 10133                           ;pin_manager.c: 64: TRISA = 0x7F;
 10134  0BD6  307F               	movlw	127
 10135  0BD7  0091               	movwf	17	;volatile
 10136                           
 10137                           ;pin_manager.c: 65: TRISB = 0x30;
 10138  0BD8  3030               	movlw	48
 10139  0BD9  0092               	movwf	18	;volatile
 10140                           
 10141                           ;pin_manager.c: 66: TRISC = 0x1D;
 10142  0BDA  301D               	movlw	29
 10143  0BDB  0093               	movwf	19	;volatile
 10144                           
 10145                           ;pin_manager.c: 71: ANSELC = 0xE7;
 10146  0BDC  30E7               	movlw	231
 10147  0BDD  003E               	movlb	30	; select bank30
 10148  0BDE  00CE               	movwf	78	;volatile
 10149                           
 10150                           ;pin_manager.c: 72: ANSELB = 0xCF;
 10151  0BDF  30CF               	movlw	207
 10152  0BE0  00C3               	movwf	67	;volatile
 10153                           
 10154                           ;pin_manager.c: 73: ANSELA = 0xFF;
 10155  0BE1  30FF               	movlw	255
 10156  0BE2  00B8               	movwf	56	;volatile
 10157                           
 10158                           ;pin_manager.c: 78: WPUE = 0x00;
 10159  0BE3  01E5               	clrf	101	;volatile
 10160                           
 10161                           ;pin_manager.c: 79: WPUB = 0x30;
 10162  0BE4  3030               	movlw	48
 10163  0BE5  00C4               	movwf	68	;volatile
 10164                           
 10165                           ;pin_manager.c: 80: WPUA = 0x00;
 10166  0BE6  01B9               	clrf	57	;volatile
 10167                           
 10168                           ;pin_manager.c: 81: WPUC = 0x00;
 10169  0BE7  01CF               	clrf	79	;volatile
 10170                           
 10171                           ;pin_manager.c: 86: ODCONA = 0x00;
 10172  0BE8  01BA               	clrf	58	;volatile
 10173                           
 10174                           ;pin_manager.c: 87: ODCONB = 0x00;
 10175  0BE9  01C5               	clrf	69	;volatile
 10176                           
 10177                           ;pin_manager.c: 88: ODCONC = 0x00;
 10178  0BEA  01D0               	clrf	80	;volatile
 10179                           
 10180                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
 10181  0BEB  3000               	movlw	0
 10182  0BEC  1B8B               	btfsc	11,7	;volatile
 10183  0BED  3001               	movlw	1
 10184  0BEE  0020               	movlb	0	; select bank0
 10185  0BEF  00A0               	movwf	PIN_MANAGER_Initialize@state
 10186                           
 10187                           ;pin_manager.c: 96: GIE = 0;
 10188  0BF0  138B               	bcf	11,7	;volatile
 10189                           
 10190                           ;pin_manager.c: 97: PPSLOCK = 0x55;
 10191  0BF1  3055               	movlw	85
 10192  0BF2  003D               	movlb	29	; select bank29
 10193  0BF3  008F               	movwf	15	;volsfr
 10194                           
 10195                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
 10196  0BF4  30AA               	movlw	170
 10197  0BF5  008F               	movwf	15	;volsfr
 10198                           
 10199                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
 10200  0BF6  100F               	bcf	15,0	;volsfr
 10201                           
 10202                           ;pin_manager.c: 101: SSP1DATPPSbits.SSP1DATPPS = 0x13;
 10203  0BF7  0846               	movf	70,w	;volatile
 10204  0BF8  39E0               	andlw	-32
 10205  0BF9  3813               	iorlw	19
 10206  0BFA  00C6               	movwf	70	;volatile
 10207                           
 10208                           ;pin_manager.c: 102: SSP1CLKPPSbits.SSP1CLKPPS = 0x14;
 10209  0BFB  0845               	movf	69,w	;volatile
 10210  0BFC  39E0               	andlw	-32
 10211  0BFD  3814               	iorlw	20
 10212  0BFE  00C5               	movwf	69	;volatile
 10213                           
 10214                           ;pin_manager.c: 103: RC3PPS = 0x15;
 10215  0BFF  3015               	movlw	21
 10216  0C00  003E               	movlb	30	; select bank30
 10217  0C01  00A3               	movwf	35	;volatile
 10218                           
 10219                           ;pin_manager.c: 104: RC4PPS = 0x14;
 10220  0C02  3014               	movlw	20
 10221  0C03  00A4               	movwf	36	;volatile
 10222                           
 10223                           ;pin_manager.c: 106: PPSLOCK = 0x55;
 10224  0C04  3055               	movlw	85
 10225  0C05  003D               	movlb	29	; select bank29
 10226  0C06  008F               	movwf	15	;volsfr
 10227                           
 10228                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
 10229  0C07  30AA               	movlw	170
 10230  0C08  008F               	movwf	15	;volsfr
 10231                           
 10232                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x01;
 10233  0C09  140F               	bsf	15,0	;volsfr
 10234                           
 10235                           ;pin_manager.c: 110: GIE = state;
 10236  0C0A  0020               	movlb	0	; select bank0
 10237  0C0B  1C20               	btfss	PIN_MANAGER_Initialize@state,0
 10238  0C0C  2C0F               	goto	u4050
 10239  0C0D  178B               	bsf	11,7	;volatile
 10240  0C0E  0008               	return
 10241  0C0F                     u4050:	
 10242  0C0F  138B               	bcf	11,7	;volatile
 10243  0C10  0008               	return
 10244  0C11                     __end_of_PIN_MANAGER_Initialize:	
 10245                           
 10246                           	psect	text21
 10247  09BC                     __ptext21:	
 10248 ;; *************** function _OSCILLATOR_Initialize *****************
 10249 ;; Defined at:
 10250 ;;		line 92 in file "mcc_generated_files/mcc.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;		None
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;		None
 10255 ;; Return value:  Size  Location     Type
 10256 ;;                  1    wreg      void 
 10257 ;; Registers used:
 10258 ;;		wreg, status,2
 10259 ;; Tracked objects:
 10260 ;;		On entry : 0/0
 10261 ;;		On exit  : 0/0
 10262 ;;		Unchanged: 0/0
 10263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;Total ram usage:        0 bytes
 10269 ;; Hardware stack levels used:    1
 10270 ;; Hardware stack levels required when called:    3
 10271 ;; This function calls:
 10272 ;;		Nothing
 10273 ;; This function is called by:
 10274 ;;		_SYSTEM_Initialize
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           
 10279                           ;psect for function _OSCILLATOR_Initialize
 10280  09BC                     _OSCILLATOR_Initialize:	
 10281                           
 10282                           ;mcc.c: 95: OSCCON1 = 0x60;
 10283                           
 10284                           ;incstack = 0
 10285                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10286  09BC  3060               	movlw	96
 10287  09BD  0031               	movlb	17	; select bank17
 10288  09BE  008D               	movwf	13	;volatile
 10289                           
 10290                           ;mcc.c: 97: OSCCON3 = 0x00;
 10291  09BF  018F               	clrf	15	;volatile
 10292                           
 10293                           ;mcc.c: 99: OSCEN = 0x00;
 10294  09C0  0191               	clrf	17	;volatile
 10295                           
 10296                           ;mcc.c: 101: OSCFRQ = 0x06;
 10297  09C1  3006               	movlw	6
 10298  09C2  0093               	movwf	19	;volatile
 10299                           
 10300                           ;mcc.c: 103: OSCTUNE = 0x00;
 10301  09C3  0192               	clrf	18	;volatile
 10302  09C4  0008               	return
 10303  09C5                     __end_of_OSCILLATOR_Initialize:	
 10304                           
 10305                           	psect	text22
 10306  0A51                     __ptext22:	
 10307 ;; *************** function _I2C1_Initialize *****************
 10308 ;; Defined at:
 10309 ;;		line 198 in file "mcc_generated_files/i2c1.c"
 10310 ;; Parameters:    Size  Location     Type
 10311 ;;		None
 10312 ;; Auto vars:     Size  Location     Type
 10313 ;;		None
 10314 ;; Return value:  Size  Location     Type
 10315 ;;                  1    wreg      void 
 10316 ;; Registers used:
 10317 ;;		wreg, status,2
 10318 ;; Tracked objects:
 10319 ;;		On entry : 0/0
 10320 ;;		On exit  : 0/0
 10321 ;;		Unchanged: 0/0
 10322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;Total ram usage:        1 bytes
 10328 ;; Hardware stack levels used:    1
 10329 ;; Hardware stack levels required when called:    3
 10330 ;; This function calls:
 10331 ;;		Nothing
 10332 ;; This function is called by:
 10333 ;;		_SYSTEM_Initialize
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           
 10338                           ;psect for function _I2C1_Initialize
 10339  0A51                     _I2C1_Initialize:	
 10340                           
 10341                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
 10342                           
 10343                           ;incstack = 0
 10344                           ; Regs used in _I2C1_Initialize: [wreg+status,2]
 10345  0A51  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 10346  0A52  0020               	movlb	0	; select bank0
 10347  0A53  00A0               	movwf	??_I2C1_Initialize
 10348  0A54  0820               	movf	??_I2C1_Initialize,w
 10349  0A55  00E8               	movwf	low ((_i2c1_object| 0+1))
 10350                           
 10351                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
 10352  0A56  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 10353  0A57  00A0               	movwf	??_I2C1_Initialize
 10354  0A58  0820               	movf	??_I2C1_Initialize,w
 10355  0A59  00E7               	movwf	_i2c1_object
 10356                           
 10357                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
 10358  0A5A  14E9               	bsf	_i2c1_object+2,1
 10359                           
 10360                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
 10361  0A5B  1069               	bcf	_i2c1_object+2,0
 10362                           
 10363                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
 10364  0A5C  01EB               	clrf	_i2c1_object+4
 10365                           
 10366                           ;i2c1.c: 208: SSP1STAT = 0x00;
 10367  0A5D  0023               	movlb	3	; select bank3
 10368  0A5E  018F               	clrf	15	;volatile
 10369                           
 10370                           ;i2c1.c: 210: SSP1CON1 = 0x28;
 10371  0A5F  3028               	movlw	40
 10372  0A60  0090               	movwf	16	;volatile
 10373                           
 10374                           ;i2c1.c: 212: SSP1CON3 = 0x00;
 10375  0A61  0192               	clrf	18	;volatile
 10376                           
 10377                           ;i2c1.c: 214: SSP1ADD = 0x13;
 10378  0A62  3013               	movlw	19
 10379  0A63  008D               	movwf	13	;volatile
 10380                           
 10381                           ;i2c1.c: 218: PIR3bits.SSP1IF = 0;
 10382  0A64  002E               	movlb	14	; select bank14
 10383  0A65  100F               	bcf	15,0	;volatile
 10384                           
 10385                           ;i2c1.c: 220: PIE3bits.SSP1IE = 1;
 10386  0A66  1419               	bsf	25,0	;volatile
 10387  0A67  0008               	return
 10388  0A68                     __end_of_I2C1_Initialize:	
 10389                           
 10390                           	psect	text23
 10391  0A99                     __ptext23:	
 10392 ;; *************** function _ADCC_Initialize *****************
 10393 ;; Defined at:
 10394 ;;		line 62 in file "mcc_generated_files/adcc.c"
 10395 ;; Parameters:    Size  Location     Type
 10396 ;;		None
 10397 ;; Auto vars:     Size  Location     Type
 10398 ;;		None
 10399 ;; Return value:  Size  Location     Type
 10400 ;;                  1    wreg      void 
 10401 ;; Registers used:
 10402 ;;		wreg, status,2
 10403 ;; Tracked objects:
 10404 ;;		On entry : 0/0
 10405 ;;		On exit  : 0/0
 10406 ;;		Unchanged: 0/0
 10407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;Total ram usage:        0 bytes
 10413 ;; Hardware stack levels used:    1
 10414 ;; Hardware stack levels required when called:    3
 10415 ;; This function calls:
 10416 ;;		Nothing
 10417 ;; This function is called by:
 10418 ;;		_SYSTEM_Initialize
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           
 10423                           ;psect for function _ADCC_Initialize
 10424  0A99                     _ADCC_Initialize:	
 10425                           
 10426                           ;adcc.c: 66: ADCON1 = 0x00;
 10427                           
 10428                           ;incstack = 0
 10429                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 10430  0A99  0021               	movlb	1	; select bank1
 10431  0A9A  0194               	clrf	20	;volatile
 10432                           
 10433                           ;adcc.c: 68: ADCON2 = 0x03;
 10434  0A9B  3003               	movlw	3
 10435  0A9C  0095               	movwf	21	;volatile
 10436                           
 10437                           ;adcc.c: 70: ADCON3 = 0x00;
 10438  0A9D  0196               	clrf	22	;volatile
 10439                           
 10440                           ;adcc.c: 72: ADACT = 0x00;
 10441  0A9E  0199               	clrf	25	;volatile
 10442                           
 10443                           ;adcc.c: 74: ADSTAT = 0x00;
 10444  0A9F  0197               	clrf	23	;volatile
 10445                           
 10446                           ;adcc.c: 76: ADCLK = 0x13;
 10447  0AA0  3013               	movlw	19
 10448  0AA1  0098               	movwf	24	;volatile
 10449                           
 10450                           ;adcc.c: 78: ADREF = 0x00;
 10451  0AA2  019A               	clrf	26	;volatile
 10452                           
 10453                           ;adcc.c: 80: ADCAP = 0x00;
 10454  0AA3  019B               	clrf	27	;volatile
 10455                           
 10456                           ;adcc.c: 82: ADPRE = 0x00;
 10457  0AA4  019C               	clrf	28	;volatile
 10458                           
 10459                           ;adcc.c: 84: ADACQ = 0x04;
 10460  0AA5  3004               	movlw	4
 10461  0AA6  009D               	movwf	29	;volatile
 10462                           
 10463                           ;adcc.c: 86: ADPCH = 0x00;
 10464  0AA7  019E               	clrf	30	;volatile
 10465                           
 10466                           ;adcc.c: 88: ADRPT = 0x00;
 10467  0AA8  0022               	movlb	2	; select bank2
 10468  0AA9  018D               	clrf	13	;volatile
 10469                           
 10470                           ;adcc.c: 90: ADLTHL = 0x00;
 10471  0AAA  018E               	clrf	14	;volatile
 10472                           
 10473                           ;adcc.c: 92: ADLTHH = 0x00;
 10474  0AAB  018F               	clrf	15	;volatile
 10475                           
 10476                           ;adcc.c: 94: ADUTHL = 0x00;
 10477  0AAC  0190               	clrf	16	;volatile
 10478                           
 10479                           ;adcc.c: 96: ADUTHH = 0x00;
 10480  0AAD  0191               	clrf	17	;volatile
 10481                           
 10482                           ;adcc.c: 98: ADSTPTL = 0x00;
 10483  0AAE  0192               	clrf	18	;volatile
 10484                           
 10485                           ;adcc.c: 100: ADSTPTH = 0x00;
 10486  0AAF  0193               	clrf	19	;volatile
 10487                           
 10488                           ;adcc.c: 103: ADCON0 = 0x84;
 10489  0AB0  3084               	movlw	132
 10490  0AB1  0021               	movlb	1	; select bank1
 10491  0AB2  0093               	movwf	19	;volatile
 10492  0AB3  0008               	return
 10493  0AB4                     __end_of_ADCC_Initialize:	
 10494                           
 10495                           	psect	text24
 10496  09F4                     __ptext24:	
 10497 ;; *************** function _LED7SegSetup *****************
 10498 ;; Defined at:
 10499 ;;		line 31 in file "LED7Seg.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;		None
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;		None
 10504 ;; Return value:  Size  Location     Type
 10505 ;;                  1    wreg      void 
 10506 ;; Registers used:
 10507 ;;		None
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;Total ram usage:        0 bytes
 10518 ;; Hardware stack levels used:    1
 10519 ;; Hardware stack levels required when called:    3
 10520 ;; This function calls:
 10521 ;;		Nothing
 10522 ;; This function is called by:
 10523 ;;		_main
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           
 10528                           ;psect for function _LED7SegSetup
 10529  09F4                     _LED7SegSetup:	
 10530                           
 10531                           ;incstack = 0
 10532                           ; Regs used in _LED7SegSetup: []
 10533                           ;LED7Seg.c: 34: do { ANSELCbits.ANSC5 = 0; } while(0);
 10534  09F4  003E               	movlb	30	; select bank30
 10535  09F5  12CE               	bcf	78,5	;volatile
 10536                           
 10537                           ;LED7Seg.c: 35: do { TRISCbits.TRISC5 = 0; } while(0);
 10538  09F6  0020               	movlb	0	; select bank0
 10539  09F7  1293               	bcf	19,5	;volatile
 10540                           
 10541                           ;LED7Seg.c: 38: do { ANSELCbits.ANSC6 = 0; } while(0);
 10542  09F8  003E               	movlb	30	; select bank30
 10543  09F9  134E               	bcf	78,6	;volatile
 10544                           
 10545                           ;LED7Seg.c: 39: do { TRISCbits.TRISC6 = 0; } while(0);
 10546  09FA  0020               	movlb	0	; select bank0
 10547  09FB  1313               	bcf	19,6	;volatile
 10548                           
 10549                           ;LED7Seg.c: 42: do { ANSELCbits.ANSC7 = 0; } while(0);
 10550  09FC  003E               	movlb	30	; select bank30
 10551  09FD  13CE               	bcf	78,7	;volatile
 10552                           
 10553                           ;LED7Seg.c: 43: do { TRISCbits.TRISC7 = 0; } while(0);
 10554  09FE  0020               	movlb	0	; select bank0
 10555  09FF  1393               	bcf	19,7	;volatile
 10556  0A00  0008               	return
 10557  0A01                     __end_of_LED7SegSetup:	
 10558                           
 10559                           	psect	text25
 10560  0B99                     __ptext25:	
 10561 ;; *************** function _LED7SegDisplayValueByDigit *****************
 10562 ;; Defined at:
 10563 ;;		line 95 in file "LED7Seg.c"
 10564 ;; Parameters:    Size  Location     Type
 10565 ;;  iTensDigit      2   20[BANK0 ] unsigned int 
 10566 ;;  iUnitsDigit     2   22[BANK0 ] unsigned int 
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;  iTensCode       2   24[BANK0 ] unsigned int 
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  1    wreg      void 
 10571 ;; Registers used:
 10572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10578 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10582 ;;Total ram usage:        6 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    7
 10585 ;; This function calls:
 10586 ;;		_LED7SegShiftOutPulseClock
 10587 ;; This function is called by:
 10588 ;;		_main
 10589 ;;		_LED7SegDisplayValue
 10590 ;; This function uses a non-reentrant model
 10591 ;;
 10592                           
 10593                           
 10594                           ;psect for function _LED7SegDisplayValueByDigit
 10595  0B99                     _LED7SegDisplayValueByDigit:	
 10596                           
 10597                           ;LED7Seg.c: 99: if(iUnitsDigit>9) iUnitsDigit=9;
 10598                           
 10599                           ;LED7Seg.c: 96: unsigned int iTensCode;
 10600                           ;LED7Seg.c: 98: if(0>iUnitsDigit) iUnitsDigit=0;
 10601                           
 10602                           ;incstack = 0
 10603                           ; Regs used in _LED7SegDisplayValueByDigit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10604  0B99  3000               	movlw	0
 10605  0B9A  0020               	movlb	0	; select bank0
 10606  0B9B  0237               	subwf	LED7SegDisplayValueByDigit@iUnitsDigit+1,w
 10607  0B9C  300A               	movlw	10
 10608  0B9D  1903               	skipnz
 10609  0B9E  0236               	subwf	LED7SegDisplayValueByDigit@iUnitsDigit,w
 10610  0B9F  1C03               	skipc
 10611  0BA0  2BA5               	goto	l4358
 10612  0BA1  3009               	movlw	9
 10613  0BA2  00B6               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit
 10614  0BA3  3000               	movlw	0
 10615  0BA4  00B7               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit+1
 10616  0BA5                     l4358:	
 10617                           ;LED7Seg.c: 101: if(0>iTensDigit) iTensDigit=0;
 10618                           
 10619                           
 10620                           ;LED7Seg.c: 102: if(iTensDigit>9) iTensDigit=9;
 10621  0BA5  3000               	movlw	0
 10622  0BA6  0235               	subwf	LED7SegDisplayValueByDigit@iTensDigit+1,w
 10623  0BA7  300A               	movlw	10
 10624  0BA8  1903               	skipnz
 10625  0BA9  0234               	subwf	LED7SegDisplayValueByDigit@iTensDigit,w
 10626  0BAA  1C03               	skipc
 10627  0BAB  2BB0               	goto	l4362
 10628  0BAC  3009               	movlw	9
 10629  0BAD  00B4               	movwf	LED7SegDisplayValueByDigit@iTensDigit
 10630  0BAE  3000               	movlw	0
 10631  0BAF  00B5               	movwf	LED7SegDisplayValueByDigit@iTensDigit+1
 10632  0BB0                     l4362:	
 10633                           
 10634                           ;LED7Seg.c: 104: iTensCode=segdisp[iTensDigit];
 10635  0BB0  3534               	lslf	LED7SegDisplayValueByDigit@iTensDigit,w
 10636  0BB1  3E20               	addlw	(low (_segdisp| (0+256)))& (0+255)
 10637  0BB2  0086               	movwf	6
 10638  0BB3  3001               	movlw	1	; select bank2/3
 10639  0BB4  0087               	movwf	7
 10640  0BB5  3F40               	moviw [0]fsr1
 10641  0BB6  00B8               	movwf	LED7SegDisplayValueByDigit@iTensCode
 10642  0BB7  3F41               	moviw [1]fsr1
 10643  0BB8  00B9               	movwf	LED7SegDisplayValueByDigit@iTensCode+1
 10644                           
 10645                           ;LED7Seg.c: 105: if(0==iTensDigit) iTensCode=255;
 10646  0BB9  0834               	movf	LED7SegDisplayValueByDigit@iTensDigit,w
 10647  0BBA  0435               	iorwf	LED7SegDisplayValueByDigit@iTensDigit+1,w
 10648  0BBB  1D03               	btfss	3,2
 10649  0BBC  2BC1               	goto	l4368
 10650  0BBD  30FF               	movlw	255
 10651  0BBE  00B8               	movwf	LED7SegDisplayValueByDigit@iTensCode
 10652  0BBF  3000               	movlw	0
 10653  0BC0  00B9               	movwf	LED7SegDisplayValueByDigit@iTensCode+1
 10654  0BC1                     l4368:	
 10655                           
 10656                           ;LED7Seg.c: 107: LED7SegShiftOutPulseClock( segdisp[iUnitsDigit]);
 10657  0BC1  3536               	lslf	LED7SegDisplayValueByDigit@iUnitsDigit,w
 10658  0BC2  3E20               	addlw	(low (_segdisp| (0+256)))& (0+255)
 10659  0BC3  0086               	movwf	6
 10660  0BC4  3001               	movlw	1	; select bank2/3
 10661  0BC5  0087               	movwf	7
 10662  0BC6  0801               	movf	1,w
 10663  0BC7  318A  22D0  318B   	fcall	_LED7SegShiftOutPulseClock
 10664                           
 10665                           ;LED7Seg.c: 108: LED7SegShiftOutPulseClock( iTensCode );
 10666  0BCA  0020               	movlb	0	; select bank0
 10667  0BCB  0838               	movf	LED7SegDisplayValueByDigit@iTensCode,w
 10668  0BCC  318A  22D0         	fcall	_LED7SegShiftOutPulseClock
 10669                           
 10670                           ;LED7Seg.c: 110: do { LATCbits.LATC5 = 1; } while(0);
 10671  0BCE  0020               	movlb	0	; select bank0
 10672  0BCF  1698               	bsf	24,5	;volatile
 10673                           
 10674                           ;LED7Seg.c: 111: do { LATCbits.LATC5 = 0; } while(0);
 10675  0BD0  1298               	bcf	24,5	;volatile
 10676  0BD1  0008               	return
 10677  0BD2                     __end_of_LED7SegDisplayValueByDigit:	
 10678                           
 10679                           	psect	text26
 10680  0AD0                     __ptext26:	
 10681 ;; *************** function _LED7SegShiftOutPulseClock *****************
 10682 ;; Defined at:
 10683 ;;		line 69 in file "LED7Seg.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;  val             1    wreg     unsigned char 
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;  val             1   18[BANK0 ] unsigned char 
 10688 ;;  i               1   19[BANK0 ] unsigned char 
 10689 ;; Return value:  Size  Location     Type
 10690 ;;                  1    wreg      void 
 10691 ;; Registers used:
 10692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10693 ;; Tracked objects:
 10694 ;;		On entry : 0/0
 10695 ;;		On exit  : 0/0
 10696 ;;		Unchanged: 0/0
 10697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10702 ;;Total ram usage:        3 bytes
 10703 ;; Hardware stack levels used:    1
 10704 ;; Hardware stack levels required when called:    6
 10705 ;; This function calls:
 10706 ;;		_LED7SegPinWrite
 10707 ;;		_LED7SegPulseClock
 10708 ;; This function is called by:
 10709 ;;		_LED7SegDisplayValueByDigit
 10710 ;;		_LED7SegBlankDisplay
 10711 ;; This function uses a non-reentrant model
 10712 ;;
 10713                           
 10714                           
 10715                           ;psect for function _LED7SegShiftOutPulseClock
 10716  0AD0                     _LED7SegShiftOutPulseClock:	
 10717                           
 10718                           ;incstack = 0
 10719                           ; Regs used in _LED7SegShiftOutPulseClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10720                           ;LED7SegShiftOutPulseClock@val stored from wreg
 10721  0AD0  0020               	movlb	0	; select bank0
 10722  0AD1  00B2               	movwf	LED7SegShiftOutPulseClock@val
 10723                           
 10724                           ;LED7Seg.c: 71: char i;
 10725                           ;LED7Seg.c: 75: for (i = 0; i < 8; i++) {
 10726  0AD2  01B3               	clrf	LED7SegShiftOutPulseClock@i
 10727  0AD3                     L5:	
 10728  0AD3  3008               	movlw	8
 10729  0AD4  0233               	subwf	LED7SegShiftOutPulseClock@i,w
 10730  0AD5  1803               	btfsc	3,0
 10731  0AD6  0008               	return
 10732                           
 10733                           ;LED7Seg.c: 76: LED7SegPinWrite((val & (1 << i)));
 10734  0AD7  3001               	movlw	1
 10735  0AD8  00B1               	movwf	??_LED7SegShiftOutPulseClock
 10736  0AD9  0A33               	incf	LED7SegShiftOutPulseClock@i,w
 10737  0ADA  2ADC               	goto	u4084
 10738  0ADB                     u4085:	
 10739  0ADB  35B1               	lslf	??_LED7SegShiftOutPulseClock,f
 10740  0ADC                     u4084:	
 10741  0ADC  0B89               	decfsz	9,f
 10742  0ADD  2ADB               	goto	u4085
 10743  0ADE  0831               	movf	??_LED7SegShiftOutPulseClock,w
 10744  0ADF  0532               	andwf	LED7SegShiftOutPulseClock@val,w
 10745  0AE0  3189  21B3  318A   	fcall	_LED7SegPinWrite
 10746                           
 10747                           ;LED7Seg.c: 77: LED7SegPulseClock();
 10748  0AE3  3189  21C5  318A   	fcall	_LED7SegPulseClock
 10749  0AE6  3001               	movlw	1
 10750  0AE7  0020               	movlb	0	; select bank0
 10751  0AE8  00B1               	movwf	??_LED7SegShiftOutPulseClock
 10752  0AE9  0831               	movf	??_LED7SegShiftOutPulseClock,w
 10753  0AEA  07B3               	addwf	LED7SegShiftOutPulseClock@i,f
 10754  0AEB  2AD3               	goto	L5
 10755  0AEC                     __end_of_LED7SegShiftOutPulseClock:	
 10756                           
 10757                           	psect	text27
 10758  09C5                     __ptext27:	
 10759 ;; *************** function _LED7SegPulseClock *****************
 10760 ;; Defined at:
 10761 ;;		line 60 in file "LED7Seg.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;		None
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;		None
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  1    wreg      void 
 10768 ;; Registers used:
 10769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;Total ram usage:        0 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    5
 10782 ;; This function calls:
 10783 ;;		_delay
 10784 ;; This function is called by:
 10785 ;;		_LED7SegShiftOutPulseClock
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           
 10790                           ;psect for function _LED7SegPulseClock
 10791  09C5                     _LED7SegPulseClock:	
 10792                           
 10793                           ;incstack = 0
 10794                           ; Regs used in _LED7SegPulseClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10795                           ;LED7Seg.c: 63: do { LATCbits.LATC6 = 1; } while(0);
 10796  09C5  0020               	movlb	0	; select bank0
 10797  09C6  1718               	bsf	24,6	;volatile
 10798                           
 10799                           ;LED7Seg.c: 64: delay(1);
 10800  09C7  3001               	movlw	1
 10801  09C8  00A6               	movwf	delay@delaytime
 10802  09C9  3000               	movlw	0
 10803  09CA  00A7               	movwf	delay@delaytime+1
 10804  09CB  318C  2497         	fcall	_delay
 10805                           
 10806                           ;LED7Seg.c: 66: do { LATCbits.LATC6 = 0; } while(0);
 10807  09CD  0020               	movlb	0	; select bank0
 10808  09CE  1318               	bcf	24,6	;volatile
 10809  09CF  0008               	return
 10810  09D0                     __end_of_LED7SegPulseClock:	
 10811                           
 10812                           	psect	text28
 10813  0C97                     __ptext28:	
 10814 ;; *************** function _delay *****************
 10815 ;; Defined at:
 10816 ;;		line 194 in file "main.c"
 10817 ;; Parameters:    Size  Location     Type
 10818 ;;  delaytime       2    6[BANK0 ] int 
 10819 ;; Auto vars:     Size  Location     Type
 10820 ;;  counter         4   13[BANK0 ] long 
 10821 ;;  adjustedDela    4    9[BANK0 ] long 
 10822 ;; Return value:  Size  Location     Type
 10823 ;;                  1    wreg      void 
 10824 ;; Registers used:
 10825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10826 ;; Tracked objects:
 10827 ;;		On entry : 0/0
 10828 ;;		On exit  : 0/0
 10829 ;;		Unchanged: 0/0
 10830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10831 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;Total ram usage:       11 bytes
 10836 ;; Hardware stack levels used:    1
 10837 ;; Hardware stack levels required when called:    4
 10838 ;; This function calls:
 10839 ;;		___wmul
 10840 ;; This function is called by:
 10841 ;;		_blinkyLoop
 10842 ;;		_main
 10843 ;;		_LED7SegPulseClock
 10844 ;;		_LED7SegLoop
 10845 ;; This function uses a non-reentrant model
 10846 ;;
 10847                           
 10848                           
 10849                           ;psect for function _delay
 10850  0C97                     _delay:	
 10851                           
 10852                           ;main.c: 195: long counter = 0;
 10853                           
 10854                           ;incstack = 0
 10855                           ; Regs used in _delay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10856  0C97  3000               	movlw	0
 10857  0C98  0020               	movlb	0	; select bank0
 10858  0C99  00B0               	movwf	delay@counter+3
 10859  0C9A  3000               	movlw	0
 10860  0C9B  00AF               	movwf	delay@counter+2
 10861  0C9C  3000               	movlw	0
 10862  0C9D  00AE               	movwf	delay@counter+1
 10863  0C9E  3000               	movlw	0
 10864  0C9F  00AD               	movwf	delay@counter
 10865                           
 10866                           ;main.c: 196: long adjustedDelaytime=delaytime*cMstrClkAdjust;
 10867  0CA0  0827               	movf	delay@delaytime+1,w
 10868  0CA1  00A1               	movwf	___wmul@multiplier+1
 10869  0CA2  0826               	movf	delay@delaytime,w
 10870  0CA3  00A0               	movwf	___wmul@multiplier
 10871  0CA4  302A               	movlw	low (_cMstrClkAdjust| (0+32768))
 10872  0CA5  0084               	movwf	4
 10873  0CA6  3090               	movlw	high (_cMstrClkAdjust| (0+32768))
 10874  0CA7  0085               	movwf	5
 10875  0CA8  3F00               	moviw [0]fsr0
 10876  0CA9  00A2               	movwf	___wmul@multiplicand
 10877  0CAA  3F01               	moviw [1]fsr0
 10878  0CAB  00A3               	movwf	___wmul@multiplicand+1
 10879  0CAC  318A  22B4  318C   	fcall	___wmul
 10880  0CAF  0020               	movlb	0	; select bank0
 10881  0CB0  0820               	movf	?___wmul,w
 10882  0CB1  00A9               	movwf	delay@adjustedDelaytime
 10883  0CB2  0821               	movf	?___wmul+1,w
 10884  0CB3  00AA               	movwf	delay@adjustedDelaytime+1
 10885  0CB4  0D89               	rlf	9,f
 10886  0CB5  3B89               	subwfb	9,f
 10887  0CB6  0989               	comf	9,f
 10888  0CB7  00AB               	movwf	delay@adjustedDelaytime+2
 10889  0CB8  00AC               	movwf	delay@adjustedDelaytime+3
 10890                           
 10891                           ;main.c: 198: if (0<delaytime)
 10892  0CB9  0827               	movf	delay@delaytime+1,w
 10893  0CBA  3A80               	xorlw	128
 10894  0CBB  00A8               	movwf	??_delay
 10895  0CBC  3080               	movlw	128
 10896  0CBD  0228               	subwf	??_delay,w
 10897  0CBE  1D03               	skipz
 10898  0CBF  2CC2               	goto	u4025
 10899  0CC0  3001               	movlw	1
 10900  0CC1  0226               	subwf	delay@delaytime,w
 10901  0CC2                     u4025:	
 10902  0CC2  1C03               	skipc
 10903  0CC3  0008               	return
 10904                           
 10905                           ;main.c: 199: for (counter = 0; counter<adjustedDelaytime; counter++);
 10906  0CC4  3000               	movlw	0
 10907  0CC5  0020               	movlb	0	; select bank0
 10908  0CC6  00B0               	movwf	delay@counter+3
 10909  0CC7  3000               	movlw	0
 10910  0CC8  00AF               	movwf	delay@counter+2
 10911  0CC9  3000               	movlw	0
 10912  0CCA  00AE               	movwf	delay@counter+1
 10913  0CCB  3000               	movlw	0
 10914  0CCC  00AD               	movwf	delay@counter
 10915  0CCD                     l504:	
 10916  0CCD  0830               	movf	delay@counter+3,w
 10917  0CCE  3A80               	xorlw	128
 10918  0CCF  00A8               	movwf	??_delay
 10919  0CD0  082C               	movf	delay@adjustedDelaytime+3,w
 10920  0CD1  3A80               	xorlw	128
 10921  0CD2  0228               	subwf	??_delay,w
 10922  0CD3  1D03               	skipz
 10923  0CD4  2CDF               	goto	u4033
 10924  0CD5  082B               	movf	delay@adjustedDelaytime+2,w
 10925  0CD6  022F               	subwf	delay@counter+2,w
 10926  0CD7  1D03               	skipz
 10927  0CD8  2CDF               	goto	u4033
 10928  0CD9  082A               	movf	delay@adjustedDelaytime+1,w
 10929  0CDA  022E               	subwf	delay@counter+1,w
 10930  0CDB  1D03               	skipz
 10931  0CDC  2CDF               	goto	u4033
 10932  0CDD  0829               	movf	delay@adjustedDelaytime,w
 10933  0CDE  022D               	subwf	delay@counter,w
 10934  0CDF                     u4033:	
 10935  0CDF  1803               	btfsc	3,0
 10936  0CE0  0008               	return
 10937  0CE1  3001               	movlw	1
 10938  0CE2  07AD               	addwf	delay@counter,f
 10939  0CE3  3000               	movlw	0
 10940  0CE4  3DAE               	addwfc	delay@counter+1,f
 10941  0CE5  3000               	movlw	0
 10942  0CE6  3DAF               	addwfc	delay@counter+2,f
 10943  0CE7  3000               	movlw	0
 10944  0CE8  3DB0               	addwfc	delay@counter+3,f
 10945  0CE9  2CCD               	goto	l504
 10946  0CEA                     __end_of_delay:	
 10947                           
 10948                           	psect	text29
 10949  0AB4                     __ptext29:	
 10950 ;; *************** function ___wmul *****************
 10951 ;; Defined at:
 10952 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10955 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;  product         2    4[BANK0 ] unsigned int 
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  2    0[BANK0 ] unsigned int 
 10960 ;; Registers used:
 10961 ;;		wreg, status,2, status,0
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;Total ram usage:        6 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    3
 10974 ;; This function calls:
 10975 ;;		Nothing
 10976 ;; This function is called by:
 10977 ;;		_delay
 10978 ;;		_blinkyLoop
 10979 ;;		_main
 10980 ;; This function uses a non-reentrant model
 10981 ;;
 10982                           
 10983                           
 10984                           ;psect for function ___wmul
 10985  0AB4                     ___wmul:	
 10986                           
 10987                           ;incstack = 0
 10988                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10989  0AB4  0020               	movlb	0	; select bank0
 10990  0AB5  01A4               	clrf	___wmul@product
 10991  0AB6  01A5               	clrf	___wmul@product+1
 10992  0AB7                     l4178:	
 10993  0AB7  1C20               	btfss	___wmul@multiplier,0
 10994  0AB8  2ABD               	goto	l950
 10995  0AB9  0822               	movf	___wmul@multiplicand,w
 10996  0ABA  07A4               	addwf	___wmul@product,f
 10997  0ABB  0823               	movf	___wmul@multiplicand+1,w
 10998  0ABC  3DA5               	addwfc	___wmul@product+1,f
 10999  0ABD                     l950:	
 11000  0ABD  3001               	movlw	1
 11001  0ABE                     u3995:	
 11002  0ABE  35A2               	lslf	___wmul@multiplicand,f
 11003  0ABF  0DA3               	rlf	___wmul@multiplicand+1,f
 11004  0AC0  0B89               	decfsz	9,f
 11005  0AC1  2ABE               	goto	u3995
 11006  0AC2  3001               	movlw	1
 11007  0AC3                     u4005:	
 11008  0AC3  36A1               	lsrf	___wmul@multiplier+1,f
 11009  0AC4  0CA0               	rrf	___wmul@multiplier,f
 11010  0AC5  0B89               	decfsz	9,f
 11011  0AC6  2AC3               	goto	u4005
 11012  0AC7  0820               	movf	___wmul@multiplier,w
 11013  0AC8  0421               	iorwf	___wmul@multiplier+1,w
 11014  0AC9  1D03               	btfss	3,2
 11015  0ACA  2AB7               	goto	l4178
 11016  0ACB  0825               	movf	___wmul@product+1,w
 11017  0ACC  00A1               	movwf	?___wmul+1
 11018  0ACD  0824               	movf	___wmul@product,w
 11019  0ACE  00A0               	movwf	?___wmul
 11020  0ACF  0008               	return
 11021  0AD0                     __end_of___wmul:	
 11022                           
 11023                           	psect	text30
 11024  09B3                     __ptext30:	
 11025 ;; *************** function _LED7SegPinWrite *****************
 11026 ;; Defined at:
 11027 ;;		line 48 in file "LED7Seg.c"
 11028 ;; Parameters:    Size  Location     Type
 11029 ;;  val             1    wreg     unsigned char 
 11030 ;; Auto vars:     Size  Location     Type
 11031 ;;  val             1    0[BANK0 ] unsigned char 
 11032 ;; Return value:  Size  Location     Type
 11033 ;;                  1    wreg      void 
 11034 ;; Registers used:
 11035 ;;		wreg, status,2, status,0
 11036 ;; Tracked objects:
 11037 ;;		On entry : 0/0
 11038 ;;		On exit  : 0/0
 11039 ;;		Unchanged: 0/0
 11040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;Total ram usage:        1 bytes
 11046 ;; Hardware stack levels used:    1
 11047 ;; Hardware stack levels required when called:    3
 11048 ;; This function calls:
 11049 ;;		Nothing
 11050 ;; This function is called by:
 11051 ;;		_LED7SegShiftOutPulseClock
 11052 ;; This function uses a non-reentrant model
 11053 ;;
 11054                           
 11055                           
 11056                           ;psect for function _LED7SegPinWrite
 11057  09B3                     _LED7SegPinWrite:	
 11058                           
 11059                           ;incstack = 0
 11060                           ; Regs used in _LED7SegPinWrite: [wreg+status,2+status,0]
 11061                           ;LED7SegPinWrite@val stored from wreg
 11062  09B3  0020               	movlb	0	; select bank0
 11063  09B4  00A0               	movwf	LED7SegPinWrite@val
 11064                           
 11065                           ;LED7Seg.c: 50: if (val){
 11066  09B5  0820               	movf	LED7SegPinWrite@val,w
 11067  09B6  1903               	btfsc	3,2
 11068  09B7  29BA               	goto	l711
 11069                           
 11070                           ;LED7Seg.c: 52: do { LATCbits.LATC7 = 1; } while(0);
 11071  09B8  1798               	bsf	24,7	;volatile
 11072                           
 11073                           ;LED7Seg.c: 53: } else {
 11074  09B9  0008               	return
 11075  09BA                     l711:	
 11076                           ;LED7Seg.c: 55: do { LATCbits.LATC7 = 0; } while(0);
 11077                           
 11078  09BA  1398               	bcf	24,7	;volatile
 11079  09BB  0008               	return
 11080  09BC                     __end_of_LED7SegPinWrite:	
 11081                           
 11082                           	psect	text31
 11083  0A80                     __ptext31:	
 11084 ;; *************** function _InitmvcChannels *****************
 11085 ;; Defined at:
 11086 ;;		line 182 in file "main.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;		None
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;  i               2    1[BANK0 ] int 
 11091 ;; Return value:  Size  Location     Type
 11092 ;;                  1    wreg      void 
 11093 ;; Registers used:
 11094 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11095 ;; Tracked objects:
 11096 ;;		On entry : 0/0
 11097 ;;		On exit  : 0/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;Total ram usage:        3 bytes
 11105 ;; Hardware stack levels used:    1
 11106 ;; Hardware stack levels required when called:    3
 11107 ;; This function calls:
 11108 ;;		Nothing
 11109 ;; This function is called by:
 11110 ;;		_main
 11111 ;; This function uses a non-reentrant model
 11112 ;;
 11113                           
 11114                           
 11115                           ;psect for function _InitmvcChannels
 11116  0A80                     _InitmvcChannels:	
 11117                           
 11118                           ;main.c: 183: for(int i=0; i<cMixFaderCount;i++) {
 11119                           
 11120                           ;incstack = 0
 11121                           ; Regs used in _InitmvcChannels: [wreg+fsr1l+fsr1h+status,2+status,0]
 11122  0A80  0020               	movlb	0	; select bank0
 11123  0A81  01A1               	clrf	InitmvcChannels@i
 11124  0A82  01A2               	clrf	InitmvcChannels@i+1
 11125  0A83                     L6:	
 11126  0A83  0822               	movf	InitmvcChannels@i+1,w
 11127  0A84  3A80               	xorlw	128
 11128  0A85  00A0               	movwf	??_InitmvcChannels
 11129  0A86  3080               	movlw	128
 11130  0A87  0220               	subwf	??_InitmvcChannels,w
 11131  0A88  1D03               	skipz
 11132  0A89  2A8C               	goto	u3005
 11133  0A8A  3004               	movlw	4
 11134  0A8B  0221               	subwf	InitmvcChannels@i,w
 11135  0A8C                     u3005:	
 11136  0A8C  1803               	btfsc	3,0
 11137  0A8D  0008               	return
 11138                           
 11139                           ;main.c: 184: mvcChannels[i]=0;
 11140  0A8E  0020               	movlb	0	; select bank0
 11141  0A8F  0821               	movf	InitmvcChannels@i,w
 11142  0A90  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
 11143  0A91  0086               	movwf	6
 11144  0A92  0187               	clrf	7
 11145  0A93  0181               	clrf	1
 11146  0A94  3001               	movlw	1
 11147  0A95  07A1               	addwf	InitmvcChannels@i,f
 11148  0A96  3000               	movlw	0
 11149  0A97  3DA2               	addwfc	InitmvcChannels@i+1,f
 11150  0A98  2A83               	goto	L6
 11151  0A99                     __end_of_InitmvcChannels:	
 11152                           
 11153                           	psect	text32
 11154  0AEC                     __ptext32:	
 11155 ;; *************** function _InitPanelInChannels *****************
 11156 ;; Defined at:
 11157 ;;		line 176 in file "main.c"
 11158 ;; Parameters:    Size  Location     Type
 11159 ;;		None
 11160 ;; Auto vars:     Size  Location     Type
 11161 ;;  i               2    1[BANK0 ] int 
 11162 ;; Return value:  Size  Location     Type
 11163 ;;                  1    wreg      void 
 11164 ;; Registers used:
 11165 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11166 ;; Tracked objects:
 11167 ;;		On entry : 0/0
 11168 ;;		On exit  : 0/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;Total ram usage:        3 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; Hardware stack levels required when called:    3
 11178 ;; This function calls:
 11179 ;;		Nothing
 11180 ;; This function is called by:
 11181 ;;		_main
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           
 11186                           ;psect for function _InitPanelInChannels
 11187  0AEC                     _InitPanelInChannels:	
 11188                           
 11189                           ;main.c: 177: for(int i=0; i<cMixFaderCount;i++) {
 11190                           
 11191                           ;incstack = 0
 11192                           ; Regs used in _InitPanelInChannels: [wreg+fsr1l+fsr1h+status,2+status,0]
 11193  0AEC  0020               	movlb	0	; select bank0
 11194  0AED  01A1               	clrf	InitPanelInChannels@i
 11195  0AEE  01A2               	clrf	InitPanelInChannels@i+1
 11196  0AEF                     L7:	
 11197  0AEF  0822               	movf	InitPanelInChannels@i+1,w
 11198  0AF0  3A80               	xorlw	128
 11199  0AF1  00A0               	movwf	??_InitPanelInChannels
 11200  0AF2  3080               	movlw	128
 11201  0AF3  0220               	subwf	??_InitPanelInChannels,w
 11202  0AF4  1D03               	skipz
 11203  0AF5  2AF8               	goto	u2985
 11204  0AF6  3004               	movlw	4
 11205  0AF7  0221               	subwf	InitPanelInChannels@i,w
 11206  0AF8                     u2985:	
 11207  0AF8  1803               	btfsc	3,0
 11208  0AF9  0008               	return
 11209                           
 11210                           ;main.c: 178: PanelInChannels[i]=0;
 11211  0AFA  0020               	movlb	0	; select bank0
 11212  0AFB  0821               	movf	InitPanelInChannels@i,w
 11213  0AFC  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
 11214  0AFD  0086               	movwf	6
 11215  0AFE  0187               	clrf	7
 11216  0AFF  0181               	clrf	1
 11217                           
 11218                           ;main.c: 179: faderActiveFlag[i]=0;
 11219  0B00  0821               	movf	InitPanelInChannels@i,w
 11220  0B01  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
 11221  0B02  0086               	movwf	6
 11222  0B03  0187               	clrf	7
 11223  0B04  0181               	clrf	1
 11224  0B05  3001               	movlw	1
 11225  0B06  07A1               	addwf	InitPanelInChannels@i,f
 11226  0B07  3000               	movlw	0
 11227  0B08  3DA2               	addwfc	InitPanelInChannels@i+1,f
 11228  0B09  2AEF               	goto	L7
 11229  0B0A                     __end_of_InitPanelInChannels:	
 11230                           
 11231                           	psect	text33
 11232  0A13                     __ptext33:	
 11233 ;; *************** function _ADCC_GetSingleConversion *****************
 11234 ;; Defined at:
 11235 ;;		line 132 in file "mcc_generated_files/adcc.c"
 11236 ;; Parameters:    Size  Location     Type
 11237 ;;  channel         1    wreg     enum E14259
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;  channel         1    3[BANK0 ] enum E14259
 11240 ;; Return value:  Size  Location     Type
 11241 ;;                  2    0[BANK0 ] unsigned int 
 11242 ;; Registers used:
 11243 ;;		wreg
 11244 ;; Tracked objects:
 11245 ;;		On entry : 0/0
 11246 ;;		On exit  : 0/0
 11247 ;;		Unchanged: 0/0
 11248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11249 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;Total ram usage:        4 bytes
 11254 ;; Hardware stack levels used:    1
 11255 ;; Hardware stack levels required when called:    3
 11256 ;; This function calls:
 11257 ;;		Nothing
 11258 ;; This function is called by:
 11259 ;;		_main
 11260 ;; This function uses a non-reentrant model
 11261 ;;
 11262                           
 11263                           
 11264                           ;psect for function _ADCC_GetSingleConversion
 11265  0A13                     _ADCC_GetSingleConversion:	
 11266                           
 11267                           ;incstack = 0
 11268                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 11269                           ;ADCC_GetSingleConversion@channel stored from wreg
 11270  0A13  0020               	movlb	0	; select bank0
 11271  0A14  00A3               	movwf	ADCC_GetSingleConversion@channel
 11272                           
 11273                           ;adcc.c: 135: ADPCH = channel;
 11274  0A15  0823               	movf	ADCC_GetSingleConversion@channel,w
 11275  0A16  0021               	movlb	1	; select bank1
 11276  0A17  009E               	movwf	30	;volatile
 11277                           
 11278                           ;adcc.c: 138: ADCON0bits.ADON = 1;
 11279  0A18  1793               	bsf	19,7	;volatile
 11280                           
 11281                           ;adcc.c: 141: ADCON0bits.ADCONT = 0;
 11282  0A19  1313               	bcf	19,6	;volatile
 11283                           
 11284                           ;adcc.c: 144: ADCON0bits.ADGO = 1;
 11285  0A1A  1413               	bsf	19,0	;volatile
 11286                           
 11287                           ;adcc.c: 147: __nop();
 11288  0A1B  0000               	nop
 11289  0A1C                     l163:	
 11290                           ;adcc.c: 151: {
 11291                           
 11292                           ;adcc.c: 150: while (ADCON0bits.ADGO)
 11293                           
 11294  0A1C  0021               	movlb	1	; select bank1
 11295  0A1D  1813               	btfsc	19,0	;volatile
 11296  0A1E  2A1C               	goto	l163
 11297                           
 11298                           ;adcc.c: 152: }
 11299                           ;adcc.c: 155: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 11300  0A1F  080D               	movf	13,w	;volatile
 11301  0A20  0020               	movlb	0	; select bank0
 11302  0A21  00A1               	movwf	?_ADCC_GetSingleConversion+1
 11303  0A22  0021               	movlb	1	; select bank1
 11304  0A23  080C               	movf	12,w	;volatile
 11305  0A24  0020               	movlb	0	; select bank0
 11306  0A25  00A0               	movwf	?_ADCC_GetSingleConversion
 11307  0A26  0008               	return
 11308  0A27                     __end_of_ADCC_GetSingleConversion:	
 11309                           
 11310                           	psect	intentry
 11311  0004                     __pintentry:	
 11312 ;; *************** function _INTERRUPT_InterruptManager *****************
 11313 ;; Defined at:
 11314 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11315 ;; Parameters:    Size  Location     Type
 11316 ;;		None
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;		None
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  1    wreg      void 
 11321 ;; Registers used:
 11322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;Total ram usage:        1 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    2
 11335 ;; This function calls:
 11336 ;;		_I2C1_BusCollisionISR
 11337 ;;		_I2C1_ISR
 11338 ;; This function is called by:
 11339 ;;		Interrupt level 1
 11340 ;; This function uses a non-reentrant model
 11341 ;;
 11342                           
 11343  0004                     _INTERRUPT_InterruptManager:	
 11344                           
 11345                           ;incstack = 0
 11346  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11347                           
 11348                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11349  0005  3180               	pagesel	$
 11350  0006  0020               	movlb	0	; select bank0
 11351  0007  087F               	movf	127,w
 11352  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 11353                           
 11354                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.BCL1IE == 1 && PIR3bits.BC
      +                          L1IF == 1)
 11355  0009  1F0B               	btfss	11,6	;volatile
 11356  000A  2813               	goto	i1l394
 11357  000B  002E               	movlb	14	; select bank14
 11358  000C  1899               	btfsc	25,1	;volatile
 11359  000D  1C8F               	btfss	15,1	;volatile
 11360  000E  2813               	goto	i1l394
 11361                           
 11362                           ;interrupt_manager.c: 55: {
 11363                           ;interrupt_manager.c: 56: I2C1_BusCollisionISR();
 11364  000F  3187  27F8  3180   	fcall	_I2C1_BusCollisionISR
 11365                           
 11366                           ;interrupt_manager.c: 57: }
 11367  0012  281B               	goto	i1l398
 11368  0013                     i1l394:	
 11369                           
 11370                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE3bits.SSP1IE == 1 && PIR3bi
      +                          ts.SSP1IF == 1)
 11371  0013  1F0B               	btfss	11,6	;volatile
 11372  0014  281B               	goto	i1l398
 11373  0015  002E               	movlb	14	; select bank14
 11374  0016  1819               	btfsc	25,0	;volatile
 11375  0017  1C0F               	btfss	15,0	;volatile
 11376  0018  281B               	goto	i1l398
 11377                           
 11378                           ;interrupt_manager.c: 59: {
 11379                           ;interrupt_manager.c: 60: I2C1_ISR();
 11380  0019  3183  237A         	fcall	_I2C1_ISR
 11381  001B                     i1l398:	
 11382                           ;interrupt_manager.c: 62: else
 11383                           ;interrupt_manager.c: 63: {
 11384                           
 11385                           ;interrupt_manager.c: 61: }
 11386                           
 11387  001B  087D               	movf	??_INTERRUPT_InterruptManager,w
 11388  001C  0020               	movlb	0	; select bank0
 11389  001D  00FF               	movwf	127
 11390  001E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11391  001F  0009               	retfie
 11392  0020                     __end_of_INTERRUPT_InterruptManager:	
 11393                           
 11394                           	psect	text35
 11395  037A                     __ptext35:	
 11396 ;; *************** function _I2C1_ISR *****************
 11397 ;; Defined at:
 11398 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 11399 ;; Parameters:    Size  Location     Type
 11400 ;;		None
 11401 ;; Auto vars:     Size  Location     Type
 11402 ;;		None
 11403 ;; Return value:  Size  Location     Type
 11404 ;;                  1    wreg      void 
 11405 ;; Registers used:
 11406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11407 ;; Tracked objects:
 11408 ;;		On entry : 0/0
 11409 ;;		On exit  : 0/0
 11410 ;;		Unchanged: 0/0
 11411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;Total ram usage:        4 bytes
 11417 ;; Hardware stack levels used:    1
 11418 ;; Hardware stack levels required when called:    1
 11419 ;; This function calls:
 11420 ;;		_I2C1_FunctionComplete
 11421 ;;		_I2C1_Stop
 11422 ;; This function is called by:
 11423 ;;		_INTERRUPT_InterruptManager
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           
 11428                           ;psect for function _I2C1_ISR
 11429  037A                     _I2C1_ISR:	
 11430                           
 11431                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 11432                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 11433                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 11434                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 11435                           ;i2c1.c: 241: PIR3bits.SSP1IF = 0;
 11436                           
 11437                           ;incstack = 0
 11438                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11439  037A  002E               	movlb	14	; select bank14
 11440  037B  100F               	bcf	15,0	;volatile
 11441                           
 11442                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 11443  037C  0023               	movlb	3	; select bank3
 11444  037D  1F90               	btfss	16,7	;volatile
 11445  037E  2CA9               	goto	i1l3466
 11446                           
 11447                           ;i2c1.c: 246: {
 11448                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 11449  037F  1390               	bcf	16,7	;volatile
 11450                           
 11451                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
 11452  0380  0020               	movlb	0	; select bank0
 11453  0381  01EF               	clrf	_i2c1_state
 11454                           
 11455                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 11456  0382  0872               	movf	_p_i2c1_current,w
 11457  0383  3E02               	addlw	2
 11458  0384  0086               	movwf	6
 11459  0385  0187               	clrf	7
 11460  0386  0801               	movf	1,w
 11461  0387  0086               	movwf	6
 11462  0388  0187               	clrf	7
 11463  0389  0181               	clrf	1
 11464  038A  0A81               	incf	1,f
 11465                           
 11466                           ;i2c1.c: 253: p_i2c1_current = (0);
 11467  038B  01F2               	clrf	_p_i2c1_current
 11468                           
 11469                           ;i2c1.c: 255: return;
 11470  038C  0008               	return
 11471  038D                     i1l292:	
 11472                           ;i2c1.c: 260: {
 11473                           ;i2c1.c: 261: case S_MASTER_IDLE:
 11474                           
 11475                           ;i2c1.c: 256: }
 11476                           ;i2c1.c: 259: switch(i2c1_state)
 11477                           
 11478                           
 11479                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 11480  038D  18E9               	btfsc	_i2c1_object+2,1
 11481  038E  0008               	return
 11482                           
 11483                           ;i2c1.c: 264: {
 11484                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 11485  038F  0868               	movf	low ((_i2c1_object| 0+1)),w
 11486  0390  00F9               	movwf	??_I2C1_ISR
 11487  0391  0879               	movf	??_I2C1_ISR,w
 11488  0392  00F2               	movwf	_p_i2c1_current
 11489                           
 11490                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 11491  0393  0868               	movf	low ((_i2c1_object| 0+1)),w
 11492  0394  0086               	movwf	6
 11493  0395  0187               	clrf	7
 11494  0396  0801               	movf	1,w
 11495  0397  00F9               	movwf	??_I2C1_ISR
 11496  0398  0879               	movf	??_I2C1_ISR,w
 11497  0399  00F4               	movwf	_i2c1_trb_count
 11498                           
 11499                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 11500  039A  0868               	movf	low ((_i2c1_object| 0+1)),w
 11501  039B  0086               	movwf	6
 11502  039C  0187               	clrf	7
 11503  039D  3F41               	moviw [1]fsr1
 11504  039E  00F3               	movwf	_p_i2c1_trb_current
 11505                           
 11506                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 11507  039F  3003               	movlw	3
 11508  03A0  00F9               	movwf	??_I2C1_ISR
 11509  03A1  0879               	movf	??_I2C1_ISR,w
 11510  03A2  07E8               	addwf	low ((_i2c1_object| 0+1)),f
 11511                           
 11512                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 11513  03A3  0868               	movf	low ((_i2c1_object| 0+1)),w
 11514  03A4  3AD8               	xorlw	(low ((_i2c1_tr_queue| 0+3)))& (0+255)
 11515  03A5  1D03               	skipz
 11516  03A6  2BAB               	goto	i1l3354
 11517                           
 11518                           ;i2c1.c: 274: {
 11519                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 11520  03A7  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 11521  03A8  00F9               	movwf	??_I2C1_ISR
 11522  03A9  0879               	movf	??_I2C1_ISR,w
 11523  03AA  00E8               	movwf	low ((_i2c1_object| 0+1))
 11524  03AB                     i1l3354:	
 11525                           
 11526                           ;i2c1.c: 277: }
 11527                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 11528  03AB  1069               	bcf	_i2c1_object+2,0
 11529                           
 11530                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 11531  03AC  0868               	movf	low ((_i2c1_object| 0+1)),w
 11532  03AD  0667               	xorwf	_i2c1_object,w
 11533  03AE  1903               	btfsc	3,2
 11534                           
 11535                           ;i2c1.c: 285: {
 11536                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 11537  03AF  14E9               	bsf	_i2c1_object+2,1
 11538                           
 11539                           ;i2c1.c: 288: }
 11540                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 11541  03B0  0023               	movlb	3	; select bank3
 11542  03B1  1411               	bsf	17,0	;volatile
 11543                           
 11544                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 11545  03B2  3002               	movlw	2
 11546  03B3  00F9               	movwf	??_I2C1_ISR
 11547  03B4  0879               	movf	??_I2C1_ISR,w
 11548  03B5  0020               	movlb	0	; select bank0
 11549  03B6  00EF               	movwf	_i2c1_state
 11550                           
 11551                           ;i2c1.c: 295: }
 11552                           ;i2c1.c: 297: break;
 11553  03B7  0008               	return
 11554  03B8                     i1l297:	
 11555                           ;i2c1.c: 299: case S_MASTER_RESTART:
 11556                           
 11557                           
 11558                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 11559  03B8  0023               	movlb	3	; select bank3
 11560  03B9  1491               	bsf	17,1	;volatile
 11561                           
 11562                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 11563  03BA  3002               	movlw	2
 11564  03BB  00F9               	movwf	??_I2C1_ISR
 11565  03BC  0879               	movf	??_I2C1_ISR,w
 11566  03BD  0020               	movlb	0	; select bank0
 11567  03BE  00EF               	movwf	_i2c1_state
 11568                           
 11569                           ;i2c1.c: 309: break;
 11570  03BF  0008               	return
 11571  03C0                     i1l298:	
 11572                           ;i2c1.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 11573                           
 11574                           
 11575                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 11576  03C0  0023               	movlb	3	; select bank3
 11577  03C1  1F11               	btfss	17,6	;volatile
 11578  03C2  2BCC               	goto	i1l3366
 11579                           
 11580                           ;i2c1.c: 314: {
 11581                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 11582  03C3  3001               	movlw	1
 11583  03C4  00F9               	movwf	??_I2C1_ISR
 11584  03C5  0879               	movf	??_I2C1_ISR,w
 11585  03C6  0020               	movlb	0	; select bank0
 11586  03C7  07EB               	addwf	_i2c1_object+4,f
 11587                           
 11588                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11589  03C8  3004               	movlw	4
 11590  03C9  318A  2268         	fcall	_I2C1_Stop
 11591                           
 11592                           ;i2c1.c: 317: }
 11593  03CB  0008               	return
 11594  03CC                     i1l3366:	
 11595                           
 11596                           ;i2c1.c: 318: else
 11597                           ;i2c1.c: 319: {
 11598                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 11599  03CC  0876               	movf	I2C1_ISR@i2c_address+1,w
 11600  03CD  00FA               	movwf	??_I2C1_ISR+1
 11601  03CE  0875               	movf	I2C1_ISR@i2c_address,w
 11602  03CF  00F9               	movwf	??_I2C1_ISR
 11603  03D0  36FA               	lsrf	??_I2C1_ISR+1,f
 11604  03D1  0CF9               	rrf	??_I2C1_ISR,f
 11605  03D2  0879               	movf	??_I2C1_ISR,w
 11606  03D3  0023               	movlb	3	; select bank3
 11607  03D4  008C               	movwf	12	;volatile
 11608                           
 11609                           ;i2c1.c: 324: if(i2c_address & 0x01)
 11610  03D5  1C75               	btfss	I2C1_ISR@i2c_address,0
 11611  03D6  2BDD               	goto	i1l3372
 11612                           
 11613                           ;i2c1.c: 325: {
 11614                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 11615  03D7  300B               	movlw	11
 11616  03D8  00F9               	movwf	??_I2C1_ISR
 11617  03D9  0879               	movf	??_I2C1_ISR,w
 11618  03DA  0020               	movlb	0	; select bank0
 11619  03DB  00EF               	movwf	_i2c1_state
 11620                           
 11621                           ;i2c1.c: 329: }
 11622  03DC  0008               	return
 11623  03DD                     i1l3372:	
 11624                           
 11625                           ;i2c1.c: 330: else
 11626                           ;i2c1.c: 331: {
 11627                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 11628  03DD  3003               	movlw	3
 11629  03DE  00F9               	movwf	??_I2C1_ISR
 11630  03DF  0879               	movf	??_I2C1_ISR,w
 11631  03E0  0020               	movlb	0	; select bank0
 11632  03E1  00EF               	movwf	_i2c1_state
 11633                           
 11634                           ;i2c1.c: 334: }
 11635                           ;i2c1.c: 335: }
 11636                           ;i2c1.c: 337: break;
 11637  03E2  0008               	return
 11638  03E3                     i1l303:	
 11639                           ;i2c1.c: 339: case S_MASTER_10BIT_RESTART:
 11640                           
 11641                           
 11642                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 11643  03E3  0023               	movlb	3	; select bank3
 11644  03E4  1F11               	btfss	17,6	;volatile
 11645  03E5  2BEF               	goto	i1l304
 11646                           
 11647                           ;i2c1.c: 342: {
 11648                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 11649  03E6  3001               	movlw	1
 11650  03E7  00F9               	movwf	??_I2C1_ISR
 11651  03E8  0879               	movf	??_I2C1_ISR,w
 11652  03E9  0020               	movlb	0	; select bank0
 11653  03EA  07EB               	addwf	_i2c1_object+4,f
 11654                           
 11655                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11656  03EB  3004               	movlw	4
 11657  03EC  318A  2268         	fcall	_I2C1_Stop
 11658                           
 11659                           ;i2c1.c: 345: }
 11660  03EE  0008               	return
 11661  03EF                     i1l304:	
 11662                           
 11663                           ;i2c1.c: 346: else
 11664                           ;i2c1.c: 347: {
 11665                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 11666  03EF  1491               	bsf	17,1	;volatile
 11667                           
 11668                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 11669  03F0  0876               	movf	I2C1_ISR@i2c_address+1,w
 11670  03F1  00FA               	movwf	??_I2C1_ISR+1
 11671  03F2  0875               	movf	I2C1_ISR@i2c_address,w
 11672  03F3  00F9               	movwf	??_I2C1_ISR
 11673  03F4  087A               	movf	??_I2C1_ISR+1,w
 11674  03F5  00F9               	movwf	??_I2C1_ISR
 11675  03F6  01FA               	clrf	??_I2C1_ISR+1
 11676  03F7  3006               	movlw	6
 11677  03F8  0579               	andwf	??_I2C1_ISR,w
 11678  03F9  00FB               	movwf	??_I2C1_ISR+2
 11679  03FA  3000               	movlw	0
 11680  03FB  057A               	andwf	??_I2C1_ISR+1,w
 11681  03FC  00FC               	movwf	??_I2C1_ISR+3
 11682  03FD  30F0               	movlw	240
 11683  03FE  047B               	iorwf	??_I2C1_ISR+2,w
 11684  03FF  00F5               	movwf	I2C1_ISR@i2c_address
 11685  0400  3000               	movlw	0
 11686  0401  047C               	iorwf	??_I2C1_ISR+3,w
 11687  0402  00F6               	movwf	I2C1_ISR@i2c_address+1
 11688                           
 11689                           ;i2c1.c: 357: i2c_address |= 0x0001;
 11690  0403  1475               	bsf	I2C1_ISR@i2c_address,0
 11691                           
 11692                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 11693  0404  0020               	movlb	0	; select bank0
 11694  0405  01EE               	clrf	I2C1_ISR@i2c_10bit_address_restart
 11695  0406  0AEE               	incf	I2C1_ISR@i2c_10bit_address_restart,f
 11696                           
 11697                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 11698  0407  3002               	movlw	2
 11699  0408  00F9               	movwf	??_I2C1_ISR
 11700  0409  0879               	movf	??_I2C1_ISR,w
 11701  040A  00EF               	movwf	_i2c1_state
 11702                           
 11703                           ;i2c1.c: 364: }
 11704                           ;i2c1.c: 366: break;
 11705  040B  0008               	return
 11706  040C                     i1l3386:	
 11707                           ;i2c1.c: 368: case S_MASTER_SEND_ADDR:
 11708                           
 11709                           
 11710                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 11711  040C  036E               	decf	I2C1_ISR@i2c_10bit_address_restart,w
 11712  040D  1903               	btfsc	3,2
 11713  040E  2C20               	goto	i1l3406
 11714                           
 11715                           ;i2c1.c: 382: {
 11716                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 11717  040F  0873               	movf	_p_i2c1_trb_current,w
 11718  0410  0086               	movwf	6
 11719  0411  0187               	clrf	7
 11720  0412  3F40               	moviw [0]fsr1
 11721  0413  00F5               	movwf	I2C1_ISR@i2c_address
 11722  0414  3F41               	moviw [1]fsr1
 11723  0415  00F6               	movwf	I2C1_ISR@i2c_address+1
 11724                           
 11725                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 11726  0416  0873               	movf	_p_i2c1_trb_current,w
 11727  0417  0086               	movwf	6
 11728  0418  0187               	clrf	7
 11729  0419  3F43               	moviw [3]fsr1
 11730  041A  00F1               	movwf	I2C1_ISR@pi2c_buf_ptr
 11731                           
 11732                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 11733  041B  0873               	movf	_p_i2c1_trb_current,w
 11734  041C  0086               	movwf	6
 11735  041D  0187               	clrf	7
 11736  041E  3F42               	moviw [2]fsr1
 11737  041F  00F0               	movwf	I2C1_ISR@i2c_bytes_left
 11738  0420                     i1l3406:	
 11739                           ;i2c1.c: 407: }
 11740                           ;i2c1.c: 408: }
 11741                           
 11742                           ;i2c1.c: 406: i2c_10bit_address_restart = 0;
 11743                           
 11744                           ;i2c1.c: 404: i2c1_state = S_MASTER_ACK_ADDR;
 11745                           
 11746                           ;i2c1.c: 400: else
 11747                           ;i2c1.c: 401: {
 11748                           ;i2c1.c: 403: SSP1BUF = i2c_address;
 11749                           
 11750                           ;i2c1.c: 399: }
 11751                           
 11752                           ;i2c1.c: 398: i2c1_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 11753                           
 11754                           ;i2c1.c: 393: {
 11755                           ;i2c1.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 11756                           
 11757                           ;i2c1.c: 391: {
 11758                           ;i2c1.c: 392: if (0 == i2c_10bit_address_restart)
 11759                           
 11760                           ;i2c1.c: 387: }
 11761                           ;i2c1.c: 390: if(!1 && (0x0 != i2c_address))
 11762                           
 11763                           
 11764                           ;i2c1.c: 409: else
 11765                           ;i2c1.c: 410: {
 11766                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 11767  0420  0875               	movf	I2C1_ISR@i2c_address,w
 11768  0421  0023               	movlb	3	; select bank3
 11769  0422  008C               	movwf	12	;volatile
 11770                           
 11771                           ;i2c1.c: 413: if(i2c_address & 0x01)
 11772  0423  1C75               	btfss	I2C1_ISR@i2c_address,0
 11773  0424  2C2B               	goto	i1l3412
 11774                           
 11775                           ;i2c1.c: 414: {
 11776                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 11777  0425  3005               	movlw	5
 11778  0426  00F9               	movwf	??_I2C1_ISR
 11779  0427  0879               	movf	??_I2C1_ISR,w
 11780  0428  0020               	movlb	0	; select bank0
 11781  0429  00EF               	movwf	_i2c1_state
 11782                           
 11783                           ;i2c1.c: 417: }
 11784  042A  0008               	return
 11785  042B                     i1l3412:	
 11786                           
 11787                           ;i2c1.c: 418: else
 11788                           ;i2c1.c: 419: {
 11789                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 11790  042B  3003               	movlw	3
 11791  042C  00F9               	movwf	??_I2C1_ISR
 11792  042D  0879               	movf	??_I2C1_ISR,w
 11793  042E  0020               	movlb	0	; select bank0
 11794  042F  00EF               	movwf	_i2c1_state
 11795                           
 11796                           ;i2c1.c: 422: }
 11797                           ;i2c1.c: 423: }
 11798                           ;i2c1.c: 424: break;
 11799  0430  0008               	return
 11800  0431                     i1l314:	
 11801                           ;i2c1.c: 426: case S_MASTER_SEND_DATA:
 11802                           
 11803                           
 11804                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 11805  0431  0023               	movlb	3	; select bank3
 11806  0432  1F11               	btfss	17,6	;volatile
 11807  0433  2C3F               	goto	i1l3420
 11808                           
 11809                           ;i2c1.c: 430: {
 11810                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 11811  0434  3001               	movlw	1
 11812  0435  00F9               	movwf	??_I2C1_ISR
 11813  0436  0879               	movf	??_I2C1_ISR,w
 11814  0437  0020               	movlb	0	; select bank0
 11815  0438  07EB               	addwf	_i2c1_object+4,f
 11816                           
 11817                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 11818  0439  0023               	movlb	3	; select bank3
 11819  043A  1311               	bcf	17,6	;volatile
 11820                           
 11821                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 11822  043B  3005               	movlw	5
 11823  043C  318A  2268         	fcall	_I2C1_Stop
 11824                           
 11825                           ;i2c1.c: 440: }
 11826  043E  0008               	return
 11827  043F                     i1l3420:	
 11828                           
 11829                           ;i2c1.c: 441: else
 11830                           ;i2c1.c: 442: {
 11831                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 11832  043F  3001               	movlw	1
 11833  0440  02F0               	subwf	I2C1_ISR@i2c_bytes_left,f
 11834  0441  0A70               	incf	I2C1_ISR@i2c_bytes_left,w
 11835  0442  1D03               	btfss	3,2
 11836  0443  2C58               	goto	i1l3428
 11837                           
 11838                           ;i2c1.c: 445: {
 11839                           ;i2c1.c: 449: p_i2c1_trb_current++;
 11840  0444  3004               	movlw	4
 11841  0445  00F9               	movwf	??_I2C1_ISR
 11842  0446  0879               	movf	??_I2C1_ISR,w
 11843  0447  07F3               	addwf	_p_i2c1_trb_current,f
 11844                           
 11845                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 11846  0448  3001               	movlw	1
 11847  0449  02F4               	subwf	_i2c1_trb_count,f
 11848  044A  1D03               	btfss	3,2
 11849  044B  2C50               	goto	i1l318
 11850                           
 11851                           ;i2c1.c: 453: {
 11852                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 11853  044C  3000               	movlw	0
 11854  044D  318A  2268         	fcall	_I2C1_Stop
 11855                           
 11856                           ;i2c1.c: 455: }
 11857  044F  0008               	return
 11858  0450                     i1l318:	
 11859                           
 11860                           ;i2c1.c: 456: else
 11861                           ;i2c1.c: 457: {
 11862                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 11863  0450  0023               	movlb	3	; select bank3
 11864  0451  1491               	bsf	17,1	;volatile
 11865                           
 11866                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 11867  0452  3002               	movlw	2
 11868  0453  00F9               	movwf	??_I2C1_ISR
 11869  0454  0879               	movf	??_I2C1_ISR,w
 11870  0455  0020               	movlb	0	; select bank0
 11871  0456  00EF               	movwf	_i2c1_state
 11872                           
 11873                           ;i2c1.c: 469: }
 11874                           ;i2c1.c: 470: }
 11875  0457  0008               	return
 11876  0458                     i1l3428:	
 11877                           
 11878                           ;i2c1.c: 471: else
 11879                           ;i2c1.c: 472: {
 11880                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 11881  0458  0871               	movf	I2C1_ISR@pi2c_buf_ptr,w
 11882  0459  0086               	movwf	6
 11883  045A  0187               	clrf	7
 11884  045B  0801               	movf	1,w
 11885  045C  0023               	movlb	3	; select bank3
 11886  045D  008C               	movwf	12	;volatile
 11887  045E  3001               	movlw	1
 11888  045F  00F9               	movwf	??_I2C1_ISR
 11889  0460  0879               	movf	??_I2C1_ISR,w
 11890  0461  07F1               	addwf	I2C1_ISR@pi2c_buf_ptr,f
 11891                           
 11892                           ;i2c1.c: 475: }
 11893                           ;i2c1.c: 476: }
 11894                           ;i2c1.c: 477: break;
 11895  0462  0008               	return
 11896  0463                     i1l321:	
 11897                           ;i2c1.c: 479: case S_MASTER_ACK_ADDR:
 11898                           
 11899                           
 11900                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 11901  0463  0023               	movlb	3	; select bank3
 11902  0464  1F11               	btfss	17,6	;volatile
 11903  0465  2C71               	goto	i1l322
 11904                           
 11905                           ;i2c1.c: 483: {
 11906                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 11907  0466  3001               	movlw	1
 11908  0467  00F9               	movwf	??_I2C1_ISR
 11909  0468  0879               	movf	??_I2C1_ISR,w
 11910  0469  0020               	movlb	0	; select bank0
 11911  046A  07EB               	addwf	_i2c1_object+4,f
 11912                           
 11913                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11914  046B  3004               	movlw	4
 11915  046C  318A  2268         	fcall	_I2C1_Stop
 11916                           
 11917                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 11918  046E  0023               	movlb	3	; select bank3
 11919  046F  1311               	bcf	17,6	;volatile
 11920                           
 11921                           ;i2c1.c: 493: }
 11922  0470  0008               	return
 11923  0471                     i1l322:	
 11924                           
 11925                           ;i2c1.c: 494: else
 11926                           ;i2c1.c: 495: {
 11927                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 11928  0471  1591               	bsf	17,3	;volatile
 11929                           
 11930                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11931  0472  3008               	movlw	8
 11932  0473  00F9               	movwf	??_I2C1_ISR
 11933  0474  0879               	movf	??_I2C1_ISR,w
 11934  0475  0020               	movlb	0	; select bank0
 11935  0476  00EF               	movwf	_i2c1_state
 11936                           
 11937                           ;i2c1.c: 498: }
 11938                           ;i2c1.c: 499: break;
 11939  0477  0008               	return
 11940  0478                     i1l3440:	
 11941                           ;i2c1.c: 501: case S_MASTER_RCV_DATA:
 11942                           
 11943                           
 11944                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11945  0478  3008               	movlw	8
 11946  0479  00F9               	movwf	??_I2C1_ISR
 11947  047A  0879               	movf	??_I2C1_ISR,w
 11948  047B  00EF               	movwf	_i2c1_state
 11949                           
 11950                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 11951  047C  0023               	movlb	3	; select bank3
 11952  047D  1591               	bsf	17,3	;volatile
 11953                           
 11954                           ;i2c1.c: 511: break;
 11955  047E  0008               	return
 11956  047F                     i1l3444:	
 11957                           ;i2c1.c: 513: case S_MASTER_ACK_RCV_DATA:
 11958                           
 11959                           
 11960                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 11961  047F  0023               	movlb	3	; select bank3
 11962  0480  080C               	movf	12,w	;volatile
 11963  0481  00F9               	movwf	??_I2C1_ISR
 11964  0482  0871               	movf	I2C1_ISR@pi2c_buf_ptr,w
 11965  0483  0086               	movwf	6
 11966  0484  0187               	clrf	7
 11967  0485  0879               	movf	??_I2C1_ISR,w
 11968  0486  0081               	movwf	1
 11969  0487  3001               	movlw	1
 11970  0488  00F9               	movwf	??_I2C1_ISR
 11971  0489  0879               	movf	??_I2C1_ISR,w
 11972  048A  07F1               	addwf	I2C1_ISR@pi2c_buf_ptr,f
 11973                           
 11974                           ;i2c1.c: 519: if(--i2c_bytes_left)
 11975  048B  3001               	movlw	1
 11976  048C  02F0               	subwf	I2C1_ISR@i2c_bytes_left,f
 11977  048D  1903               	btfsc	3,2
 11978  048E  2C96               	goto	i1l326
 11979                           
 11980                           ;i2c1.c: 520: {
 11981                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 11982  048F  1291               	bcf	17,5	;volatile
 11983                           
 11984                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 11985  0490  3006               	movlw	6
 11986  0491  00F9               	movwf	??_I2C1_ISR
 11987  0492  0879               	movf	??_I2C1_ISR,w
 11988  0493  0020               	movlb	0	; select bank0
 11989  0494  00EF               	movwf	_i2c1_state
 11990                           
 11991                           ;i2c1.c: 530: }
 11992  0495  2C99               	goto	i1l3456
 11993  0496                     i1l326:	
 11994                           
 11995                           ;i2c1.c: 531: else
 11996                           ;i2c1.c: 532: {
 11997                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 11998  0496  1691               	bsf	17,5	;volatile
 11999                           
 12000                           ;i2c1.c: 538: I2C1_FunctionComplete();
 12001  0497  318A  2201         	fcall	_I2C1_FunctionComplete
 12002  0499                     i1l3456:	
 12003                           
 12004                           ;i2c1.c: 539: }
 12005                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 12006  0499  0023               	movlb	3	; select bank3
 12007  049A  1611               	bsf	17,4	;volatile
 12008                           
 12009                           ;i2c1.c: 543: break;
 12010  049B  0008               	return
 12011  049C                     i1l3458:	
 12012                           ;i2c1.c: 545: case S_MASTER_RCV_STOP:
 12013                           
 12014                           
 12015                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 12016                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 12017  049C  3000               	movlw	0
 12018  049D  318A  2268         	fcall	_I2C1_Stop
 12019                           
 12020                           ;i2c1.c: 550: break;
 12021  049F  0008               	return
 12022  04A0                     i1l3460:	
 12023                           ;i2c1.c: 552: default:
 12024                           
 12025                           
 12026                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 12027  04A0  3001               	movlw	1
 12028  04A1  00F9               	movwf	??_I2C1_ISR
 12029  04A2  0879               	movf	??_I2C1_ISR,w
 12030  04A3  0020               	movlb	0	; select bank0
 12031  04A4  07EB               	addwf	_i2c1_object+4,f
 12032                           
 12033                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 12034  04A5  3006               	movlw	6
 12035  04A6  318A  2268         	fcall	_I2C1_Stop
 12036                           
 12037                           ;i2c1.c: 560: }
 12038                           
 12039                           ;i2c1.c: 558: break;
 12040  04A8  0008               	return
 12041  04A9                     i1l3466:	
 12042  04A9  0020               	movlb	0	; select bank0
 12043  04AA  086F               	movf	_i2c1_state,w
 12044                           
 12045                           ; Switch size 1, requested type "space"
 12046                           ; Number of cases is 11, Range of values is 0 to 11
 12047                           ; switch strategies available:
 12048                           ; Name         Instructions Cycles
 12049                           ; direct_byte           30     6 (fixed)
 12050                           ; simple_byte           34    18 (average)
 12051                           ; jumptable            260     6 (fixed)
 12052                           ;	Chosen strategy is direct_byte
 12053  04AB  0084               	movwf	4
 12054  04AC  300C               	movlw	12
 12055  04AD  0204               	subwf	4,w
 12056  04AE  1803               	skipnc
 12057  04AF  2CA0               	goto	i1l3460
 12058  04B0  3188               	movlp	high i1S4612
 12059  04B1  3504               	lslf	4,w
 12060  04B2  3E00               	addlw	low i1S4612
 12061  04B3  0082               	movwf	2
 12062  04B4  0008               	return
 12063  04B5                     __end_of_I2C1_ISR:	
 12064                           
 12065                           	psect	swtext1
 12066  0800                     __pswtext1:	
 12067  0800                     i1S4612:	
 12068  0800  3183  2B8D         	ljmp	i1l292
 12069  0802  3183  2BB8         	ljmp	i1l297
 12070  0804  3184  2C0C         	ljmp	i1l3386
 12071  0806  3184  2C31         	ljmp	i1l314
 12072  0808  3184  2C9C         	ljmp	i1l3458
 12073  080A  3184  2C63         	ljmp	i1l321
 12074  080C  3184  2C78         	ljmp	i1l3440
 12075  080E  3184  2C9C         	ljmp	i1l3458
 12076  0810  3184  2C7F         	ljmp	i1l3444
 12077  0812  3184  2CA0         	ljmp	i1l3460
 12078  0814  3183  2BC0         	ljmp	i1l298
 12079  0816  3183  2BE3         	ljmp	i1l303
 12080                           
 12081                           	psect	text36
 12082  0A68                     __ptext36:	
 12083 ;; *************** function _I2C1_Stop *****************
 12084 ;; Defined at:
 12085 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;  completion_c    1    wreg     enum E14260
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  completion_c    1    1[COMMON] enum E14260
 12090 ;; Return value:  Size  Location     Type
 12091 ;;                  1    wreg      void 
 12092 ;; Registers used:
 12093 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12094 ;; Tracked objects:
 12095 ;;		On entry : 0/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;Total ram usage:        2 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; This function calls:
 12106 ;;		Nothing
 12107 ;; This function is called by:
 12108 ;;		_I2C1_ISR
 12109 ;; This function uses a non-reentrant model
 12110 ;;
 12111                           
 12112                           
 12113                           ;psect for function _I2C1_Stop
 12114  0A68                     _I2C1_Stop:	
 12115                           
 12116                           ;incstack = 0
 12117                           ; Regs used in _I2C1_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 12118                           ;I2C1_Stop@completion_code stored from wreg
 12119  0A68  00F8               	movwf	I2C1_Stop@completion_code
 12120                           
 12121                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 12122  0A69  0023               	movlb	3	; select bank3
 12123  0A6A  1511               	bsf	17,2	;volatile
 12124                           
 12125                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
 12126  0A6B  0872               	movf	_p_i2c1_current,w
 12127  0A6C  3E02               	addlw	2
 12128  0A6D  0086               	movwf	6
 12129  0A6E  0187               	clrf	7
 12130  0A6F  0801               	movf	1,w
 12131  0A70  1903               	btfsc	3,2
 12132  0A71  2A7D               	goto	i1l3094
 12133                           
 12134                           ;i2c1.c: 588: {
 12135                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
 12136  0A72  0878               	movf	I2C1_Stop@completion_code,w
 12137  0A73  00F7               	movwf	??_I2C1_Stop
 12138  0A74  0872               	movf	_p_i2c1_current,w
 12139  0A75  3E02               	addlw	2
 12140  0A76  0086               	movwf	6
 12141  0A77  0187               	clrf	7
 12142  0A78  0801               	movf	1,w
 12143  0A79  0086               	movwf	6
 12144  0A7A  0187               	clrf	7
 12145  0A7B  0877               	movf	??_I2C1_Stop,w
 12146  0A7C  0081               	movwf	1
 12147  0A7D                     i1l3094:	
 12148                           
 12149                           ;i2c1.c: 591: }
 12150                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 12151  0A7D  0020               	movlb	0	; select bank0
 12152  0A7E  01EF               	clrf	_i2c1_state
 12153  0A7F  0008               	return
 12154  0A80                     __end_of_I2C1_Stop:	
 12155                           
 12156                           	psect	text37
 12157  0A01                     __ptext37:	
 12158 ;; *************** function _I2C1_FunctionComplete *****************
 12159 ;; Defined at:
 12160 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 12161 ;; Parameters:    Size  Location     Type
 12162 ;;		None
 12163 ;; Auto vars:     Size  Location     Type
 12164 ;;		None
 12165 ;; Return value:  Size  Location     Type
 12166 ;;                  1    wreg      void 
 12167 ;; Registers used:
 12168 ;;		wreg, status,2, status,0
 12169 ;; Tracked objects:
 12170 ;;		On entry : 0/0
 12171 ;;		On exit  : 0/0
 12172 ;;		Unchanged: 0/0
 12173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;Total ram usage:        1 bytes
 12179 ;; Hardware stack levels used:    1
 12180 ;; This function calls:
 12181 ;;		Nothing
 12182 ;; This function is called by:
 12183 ;;		_I2C1_ISR
 12184 ;; This function uses a non-reentrant model
 12185 ;;
 12186                           
 12187                           
 12188                           ;psect for function _I2C1_FunctionComplete
 12189  0A01                     _I2C1_FunctionComplete:	
 12190                           
 12191                           ;i2c1.c: 567: p_i2c1_trb_current++;
 12192                           
 12193                           ;incstack = 0
 12194                           ; Regs used in _I2C1_FunctionComplete: [wreg+status,2+status,0]
 12195  0A01  3004               	movlw	4
 12196  0A02  00F7               	movwf	??_I2C1_FunctionComplete
 12197  0A03  0877               	movf	??_I2C1_FunctionComplete,w
 12198  0A04  07F3               	addwf	_p_i2c1_trb_current,f
 12199                           
 12200                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 12201  0A05  3001               	movlw	1
 12202  0A06  02F4               	subwf	_i2c1_trb_count,f
 12203  0A07  1D03               	btfss	3,2
 12204  0A08  2A0F               	goto	i1l333
 12205                           
 12206                           ;i2c1.c: 571: {
 12207                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 12208  0A09  3004               	movlw	4
 12209  0A0A  00F7               	movwf	??_I2C1_FunctionComplete
 12210  0A0B  0877               	movf	??_I2C1_FunctionComplete,w
 12211  0A0C  0020               	movlb	0	; select bank0
 12212  0A0D  00EF               	movwf	_i2c1_state
 12213                           
 12214                           ;i2c1.c: 573: }
 12215  0A0E  0008               	return
 12216  0A0F                     i1l333:	
 12217                           
 12218                           ;i2c1.c: 574: else
 12219                           ;i2c1.c: 575: {
 12220                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 12221  0A0F  0020               	movlb	0	; select bank0
 12222  0A10  01EF               	clrf	_i2c1_state
 12223  0A11  0AEF               	incf	_i2c1_state,f
 12224  0A12  0008               	return
 12225  0A13                     __end_of_I2C1_FunctionComplete:	
 12226                           
 12227                           	psect	text38
 12228  07F8                     __ptext38:	
 12229 ;; *************** function _I2C1_BusCollisionISR *****************
 12230 ;; Defined at:
 12231 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 12232 ;; Parameters:    Size  Location     Type
 12233 ;;		None
 12234 ;; Auto vars:     Size  Location     Type
 12235 ;;		None
 12236 ;; Return value:  Size  Location     Type
 12237 ;;                  1    wreg      void 
 12238 ;; Registers used:
 12239 ;;		None
 12240 ;; Tracked objects:
 12241 ;;		On entry : 0/0
 12242 ;;		On exit  : 0/0
 12243 ;;		Unchanged: 0/0
 12244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;Total ram usage:        0 bytes
 12250 ;; Hardware stack levels used:    1
 12251 ;; This function calls:
 12252 ;;		Nothing
 12253 ;; This function is called by:
 12254 ;;		_INTERRUPT_InterruptManager
 12255 ;; This function uses a non-reentrant model
 12256 ;;
 12257                           
 12258                           
 12259                           ;psect for function _I2C1_BusCollisionISR
 12260  07F8                     _I2C1_BusCollisionISR:	
 12261                           
 12262                           ;incstack = 0
 12263                           ; Regs used in _I2C1_BusCollisionISR: []
 12264  07F8  0008               	return
 12265  07F9                     __end_of_I2C1_BusCollisionISR:	
 12266  007E                     btemp	set	126	;btemp
 12267  007E                     int$flags	set	126
 12268  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    49
    Data        20
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     71      80
    BANK1            80     20      76
    BANK2            80      0      36
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    MYI2C_ReadFaders@readTRB.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    MYI2C_ReadPatch@readTRB.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    MYI2C_Write16EEPROMBytes@pData	PTR unsigned char  size(2) Largest target is 128
		 -> aPatchMemory(BIGRAM[128]), 

    updateModelFromPatchMemory@dualADSRdata1	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata1(BANK2[8]), 

    updateModelFromPatchMemory@dualADSRdata0	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata0(BANK2[8]), 

    updateModelFromPatchMemory@mvcChannels	PTR unsigned char  size(1) Largest target is 4
		 -> mvcChannels(BANK1[4]), 

    marshallPatchMemory@dualADSRdata1	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata1(BANK2[8]), 

    marshallPatchMemory@dualADSRdata0	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata0(BANK2[8]), 

    marshallPatchMemory@mvcChannels	PTR unsigned char  size(1) Largest target is 4
		 -> mvcChannels(BANK1[4]), 

    savePatch@pData	PTR unsigned char  size(2) Largest target is 128
		 -> aPatchMemory(BIGRAM[128]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), 
		 -> MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E14260 size(1) Largest target is 1
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> MYI2C_ReadFaders@status(COMMON[1]), 

    F14372.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWrite@pflag	PTR enum E14260 size(1) Largest target is 1
		 -> MYI2C_Write16EEPROMBytes@status(BANK0[1]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@status(COMMON[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), 

    F14367.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_trb_current	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 
		 -> NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    S374$pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_current.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    S386$pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_current.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    S386$ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    p_i2c1_current.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    p_i2c1_current	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S397$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    i2c1_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    S397$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    i2c1_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_savePatch
    _savePatch->_MYI2C_Write16EEPROMBytes
    _MYI2C_Write16EEPROMBytes->_I2C1_MasterWrite
    _loadPatch->_writeDAC528
    _writeDAC528->_putByte
    _initDAC528->_putByte
    _putByte->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _blinkyLoop->_MYI2C_Write2LEDBytes
    _MYI2C_Write2LEDBytes->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_I2C1_Initialize
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _LED7SegDisplayValueByDigit->_LED7SegShiftOutPulseClock
    _LED7SegPulseClock->_delay
    _delay->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   35919
                                             67 BANK0      4     4      0
                                              0 BANK1     20    20      0
           _ADCC_GetSingleConversion
                _InitPanelInChannels
                    _InitmvcChannels
         _LED7SegDisplayValueByDigit
                       _LED7SegSetup
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                             ___wmul
                         _blinkyLoop
                              _delay
                         _initDAC528
                          _loadPatch
                          _savePatch
                        _writeDAC528
 ---------------------------------------------------------------------------------
 (1) _savePatch                                           15    13      2    3617
                                             52 BANK0     15    13      2
           _MYI2C_Write16EEPROMBytes
                _marshallPatchMemory
 ---------------------------------------------------------------------------------
 (2) _marshallPatchMemory                                 17    15      2     540
                                              0 BANK0     17    15      2
 ---------------------------------------------------------------------------------
 (2) _MYI2C_Write16EEPROMBytes                            38    34      4    2840
                                             14 BANK0     38    34      4
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (1) _loadPatch                                           12    10      2    6209
                                             58 BANK0      8     6      2
         _updateModelFromPatchMemory
                        _writeDAC528
 ---------------------------------------------------------------------------------
 (1) _writeDAC528                                          5     2      3    5548
                                             53 BANK0      5     2      3
                            _putByte
 ---------------------------------------------------------------------------------
 (2) _updateModelFromPatchMemory                          15    13      2     495
                                              0 BANK0     15    13      2
 ---------------------------------------------------------------------------------
 (1) _initDAC528                                           1     1      0    5268
                                             53 BANK0      1     1      0
                            _putByte
 ---------------------------------------------------------------------------------
 (2) _putByte                                              9     7      2    5268
                                             44 BANK0      9     7      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     623
                                             30 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2027
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _blinkyLoop                                           8     6      2    4913
                                             32 BANK0      8     6      2
               _MYI2C_Write2LEDBytes
                             ___wmul
                              _delay
 ---------------------------------------------------------------------------------
 (2) _MYI2C_Write2LEDBytes                                20    18      2    2781
                                             14 BANK0     18    16      2
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterWrite                                     7     3      4    2100
                                              7 BANK0      7     3      4
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterWriteTRBBuild                             7     3      4     690
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterTRBInsert                                 4     2      2     556
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2163
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1671
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      34
                    _ADCC_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED7SegSetup                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED7SegDisplayValueByDigit                           6     2      4    2002
                                             20 BANK0      6     2      4
          _LED7SegShiftOutPulseClock
 ---------------------------------------------------------------------------------
 (2) _LED7SegShiftOutPulseClock                            3     3      0    1538
                                             17 BANK0      3     3      0
                    _LED7SegPinWrite
                  _LED7SegPulseClock
 ---------------------------------------------------------------------------------
 (3) _LED7SegPulseClock                                    0     0      0    1377
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                               11     9      2    1377
                                              6 BANK0     11     9      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     526
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _LED7SegPinWrite                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitmvcChannels                                      3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitPanelInChannels                                  3     3      0      90
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADCC_GetSingleConversion                             4     1      3      31
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      22
                                              6 COMMON     1     1      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (7) _I2C1_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C1_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _I2C1_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCC_GetSingleConversion
   _InitPanelInChannels
   _InitmvcChannels
   _LED7SegDisplayValueByDigit
     _LED7SegShiftOutPulseClock
       _LED7SegPinWrite
       _LED7SegPulseClock
         _delay
           ___wmul
   _LED7SegSetup
   _SYSTEM_Initialize
     _ADCC_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___wmul
   _blinkyLoop
     _MYI2C_Write2LEDBytes
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     ___wmul
     _delay
       ___wmul
   _delay
     ___wmul
   _initDAC528
     _putByte
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _loadPatch
     _updateModelFromPatchMemory
     _writeDAC528
       _putByte
         ___awtoft
           ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _savePatch
     _MYI2C_Write16EEPROMBytes
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     _marshallPatchMemory
   _writeDAC528
     _putByte
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     14      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      24       9       45.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      CE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      CE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 28 19:46:32 2018

                                         _b 00AF                                           _c 00B7  
                                         _d 00AC                                           _e 00B5  
                                         pc 0002                                 __CFG_CP$OFF 0000  
              __end_of_cPointerByteWriteLED 102F                  __size_of_LED7SegPulseClock 000B  
                       ___wmul@multiplicand 0022                                         l163 0A1C  
                                       l504 0CCD                                         l523 0110  
                                       l621 0CFE                                         l526 0191  
                                       l711 09BA                                         l833 0EDF  
                                       l950 0ABD                                         l775 0587  
                                       _GIE 005F                                __CFG_CPD$OFF 0000  
                       _marshallPatchMemory 04B5                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_LVP$OFF 0000  
                          ?_InitmvcChannels 0077                                __CFG_ZCD$OFF 0000  
                              ___ftdiv@cntr 0038                            __end_of_I2C1_ISR 04B5  
                              ___ftdiv@sign 003D                                        l1111 07C6  
                                      l1202 0EAD                                        l1118 07D9  
                                      l1119 07E1                                        l3130 0D3C  
                                      l3114 0D2A                                        l3222 0F07  
                                      l3230 0F27                                        l3128 0D14  
                                      l3218 0EF8                                        l3162 04F2  
                                      l3154 04C6                                        l3236 0F33  
                                      l3252 0F2A                                        l3254 0F59  
                                      l3238 0F47                                        l3190 0564  
                                      l3182 0538                                        l2800 07AD  
                                      l3272 0F9F                                        l3176 052B  
                                      l3168 04FF                                        l2810 07D3  
                                      l2802 07B2                                        l3266 0F72  
                                      l3700 0758                                        l4340 0E23  
                                      l3604 0D69                                        l3286 0FD4  
                                      l3278 0FAC                                        l4502 02B0  
                                      l4422 0090                                        l2808 07CB  
                                      l2840 0C8A                                        l2904 06BA  
                                      l4432 00D9                                        l4178 0AB7  
                                      l4362 0BB0                                        l2834 0C7E  
                                      l4338 0DCD                                        l4442 00F5  
                                      l3708 0771                                        l2844 0C91  
                                      l2908 06C2                                        l2924 0E59  
                                      l4524 032E                                        l4452 011F  
                                      l4358 0BA5                                        l2838 0C85  
                                      l2950 0EA4                                        l2942 0E89  
                                      l4518 031B                                        l4470 01BB  
                                      l4368 0BC1                                        l3680 0701  
                                      l2864 0B35                                        l2880 0663  
                                      l2952 0EB0                                        l2944 0E97  
                                      l4536 0366                                        l2794 079C  
                                      l2874 064D                                        l2964 0B92  
                                      l2892 069E                                        l2956 0EBE  
                                      l4476 01E4                                        l2798 07A3  
                                      l3686 0717                                        l2982 05D0  
                                      l4494 0290                                        l2896 06A6  
                                      l2984 05D4               __size_of_MYI2C_Write2LEDBytes 005A  
                                      u2015 07C1                                        u2035 07CE  
                                      u3005 0A8C                                        u2205 067F  
                                      _LATA 0016                                        _LATB 0017  
                                      _LATC 0018                                        u2225 06A7  
                                      u2305 0E60                                        u3105 0D7F  
                                      u2075 07E8                                        u2235 06AD  
                                      u4005 0AC3                                        u2414 0591  
                                      u2335 0E8A                                        u2415 0590  
                                      u4033 0CDF                                        u4025 0CC2  
                                      u3225 0729                                        u2265 06C3  
                                      u3065 0C17                                        u4050 0C0F  
                                      u3235 0739                                        u4115 0DD7  
                                      u2275 06C9                                        u2195 066F  
                                      u3075 0C37                                        u3245 0759  
                                      u2365 0EA5                                        u2605 056E  
                                      u4205 016A                                        u3255 0768  
                                      u2535 0D04                                        u3095 0D4A  
                                      u4215 0186                                        u3265 0772  
                                      u2545 04C4                                        u4305 0341  
                                      u2715 0EE5                                        u2635 0F05  
                                      u2555 04F0                                        u4315 0372  
                                      u4235 01E2                                        u4084 0ADC  
                                      u4085 0ADB                                        u2725 0F70  
                                      u2645 0F25                                        u4165 008E  
                                      u2735 0F9D                                        u4407 0313  
                                      u4175 00D7                                        u4417 035E  
                                      u4185 010C                                        u4427 0DB2  
                                      u4275 02F6                                        u4195 011D  
                                      u4285 0327                                        u1995 07A8  
                                      u2985 0AF8                                        u3995 0ABE  
                                      _WPUA 0F39                                        _WPUB 0F44  
                                      _WPUC 0F4F                                        _WPUE 0F65  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      _main 0064                                ___ftpack@arg 0020  
                              ___ftpack@exp 0023                  MYI2C_Write2LEDBytes@nCount 0034  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      _twoK 101E                      ??_I2C1_MasterTRBInsert 0022  
                                      btemp 007E                                main@iCounter 00D9  
      LED7SegDisplayValueByDigit@iTensDigit 0034                               __CFG_BOREN$ON 0000  
                   __end_of_LED7SegPinWrite 09BC                                        start 0020  
                      ?_marshallPatchMemory 0020                                 _writeDAC528 0B4C  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                              ___ftmul@cntr 003C                  MYI2C_Write2LEDBytes@status 003F  
                              ___ftmul@sign 003D              I2C1_MasterWriteTRBBuild@length 0021  
                              ___fttol@exp1 004B                                ___fttol@lval 0047  
        __end_of_updateModelFromPatchMemory 1000                  _updateModelFromPatchMemory 0F61  
    MYI2C_Write2LEDBytes@slaveDeviceAddress 0036                                  _i2c1_state 006F  
            __size_of_OSCILLATOR_Initialize 0009                   I2C1_MasterTRBInsert@count 0023  
             __end_of_OSCILLATOR_Initialize 09C5                   I2C1_MasterTRBInsert@pflag 0021  
                                     _ADACQ 009D                                       _ADACT 0099  
                                     _ADCAP 009B                                       ?_main 0077  
                                     _ADCLK 0098                                       _ADCNT 010C  
                                     _ADPCH 009E                                       _ADREF 009A  
                         __end_of_I2C1_Stop 0A80                                       _ADPRE 009C  
                             __CFG_WDTE$OFF 0000                                       _ADRPT 010D  
                           __end_of___ftdiv 0793                             __end_of___ftmul 06EA  
                           __end_of___fttol 0EC7                              __CFG_DEBUG$OFF 0000  
                                     i1l303 03E3                                       i1l304 03EF  
                                     i1l321 0463                                       i1l322 0471  
                                     i1l314 0431                                       i1l333 0A0F  
                                     i1l326 0496                                       i1l318 0450  
                                     i1l292 038D                                       i1l297 03B8  
                                     i1l298 03C0                                       i1l394 0013  
                                     i1l398 001B                                       _OSCEN 0891  
                                     _PORTB 000D                                       _PORTC 000E  
                                     _TRISA 0011                                       _TRISB 0012  
                                     _TRISC 0013                             __end_of_datapin 1024  
              __end_of_I2C1_BusCollisionISR 07F9                           ??_I2C1_Initialize 0020  
           __end_of_cPointerByteWriteFaders 1031                               ___awtoft@sign 002D  
                                     _delay 0C97                               ___ftpack@sign 0024  
                                     _speed 1020                           savePatch@batchNum 005F  
                           __end_of_putByte 0636                                       status 0003  
                                     wtemp0 007E                 MYI2C_Write2LEDBytes@counter 0037  
                     ??_marshallPatchMemory 0022             I2C1_MasterWriteTRBBuild@address 0022  
               MYI2C_Write2LEDBytes@timeOut 0039                                  _iLEDs0_LSB 00C0  
                                _iLEDs0_MSB 006C                                  _iLEDs1_LSB 00BE  
                                _iLEDs1_MSB 00BF                        __end_of_LED7SegSetup 0A01  
                           __initialization 0022                       I2C1_MasterWrite@pdata 002D  
                     I2C1_MasterWrite@pflag 002A                                __end_of_main 037A  
                              __end_of_twoK 1020            __end_of_MYI2C_Write16EEPROMBytes 0F61  
               ?_INTERRUPT_InterruptManager 0077                         _lineSettleMicroTime 101A  
                            _iI2CFaderValue 00C1                                 _i2c1_object 0067  
                                    ??_main 0063                               ___fttol@sign1 0046  
               ??_LED7SegShiftOutPulseClock 0031                             putByte@clockPin 004C  
     LED7SegDisplayValueByDigit@iUnitsDigit 0036                   savePatch@iPatchAddressLow 005A  
                                    ?_delay 0026                                      _ADACCH 0091  
                                    _ADACCL 0090                                      _ADCON0 0093  
                                    _ADCON1 0094                                      _ADCON2 0095  
                                    _ADCON3 0096                                      _ADERRH 0117  
                                    _ADERRL 0116                                      i1S4612 0800  
                                    _ADLTHH 010F                                      _ADLTHL 010E  
                                    _ADRESH 008D                                      _ADRESL 008C  
                                    _ADSTAT 0097                                      _ADUTHH 0111  
                                    _ADUTHL 0110                            __end_of___awtoft 0B4C  
                                    _ANSELA 0F38                                      _ANSELB 0F43  
                                    _ANSELC 0F4E                            __end_of___ftpack 07F8  
                        __CFG_RSTOSC$HFINT1 0000                                      _RC3PPS 0F23  
                                    _RC4PPS 0F24                                      _ODCONA 0F3A  
                                    _ODCONB 0F45                                      _ODCONC 0F50  
                                    i1l3420 043F                                      i1l3412 042B  
                                    i1l3094 0A7D                                      i1l3406 0420  
                                    i1l3440 0478                                      i1l3354 03AB  
                                    i1l3460 04A0                                      i1l3444 047F  
                                    i1l3428 0458                                      i1l3372 03DD  
                                    i1l3366 03CC                                      i1l3456 0499  
                                    i1l3458 049C                                      i1l3386 040C  
                                    i1l3466 04A9                              __CFG_WDTCCS$SC 0000  
       MYI2C_Write16EEPROMBytes@pointerByte 004C                        _cPointerByteWriteLED 102E  
                                    _OSCFRQ 0893                           ?_I2C1_MasterWrite 0027  
                     main@SaveDebounceCount 00E3                            ?_LED7SegPinWrite 0077  
                            __CFG_PWRTE$OFF 0000        MYI2C_Write16EEPROMBytes@writeAddress 002E  
                       __end_of_MvcMaxValue 1016                            __end_of_clockpin 1026  
                        ??_I2C1_MasterWrite 002B                         __end_of_MvcMinValue 1018  
                            _p_i2c1_current 0072                            __end_of_maxBanks 1012  
                                    ___wmul 0AB4                              __CFG_STVREN$ON 0000  
                                 ??___ftdiv 0034                                   ??___ftmul 0034  
                                 ??___fttol 0042                            __end_of_latchpin 1028  
                ??_I2C1_MasterWriteTRBBuild 0024                                   ?_I2C1_ISR 0077  
                                    _wkByte 00BB                                      main@fx 00E6  
                     ___ftmul@f3_as_product 0039                             _ADCC_Initialize 0A99  
                                 ??_putByte 004E           __size_of_ADCC_GetSingleConversion 0014  
                 ?_ADCC_GetSingleConversion 0020               I2C1_MasterWriteTRBBuild@pdata 0020  
                         _SYSTEM_Initialize 09D0                   _LED7SegShiftOutPulseClock 0AD0  
                   __end_of__initialization 0060                          ?_SYSTEM_Initialize 0077  
                                ___ftdiv@f1 0031                                  ___ftdiv@f2 002E  
                                ___ftdiv@f3 0039                              _i2c1_trb_count 0074  
                                ___awtoft@c 0028                                  ___ftmul@f1 002E  
                                ___ftmul@f2 0031                       _I2C1_FunctionComplete 0A01  
                      _I2C1_BusCollisionISR 07F8                                  ___fttol@f1 003E  
                            __pcstackCOMMON 0077                      I2C1_MasterWrite@length 0027  
                              __pidataBANK2 0A27                         ??_SYSTEM_Initialize 0021  
                             __end_of_delay 0CEA                              main@faderValue 00E8  
                             __end_of_speed 1022                                  ??_I2C1_ISR 0079  
     updateModelFromPatchMemory@mvcChannels 0026                    _MYI2C_Write16EEPROMBytes 0EC7  
                        main@fader8bitValue 00E5                                     ??_delay 0028  
                 __end_of_SYSTEM_Initialize 09DC         MYI2C_Write16EEPROMBytes@writeBuffer 0036  
                          InitmvcChannels@i 0021                  __end_of_i2c_addr_dualADSR0 102E  
                __end_of_i2c_addr_dualADSR1 102D                                  __pbssBANK0 0067  
                                __pbssBANK1 00A0                                  __pbssBANK2 0134  
                               _MvcMaxValue 1014                          __size_of_loadPatch 0040  
                               _MvcMinValue 1016                       __size_of_LED7SegSetup 000D  
                    savePatch@iPatchAddress 0061                  LED7SegShiftOutPulseClock@i 0033  
                              ?_writeDAC528 0055                       ?_I2C1_BusCollisionISR 0077  
                            _SSP1DATPPSbits 0EC6                                  __pmaintext 0064  
              __size_of_InitPanelInChannels 001E                                     ?___wmul 0020  
              __end_of_MYI2C_Write2LEDBytes 0D44                             __CFG_PPS1WAY$ON 0000  
                   __end_of_ADCC_Initialize 0AB4                          __size_of_savePatch 0079  
                                __pintentry 0004                             _I2C1_Initialize 0A51  
                                   _ADFLTRH 0115                 ?_updateModelFromPatchMemory 0020  
                                   _ADFLTRL 0114                                  _blinkyLoop 0DBD  
                                   _ADPREVH 008F                                     _ADPREVL 008E  
                                 ?___awtoft 0028                                   ?___ftpack 0020  
                                   _ADSTPTH 0113                                     _ADSTPTL 0112  
                            _SSP1CLKPPSbits 0EC5                                     _OSCCON1 088D  
                                   _OSCCON3 088F                                   _I2C1_Stop 0A68  
                                   _OSCTUNE 0892                                _LED7SegSetup 09F4  
                     main@LoadDebounceCount 00E1                                     _SSP1ADD 018D  
                                   _PPSLOCK 0E8F                                     _SSP1BUF 018C  
            marshallPatchMemory@mvcChannels 0028             MYI2C_Write2LEDBytes@pointerByte 003B  
                                _initDAC528 0A3B                              main@readStatus 00D8  
             I2C1_MasterTRBInsert@ptrb_list 0020                         __end_of_cPowerOfTwo 1010  
                                _maxPatches 1012                    __size_of_InitmvcChannels 0019  
                    ?_I2C1_FunctionComplete 0077               __size_of_I2C1_MasterTRBInsert 0046  
                        _p_i2c1_trb_current 0073                             _PanelInChannels 00A4  
                      __CFG_SCANE$available 0000                                     ___ftdiv 06EA  
                           __size_of___wmul 001C                                     ___ftmul 0636  
                                   ___fttol 0E40                          writeDAC528@dacData 0057  
        marshallPatchMemory@iPatchMemoryNDX 002F                                  ??___awtoft 002B  
                                ??___ftpack 0025                                     _datapin 1022  
                                   __ptext1 0D44                                     __ptext2 04B5  
                                   __ptext3 0EC7                                     __ptext4 0C11  
                                   __ptext5 0B4C                                     __ptext6 0F61  
                                   __ptext7 0A3B                                     __ptext8 0581  
                                   __ptext9 0E40                           __end_of_loadPatch 0C51  
                     _OSCILLATOR_Initialize 09BC                                     _wkFloat 00B2  
                                   _segdisp 0120                    ??_PIN_MANAGER_Initialize 0020  
                      loadPatch@PatchNumber 005A                                  ?_I2C1_Stop 0077  
                                   _putByte 0581                  __size_of_SYSTEM_Initialize 000C  
                      I2C1_ISR@pi2c_buf_ptr 0071                                     clrloop0 09DD  
                         __end_of_savePatch 0DBD                 __end_of_marshallPatchMemory 0581  
                      end_of_initialization 0060                ??_LED7SegDisplayValueByDigit 0038  
                                   init_ram 09E8                                     initloop 09E9  
 updateModelFromPatchMemory@iPatchMemoryNDX 002B                      ??_I2C1_BusCollisionISR 0077  
                   __end_of_I2C1_Initialize 0A68                           __end_of_toggleDly 101E  
                   _cPointerByteWriteFaders 1030            marshallPatchMemory@dualADSRdata0 0020  
          marshallPatchMemory@dualADSRdata1 0021                            ?_ADCC_Initialize 0077  
          __end_of_ADCC_GetSingleConversion 0A27   MYI2C_Write16EEPROMBytes@iPatchAddressHigh 004E  
                               ?_blinkyLoop 0040                       __CFG_WDTCPS$WDTCPS_31 0000  
                                 _PORTBbits 000D                   __size_of_I2C1_MasterWrite 0028  
                         __size_of_I2C1_ISR 013B         __size_of_LED7SegDisplayValueByDigit 0039  
                                 _MY_CONSTS 006D                                   _TRISCbits 0013  
           MYI2C_Write2LEDBytes@writeBuffer 003C                                 _cPowerOfTwo 1000  
                          __CFG_FEXTOSC$OFF 0000                                 putByte@data 0052  
                           main@iResetValue 1028                                 ?_initDAC528 0077  
                               putByte@mask 0053                        _MYI2C_Write2LEDBytes 0CEA  
         I2C1_ISR@i2c_10bit_address_restart 006E                   marshallPatchMemory@i_1221 002B  
                 marshallPatchMemory@i_1222 002D                                  main@fx_978 00EA  
                               ___ftdiv@exp 003C                     I2C1_MasterWrite@address 0028  
                               ___ftmul@exp 0038                  ??_MYI2C_Write16EEPROMBytes 0032  
                      __size_of_writeDAC528 0025     updateModelFromPatchMemory@dualADSRdata0 0020  
   updateModelFromPatchMemory@dualADSRdata1 0021                      delay@adjustedDelaytime 0029  
                         ??_InitmvcChannels 0020                    __size_of_LED7SegPinWrite 0009  
                            __end_of___wmul 0AD0                     I2C1_MasterWrite@trBlock 00D1  
                  I2C1_Stop@completion_code 0078                      ?_OSCILLATOR_Initialize 0077  
                            _clockMicroTime 1018                 __end_of_lineSettleMicroTime 101C  
                       start_initialization 0022                                 ??_I2C1_Stop 0077  
           __size_of_PIN_MANAGER_Initialize 003F                         _InitPanelInChannels 0AEC  
                     ?_MYI2C_Write2LEDBytes 002E           __size_of_I2C1_MasterWriteTRBBuild 0020  
                 ?_I2C1_MasterWriteTRBBuild 0020                                  loadPatch@i 0060  
                       __size_of_blinkyLoop 0083                      _cPointerByteReadFaders 102F  
                          ?_I2C1_Initialize 0077                            __CFG_LPBOREN$OFF 0000  
                      savePatch@PatchNumber 0054                        ?_InitPanelInChannels 0077  
                        _i2c_addr_dualADSR0 102D                          _i2c_addr_dualADSR1 102C  
                                  ??___wmul 0024                                 __pdataBANK2 0120  
                    __end_of_clockMicroTime 101A                         __size_of_initDAC528 0016  
              I2C1_MasterWriteTRBBuild@ptrb 0026                           __size_of___awtoft 0022  
                  _ADCC_GetSingleConversion 0A13                           __size_of___ftpack 0065  
                               __pbssBIGRAM 2370                     __end_ofmain@iResetValue 102A  
                               __pbssCOMMON 0070                                   ___latbits 0002  
                             __pcstackBANK0 0020                               __pcstackBANK1 00D8  
          MYI2C_Write2LEDBytes@LSBWriteByte 002F                               _i2c1_tr_queue 00D5  
                       blinkyLoop@delayTime 0044          __end_of_LED7SegDisplayValueByDigit 0BD2  
                _LED7SegDisplayValueByDigit 0B99                      loadPatch@iPatchAddress 005E  
                      writeDAC528@dacNumber 0055                     ??_I2C1_FunctionComplete 0077  
             MYI2C_Write16EEPROMBytes@pData 0030                      _PIN_MANAGER_Initialize 0BD2  
          MYI2C_Write2LEDBytes@MSBWriteByte 002E                       ??_InitPanelInChannels 0020  
           ADCC_GetSingleConversion@channel 0023                                    ?___ftdiv 002E  
                                  ?___ftmul 002E                                    ?___fttol 003E  
                                  _I2C1_ISR 037A                ??_INTERRUPT_InterruptManager 007D  
                      marshallPatchMemory@i 0029                                   __pswtext1 0800  
                          _I2C1_MasterWrite 0B71                          LED7SegPinWrite@val 0020  
                              savePatch@idx 005D                __end_of_I2C1_MasterTRBInsert 0C97  
                    main@prevFader8bitValue 00DC                           ??_LED7SegPinWrite 0020  
                       blinkyLoop@loopCount 0046                                   _loadPatch 0C11  
                                  ?_putByte 004C                      ??_MYI2C_Write2LEDBytes 0030  
                              _wkFaderValue 00BD                              __size_of_delay 0053  
                              delay@counter 002D                      I2C1_MasterRead@trBlock 00CD  
                            ___wmul@product 0024                            main@iChangeCount 00DB  
                                  _LATCbits 0018                                   _savePatch 0D44  
                                 clear_ram0 09DC                                    _PIE3bits 0719  
       __size_of_INTERRUPT_InterruptManager 001C                                    _PIR3bits 070F  
       LED7SegDisplayValueByDigit@iTensCode 0038                                    _SSP1CON1 0190  
                                  _SSP1CON3 0192    MYI2C_Write16EEPROMBytes@iPatchAddressLow 0047  
                                  _SSP1STAT 018F                                ??_blinkyLoop 0042  
                                 _toggleDly 101C                                  _ADCON0bits 0093  
                                _ADCON1bits 0094                                  _ADCON2bits 0095  
                                _ADCON3bits 0096                           ___wmul@multiplier 0020  
                             _dualADSRdata0 013C                               _dualADSRdata1 0134  
                            savePatch@pData 005B                                  ?_loadPatch 005A  
               updateModelFromPatchMemory@i 002D                                ??_initDAC528 0055  
                           _faderActiveFlag 00A8  MYI2C_Write16EEPROMBytes@slaveDeviceAddress 004D  
                        __end_of_blinkyLoop 0E40                             _InitmvcChannels 0A80  
                                ?_savePatch 0054                                  _ADSTATbits 0097  
              __size_of_marshallPatchMemory 00CC                                _aPatchMemory 2370  
             __size_of_I2C1_BusCollisionISR 0001                      I2C1_ISR@i2c_bytes_left 0070  
                   ??_OSCILLATOR_Initialize 0020                              delay@delaytime 0026  
                          __size_of___ftdiv 00A9                            __size_of___ftmul 00B4  
                          __size_of___fttol 0087                                    ___awtoft 0B2A  
                                  ___ftpack 0793            __end_of_I2C1_MasterWriteTRBBuild 0B2A  
                        __end_of_initDAC528 0A51                           _LED7SegPulseClock 09C5  
                                _ANSELCbits 0F4E                          ?_LED7SegPulseClock 0077  
                  __size_of_ADCC_Initialize 001B                          __end_of_maxPatches 1014  
                       I2C1_ISR@i2c_address 0075                                    __ptext10 0636  
                                  __ptext11 0B2A                                    __ptext20 0BD2  
                                  __ptext12 0DBD                                    __ptext21 09BC  
                                  __ptext13 0CEA                                    __ptext30 09B3  
                                  __ptext22 0A51                                    __ptext14 0B71  
                                  __ptext31 0A80                                    __ptext23 0A99  
                                  __ptext15 0B0A                                    __ptext32 0AEC  
                                  __ptext24 09F4                                    __ptext16 0C51  
                                  __ptext33 0A13                                    __ptext25 0B99  
                                  __ptext17 06EA                                    __ptext26 0AD0  
                                  __ptext18 0793                                    __ptext35 037A  
                                  __ptext27 09C5                                    __ptext19 09D0  
                                  __ptext36 0A68                                    __ptext28 0C97  
                                  __ptext37 0A01                                    __ptext29 0AB4  
                                  __ptext38 07F8                          blinkyLoop@maxLoops 0040  
                              _SSP1CON1bits 0190                                _SSP1CON2bits 0191  
           MYI2C_Write16EEPROMBytes@counter 004F                                    _clockpin 1024  
                               _mvcChannels 00C9                            __size_of_putByte 00B5  
                                  _maxBanks 1010                         ??_LED7SegPulseClock 0031  
                                  _wkMIDICC 00BC             MYI2C_Write16EEPROMBytes@timeOut 004A  
                                  _latchpin 1026                               __size_of_main 0316  
                      InitPanelInChannels@i 0021                               ??_writeDAC528 0058  
                      __CFG_WDTCWS$WDTCWS_7 0000                        _I2C1_MasterTRBInsert 0C51  
                    writeDAC528@wkDacNumber 0059                  ??_ADCC_GetSingleConversion 0023  
                                  int$flags 007E          __end_of_INTERRUPT_InterruptManager 0020  
                _INTERRUPT_InterruptManager 0004                   __end_of_LED7SegPulseClock 09D0  
        __size_of_LED7SegShiftOutPulseClock 001C                ??_updateModelFromPatchMemory 0022  
                ?_LED7SegShiftOutPulseClock 0077                 PIN_MANAGER_Initialize@state 0020  
              LED7SegShiftOutPulseClock@val 0032                              _cMstrClkAdjust 102A  
                                _INTCONbits 000B           __size_of_MYI2C_Write16EEPROMBytes 009A  
                               ??_loadPatch 005C                   ?_MYI2C_Write16EEPROMBytes 002E  
                             ?_LED7SegSetup 0077                              __pstringtext10 1020  
                            __pstringtext11 1022                              __pstringtext20 1030  
                            __pstringtext12 1024                              __pstringtext13 1026  
                            __pstringtext14 1028                              __pstringtext15 102A  
                            __pstringtext16 102C                              __pstringtext17 102D  
                            __pstringtext18 102E                              __pstringtext19 102F  
                   __end_of_InitmvcChannels 0A99              __end_of_cPointerByteReadFaders 1030  
                                  intlevel1 0000                 ?_LED7SegDisplayValueByDigit 0034  
            MYI2C_Write16EEPROMBytes@nCount 0048                              _mvcPatchNumber 00B9  
                   ?_PIN_MANAGER_Initialize 0077                    __end_of_I2C1_MasterWrite 0B99  
                               ??_savePatch 0056                           __CFG_CLKOUTEN$OFF 0000  
            __size_of_I2C1_FunctionComplete 0012               __end_of_I2C1_FunctionComplete 0A13  
          updateModelFromPatchMemory@i_1230 0029            updateModelFromPatchMemory@i_1229 0027  
                               _PPSLOCKbits 0E8F              MYI2C_Write16EEPROMBytes@status 0053  
                     ?_I2C1_MasterTRBInsert 0020                  savePatch@iPatchAddressHigh 0059  
       __size_of_updateModelFromPatchMemory 009F                                    putByte@i 0054  
                           _LED7SegPinWrite 09B3                         __end_of_writeDAC528 0B71  
                    __end_of_cMstrClkAdjust 102C                    __size_of_I2C1_Initialize 0017  
                             __pstringtext1 1000                               __pstringtext2 1010  
                             __pstringtext3 1012                               __pstringtext4 1014  
                             __pstringtext5 1016                               __pstringtext6 1018  
                             __pstringtext7 101A                               __pstringtext8 101C  
                             __pstringtext9 101E           __end_of_LED7SegShiftOutPulseClock 0AEC  
                             main@POT0Value 00DF                               main@POT1Value 00E0  
                            ??_LED7SegSetup 0020                    _I2C1_MasterWriteTRBBuild 0B0A  
                          main@iLoopCounter 00DD              __end_of_PIN_MANAGER_Initialize 0C11  
                         ??_ADCC_Initialize 0020                          __size_of_I2C1_Stop 0018  
               __end_of_InitPanelInChannels 0B0A                   MYI2C_Write16EEPROMBytes@i 0051  
                       _prevPanelInChannels 00A0  
