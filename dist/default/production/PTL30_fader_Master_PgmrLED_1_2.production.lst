

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Aug 29 07:34:07 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	cinit,global,class=CODE,merge=1,delta=2
    26                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    30                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    31                           	psect	inittext,global,class=CODE,delta=2
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,merge=1,delta=2
    38                           	psect	text2,local,class=CODE,merge=1,delta=2
    39                           	psect	text3,local,class=CODE,merge=1,delta=2
    40                           	psect	text4,local,class=CODE,merge=1,delta=2
    41                           	psect	text5,local,class=CODE,merge=1,delta=2
    42                           	psect	text6,local,class=CODE,merge=1,delta=2
    43                           	psect	text7,local,class=CODE,merge=1,delta=2
    44                           	psect	text8,local,class=CODE,merge=1,delta=2
    45                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text12,local,class=CODE,merge=1,delta=2
    49                           	psect	text13,local,class=CODE,merge=1,delta=2
    50                           	psect	text14,local,class=CODE,merge=1,delta=2
    51                           	psect	text15,local,class=CODE,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,merge=1,delta=2
    53                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text19,local,class=CODE,merge=1,delta=2
    56                           	psect	text20,local,class=CODE,merge=1,delta=2
    57                           	psect	text21,local,class=CODE,merge=1,delta=2
    58                           	psect	text22,local,class=CODE,merge=1,delta=2
    59                           	psect	text23,local,class=CODE,merge=1,delta=2
    60                           	psect	text24,local,class=CODE,merge=1,delta=2
    61                           	psect	text25,local,class=CODE,merge=1,delta=2
    62                           	psect	text26,local,class=CODE,merge=1,delta=2
    63                           	psect	text27,local,class=CODE,merge=1,delta=2
    64                           	psect	text28,local,class=CODE,merge=1,delta=2
    65                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text30,local,class=CODE,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,merge=1,delta=2
    69                           	psect	text33,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text35,local,class=CODE,merge=1,delta=2
    72                           	psect	swtext1,local,class=CONST,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	dabs	1,0x620,48
    77                           	dabs	1,0x5A0,80
    78                           	dabs	1,0x2370,0,_aPatchMemory
    79                           	dabs	1,0x7E,2
    80  0000                     
    81                           ; Version 1.45
    82                           ; Generated 16/11/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC16F18855 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  001C                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  008C                     	;# 
   144  008C                     	;# 
   145  008D                     	;# 
   146  008E                     	;# 
   147  008E                     	;# 
   148  008F                     	;# 
   149  0090                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  0110                     	;# 
   170  0110                     	;# 
   171  0111                     	;# 
   172  0112                     	;# 
   173  0112                     	;# 
   174  0113                     	;# 
   175  0114                     	;# 
   176  0114                     	;# 
   177  0115                     	;# 
   178  0116                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0119                     	;# 
   182  0119                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011A                     	;# 
   186  011A                     	;# 
   187  011B                     	;# 
   188  011B                     	;# 
   189  011B                     	;# 
   190  011B                     	;# 
   191  011B                     	;# 
   192  011C                     	;# 
   193  011C                     	;# 
   194  011C                     	;# 
   195  011D                     	;# 
   196  011D                     	;# 
   197  011D                     	;# 
   198  011E                     	;# 
   199  011E                     	;# 
   200  011E                     	;# 
   201  011F                     	;# 
   202  011F                     	;# 
   203  011F                     	;# 
   204  011F                     	;# 
   205  011F                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  018F                     	;# 
   210  0190                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0196                     	;# 
   214  0197                     	;# 
   215  0198                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  020C                     	;# 
   221  020C                     	;# 
   222  020D                     	;# 
   223  020E                     	;# 
   224  020F                     	;# 
   225  020F                     	;# 
   226  0210                     	;# 
   227  0210                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0216                     	;# 
   237  0216                     	;# 
   238  0217                     	;# 
   239  0217                     	;# 
   240  0218                     	;# 
   241  0218                     	;# 
   242  0219                     	;# 
   243  021A                     	;# 
   244  021B                     	;# 
   245  021B                     	;# 
   246  021C                     	;# 
   247  021C                     	;# 
   248  021D                     	;# 
   249  021D                     	;# 
   250  021E                     	;# 
   251  021F                     	;# 
   252  028C                     	;# 
   253  028C                     	;# 
   254  028D                     	;# 
   255  028D                     	;# 
   256  028E                     	;# 
   257  028F                     	;# 
   258  0290                     	;# 
   259  0290                     	;# 
   260  0291                     	;# 
   261  0292                     	;# 
   262  0292                     	;# 
   263  0293                     	;# 
   264  0293                     	;# 
   265  0294                     	;# 
   266  0295                     	;# 
   267  0296                     	;# 
   268  0296                     	;# 
   269  0297                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  0299                     	;# 
   274  029A                     	;# 
   275  029B                     	;# 
   276  029C                     	;# 
   277  029C                     	;# 
   278  029D                     	;# 
   279  030C                     	;# 
   280  030C                     	;# 
   281  030D                     	;# 
   282  030E                     	;# 
   283  030F                     	;# 
   284  0310                     	;# 
   285  0310                     	;# 
   286  0311                     	;# 
   287  0312                     	;# 
   288  0313                     	;# 
   289  0314                     	;# 
   290  0314                     	;# 
   291  0315                     	;# 
   292  0316                     	;# 
   293  0317                     	;# 
   294  0318                     	;# 
   295  0318                     	;# 
   296  0319                     	;# 
   297  031A                     	;# 
   298  031B                     	;# 
   299  031C                     	;# 
   300  031C                     	;# 
   301  031D                     	;# 
   302  031E                     	;# 
   303  031F                     	;# 
   304  038C                     	;# 
   305  038D                     	;# 
   306  038E                     	;# 
   307  0390                     	;# 
   308  0391                     	;# 
   309  0392                     	;# 
   310  040C                     	;# 
   311  040D                     	;# 
   312  040E                     	;# 
   313  040F                     	;# 
   314  0410                     	;# 
   315  0411                     	;# 
   316  0416                     	;# 
   317  0416                     	;# 
   318  0417                     	;# 
   319  0418                     	;# 
   320  0418                     	;# 
   321  0419                     	;# 
   322  041A                     	;# 
   323  041A                     	;# 
   324  041B                     	;# 
   325  041C                     	;# 
   326  041C                     	;# 
   327  041D                     	;# 
   328  041E                     	;# 
   329  041F                     	;# 
   330  048C                     	;# 
   331  048C                     	;# 
   332  048D                     	;# 
   333  048E                     	;# 
   334  048F                     	;# 
   335  048F                     	;# 
   336  0490                     	;# 
   337  0491                     	;# 
   338  0492                     	;# 
   339  0492                     	;# 
   340  0493                     	;# 
   341  0494                     	;# 
   342  0495                     	;# 
   343  0495                     	;# 
   344  0496                     	;# 
   345  0497                     	;# 
   346  0498                     	;# 
   347  0499                     	;# 
   348  049A                     	;# 
   349  049B                     	;# 
   350  049C                     	;# 
   351  049D                     	;# 
   352  050C                     	;# 
   353  050C                     	;# 
   354  050D                     	;# 
   355  050E                     	;# 
   356  050F                     	;# 
   357  050F                     	;# 
   358  0510                     	;# 
   359  0511                     	;# 
   360  0512                     	;# 
   361  0512                     	;# 
   362  0513                     	;# 
   363  0514                     	;# 
   364  0515                     	;# 
   365  0515                     	;# 
   366  0516                     	;# 
   367  0517                     	;# 
   368  0518                     	;# 
   369  0519                     	;# 
   370  051A                     	;# 
   371  051B                     	;# 
   372  051C                     	;# 
   373  051D                     	;# 
   374  058C                     	;# 
   375  058C                     	;# 
   376  058D                     	;# 
   377  058E                     	;# 
   378  058F                     	;# 
   379  058F                     	;# 
   380  0590                     	;# 
   381  0591                     	;# 
   382  0592                     	;# 
   383  0593                     	;# 
   384  060C                     	;# 
   385  060D                     	;# 
   386  060E                     	;# 
   387  060F                     	;# 
   388  0610                     	;# 
   389  0611                     	;# 
   390  0612                     	;# 
   391  0613                     	;# 
   392  0614                     	;# 
   393  0616                     	;# 
   394  0617                     	;# 
   395  0618                     	;# 
   396  0619                     	;# 
   397  061A                     	;# 
   398  061B                     	;# 
   399  061C                     	;# 
   400  061D                     	;# 
   401  061E                     	;# 
   402  068C                     	;# 
   403  068D                     	;# 
   404  068E                     	;# 
   405  068F                     	;# 
   406  0690                     	;# 
   407  0691                     	;# 
   408  0692                     	;# 
   409  0693                     	;# 
   410  0694                     	;# 
   411  070C                     	;# 
   412  070D                     	;# 
   413  070E                     	;# 
   414  070F                     	;# 
   415  0710                     	;# 
   416  0711                     	;# 
   417  0712                     	;# 
   418  0713                     	;# 
   419  0714                     	;# 
   420  0716                     	;# 
   421  0717                     	;# 
   422  0718                     	;# 
   423  0719                     	;# 
   424  071A                     	;# 
   425  071B                     	;# 
   426  071C                     	;# 
   427  071D                     	;# 
   428  071E                     	;# 
   429  0796                     	;# 
   430  0797                     	;# 
   431  0798                     	;# 
   432  0799                     	;# 
   433  079A                     	;# 
   434  079B                     	;# 
   435  080C                     	;# 
   436  080D                     	;# 
   437  080E                     	;# 
   438  080F                     	;# 
   439  0810                     	;# 
   440  0811                     	;# 
   441  0812                     	;# 
   442  0813                     	;# 
   443  0814                     	;# 
   444  081A                     	;# 
   445  081B                     	;# 
   446  081C                     	;# 
   447  081D                     	;# 
   448  081E                     	;# 
   449  081F                     	;# 
   450  088C                     	;# 
   451  088D                     	;# 
   452  088E                     	;# 
   453  088F                     	;# 
   454  0890                     	;# 
   455  0891                     	;# 
   456  0892                     	;# 
   457  0893                     	;# 
   458  0895                     	;# 
   459  0896                     	;# 
   460  0897                     	;# 
   461  0898                     	;# 
   462  0899                     	;# 
   463  089A                     	;# 
   464  089B                     	;# 
   465  090C                     	;# 
   466  090E                     	;# 
   467  090F                     	;# 
   468  091F                     	;# 
   469  091F                     	;# 
   470  098F                     	;# 
   471  098F                     	;# 
   472  0990                     	;# 
   473  0991                     	;# 
   474  0992                     	;# 
   475  0993                     	;# 
   476  0994                     	;# 
   477  0995                     	;# 
   478  0996                     	;# 
   479  0997                     	;# 
   480  0E0F                     	;# 
   481  0E10                     	;# 
   482  0E11                     	;# 
   483  0E12                     	;# 
   484  0E13                     	;# 
   485  0E14                     	;# 
   486  0E15                     	;# 
   487  0E16                     	;# 
   488  0E17                     	;# 
   489  0E18                     	;# 
   490  0E19                     	;# 
   491  0E1A                     	;# 
   492  0E1B                     	;# 
   493  0E1C                     	;# 
   494  0E1D                     	;# 
   495  0E1E                     	;# 
   496  0E1F                     	;# 
   497  0E20                     	;# 
   498  0E21                     	;# 
   499  0E22                     	;# 
   500  0E23                     	;# 
   501  0E24                     	;# 
   502  0E25                     	;# 
   503  0E26                     	;# 
   504  0E27                     	;# 
   505  0E28                     	;# 
   506  0E29                     	;# 
   507  0E2A                     	;# 
   508  0E2B                     	;# 
   509  0E2C                     	;# 
   510  0E2D                     	;# 
   511  0E2E                     	;# 
   512  0E2F                     	;# 
   513  0E30                     	;# 
   514  0E31                     	;# 
   515  0E32                     	;# 
   516  0E33                     	;# 
   517  0E34                     	;# 
   518  0E35                     	;# 
   519  0E36                     	;# 
   520  0E37                     	;# 
   521  0E8F                     	;# 
   522  0E90                     	;# 
   523  0E91                     	;# 
   524  0E92                     	;# 
   525  0E93                     	;# 
   526  0E94                     	;# 
   527  0E95                     	;# 
   528  0E96                     	;# 
   529  0E97                     	;# 
   530  0E9C                     	;# 
   531  0E9D                     	;# 
   532  0E9E                     	;# 
   533  0EA1                     	;# 
   534  0EA2                     	;# 
   535  0EA3                     	;# 
   536  0EA4                     	;# 
   537  0EA5                     	;# 
   538  0EA9                     	;# 
   539  0EAA                     	;# 
   540  0EAB                     	;# 
   541  0EAC                     	;# 
   542  0EB1                     	;# 
   543  0EB2                     	;# 
   544  0EB3                     	;# 
   545  0EB8                     	;# 
   546  0EB9                     	;# 
   547  0EBA                     	;# 
   548  0EBB                     	;# 
   549  0EBC                     	;# 
   550  0EBD                     	;# 
   551  0EBE                     	;# 
   552  0EC3                     	;# 
   553  0EC5                     	;# 
   554  0EC6                     	;# 
   555  0EC7                     	;# 
   556  0EC8                     	;# 
   557  0EC9                     	;# 
   558  0ECA                     	;# 
   559  0ECB                     	;# 
   560  0ECC                     	;# 
   561  0F10                     	;# 
   562  0F11                     	;# 
   563  0F12                     	;# 
   564  0F13                     	;# 
   565  0F14                     	;# 
   566  0F15                     	;# 
   567  0F16                     	;# 
   568  0F17                     	;# 
   569  0F18                     	;# 
   570  0F19                     	;# 
   571  0F1A                     	;# 
   572  0F1B                     	;# 
   573  0F1C                     	;# 
   574  0F1D                     	;# 
   575  0F1E                     	;# 
   576  0F1F                     	;# 
   577  0F20                     	;# 
   578  0F21                     	;# 
   579  0F22                     	;# 
   580  0F23                     	;# 
   581  0F24                     	;# 
   582  0F25                     	;# 
   583  0F26                     	;# 
   584  0F27                     	;# 
   585  0F38                     	;# 
   586  0F39                     	;# 
   587  0F3A                     	;# 
   588  0F3B                     	;# 
   589  0F3C                     	;# 
   590  0F3D                     	;# 
   591  0F3E                     	;# 
   592  0F3F                     	;# 
   593  0F40                     	;# 
   594  0F41                     	;# 
   595  0F43                     	;# 
   596  0F44                     	;# 
   597  0F45                     	;# 
   598  0F46                     	;# 
   599  0F47                     	;# 
   600  0F48                     	;# 
   601  0F49                     	;# 
   602  0F4A                     	;# 
   603  0F4B                     	;# 
   604  0F4C                     	;# 
   605  0F4E                     	;# 
   606  0F4F                     	;# 
   607  0F50                     	;# 
   608  0F51                     	;# 
   609  0F52                     	;# 
   610  0F53                     	;# 
   611  0F54                     	;# 
   612  0F55                     	;# 
   613  0F56                     	;# 
   614  0F57                     	;# 
   615  0F65                     	;# 
   616  0F68                     	;# 
   617  0F69                     	;# 
   618  0F6A                     	;# 
   619  0F6B                     	;# 
   620  0FE4                     	;# 
   621  0FE5                     	;# 
   622  0FE6                     	;# 
   623  0FE7                     	;# 
   624  0FE8                     	;# 
   625  0FE9                     	;# 
   626  0FEA                     	;# 
   627  0FEB                     	;# 
   628  0FED                     	;# 
   629  0FEE                     	;# 
   630  0FEF                     	;# 
   631  0000                     	;# 
   632  0001                     	;# 
   633  0002                     	;# 
   634  0003                     	;# 
   635  0004                     	;# 
   636  0005                     	;# 
   637  0006                     	;# 
   638  0007                     	;# 
   639  0008                     	;# 
   640  0009                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0016                     	;# 
   651  0017                     	;# 
   652  0018                     	;# 
   653  001C                     	;# 
   654  001C                     	;# 
   655  001D                     	;# 
   656  001D                     	;# 
   657  001E                     	;# 
   658  001F                     	;# 
   659  008C                     	;# 
   660  008C                     	;# 
   661  008D                     	;# 
   662  008E                     	;# 
   663  008E                     	;# 
   664  008F                     	;# 
   665  0090                     	;# 
   666  0090                     	;# 
   667  0091                     	;# 
   668  0093                     	;# 
   669  0094                     	;# 
   670  0095                     	;# 
   671  0096                     	;# 
   672  0097                     	;# 
   673  0098                     	;# 
   674  0099                     	;# 
   675  009A                     	;# 
   676  009B                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009E                     	;# 
   680  010C                     	;# 
   681  010D                     	;# 
   682  010E                     	;# 
   683  010E                     	;# 
   684  010F                     	;# 
   685  0110                     	;# 
   686  0110                     	;# 
   687  0111                     	;# 
   688  0112                     	;# 
   689  0112                     	;# 
   690  0113                     	;# 
   691  0114                     	;# 
   692  0114                     	;# 
   693  0115                     	;# 
   694  0116                     	;# 
   695  0116                     	;# 
   696  0117                     	;# 
   697  0119                     	;# 
   698  0119                     	;# 
   699  0119                     	;# 
   700  011A                     	;# 
   701  011A                     	;# 
   702  011A                     	;# 
   703  011B                     	;# 
   704  011B                     	;# 
   705  011B                     	;# 
   706  011B                     	;# 
   707  011B                     	;# 
   708  011C                     	;# 
   709  011C                     	;# 
   710  011C                     	;# 
   711  011D                     	;# 
   712  011D                     	;# 
   713  011D                     	;# 
   714  011E                     	;# 
   715  011E                     	;# 
   716  011E                     	;# 
   717  011F                     	;# 
   718  011F                     	;# 
   719  011F                     	;# 
   720  011F                     	;# 
   721  011F                     	;# 
   722  018C                     	;# 
   723  018D                     	;# 
   724  018E                     	;# 
   725  018F                     	;# 
   726  0190                     	;# 
   727  0191                     	;# 
   728  0192                     	;# 
   729  0196                     	;# 
   730  0197                     	;# 
   731  0198                     	;# 
   732  0199                     	;# 
   733  019A                     	;# 
   734  019B                     	;# 
   735  019C                     	;# 
   736  020C                     	;# 
   737  020C                     	;# 
   738  020D                     	;# 
   739  020E                     	;# 
   740  020F                     	;# 
   741  020F                     	;# 
   742  0210                     	;# 
   743  0210                     	;# 
   744  0211                     	;# 
   745  0211                     	;# 
   746  0212                     	;# 
   747  0212                     	;# 
   748  0213                     	;# 
   749  0214                     	;# 
   750  0215                     	;# 
   751  0215                     	;# 
   752  0216                     	;# 
   753  0216                     	;# 
   754  0217                     	;# 
   755  0217                     	;# 
   756  0218                     	;# 
   757  0218                     	;# 
   758  0219                     	;# 
   759  021A                     	;# 
   760  021B                     	;# 
   761  021B                     	;# 
   762  021C                     	;# 
   763  021C                     	;# 
   764  021D                     	;# 
   765  021D                     	;# 
   766  021E                     	;# 
   767  021F                     	;# 
   768  028C                     	;# 
   769  028C                     	;# 
   770  028D                     	;# 
   771  028D                     	;# 
   772  028E                     	;# 
   773  028F                     	;# 
   774  0290                     	;# 
   775  0290                     	;# 
   776  0291                     	;# 
   777  0292                     	;# 
   778  0292                     	;# 
   779  0293                     	;# 
   780  0293                     	;# 
   781  0294                     	;# 
   782  0295                     	;# 
   783  0296                     	;# 
   784  0296                     	;# 
   785  0297                     	;# 
   786  0298                     	;# 
   787  0298                     	;# 
   788  0299                     	;# 
   789  0299                     	;# 
   790  029A                     	;# 
   791  029B                     	;# 
   792  029C                     	;# 
   793  029C                     	;# 
   794  029D                     	;# 
   795  030C                     	;# 
   796  030C                     	;# 
   797  030D                     	;# 
   798  030E                     	;# 
   799  030F                     	;# 
   800  0310                     	;# 
   801  0310                     	;# 
   802  0311                     	;# 
   803  0312                     	;# 
   804  0313                     	;# 
   805  0314                     	;# 
   806  0314                     	;# 
   807  0315                     	;# 
   808  0316                     	;# 
   809  0317                     	;# 
   810  0318                     	;# 
   811  0318                     	;# 
   812  0319                     	;# 
   813  031A                     	;# 
   814  031B                     	;# 
   815  031C                     	;# 
   816  031C                     	;# 
   817  031D                     	;# 
   818  031E                     	;# 
   819  031F                     	;# 
   820  038C                     	;# 
   821  038D                     	;# 
   822  038E                     	;# 
   823  0390                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  040C                     	;# 
   827  040D                     	;# 
   828  040E                     	;# 
   829  040F                     	;# 
   830  0410                     	;# 
   831  0411                     	;# 
   832  0416                     	;# 
   833  0416                     	;# 
   834  0417                     	;# 
   835  0418                     	;# 
   836  0418                     	;# 
   837  0419                     	;# 
   838  041A                     	;# 
   839  041A                     	;# 
   840  041B                     	;# 
   841  041C                     	;# 
   842  041C                     	;# 
   843  041D                     	;# 
   844  041E                     	;# 
   845  041F                     	;# 
   846  048C                     	;# 
   847  048C                     	;# 
   848  048D                     	;# 
   849  048E                     	;# 
   850  048F                     	;# 
   851  048F                     	;# 
   852  0490                     	;# 
   853  0491                     	;# 
   854  0492                     	;# 
   855  0492                     	;# 
   856  0493                     	;# 
   857  0494                     	;# 
   858  0495                     	;# 
   859  0495                     	;# 
   860  0496                     	;# 
   861  0497                     	;# 
   862  0498                     	;# 
   863  0499                     	;# 
   864  049A                     	;# 
   865  049B                     	;# 
   866  049C                     	;# 
   867  049D                     	;# 
   868  050C                     	;# 
   869  050C                     	;# 
   870  050D                     	;# 
   871  050E                     	;# 
   872  050F                     	;# 
   873  050F                     	;# 
   874  0510                     	;# 
   875  0511                     	;# 
   876  0512                     	;# 
   877  0512                     	;# 
   878  0513                     	;# 
   879  0514                     	;# 
   880  0515                     	;# 
   881  0515                     	;# 
   882  0516                     	;# 
   883  0517                     	;# 
   884  0518                     	;# 
   885  0519                     	;# 
   886  051A                     	;# 
   887  051B                     	;# 
   888  051C                     	;# 
   889  051D                     	;# 
   890  058C                     	;# 
   891  058C                     	;# 
   892  058D                     	;# 
   893  058E                     	;# 
   894  058F                     	;# 
   895  058F                     	;# 
   896  0590                     	;# 
   897  0591                     	;# 
   898  0592                     	;# 
   899  0593                     	;# 
   900  060C                     	;# 
   901  060D                     	;# 
   902  060E                     	;# 
   903  060F                     	;# 
   904  0610                     	;# 
   905  0611                     	;# 
   906  0612                     	;# 
   907  0613                     	;# 
   908  0614                     	;# 
   909  0616                     	;# 
   910  0617                     	;# 
   911  0618                     	;# 
   912  0619                     	;# 
   913  061A                     	;# 
   914  061B                     	;# 
   915  061C                     	;# 
   916  061D                     	;# 
   917  061E                     	;# 
   918  068C                     	;# 
   919  068D                     	;# 
   920  068E                     	;# 
   921  068F                     	;# 
   922  0690                     	;# 
   923  0691                     	;# 
   924  0692                     	;# 
   925  0693                     	;# 
   926  0694                     	;# 
   927  070C                     	;# 
   928  070D                     	;# 
   929  070E                     	;# 
   930  070F                     	;# 
   931  0710                     	;# 
   932  0711                     	;# 
   933  0712                     	;# 
   934  0713                     	;# 
   935  0714                     	;# 
   936  0716                     	;# 
   937  0717                     	;# 
   938  0718                     	;# 
   939  0719                     	;# 
   940  071A                     	;# 
   941  071B                     	;# 
   942  071C                     	;# 
   943  071D                     	;# 
   944  071E                     	;# 
   945  0796                     	;# 
   946  0797                     	;# 
   947  0798                     	;# 
   948  0799                     	;# 
   949  079A                     	;# 
   950  079B                     	;# 
   951  080C                     	;# 
   952  080D                     	;# 
   953  080E                     	;# 
   954  080F                     	;# 
   955  0810                     	;# 
   956  0811                     	;# 
   957  0812                     	;# 
   958  0813                     	;# 
   959  0814                     	;# 
   960  081A                     	;# 
   961  081B                     	;# 
   962  081C                     	;# 
   963  081D                     	;# 
   964  081E                     	;# 
   965  081F                     	;# 
   966  088C                     	;# 
   967  088D                     	;# 
   968  088E                     	;# 
   969  088F                     	;# 
   970  0890                     	;# 
   971  0891                     	;# 
   972  0892                     	;# 
   973  0893                     	;# 
   974  0895                     	;# 
   975  0896                     	;# 
   976  0897                     	;# 
   977  0898                     	;# 
   978  0899                     	;# 
   979  089A                     	;# 
   980  089B                     	;# 
   981  090C                     	;# 
   982  090E                     	;# 
   983  090F                     	;# 
   984  091F                     	;# 
   985  091F                     	;# 
   986  098F                     	;# 
   987  098F                     	;# 
   988  0990                     	;# 
   989  0991                     	;# 
   990  0992                     	;# 
   991  0993                     	;# 
   992  0994                     	;# 
   993  0995                     	;# 
   994  0996                     	;# 
   995  0997                     	;# 
   996  0E0F                     	;# 
   997  0E10                     	;# 
   998  0E11                     	;# 
   999  0E12                     	;# 
  1000  0E13                     	;# 
  1001  0E14                     	;# 
  1002  0E15                     	;# 
  1003  0E16                     	;# 
  1004  0E17                     	;# 
  1005  0E18                     	;# 
  1006  0E19                     	;# 
  1007  0E1A                     	;# 
  1008  0E1B                     	;# 
  1009  0E1C                     	;# 
  1010  0E1D                     	;# 
  1011  0E1E                     	;# 
  1012  0E1F                     	;# 
  1013  0E20                     	;# 
  1014  0E21                     	;# 
  1015  0E22                     	;# 
  1016  0E23                     	;# 
  1017  0E24                     	;# 
  1018  0E25                     	;# 
  1019  0E26                     	;# 
  1020  0E27                     	;# 
  1021  0E28                     	;# 
  1022  0E29                     	;# 
  1023  0E2A                     	;# 
  1024  0E2B                     	;# 
  1025  0E2C                     	;# 
  1026  0E2D                     	;# 
  1027  0E2E                     	;# 
  1028  0E2F                     	;# 
  1029  0E30                     	;# 
  1030  0E31                     	;# 
  1031  0E32                     	;# 
  1032  0E33                     	;# 
  1033  0E34                     	;# 
  1034  0E35                     	;# 
  1035  0E36                     	;# 
  1036  0E37                     	;# 
  1037  0E8F                     	;# 
  1038  0E90                     	;# 
  1039  0E91                     	;# 
  1040  0E92                     	;# 
  1041  0E93                     	;# 
  1042  0E94                     	;# 
  1043  0E95                     	;# 
  1044  0E96                     	;# 
  1045  0E97                     	;# 
  1046  0E9C                     	;# 
  1047  0E9D                     	;# 
  1048  0E9E                     	;# 
  1049  0EA1                     	;# 
  1050  0EA2                     	;# 
  1051  0EA3                     	;# 
  1052  0EA4                     	;# 
  1053  0EA5                     	;# 
  1054  0EA9                     	;# 
  1055  0EAA                     	;# 
  1056  0EAB                     	;# 
  1057  0EAC                     	;# 
  1058  0EB1                     	;# 
  1059  0EB2                     	;# 
  1060  0EB3                     	;# 
  1061  0EB8                     	;# 
  1062  0EB9                     	;# 
  1063  0EBA                     	;# 
  1064  0EBB                     	;# 
  1065  0EBC                     	;# 
  1066  0EBD                     	;# 
  1067  0EBE                     	;# 
  1068  0EC3                     	;# 
  1069  0EC5                     	;# 
  1070  0EC6                     	;# 
  1071  0EC7                     	;# 
  1072  0EC8                     	;# 
  1073  0EC9                     	;# 
  1074  0ECA                     	;# 
  1075  0ECB                     	;# 
  1076  0ECC                     	;# 
  1077  0F10                     	;# 
  1078  0F11                     	;# 
  1079  0F12                     	;# 
  1080  0F13                     	;# 
  1081  0F14                     	;# 
  1082  0F15                     	;# 
  1083  0F16                     	;# 
  1084  0F17                     	;# 
  1085  0F18                     	;# 
  1086  0F19                     	;# 
  1087  0F1A                     	;# 
  1088  0F1B                     	;# 
  1089  0F1C                     	;# 
  1090  0F1D                     	;# 
  1091  0F1E                     	;# 
  1092  0F1F                     	;# 
  1093  0F20                     	;# 
  1094  0F21                     	;# 
  1095  0F22                     	;# 
  1096  0F23                     	;# 
  1097  0F24                     	;# 
  1098  0F25                     	;# 
  1099  0F26                     	;# 
  1100  0F27                     	;# 
  1101  0F38                     	;# 
  1102  0F39                     	;# 
  1103  0F3A                     	;# 
  1104  0F3B                     	;# 
  1105  0F3C                     	;# 
  1106  0F3D                     	;# 
  1107  0F3E                     	;# 
  1108  0F3F                     	;# 
  1109  0F40                     	;# 
  1110  0F41                     	;# 
  1111  0F43                     	;# 
  1112  0F44                     	;# 
  1113  0F45                     	;# 
  1114  0F46                     	;# 
  1115  0F47                     	;# 
  1116  0F48                     	;# 
  1117  0F49                     	;# 
  1118  0F4A                     	;# 
  1119  0F4B                     	;# 
  1120  0F4C                     	;# 
  1121  0F4E                     	;# 
  1122  0F4F                     	;# 
  1123  0F50                     	;# 
  1124  0F51                     	;# 
  1125  0F52                     	;# 
  1126  0F53                     	;# 
  1127  0F54                     	;# 
  1128  0F55                     	;# 
  1129  0F56                     	;# 
  1130  0F57                     	;# 
  1131  0F65                     	;# 
  1132  0F68                     	;# 
  1133  0F69                     	;# 
  1134  0F6A                     	;# 
  1135  0F6B                     	;# 
  1136  0FE4                     	;# 
  1137  0FE5                     	;# 
  1138  0FE6                     	;# 
  1139  0FE7                     	;# 
  1140  0FE8                     	;# 
  1141  0FE9                     	;# 
  1142  0FEA                     	;# 
  1143  0FEB                     	;# 
  1144  0FED                     	;# 
  1145  0FEE                     	;# 
  1146  0FEF                     	;# 
  1147  0000                     	;# 
  1148  0001                     	;# 
  1149  0002                     	;# 
  1150  0003                     	;# 
  1151  0004                     	;# 
  1152  0005                     	;# 
  1153  0006                     	;# 
  1154  0007                     	;# 
  1155  0008                     	;# 
  1156  0009                     	;# 
  1157  000A                     	;# 
  1158  000B                     	;# 
  1159  000C                     	;# 
  1160  000D                     	;# 
  1161  000E                     	;# 
  1162  0010                     	;# 
  1163  0011                     	;# 
  1164  0012                     	;# 
  1165  0013                     	;# 
  1166  0016                     	;# 
  1167  0017                     	;# 
  1168  0018                     	;# 
  1169  001C                     	;# 
  1170  001C                     	;# 
  1171  001D                     	;# 
  1172  001D                     	;# 
  1173  001E                     	;# 
  1174  001F                     	;# 
  1175  008C                     	;# 
  1176  008C                     	;# 
  1177  008D                     	;# 
  1178  008E                     	;# 
  1179  008E                     	;# 
  1180  008F                     	;# 
  1181  0090                     	;# 
  1182  0090                     	;# 
  1183  0091                     	;# 
  1184  0093                     	;# 
  1185  0094                     	;# 
  1186  0095                     	;# 
  1187  0096                     	;# 
  1188  0097                     	;# 
  1189  0098                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010D                     	;# 
  1198  010E                     	;# 
  1199  010E                     	;# 
  1200  010F                     	;# 
  1201  0110                     	;# 
  1202  0110                     	;# 
  1203  0111                     	;# 
  1204  0112                     	;# 
  1205  0112                     	;# 
  1206  0113                     	;# 
  1207  0114                     	;# 
  1208  0114                     	;# 
  1209  0115                     	;# 
  1210  0116                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  0119                     	;# 
  1214  0119                     	;# 
  1215  0119                     	;# 
  1216  011A                     	;# 
  1217  011A                     	;# 
  1218  011A                     	;# 
  1219  011B                     	;# 
  1220  011B                     	;# 
  1221  011B                     	;# 
  1222  011B                     	;# 
  1223  011B                     	;# 
  1224  011C                     	;# 
  1225  011C                     	;# 
  1226  011C                     	;# 
  1227  011D                     	;# 
  1228  011D                     	;# 
  1229  011D                     	;# 
  1230  011E                     	;# 
  1231  011E                     	;# 
  1232  011E                     	;# 
  1233  011F                     	;# 
  1234  011F                     	;# 
  1235  011F                     	;# 
  1236  011F                     	;# 
  1237  011F                     	;# 
  1238  018C                     	;# 
  1239  018D                     	;# 
  1240  018E                     	;# 
  1241  018F                     	;# 
  1242  0190                     	;# 
  1243  0191                     	;# 
  1244  0192                     	;# 
  1245  0196                     	;# 
  1246  0197                     	;# 
  1247  0198                     	;# 
  1248  0199                     	;# 
  1249  019A                     	;# 
  1250  019B                     	;# 
  1251  019C                     	;# 
  1252  020C                     	;# 
  1253  020C                     	;# 
  1254  020D                     	;# 
  1255  020E                     	;# 
  1256  020F                     	;# 
  1257  020F                     	;# 
  1258  0210                     	;# 
  1259  0210                     	;# 
  1260  0211                     	;# 
  1261  0211                     	;# 
  1262  0212                     	;# 
  1263  0212                     	;# 
  1264  0213                     	;# 
  1265  0214                     	;# 
  1266  0215                     	;# 
  1267  0215                     	;# 
  1268  0216                     	;# 
  1269  0216                     	;# 
  1270  0217                     	;# 
  1271  0217                     	;# 
  1272  0218                     	;# 
  1273  0218                     	;# 
  1274  0219                     	;# 
  1275  021A                     	;# 
  1276  021B                     	;# 
  1277  021B                     	;# 
  1278  021C                     	;# 
  1279  021C                     	;# 
  1280  021D                     	;# 
  1281  021D                     	;# 
  1282  021E                     	;# 
  1283  021F                     	;# 
  1284  028C                     	;# 
  1285  028C                     	;# 
  1286  028D                     	;# 
  1287  028D                     	;# 
  1288  028E                     	;# 
  1289  028F                     	;# 
  1290  0290                     	;# 
  1291  0290                     	;# 
  1292  0291                     	;# 
  1293  0292                     	;# 
  1294  0292                     	;# 
  1295  0293                     	;# 
  1296  0293                     	;# 
  1297  0294                     	;# 
  1298  0295                     	;# 
  1299  0296                     	;# 
  1300  0296                     	;# 
  1301  0297                     	;# 
  1302  0298                     	;# 
  1303  0298                     	;# 
  1304  0299                     	;# 
  1305  0299                     	;# 
  1306  029A                     	;# 
  1307  029B                     	;# 
  1308  029C                     	;# 
  1309  029C                     	;# 
  1310  029D                     	;# 
  1311  030C                     	;# 
  1312  030C                     	;# 
  1313  030D                     	;# 
  1314  030E                     	;# 
  1315  030F                     	;# 
  1316  0310                     	;# 
  1317  0310                     	;# 
  1318  0311                     	;# 
  1319  0312                     	;# 
  1320  0313                     	;# 
  1321  0314                     	;# 
  1322  0314                     	;# 
  1323  0315                     	;# 
  1324  0316                     	;# 
  1325  0317                     	;# 
  1326  0318                     	;# 
  1327  0318                     	;# 
  1328  0319                     	;# 
  1329  031A                     	;# 
  1330  031B                     	;# 
  1331  031C                     	;# 
  1332  031C                     	;# 
  1333  031D                     	;# 
  1334  031E                     	;# 
  1335  031F                     	;# 
  1336  038C                     	;# 
  1337  038D                     	;# 
  1338  038E                     	;# 
  1339  0390                     	;# 
  1340  0391                     	;# 
  1341  0392                     	;# 
  1342  040C                     	;# 
  1343  040D                     	;# 
  1344  040E                     	;# 
  1345  040F                     	;# 
  1346  0410                     	;# 
  1347  0411                     	;# 
  1348  0416                     	;# 
  1349  0416                     	;# 
  1350  0417                     	;# 
  1351  0418                     	;# 
  1352  0418                     	;# 
  1353  0419                     	;# 
  1354  041A                     	;# 
  1355  041A                     	;# 
  1356  041B                     	;# 
  1357  041C                     	;# 
  1358  041C                     	;# 
  1359  041D                     	;# 
  1360  041E                     	;# 
  1361  041F                     	;# 
  1362  048C                     	;# 
  1363  048C                     	;# 
  1364  048D                     	;# 
  1365  048E                     	;# 
  1366  048F                     	;# 
  1367  048F                     	;# 
  1368  0490                     	;# 
  1369  0491                     	;# 
  1370  0492                     	;# 
  1371  0492                     	;# 
  1372  0493                     	;# 
  1373  0494                     	;# 
  1374  0495                     	;# 
  1375  0495                     	;# 
  1376  0496                     	;# 
  1377  0497                     	;# 
  1378  0498                     	;# 
  1379  0499                     	;# 
  1380  049A                     	;# 
  1381  049B                     	;# 
  1382  049C                     	;# 
  1383  049D                     	;# 
  1384  050C                     	;# 
  1385  050C                     	;# 
  1386  050D                     	;# 
  1387  050E                     	;# 
  1388  050F                     	;# 
  1389  050F                     	;# 
  1390  0510                     	;# 
  1391  0511                     	;# 
  1392  0512                     	;# 
  1393  0512                     	;# 
  1394  0513                     	;# 
  1395  0514                     	;# 
  1396  0515                     	;# 
  1397  0515                     	;# 
  1398  0516                     	;# 
  1399  0517                     	;# 
  1400  0518                     	;# 
  1401  0519                     	;# 
  1402  051A                     	;# 
  1403  051B                     	;# 
  1404  051C                     	;# 
  1405  051D                     	;# 
  1406  058C                     	;# 
  1407  058C                     	;# 
  1408  058D                     	;# 
  1409  058E                     	;# 
  1410  058F                     	;# 
  1411  058F                     	;# 
  1412  0590                     	;# 
  1413  0591                     	;# 
  1414  0592                     	;# 
  1415  0593                     	;# 
  1416  060C                     	;# 
  1417  060D                     	;# 
  1418  060E                     	;# 
  1419  060F                     	;# 
  1420  0610                     	;# 
  1421  0611                     	;# 
  1422  0612                     	;# 
  1423  0613                     	;# 
  1424  0614                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061D                     	;# 
  1433  061E                     	;# 
  1434  068C                     	;# 
  1435  068D                     	;# 
  1436  068E                     	;# 
  1437  068F                     	;# 
  1438  0690                     	;# 
  1439  0691                     	;# 
  1440  0692                     	;# 
  1441  0693                     	;# 
  1442  0694                     	;# 
  1443  070C                     	;# 
  1444  070D                     	;# 
  1445  070E                     	;# 
  1446  070F                     	;# 
  1447  0710                     	;# 
  1448  0711                     	;# 
  1449  0712                     	;# 
  1450  0713                     	;# 
  1451  0714                     	;# 
  1452  0716                     	;# 
  1453  0717                     	;# 
  1454  0718                     	;# 
  1455  0719                     	;# 
  1456  071A                     	;# 
  1457  071B                     	;# 
  1458  071C                     	;# 
  1459  071D                     	;# 
  1460  071E                     	;# 
  1461  0796                     	;# 
  1462  0797                     	;# 
  1463  0798                     	;# 
  1464  0799                     	;# 
  1465  079A                     	;# 
  1466  079B                     	;# 
  1467  080C                     	;# 
  1468  080D                     	;# 
  1469  080E                     	;# 
  1470  080F                     	;# 
  1471  0810                     	;# 
  1472  0811                     	;# 
  1473  0812                     	;# 
  1474  0813                     	;# 
  1475  0814                     	;# 
  1476  081A                     	;# 
  1477  081B                     	;# 
  1478  081C                     	;# 
  1479  081D                     	;# 
  1480  081E                     	;# 
  1481  081F                     	;# 
  1482  088C                     	;# 
  1483  088D                     	;# 
  1484  088E                     	;# 
  1485  088F                     	;# 
  1486  0890                     	;# 
  1487  0891                     	;# 
  1488  0892                     	;# 
  1489  0893                     	;# 
  1490  0895                     	;# 
  1491  0896                     	;# 
  1492  0897                     	;# 
  1493  0898                     	;# 
  1494  0899                     	;# 
  1495  089A                     	;# 
  1496  089B                     	;# 
  1497  090C                     	;# 
  1498  090E                     	;# 
  1499  090F                     	;# 
  1500  091F                     	;# 
  1501  091F                     	;# 
  1502  098F                     	;# 
  1503  098F                     	;# 
  1504  0990                     	;# 
  1505  0991                     	;# 
  1506  0992                     	;# 
  1507  0993                     	;# 
  1508  0994                     	;# 
  1509  0995                     	;# 
  1510  0996                     	;# 
  1511  0997                     	;# 
  1512  0E0F                     	;# 
  1513  0E10                     	;# 
  1514  0E11                     	;# 
  1515  0E12                     	;# 
  1516  0E13                     	;# 
  1517  0E14                     	;# 
  1518  0E15                     	;# 
  1519  0E16                     	;# 
  1520  0E17                     	;# 
  1521  0E18                     	;# 
  1522  0E19                     	;# 
  1523  0E1A                     	;# 
  1524  0E1B                     	;# 
  1525  0E1C                     	;# 
  1526  0E1D                     	;# 
  1527  0E1E                     	;# 
  1528  0E1F                     	;# 
  1529  0E20                     	;# 
  1530  0E21                     	;# 
  1531  0E22                     	;# 
  1532  0E23                     	;# 
  1533  0E24                     	;# 
  1534  0E25                     	;# 
  1535  0E26                     	;# 
  1536  0E27                     	;# 
  1537  0E28                     	;# 
  1538  0E29                     	;# 
  1539  0E2A                     	;# 
  1540  0E2B                     	;# 
  1541  0E2C                     	;# 
  1542  0E2D                     	;# 
  1543  0E2E                     	;# 
  1544  0E2F                     	;# 
  1545  0E30                     	;# 
  1546  0E31                     	;# 
  1547  0E32                     	;# 
  1548  0E33                     	;# 
  1549  0E34                     	;# 
  1550  0E35                     	;# 
  1551  0E36                     	;# 
  1552  0E37                     	;# 
  1553  0E8F                     	;# 
  1554  0E90                     	;# 
  1555  0E91                     	;# 
  1556  0E92                     	;# 
  1557  0E93                     	;# 
  1558  0E94                     	;# 
  1559  0E95                     	;# 
  1560  0E96                     	;# 
  1561  0E97                     	;# 
  1562  0E9C                     	;# 
  1563  0E9D                     	;# 
  1564  0E9E                     	;# 
  1565  0EA1                     	;# 
  1566  0EA2                     	;# 
  1567  0EA3                     	;# 
  1568  0EA4                     	;# 
  1569  0EA5                     	;# 
  1570  0EA9                     	;# 
  1571  0EAA                     	;# 
  1572  0EAB                     	;# 
  1573  0EAC                     	;# 
  1574  0EB1                     	;# 
  1575  0EB2                     	;# 
  1576  0EB3                     	;# 
  1577  0EB8                     	;# 
  1578  0EB9                     	;# 
  1579  0EBA                     	;# 
  1580  0EBB                     	;# 
  1581  0EBC                     	;# 
  1582  0EBD                     	;# 
  1583  0EBE                     	;# 
  1584  0EC3                     	;# 
  1585  0EC5                     	;# 
  1586  0EC6                     	;# 
  1587  0EC7                     	;# 
  1588  0EC8                     	;# 
  1589  0EC9                     	;# 
  1590  0ECA                     	;# 
  1591  0ECB                     	;# 
  1592  0ECC                     	;# 
  1593  0F10                     	;# 
  1594  0F11                     	;# 
  1595  0F12                     	;# 
  1596  0F13                     	;# 
  1597  0F14                     	;# 
  1598  0F15                     	;# 
  1599  0F16                     	;# 
  1600  0F17                     	;# 
  1601  0F18                     	;# 
  1602  0F19                     	;# 
  1603  0F1A                     	;# 
  1604  0F1B                     	;# 
  1605  0F1C                     	;# 
  1606  0F1D                     	;# 
  1607  0F1E                     	;# 
  1608  0F1F                     	;# 
  1609  0F20                     	;# 
  1610  0F21                     	;# 
  1611  0F22                     	;# 
  1612  0F23                     	;# 
  1613  0F24                     	;# 
  1614  0F25                     	;# 
  1615  0F26                     	;# 
  1616  0F27                     	;# 
  1617  0F38                     	;# 
  1618  0F39                     	;# 
  1619  0F3A                     	;# 
  1620  0F3B                     	;# 
  1621  0F3C                     	;# 
  1622  0F3D                     	;# 
  1623  0F3E                     	;# 
  1624  0F3F                     	;# 
  1625  0F40                     	;# 
  1626  0F41                     	;# 
  1627  0F43                     	;# 
  1628  0F44                     	;# 
  1629  0F45                     	;# 
  1630  0F46                     	;# 
  1631  0F47                     	;# 
  1632  0F48                     	;# 
  1633  0F49                     	;# 
  1634  0F4A                     	;# 
  1635  0F4B                     	;# 
  1636  0F4C                     	;# 
  1637  0F4E                     	;# 
  1638  0F4F                     	;# 
  1639  0F50                     	;# 
  1640  0F51                     	;# 
  1641  0F52                     	;# 
  1642  0F53                     	;# 
  1643  0F54                     	;# 
  1644  0F55                     	;# 
  1645  0F56                     	;# 
  1646  0F57                     	;# 
  1647  0F65                     	;# 
  1648  0F68                     	;# 
  1649  0F69                     	;# 
  1650  0F6A                     	;# 
  1651  0F6B                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE9                     	;# 
  1658  0FEA                     	;# 
  1659  0FEB                     	;# 
  1660  0FED                     	;# 
  1661  0FEE                     	;# 
  1662  0FEF                     	;# 
  1663  0000                     	;# 
  1664  0001                     	;# 
  1665  0002                     	;# 
  1666  0003                     	;# 
  1667  0004                     	;# 
  1668  0005                     	;# 
  1669  0006                     	;# 
  1670  0007                     	;# 
  1671  0008                     	;# 
  1672  0009                     	;# 
  1673  000A                     	;# 
  1674  000B                     	;# 
  1675  000C                     	;# 
  1676  000D                     	;# 
  1677  000E                     	;# 
  1678  0010                     	;# 
  1679  0011                     	;# 
  1680  0012                     	;# 
  1681  0013                     	;# 
  1682  0016                     	;# 
  1683  0017                     	;# 
  1684  0018                     	;# 
  1685  001C                     	;# 
  1686  001C                     	;# 
  1687  001D                     	;# 
  1688  001D                     	;# 
  1689  001E                     	;# 
  1690  001F                     	;# 
  1691  008C                     	;# 
  1692  008C                     	;# 
  1693  008D                     	;# 
  1694  008E                     	;# 
  1695  008E                     	;# 
  1696  008F                     	;# 
  1697  0090                     	;# 
  1698  0090                     	;# 
  1699  0091                     	;# 
  1700  0093                     	;# 
  1701  0094                     	;# 
  1702  0095                     	;# 
  1703  0096                     	;# 
  1704  0097                     	;# 
  1705  0098                     	;# 
  1706  0099                     	;# 
  1707  009A                     	;# 
  1708  009B                     	;# 
  1709  009C                     	;# 
  1710  009D                     	;# 
  1711  009E                     	;# 
  1712  010C                     	;# 
  1713  010D                     	;# 
  1714  010E                     	;# 
  1715  010E                     	;# 
  1716  010F                     	;# 
  1717  0110                     	;# 
  1718  0110                     	;# 
  1719  0111                     	;# 
  1720  0112                     	;# 
  1721  0112                     	;# 
  1722  0113                     	;# 
  1723  0114                     	;# 
  1724  0114                     	;# 
  1725  0115                     	;# 
  1726  0116                     	;# 
  1727  0116                     	;# 
  1728  0117                     	;# 
  1729  0119                     	;# 
  1730  0119                     	;# 
  1731  0119                     	;# 
  1732  011A                     	;# 
  1733  011A                     	;# 
  1734  011A                     	;# 
  1735  011B                     	;# 
  1736  011B                     	;# 
  1737  011B                     	;# 
  1738  011B                     	;# 
  1739  011B                     	;# 
  1740  011C                     	;# 
  1741  011C                     	;# 
  1742  011C                     	;# 
  1743  011D                     	;# 
  1744  011D                     	;# 
  1745  011D                     	;# 
  1746  011E                     	;# 
  1747  011E                     	;# 
  1748  011E                     	;# 
  1749  011F                     	;# 
  1750  011F                     	;# 
  1751  011F                     	;# 
  1752  011F                     	;# 
  1753  011F                     	;# 
  1754  018C                     	;# 
  1755  018D                     	;# 
  1756  018E                     	;# 
  1757  018F                     	;# 
  1758  0190                     	;# 
  1759  0191                     	;# 
  1760  0192                     	;# 
  1761  0196                     	;# 
  1762  0197                     	;# 
  1763  0198                     	;# 
  1764  0199                     	;# 
  1765  019A                     	;# 
  1766  019B                     	;# 
  1767  019C                     	;# 
  1768  020C                     	;# 
  1769  020C                     	;# 
  1770  020D                     	;# 
  1771  020E                     	;# 
  1772  020F                     	;# 
  1773  020F                     	;# 
  1774  0210                     	;# 
  1775  0210                     	;# 
  1776  0211                     	;# 
  1777  0211                     	;# 
  1778  0212                     	;# 
  1779  0212                     	;# 
  1780  0213                     	;# 
  1781  0214                     	;# 
  1782  0215                     	;# 
  1783  0215                     	;# 
  1784  0216                     	;# 
  1785  0216                     	;# 
  1786  0217                     	;# 
  1787  0217                     	;# 
  1788  0218                     	;# 
  1789  0218                     	;# 
  1790  0219                     	;# 
  1791  021A                     	;# 
  1792  021B                     	;# 
  1793  021B                     	;# 
  1794  021C                     	;# 
  1795  021C                     	;# 
  1796  021D                     	;# 
  1797  021D                     	;# 
  1798  021E                     	;# 
  1799  021F                     	;# 
  1800  028C                     	;# 
  1801  028C                     	;# 
  1802  028D                     	;# 
  1803  028D                     	;# 
  1804  028E                     	;# 
  1805  028F                     	;# 
  1806  0290                     	;# 
  1807  0290                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0293                     	;# 
  1813  0294                     	;# 
  1814  0295                     	;# 
  1815  0296                     	;# 
  1816  0296                     	;# 
  1817  0297                     	;# 
  1818  0298                     	;# 
  1819  0298                     	;# 
  1820  0299                     	;# 
  1821  0299                     	;# 
  1822  029A                     	;# 
  1823  029B                     	;# 
  1824  029C                     	;# 
  1825  029C                     	;# 
  1826  029D                     	;# 
  1827  030C                     	;# 
  1828  030C                     	;# 
  1829  030D                     	;# 
  1830  030E                     	;# 
  1831  030F                     	;# 
  1832  0310                     	;# 
  1833  0310                     	;# 
  1834  0311                     	;# 
  1835  0312                     	;# 
  1836  0313                     	;# 
  1837  0314                     	;# 
  1838  0314                     	;# 
  1839  0315                     	;# 
  1840  0316                     	;# 
  1841  0317                     	;# 
  1842  0318                     	;# 
  1843  0318                     	;# 
  1844  0319                     	;# 
  1845  031A                     	;# 
  1846  031B                     	;# 
  1847  031C                     	;# 
  1848  031C                     	;# 
  1849  031D                     	;# 
  1850  031E                     	;# 
  1851  031F                     	;# 
  1852  038C                     	;# 
  1853  038D                     	;# 
  1854  038E                     	;# 
  1855  0390                     	;# 
  1856  0391                     	;# 
  1857  0392                     	;# 
  1858  040C                     	;# 
  1859  040D                     	;# 
  1860  040E                     	;# 
  1861  040F                     	;# 
  1862  0410                     	;# 
  1863  0411                     	;# 
  1864  0416                     	;# 
  1865  0416                     	;# 
  1866  0417                     	;# 
  1867  0418                     	;# 
  1868  0418                     	;# 
  1869  0419                     	;# 
  1870  041A                     	;# 
  1871  041A                     	;# 
  1872  041B                     	;# 
  1873  041C                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  041F                     	;# 
  1878  048C                     	;# 
  1879  048C                     	;# 
  1880  048D                     	;# 
  1881  048E                     	;# 
  1882  048F                     	;# 
  1883  048F                     	;# 
  1884  0490                     	;# 
  1885  0491                     	;# 
  1886  0492                     	;# 
  1887  0492                     	;# 
  1888  0493                     	;# 
  1889  0494                     	;# 
  1890  0495                     	;# 
  1891  0495                     	;# 
  1892  0496                     	;# 
  1893  0497                     	;# 
  1894  0498                     	;# 
  1895  0499                     	;# 
  1896  049A                     	;# 
  1897  049B                     	;# 
  1898  049C                     	;# 
  1899  049D                     	;# 
  1900  050C                     	;# 
  1901  050C                     	;# 
  1902  050D                     	;# 
  1903  050E                     	;# 
  1904  050F                     	;# 
  1905  050F                     	;# 
  1906  0510                     	;# 
  1907  0511                     	;# 
  1908  0512                     	;# 
  1909  0512                     	;# 
  1910  0513                     	;# 
  1911  0514                     	;# 
  1912  0515                     	;# 
  1913  0515                     	;# 
  1914  0516                     	;# 
  1915  0517                     	;# 
  1916  0518                     	;# 
  1917  0519                     	;# 
  1918  051A                     	;# 
  1919  051B                     	;# 
  1920  051C                     	;# 
  1921  051D                     	;# 
  1922  058C                     	;# 
  1923  058C                     	;# 
  1924  058D                     	;# 
  1925  058E                     	;# 
  1926  058F                     	;# 
  1927  058F                     	;# 
  1928  0590                     	;# 
  1929  0591                     	;# 
  1930  0592                     	;# 
  1931  0593                     	;# 
  1932  060C                     	;# 
  1933  060D                     	;# 
  1934  060E                     	;# 
  1935  060F                     	;# 
  1936  0610                     	;# 
  1937  0611                     	;# 
  1938  0612                     	;# 
  1939  0613                     	;# 
  1940  0614                     	;# 
  1941  0616                     	;# 
  1942  0617                     	;# 
  1943  0618                     	;# 
  1944  0619                     	;# 
  1945  061A                     	;# 
  1946  061B                     	;# 
  1947  061C                     	;# 
  1948  061D                     	;# 
  1949  061E                     	;# 
  1950  068C                     	;# 
  1951  068D                     	;# 
  1952  068E                     	;# 
  1953  068F                     	;# 
  1954  0690                     	;# 
  1955  0691                     	;# 
  1956  0692                     	;# 
  1957  0693                     	;# 
  1958  0694                     	;# 
  1959  070C                     	;# 
  1960  070D                     	;# 
  1961  070E                     	;# 
  1962  070F                     	;# 
  1963  0710                     	;# 
  1964  0711                     	;# 
  1965  0712                     	;# 
  1966  0713                     	;# 
  1967  0714                     	;# 
  1968  0716                     	;# 
  1969  0717                     	;# 
  1970  0718                     	;# 
  1971  0719                     	;# 
  1972  071A                     	;# 
  1973  071B                     	;# 
  1974  071C                     	;# 
  1975  071D                     	;# 
  1976  071E                     	;# 
  1977  0796                     	;# 
  1978  0797                     	;# 
  1979  0798                     	;# 
  1980  0799                     	;# 
  1981  079A                     	;# 
  1982  079B                     	;# 
  1983  080C                     	;# 
  1984  080D                     	;# 
  1985  080E                     	;# 
  1986  080F                     	;# 
  1987  0810                     	;# 
  1988  0811                     	;# 
  1989  0812                     	;# 
  1990  0813                     	;# 
  1991  0814                     	;# 
  1992  081A                     	;# 
  1993  081B                     	;# 
  1994  081C                     	;# 
  1995  081D                     	;# 
  1996  081E                     	;# 
  1997  081F                     	;# 
  1998  088C                     	;# 
  1999  088D                     	;# 
  2000  088E                     	;# 
  2001  088F                     	;# 
  2002  0890                     	;# 
  2003  0891                     	;# 
  2004  0892                     	;# 
  2005  0893                     	;# 
  2006  0895                     	;# 
  2007  0896                     	;# 
  2008  0897                     	;# 
  2009  0898                     	;# 
  2010  0899                     	;# 
  2011  089A                     	;# 
  2012  089B                     	;# 
  2013  090C                     	;# 
  2014  090E                     	;# 
  2015  090F                     	;# 
  2016  091F                     	;# 
  2017  091F                     	;# 
  2018  098F                     	;# 
  2019  098F                     	;# 
  2020  0990                     	;# 
  2021  0991                     	;# 
  2022  0992                     	;# 
  2023  0993                     	;# 
  2024  0994                     	;# 
  2025  0995                     	;# 
  2026  0996                     	;# 
  2027  0997                     	;# 
  2028  0E0F                     	;# 
  2029  0E10                     	;# 
  2030  0E11                     	;# 
  2031  0E12                     	;# 
  2032  0E13                     	;# 
  2033  0E14                     	;# 
  2034  0E15                     	;# 
  2035  0E16                     	;# 
  2036  0E17                     	;# 
  2037  0E18                     	;# 
  2038  0E19                     	;# 
  2039  0E1A                     	;# 
  2040  0E1B                     	;# 
  2041  0E1C                     	;# 
  2042  0E1D                     	;# 
  2043  0E1E                     	;# 
  2044  0E1F                     	;# 
  2045  0E20                     	;# 
  2046  0E21                     	;# 
  2047  0E22                     	;# 
  2048  0E23                     	;# 
  2049  0E24                     	;# 
  2050  0E25                     	;# 
  2051  0E26                     	;# 
  2052  0E27                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E30                     	;# 
  2062  0E31                     	;# 
  2063  0E32                     	;# 
  2064  0E33                     	;# 
  2065  0E34                     	;# 
  2066  0E35                     	;# 
  2067  0E36                     	;# 
  2068  0E37                     	;# 
  2069  0E8F                     	;# 
  2070  0E90                     	;# 
  2071  0E91                     	;# 
  2072  0E92                     	;# 
  2073  0E93                     	;# 
  2074  0E94                     	;# 
  2075  0E95                     	;# 
  2076  0E96                     	;# 
  2077  0E97                     	;# 
  2078  0E9C                     	;# 
  2079  0E9D                     	;# 
  2080  0E9E                     	;# 
  2081  0EA1                     	;# 
  2082  0EA2                     	;# 
  2083  0EA3                     	;# 
  2084  0EA4                     	;# 
  2085  0EA5                     	;# 
  2086  0EA9                     	;# 
  2087  0EAA                     	;# 
  2088  0EAB                     	;# 
  2089  0EAC                     	;# 
  2090  0EB1                     	;# 
  2091  0EB2                     	;# 
  2092  0EB3                     	;# 
  2093  0EB8                     	;# 
  2094  0EB9                     	;# 
  2095  0EBA                     	;# 
  2096  0EBB                     	;# 
  2097  0EBC                     	;# 
  2098  0EBD                     	;# 
  2099  0EBE                     	;# 
  2100  0EC3                     	;# 
  2101  0EC5                     	;# 
  2102  0EC6                     	;# 
  2103  0EC7                     	;# 
  2104  0EC8                     	;# 
  2105  0EC9                     	;# 
  2106  0ECA                     	;# 
  2107  0ECB                     	;# 
  2108  0ECC                     	;# 
  2109  0F10                     	;# 
  2110  0F11                     	;# 
  2111  0F12                     	;# 
  2112  0F13                     	;# 
  2113  0F14                     	;# 
  2114  0F15                     	;# 
  2115  0F16                     	;# 
  2116  0F17                     	;# 
  2117  0F18                     	;# 
  2118  0F19                     	;# 
  2119  0F1A                     	;# 
  2120  0F1B                     	;# 
  2121  0F1C                     	;# 
  2122  0F1D                     	;# 
  2123  0F1E                     	;# 
  2124  0F1F                     	;# 
  2125  0F20                     	;# 
  2126  0F21                     	;# 
  2127  0F22                     	;# 
  2128  0F23                     	;# 
  2129  0F24                     	;# 
  2130  0F25                     	;# 
  2131  0F26                     	;# 
  2132  0F27                     	;# 
  2133  0F38                     	;# 
  2134  0F39                     	;# 
  2135  0F3A                     	;# 
  2136  0F3B                     	;# 
  2137  0F3C                     	;# 
  2138  0F3D                     	;# 
  2139  0F3E                     	;# 
  2140  0F3F                     	;# 
  2141  0F40                     	;# 
  2142  0F41                     	;# 
  2143  0F43                     	;# 
  2144  0F44                     	;# 
  2145  0F45                     	;# 
  2146  0F46                     	;# 
  2147  0F47                     	;# 
  2148  0F48                     	;# 
  2149  0F49                     	;# 
  2150  0F4A                     	;# 
  2151  0F4B                     	;# 
  2152  0F4C                     	;# 
  2153  0F4E                     	;# 
  2154  0F4F                     	;# 
  2155  0F50                     	;# 
  2156  0F51                     	;# 
  2157  0F52                     	;# 
  2158  0F53                     	;# 
  2159  0F54                     	;# 
  2160  0F55                     	;# 
  2161  0F56                     	;# 
  2162  0F57                     	;# 
  2163  0F65                     	;# 
  2164  0F68                     	;# 
  2165  0F69                     	;# 
  2166  0F6A                     	;# 
  2167  0F6B                     	;# 
  2168  0FE4                     	;# 
  2169  0FE5                     	;# 
  2170  0FE6                     	;# 
  2171  0FE7                     	;# 
  2172  0FE8                     	;# 
  2173  0FE9                     	;# 
  2174  0FEA                     	;# 
  2175  0FEB                     	;# 
  2176  0FED                     	;# 
  2177  0FEE                     	;# 
  2178  0FEF                     	;# 
  2179  0000                     	;# 
  2180  0001                     	;# 
  2181  0002                     	;# 
  2182  0003                     	;# 
  2183  0004                     	;# 
  2184  0005                     	;# 
  2185  0006                     	;# 
  2186  0007                     	;# 
  2187  0008                     	;# 
  2188  0009                     	;# 
  2189  000A                     	;# 
  2190  000B                     	;# 
  2191  000C                     	;# 
  2192  000D                     	;# 
  2193  000E                     	;# 
  2194  0010                     	;# 
  2195  0011                     	;# 
  2196  0012                     	;# 
  2197  0013                     	;# 
  2198  0016                     	;# 
  2199  0017                     	;# 
  2200  0018                     	;# 
  2201  001C                     	;# 
  2202  001C                     	;# 
  2203  001D                     	;# 
  2204  001D                     	;# 
  2205  001E                     	;# 
  2206  001F                     	;# 
  2207  008C                     	;# 
  2208  008C                     	;# 
  2209  008D                     	;# 
  2210  008E                     	;# 
  2211  008E                     	;# 
  2212  008F                     	;# 
  2213  0090                     	;# 
  2214  0090                     	;# 
  2215  0091                     	;# 
  2216  0093                     	;# 
  2217  0094                     	;# 
  2218  0095                     	;# 
  2219  0096                     	;# 
  2220  0097                     	;# 
  2221  0098                     	;# 
  2222  0099                     	;# 
  2223  009A                     	;# 
  2224  009B                     	;# 
  2225  009C                     	;# 
  2226  009D                     	;# 
  2227  009E                     	;# 
  2228  010C                     	;# 
  2229  010D                     	;# 
  2230  010E                     	;# 
  2231  010E                     	;# 
  2232  010F                     	;# 
  2233  0110                     	;# 
  2234  0110                     	;# 
  2235  0111                     	;# 
  2236  0112                     	;# 
  2237  0112                     	;# 
  2238  0113                     	;# 
  2239  0114                     	;# 
  2240  0114                     	;# 
  2241  0115                     	;# 
  2242  0116                     	;# 
  2243  0116                     	;# 
  2244  0117                     	;# 
  2245  0119                     	;# 
  2246  0119                     	;# 
  2247  0119                     	;# 
  2248  011A                     	;# 
  2249  011A                     	;# 
  2250  011A                     	;# 
  2251  011B                     	;# 
  2252  011B                     	;# 
  2253  011B                     	;# 
  2254  011B                     	;# 
  2255  011B                     	;# 
  2256  011C                     	;# 
  2257  011C                     	;# 
  2258  011C                     	;# 
  2259  011D                     	;# 
  2260  011D                     	;# 
  2261  011D                     	;# 
  2262  011E                     	;# 
  2263  011E                     	;# 
  2264  011E                     	;# 
  2265  011F                     	;# 
  2266  011F                     	;# 
  2267  011F                     	;# 
  2268  011F                     	;# 
  2269  011F                     	;# 
  2270  018C                     	;# 
  2271  018D                     	;# 
  2272  018E                     	;# 
  2273  018F                     	;# 
  2274  0190                     	;# 
  2275  0191                     	;# 
  2276  0192                     	;# 
  2277  0196                     	;# 
  2278  0197                     	;# 
  2279  0198                     	;# 
  2280  0199                     	;# 
  2281  019A                     	;# 
  2282  019B                     	;# 
  2283  019C                     	;# 
  2284  020C                     	;# 
  2285  020C                     	;# 
  2286  020D                     	;# 
  2287  020E                     	;# 
  2288  020F                     	;# 
  2289  020F                     	;# 
  2290  0210                     	;# 
  2291  0210                     	;# 
  2292  0211                     	;# 
  2293  0211                     	;# 
  2294  0212                     	;# 
  2295  0212                     	;# 
  2296  0213                     	;# 
  2297  0214                     	;# 
  2298  0215                     	;# 
  2299  0215                     	;# 
  2300  0216                     	;# 
  2301  0216                     	;# 
  2302  0217                     	;# 
  2303  0217                     	;# 
  2304  0218                     	;# 
  2305  0218                     	;# 
  2306  0219                     	;# 
  2307  021A                     	;# 
  2308  021B                     	;# 
  2309  021B                     	;# 
  2310  021C                     	;# 
  2311  021C                     	;# 
  2312  021D                     	;# 
  2313  021D                     	;# 
  2314  021E                     	;# 
  2315  021F                     	;# 
  2316  028C                     	;# 
  2317  028C                     	;# 
  2318  028D                     	;# 
  2319  028D                     	;# 
  2320  028E                     	;# 
  2321  028F                     	;# 
  2322  0290                     	;# 
  2323  0290                     	;# 
  2324  0291                     	;# 
  2325  0292                     	;# 
  2326  0292                     	;# 
  2327  0293                     	;# 
  2328  0293                     	;# 
  2329  0294                     	;# 
  2330  0295                     	;# 
  2331  0296                     	;# 
  2332  0296                     	;# 
  2333  0297                     	;# 
  2334  0298                     	;# 
  2335  0298                     	;# 
  2336  0299                     	;# 
  2337  0299                     	;# 
  2338  029A                     	;# 
  2339  029B                     	;# 
  2340  029C                     	;# 
  2341  029C                     	;# 
  2342  029D                     	;# 
  2343  030C                     	;# 
  2344  030C                     	;# 
  2345  030D                     	;# 
  2346  030E                     	;# 
  2347  030F                     	;# 
  2348  0310                     	;# 
  2349  0310                     	;# 
  2350  0311                     	;# 
  2351  0312                     	;# 
  2352  0313                     	;# 
  2353  0314                     	;# 
  2354  0314                     	;# 
  2355  0315                     	;# 
  2356  0316                     	;# 
  2357  0317                     	;# 
  2358  0318                     	;# 
  2359  0318                     	;# 
  2360  0319                     	;# 
  2361  031A                     	;# 
  2362  031B                     	;# 
  2363  031C                     	;# 
  2364  031C                     	;# 
  2365  031D                     	;# 
  2366  031E                     	;# 
  2367  031F                     	;# 
  2368  038C                     	;# 
  2369  038D                     	;# 
  2370  038E                     	;# 
  2371  0390                     	;# 
  2372  0391                     	;# 
  2373  0392                     	;# 
  2374  040C                     	;# 
  2375  040D                     	;# 
  2376  040E                     	;# 
  2377  040F                     	;# 
  2378  0410                     	;# 
  2379  0411                     	;# 
  2380  0416                     	;# 
  2381  0416                     	;# 
  2382  0417                     	;# 
  2383  0418                     	;# 
  2384  0418                     	;# 
  2385  0419                     	;# 
  2386  041A                     	;# 
  2387  041A                     	;# 
  2388  041B                     	;# 
  2389  041C                     	;# 
  2390  041C                     	;# 
  2391  041D                     	;# 
  2392  041E                     	;# 
  2393  041F                     	;# 
  2394  048C                     	;# 
  2395  048C                     	;# 
  2396  048D                     	;# 
  2397  048E                     	;# 
  2398  048F                     	;# 
  2399  048F                     	;# 
  2400  0490                     	;# 
  2401  0491                     	;# 
  2402  0492                     	;# 
  2403  0492                     	;# 
  2404  0493                     	;# 
  2405  0494                     	;# 
  2406  0495                     	;# 
  2407  0495                     	;# 
  2408  0496                     	;# 
  2409  0497                     	;# 
  2410  0498                     	;# 
  2411  0499                     	;# 
  2412  049A                     	;# 
  2413  049B                     	;# 
  2414  049C                     	;# 
  2415  049D                     	;# 
  2416  050C                     	;# 
  2417  050C                     	;# 
  2418  050D                     	;# 
  2419  050E                     	;# 
  2420  050F                     	;# 
  2421  050F                     	;# 
  2422  0510                     	;# 
  2423  0511                     	;# 
  2424  0512                     	;# 
  2425  0512                     	;# 
  2426  0513                     	;# 
  2427  0514                     	;# 
  2428  0515                     	;# 
  2429  0515                     	;# 
  2430  0516                     	;# 
  2431  0517                     	;# 
  2432  0518                     	;# 
  2433  0519                     	;# 
  2434  051A                     	;# 
  2435  051B                     	;# 
  2436  051C                     	;# 
  2437  051D                     	;# 
  2438  058C                     	;# 
  2439  058C                     	;# 
  2440  058D                     	;# 
  2441  058E                     	;# 
  2442  058F                     	;# 
  2443  058F                     	;# 
  2444  0590                     	;# 
  2445  0591                     	;# 
  2446  0592                     	;# 
  2447  0593                     	;# 
  2448  060C                     	;# 
  2449  060D                     	;# 
  2450  060E                     	;# 
  2451  060F                     	;# 
  2452  0610                     	;# 
  2453  0611                     	;# 
  2454  0612                     	;# 
  2455  0613                     	;# 
  2456  0614                     	;# 
  2457  0616                     	;# 
  2458  0617                     	;# 
  2459  0618                     	;# 
  2460  0619                     	;# 
  2461  061A                     	;# 
  2462  061B                     	;# 
  2463  061C                     	;# 
  2464  061D                     	;# 
  2465  061E                     	;# 
  2466  068C                     	;# 
  2467  068D                     	;# 
  2468  068E                     	;# 
  2469  068F                     	;# 
  2470  0690                     	;# 
  2471  0691                     	;# 
  2472  0692                     	;# 
  2473  0693                     	;# 
  2474  0694                     	;# 
  2475  070C                     	;# 
  2476  070D                     	;# 
  2477  070E                     	;# 
  2478  070F                     	;# 
  2479  0710                     	;# 
  2480  0711                     	;# 
  2481  0712                     	;# 
  2482  0713                     	;# 
  2483  0714                     	;# 
  2484  0716                     	;# 
  2485  0717                     	;# 
  2486  0718                     	;# 
  2487  0719                     	;# 
  2488  071A                     	;# 
  2489  071B                     	;# 
  2490  071C                     	;# 
  2491  071D                     	;# 
  2492  071E                     	;# 
  2493  0796                     	;# 
  2494  0797                     	;# 
  2495  0798                     	;# 
  2496  0799                     	;# 
  2497  079A                     	;# 
  2498  079B                     	;# 
  2499  080C                     	;# 
  2500  080D                     	;# 
  2501  080E                     	;# 
  2502  080F                     	;# 
  2503  0810                     	;# 
  2504  0811                     	;# 
  2505  0812                     	;# 
  2506  0813                     	;# 
  2507  0814                     	;# 
  2508  081A                     	;# 
  2509  081B                     	;# 
  2510  081C                     	;# 
  2511  081D                     	;# 
  2512  081E                     	;# 
  2513  081F                     	;# 
  2514  088C                     	;# 
  2515  088D                     	;# 
  2516  088E                     	;# 
  2517  088F                     	;# 
  2518  0890                     	;# 
  2519  0891                     	;# 
  2520  0892                     	;# 
  2521  0893                     	;# 
  2522  0895                     	;# 
  2523  0896                     	;# 
  2524  0897                     	;# 
  2525  0898                     	;# 
  2526  0899                     	;# 
  2527  089A                     	;# 
  2528  089B                     	;# 
  2529  090C                     	;# 
  2530  090E                     	;# 
  2531  090F                     	;# 
  2532  091F                     	;# 
  2533  091F                     	;# 
  2534  098F                     	;# 
  2535  098F                     	;# 
  2536  0990                     	;# 
  2537  0991                     	;# 
  2538  0992                     	;# 
  2539  0993                     	;# 
  2540  0994                     	;# 
  2541  0995                     	;# 
  2542  0996                     	;# 
  2543  0997                     	;# 
  2544  0E0F                     	;# 
  2545  0E10                     	;# 
  2546  0E11                     	;# 
  2547  0E12                     	;# 
  2548  0E13                     	;# 
  2549  0E14                     	;# 
  2550  0E15                     	;# 
  2551  0E16                     	;# 
  2552  0E17                     	;# 
  2553  0E18                     	;# 
  2554  0E19                     	;# 
  2555  0E1A                     	;# 
  2556  0E1B                     	;# 
  2557  0E1C                     	;# 
  2558  0E1D                     	;# 
  2559  0E1E                     	;# 
  2560  0E1F                     	;# 
  2561  0E20                     	;# 
  2562  0E21                     	;# 
  2563  0E22                     	;# 
  2564  0E23                     	;# 
  2565  0E24                     	;# 
  2566  0E25                     	;# 
  2567  0E26                     	;# 
  2568  0E27                     	;# 
  2569  0E28                     	;# 
  2570  0E29                     	;# 
  2571  0E2A                     	;# 
  2572  0E2B                     	;# 
  2573  0E2C                     	;# 
  2574  0E2D                     	;# 
  2575  0E2E                     	;# 
  2576  0E2F                     	;# 
  2577  0E30                     	;# 
  2578  0E31                     	;# 
  2579  0E32                     	;# 
  2580  0E33                     	;# 
  2581  0E34                     	;# 
  2582  0E35                     	;# 
  2583  0E36                     	;# 
  2584  0E37                     	;# 
  2585  0E8F                     	;# 
  2586  0E90                     	;# 
  2587  0E91                     	;# 
  2588  0E92                     	;# 
  2589  0E93                     	;# 
  2590  0E94                     	;# 
  2591  0E95                     	;# 
  2592  0E96                     	;# 
  2593  0E97                     	;# 
  2594  0E9C                     	;# 
  2595  0E9D                     	;# 
  2596  0E9E                     	;# 
  2597  0EA1                     	;# 
  2598  0EA2                     	;# 
  2599  0EA3                     	;# 
  2600  0EA4                     	;# 
  2601  0EA5                     	;# 
  2602  0EA9                     	;# 
  2603  0EAA                     	;# 
  2604  0EAB                     	;# 
  2605  0EAC                     	;# 
  2606  0EB1                     	;# 
  2607  0EB2                     	;# 
  2608  0EB3                     	;# 
  2609  0EB8                     	;# 
  2610  0EB9                     	;# 
  2611  0EBA                     	;# 
  2612  0EBB                     	;# 
  2613  0EBC                     	;# 
  2614  0EBD                     	;# 
  2615  0EBE                     	;# 
  2616  0EC3                     	;# 
  2617  0EC5                     	;# 
  2618  0EC6                     	;# 
  2619  0EC7                     	;# 
  2620  0EC8                     	;# 
  2621  0EC9                     	;# 
  2622  0ECA                     	;# 
  2623  0ECB                     	;# 
  2624  0ECC                     	;# 
  2625  0F10                     	;# 
  2626  0F11                     	;# 
  2627  0F12                     	;# 
  2628  0F13                     	;# 
  2629  0F14                     	;# 
  2630  0F15                     	;# 
  2631  0F16                     	;# 
  2632  0F17                     	;# 
  2633  0F18                     	;# 
  2634  0F19                     	;# 
  2635  0F1A                     	;# 
  2636  0F1B                     	;# 
  2637  0F1C                     	;# 
  2638  0F1D                     	;# 
  2639  0F1E                     	;# 
  2640  0F1F                     	;# 
  2641  0F20                     	;# 
  2642  0F21                     	;# 
  2643  0F22                     	;# 
  2644  0F23                     	;# 
  2645  0F24                     	;# 
  2646  0F25                     	;# 
  2647  0F26                     	;# 
  2648  0F27                     	;# 
  2649  0F38                     	;# 
  2650  0F39                     	;# 
  2651  0F3A                     	;# 
  2652  0F3B                     	;# 
  2653  0F3C                     	;# 
  2654  0F3D                     	;# 
  2655  0F3E                     	;# 
  2656  0F3F                     	;# 
  2657  0F40                     	;# 
  2658  0F41                     	;# 
  2659  0F43                     	;# 
  2660  0F44                     	;# 
  2661  0F45                     	;# 
  2662  0F46                     	;# 
  2663  0F47                     	;# 
  2664  0F48                     	;# 
  2665  0F49                     	;# 
  2666  0F4A                     	;# 
  2667  0F4B                     	;# 
  2668  0F4C                     	;# 
  2669  0F4E                     	;# 
  2670  0F4F                     	;# 
  2671  0F50                     	;# 
  2672  0F51                     	;# 
  2673  0F52                     	;# 
  2674  0F53                     	;# 
  2675  0F54                     	;# 
  2676  0F55                     	;# 
  2677  0F56                     	;# 
  2678  0F57                     	;# 
  2679  0F65                     	;# 
  2680  0F68                     	;# 
  2681  0F69                     	;# 
  2682  0F6A                     	;# 
  2683  0F6B                     	;# 
  2684  0FE4                     	;# 
  2685  0FE5                     	;# 
  2686  0FE6                     	;# 
  2687  0FE7                     	;# 
  2688  0FE8                     	;# 
  2689  0FE9                     	;# 
  2690  0FEA                     	;# 
  2691  0FEB                     	;# 
  2692  0FED                     	;# 
  2693  0FEE                     	;# 
  2694  0FEF                     	;# 
  2695  0000                     	;# 
  2696  0001                     	;# 
  2697  0002                     	;# 
  2698  0003                     	;# 
  2699  0004                     	;# 
  2700  0005                     	;# 
  2701  0006                     	;# 
  2702  0007                     	;# 
  2703  0008                     	;# 
  2704  0009                     	;# 
  2705  000A                     	;# 
  2706  000B                     	;# 
  2707  000C                     	;# 
  2708  000D                     	;# 
  2709  000E                     	;# 
  2710  0010                     	;# 
  2711  0011                     	;# 
  2712  0012                     	;# 
  2713  0013                     	;# 
  2714  0016                     	;# 
  2715  0017                     	;# 
  2716  0018                     	;# 
  2717  001C                     	;# 
  2718  001C                     	;# 
  2719  001D                     	;# 
  2720  001D                     	;# 
  2721  001E                     	;# 
  2722  001F                     	;# 
  2723  008C                     	;# 
  2724  008C                     	;# 
  2725  008D                     	;# 
  2726  008E                     	;# 
  2727  008E                     	;# 
  2728  008F                     	;# 
  2729  0090                     	;# 
  2730  0090                     	;# 
  2731  0091                     	;# 
  2732  0093                     	;# 
  2733  0094                     	;# 
  2734  0095                     	;# 
  2735  0096                     	;# 
  2736  0097                     	;# 
  2737  0098                     	;# 
  2738  0099                     	;# 
  2739  009A                     	;# 
  2740  009B                     	;# 
  2741  009C                     	;# 
  2742  009D                     	;# 
  2743  009E                     	;# 
  2744  010C                     	;# 
  2745  010D                     	;# 
  2746  010E                     	;# 
  2747  010E                     	;# 
  2748  010F                     	;# 
  2749  0110                     	;# 
  2750  0110                     	;# 
  2751  0111                     	;# 
  2752  0112                     	;# 
  2753  0112                     	;# 
  2754  0113                     	;# 
  2755  0114                     	;# 
  2756  0114                     	;# 
  2757  0115                     	;# 
  2758  0116                     	;# 
  2759  0116                     	;# 
  2760  0117                     	;# 
  2761  0119                     	;# 
  2762  0119                     	;# 
  2763  0119                     	;# 
  2764  011A                     	;# 
  2765  011A                     	;# 
  2766  011A                     	;# 
  2767  011B                     	;# 
  2768  011B                     	;# 
  2769  011B                     	;# 
  2770  011B                     	;# 
  2771  011B                     	;# 
  2772  011C                     	;# 
  2773  011C                     	;# 
  2774  011C                     	;# 
  2775  011D                     	;# 
  2776  011D                     	;# 
  2777  011D                     	;# 
  2778  011E                     	;# 
  2779  011E                     	;# 
  2780  011E                     	;# 
  2781  011F                     	;# 
  2782  011F                     	;# 
  2783  011F                     	;# 
  2784  011F                     	;# 
  2785  011F                     	;# 
  2786  018C                     	;# 
  2787  018D                     	;# 
  2788  018E                     	;# 
  2789  018F                     	;# 
  2790  0190                     	;# 
  2791  0191                     	;# 
  2792  0192                     	;# 
  2793  0196                     	;# 
  2794  0197                     	;# 
  2795  0198                     	;# 
  2796  0199                     	;# 
  2797  019A                     	;# 
  2798  019B                     	;# 
  2799  019C                     	;# 
  2800  020C                     	;# 
  2801  020C                     	;# 
  2802  020D                     	;# 
  2803  020E                     	;# 
  2804  020F                     	;# 
  2805  020F                     	;# 
  2806  0210                     	;# 
  2807  0210                     	;# 
  2808  0211                     	;# 
  2809  0211                     	;# 
  2810  0212                     	;# 
  2811  0212                     	;# 
  2812  0213                     	;# 
  2813  0214                     	;# 
  2814  0215                     	;# 
  2815  0215                     	;# 
  2816  0216                     	;# 
  2817  0216                     	;# 
  2818  0217                     	;# 
  2819  0217                     	;# 
  2820  0218                     	;# 
  2821  0218                     	;# 
  2822  0219                     	;# 
  2823  021A                     	;# 
  2824  021B                     	;# 
  2825  021B                     	;# 
  2826  021C                     	;# 
  2827  021C                     	;# 
  2828  021D                     	;# 
  2829  021D                     	;# 
  2830  021E                     	;# 
  2831  021F                     	;# 
  2832  028C                     	;# 
  2833  028C                     	;# 
  2834  028D                     	;# 
  2835  028D                     	;# 
  2836  028E                     	;# 
  2837  028F                     	;# 
  2838  0290                     	;# 
  2839  0290                     	;# 
  2840  0291                     	;# 
  2841  0292                     	;# 
  2842  0292                     	;# 
  2843  0293                     	;# 
  2844  0293                     	;# 
  2845  0294                     	;# 
  2846  0295                     	;# 
  2847  0296                     	;# 
  2848  0296                     	;# 
  2849  0297                     	;# 
  2850  0298                     	;# 
  2851  0298                     	;# 
  2852  0299                     	;# 
  2853  0299                     	;# 
  2854  029A                     	;# 
  2855  029B                     	;# 
  2856  029C                     	;# 
  2857  029C                     	;# 
  2858  029D                     	;# 
  2859  030C                     	;# 
  2860  030C                     	;# 
  2861  030D                     	;# 
  2862  030E                     	;# 
  2863  030F                     	;# 
  2864  0310                     	;# 
  2865  0310                     	;# 
  2866  0311                     	;# 
  2867  0312                     	;# 
  2868  0313                     	;# 
  2869  0314                     	;# 
  2870  0314                     	;# 
  2871  0315                     	;# 
  2872  0316                     	;# 
  2873  0317                     	;# 
  2874  0318                     	;# 
  2875  0318                     	;# 
  2876  0319                     	;# 
  2877  031A                     	;# 
  2878  031B                     	;# 
  2879  031C                     	;# 
  2880  031C                     	;# 
  2881  031D                     	;# 
  2882  031E                     	;# 
  2883  031F                     	;# 
  2884  038C                     	;# 
  2885  038D                     	;# 
  2886  038E                     	;# 
  2887  0390                     	;# 
  2888  0391                     	;# 
  2889  0392                     	;# 
  2890  040C                     	;# 
  2891  040D                     	;# 
  2892  040E                     	;# 
  2893  040F                     	;# 
  2894  0410                     	;# 
  2895  0411                     	;# 
  2896  0416                     	;# 
  2897  0416                     	;# 
  2898  0417                     	;# 
  2899  0418                     	;# 
  2900  0418                     	;# 
  2901  0419                     	;# 
  2902  041A                     	;# 
  2903  041A                     	;# 
  2904  041B                     	;# 
  2905  041C                     	;# 
  2906  041C                     	;# 
  2907  041D                     	;# 
  2908  041E                     	;# 
  2909  041F                     	;# 
  2910  048C                     	;# 
  2911  048C                     	;# 
  2912  048D                     	;# 
  2913  048E                     	;# 
  2914  048F                     	;# 
  2915  048F                     	;# 
  2916  0490                     	;# 
  2917  0491                     	;# 
  2918  0492                     	;# 
  2919  0492                     	;# 
  2920  0493                     	;# 
  2921  0494                     	;# 
  2922  0495                     	;# 
  2923  0495                     	;# 
  2924  0496                     	;# 
  2925  0497                     	;# 
  2926  0498                     	;# 
  2927  0499                     	;# 
  2928  049A                     	;# 
  2929  049B                     	;# 
  2930  049C                     	;# 
  2931  049D                     	;# 
  2932  050C                     	;# 
  2933  050C                     	;# 
  2934  050D                     	;# 
  2935  050E                     	;# 
  2936  050F                     	;# 
  2937  050F                     	;# 
  2938  0510                     	;# 
  2939  0511                     	;# 
  2940  0512                     	;# 
  2941  0512                     	;# 
  2942  0513                     	;# 
  2943  0514                     	;# 
  2944  0515                     	;# 
  2945  0515                     	;# 
  2946  0516                     	;# 
  2947  0517                     	;# 
  2948  0518                     	;# 
  2949  0519                     	;# 
  2950  051A                     	;# 
  2951  051B                     	;# 
  2952  051C                     	;# 
  2953  051D                     	;# 
  2954  058C                     	;# 
  2955  058C                     	;# 
  2956  058D                     	;# 
  2957  058E                     	;# 
  2958  058F                     	;# 
  2959  058F                     	;# 
  2960  0590                     	;# 
  2961  0591                     	;# 
  2962  0592                     	;# 
  2963  0593                     	;# 
  2964  060C                     	;# 
  2965  060D                     	;# 
  2966  060E                     	;# 
  2967  060F                     	;# 
  2968  0610                     	;# 
  2969  0611                     	;# 
  2970  0612                     	;# 
  2971  0613                     	;# 
  2972  0614                     	;# 
  2973  0616                     	;# 
  2974  0617                     	;# 
  2975  0618                     	;# 
  2976  0619                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061D                     	;# 
  2981  061E                     	;# 
  2982  068C                     	;# 
  2983  068D                     	;# 
  2984  068E                     	;# 
  2985  068F                     	;# 
  2986  0690                     	;# 
  2987  0691                     	;# 
  2988  0692                     	;# 
  2989  0693                     	;# 
  2990  0694                     	;# 
  2991  070C                     	;# 
  2992  070D                     	;# 
  2993  070E                     	;# 
  2994  070F                     	;# 
  2995  0710                     	;# 
  2996  0711                     	;# 
  2997  0712                     	;# 
  2998  0713                     	;# 
  2999  0714                     	;# 
  3000  0716                     	;# 
  3001  0717                     	;# 
  3002  0718                     	;# 
  3003  0719                     	;# 
  3004  071A                     	;# 
  3005  071B                     	;# 
  3006  071C                     	;# 
  3007  071D                     	;# 
  3008  071E                     	;# 
  3009  0796                     	;# 
  3010  0797                     	;# 
  3011  0798                     	;# 
  3012  0799                     	;# 
  3013  079A                     	;# 
  3014  079B                     	;# 
  3015  080C                     	;# 
  3016  080D                     	;# 
  3017  080E                     	;# 
  3018  080F                     	;# 
  3019  0810                     	;# 
  3020  0811                     	;# 
  3021  0812                     	;# 
  3022  0813                     	;# 
  3023  0814                     	;# 
  3024  081A                     	;# 
  3025  081B                     	;# 
  3026  081C                     	;# 
  3027  081D                     	;# 
  3028  081E                     	;# 
  3029  081F                     	;# 
  3030  088C                     	;# 
  3031  088D                     	;# 
  3032  088E                     	;# 
  3033  088F                     	;# 
  3034  0890                     	;# 
  3035  0891                     	;# 
  3036  0892                     	;# 
  3037  0893                     	;# 
  3038  0895                     	;# 
  3039  0896                     	;# 
  3040  0897                     	;# 
  3041  0898                     	;# 
  3042  0899                     	;# 
  3043  089A                     	;# 
  3044  089B                     	;# 
  3045  090C                     	;# 
  3046  090E                     	;# 
  3047  090F                     	;# 
  3048  091F                     	;# 
  3049  091F                     	;# 
  3050  098F                     	;# 
  3051  098F                     	;# 
  3052  0990                     	;# 
  3053  0991                     	;# 
  3054  0992                     	;# 
  3055  0993                     	;# 
  3056  0994                     	;# 
  3057  0995                     	;# 
  3058  0996                     	;# 
  3059  0997                     	;# 
  3060  0E0F                     	;# 
  3061  0E10                     	;# 
  3062  0E11                     	;# 
  3063  0E12                     	;# 
  3064  0E13                     	;# 
  3065  0E14                     	;# 
  3066  0E15                     	;# 
  3067  0E16                     	;# 
  3068  0E17                     	;# 
  3069  0E18                     	;# 
  3070  0E19                     	;# 
  3071  0E1A                     	;# 
  3072  0E1B                     	;# 
  3073  0E1C                     	;# 
  3074  0E1D                     	;# 
  3075  0E1E                     	;# 
  3076  0E1F                     	;# 
  3077  0E20                     	;# 
  3078  0E21                     	;# 
  3079  0E22                     	;# 
  3080  0E23                     	;# 
  3081  0E24                     	;# 
  3082  0E25                     	;# 
  3083  0E26                     	;# 
  3084  0E27                     	;# 
  3085  0E28                     	;# 
  3086  0E29                     	;# 
  3087  0E2A                     	;# 
  3088  0E2B                     	;# 
  3089  0E2C                     	;# 
  3090  0E2D                     	;# 
  3091  0E2E                     	;# 
  3092  0E2F                     	;# 
  3093  0E30                     	;# 
  3094  0E31                     	;# 
  3095  0E32                     	;# 
  3096  0E33                     	;# 
  3097  0E34                     	;# 
  3098  0E35                     	;# 
  3099  0E36                     	;# 
  3100  0E37                     	;# 
  3101  0E8F                     	;# 
  3102  0E90                     	;# 
  3103  0E91                     	;# 
  3104  0E92                     	;# 
  3105  0E93                     	;# 
  3106  0E94                     	;# 
  3107  0E95                     	;# 
  3108  0E96                     	;# 
  3109  0E97                     	;# 
  3110  0E9C                     	;# 
  3111  0E9D                     	;# 
  3112  0E9E                     	;# 
  3113  0EA1                     	;# 
  3114  0EA2                     	;# 
  3115  0EA3                     	;# 
  3116  0EA4                     	;# 
  3117  0EA5                     	;# 
  3118  0EA9                     	;# 
  3119  0EAA                     	;# 
  3120  0EAB                     	;# 
  3121  0EAC                     	;# 
  3122  0EB1                     	;# 
  3123  0EB2                     	;# 
  3124  0EB3                     	;# 
  3125  0EB8                     	;# 
  3126  0EB9                     	;# 
  3127  0EBA                     	;# 
  3128  0EBB                     	;# 
  3129  0EBC                     	;# 
  3130  0EBD                     	;# 
  3131  0EBE                     	;# 
  3132  0EC3                     	;# 
  3133  0EC5                     	;# 
  3134  0EC6                     	;# 
  3135  0EC7                     	;# 
  3136  0EC8                     	;# 
  3137  0EC9                     	;# 
  3138  0ECA                     	;# 
  3139  0ECB                     	;# 
  3140  0ECC                     	;# 
  3141  0F10                     	;# 
  3142  0F11                     	;# 
  3143  0F12                     	;# 
  3144  0F13                     	;# 
  3145  0F14                     	;# 
  3146  0F15                     	;# 
  3147  0F16                     	;# 
  3148  0F17                     	;# 
  3149  0F18                     	;# 
  3150  0F19                     	;# 
  3151  0F1A                     	;# 
  3152  0F1B                     	;# 
  3153  0F1C                     	;# 
  3154  0F1D                     	;# 
  3155  0F1E                     	;# 
  3156  0F1F                     	;# 
  3157  0F20                     	;# 
  3158  0F21                     	;# 
  3159  0F22                     	;# 
  3160  0F23                     	;# 
  3161  0F24                     	;# 
  3162  0F25                     	;# 
  3163  0F26                     	;# 
  3164  0F27                     	;# 
  3165  0F38                     	;# 
  3166  0F39                     	;# 
  3167  0F3A                     	;# 
  3168  0F3B                     	;# 
  3169  0F3C                     	;# 
  3170  0F3D                     	;# 
  3171  0F3E                     	;# 
  3172  0F3F                     	;# 
  3173  0F40                     	;# 
  3174  0F41                     	;# 
  3175  0F43                     	;# 
  3176  0F44                     	;# 
  3177  0F45                     	;# 
  3178  0F46                     	;# 
  3179  0F47                     	;# 
  3180  0F48                     	;# 
  3181  0F49                     	;# 
  3182  0F4A                     	;# 
  3183  0F4B                     	;# 
  3184  0F4C                     	;# 
  3185  0F4E                     	;# 
  3186  0F4F                     	;# 
  3187  0F50                     	;# 
  3188  0F51                     	;# 
  3189  0F52                     	;# 
  3190  0F53                     	;# 
  3191  0F54                     	;# 
  3192  0F55                     	;# 
  3193  0F56                     	;# 
  3194  0F57                     	;# 
  3195  0F65                     	;# 
  3196  0F68                     	;# 
  3197  0F69                     	;# 
  3198  0F6A                     	;# 
  3199  0F6B                     	;# 
  3200  0FE4                     	;# 
  3201  0FE5                     	;# 
  3202  0FE6                     	;# 
  3203  0FE7                     	;# 
  3204  0FE8                     	;# 
  3205  0FE9                     	;# 
  3206  0FEA                     	;# 
  3207  0FEB                     	;# 
  3208  0FED                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0000                     	;# 
  3212  0001                     	;# 
  3213  0002                     	;# 
  3214  0003                     	;# 
  3215  0004                     	;# 
  3216  0005                     	;# 
  3217  0006                     	;# 
  3218  0007                     	;# 
  3219  0008                     	;# 
  3220  0009                     	;# 
  3221  000A                     	;# 
  3222  000B                     	;# 
  3223  000C                     	;# 
  3224  000D                     	;# 
  3225  000E                     	;# 
  3226  0010                     	;# 
  3227  0011                     	;# 
  3228  0012                     	;# 
  3229  0013                     	;# 
  3230  0016                     	;# 
  3231  0017                     	;# 
  3232  0018                     	;# 
  3233  001C                     	;# 
  3234  001C                     	;# 
  3235  001D                     	;# 
  3236  001D                     	;# 
  3237  001E                     	;# 
  3238  001F                     	;# 
  3239  008C                     	;# 
  3240  008C                     	;# 
  3241  008D                     	;# 
  3242  008E                     	;# 
  3243  008E                     	;# 
  3244  008F                     	;# 
  3245  0090                     	;# 
  3246  0090                     	;# 
  3247  0091                     	;# 
  3248  0093                     	;# 
  3249  0094                     	;# 
  3250  0095                     	;# 
  3251  0096                     	;# 
  3252  0097                     	;# 
  3253  0098                     	;# 
  3254  0099                     	;# 
  3255  009A                     	;# 
  3256  009B                     	;# 
  3257  009C                     	;# 
  3258  009D                     	;# 
  3259  009E                     	;# 
  3260  010C                     	;# 
  3261  010D                     	;# 
  3262  010E                     	;# 
  3263  010E                     	;# 
  3264  010F                     	;# 
  3265  0110                     	;# 
  3266  0110                     	;# 
  3267  0111                     	;# 
  3268  0112                     	;# 
  3269  0112                     	;# 
  3270  0113                     	;# 
  3271  0114                     	;# 
  3272  0114                     	;# 
  3273  0115                     	;# 
  3274  0116                     	;# 
  3275  0116                     	;# 
  3276  0117                     	;# 
  3277  0119                     	;# 
  3278  0119                     	;# 
  3279  0119                     	;# 
  3280  011A                     	;# 
  3281  011A                     	;# 
  3282  011A                     	;# 
  3283  011B                     	;# 
  3284  011B                     	;# 
  3285  011B                     	;# 
  3286  011B                     	;# 
  3287  011B                     	;# 
  3288  011C                     	;# 
  3289  011C                     	;# 
  3290  011C                     	;# 
  3291  011D                     	;# 
  3292  011D                     	;# 
  3293  011D                     	;# 
  3294  011E                     	;# 
  3295  011E                     	;# 
  3296  011E                     	;# 
  3297  011F                     	;# 
  3298  011F                     	;# 
  3299  011F                     	;# 
  3300  011F                     	;# 
  3301  011F                     	;# 
  3302  018C                     	;# 
  3303  018D                     	;# 
  3304  018E                     	;# 
  3305  018F                     	;# 
  3306  0190                     	;# 
  3307  0191                     	;# 
  3308  0192                     	;# 
  3309  0196                     	;# 
  3310  0197                     	;# 
  3311  0198                     	;# 
  3312  0199                     	;# 
  3313  019A                     	;# 
  3314  019B                     	;# 
  3315  019C                     	;# 
  3316  020C                     	;# 
  3317  020C                     	;# 
  3318  020D                     	;# 
  3319  020E                     	;# 
  3320  020F                     	;# 
  3321  020F                     	;# 
  3322  0210                     	;# 
  3323  0210                     	;# 
  3324  0211                     	;# 
  3325  0211                     	;# 
  3326  0212                     	;# 
  3327  0212                     	;# 
  3328  0213                     	;# 
  3329  0214                     	;# 
  3330  0215                     	;# 
  3331  0215                     	;# 
  3332  0216                     	;# 
  3333  0216                     	;# 
  3334  0217                     	;# 
  3335  0217                     	;# 
  3336  0218                     	;# 
  3337  0218                     	;# 
  3338  0219                     	;# 
  3339  021A                     	;# 
  3340  021B                     	;# 
  3341  021B                     	;# 
  3342  021C                     	;# 
  3343  021C                     	;# 
  3344  021D                     	;# 
  3345  021D                     	;# 
  3346  021E                     	;# 
  3347  021F                     	;# 
  3348  028C                     	;# 
  3349  028C                     	;# 
  3350  028D                     	;# 
  3351  028D                     	;# 
  3352  028E                     	;# 
  3353  028F                     	;# 
  3354  0290                     	;# 
  3355  0290                     	;# 
  3356  0291                     	;# 
  3357  0292                     	;# 
  3358  0292                     	;# 
  3359  0293                     	;# 
  3360  0293                     	;# 
  3361  0294                     	;# 
  3362  0295                     	;# 
  3363  0296                     	;# 
  3364  0296                     	;# 
  3365  0297                     	;# 
  3366  0298                     	;# 
  3367  0298                     	;# 
  3368  0299                     	;# 
  3369  0299                     	;# 
  3370  029A                     	;# 
  3371  029B                     	;# 
  3372  029C                     	;# 
  3373  029C                     	;# 
  3374  029D                     	;# 
  3375  030C                     	;# 
  3376  030C                     	;# 
  3377  030D                     	;# 
  3378  030E                     	;# 
  3379  030F                     	;# 
  3380  0310                     	;# 
  3381  0310                     	;# 
  3382  0311                     	;# 
  3383  0312                     	;# 
  3384  0313                     	;# 
  3385  0314                     	;# 
  3386  0314                     	;# 
  3387  0315                     	;# 
  3388  0316                     	;# 
  3389  0317                     	;# 
  3390  0318                     	;# 
  3391  0318                     	;# 
  3392  0319                     	;# 
  3393  031A                     	;# 
  3394  031B                     	;# 
  3395  031C                     	;# 
  3396  031C                     	;# 
  3397  031D                     	;# 
  3398  031E                     	;# 
  3399  031F                     	;# 
  3400  038C                     	;# 
  3401  038D                     	;# 
  3402  038E                     	;# 
  3403  0390                     	;# 
  3404  0391                     	;# 
  3405  0392                     	;# 
  3406  040C                     	;# 
  3407  040D                     	;# 
  3408  040E                     	;# 
  3409  040F                     	;# 
  3410  0410                     	;# 
  3411  0411                     	;# 
  3412  0416                     	;# 
  3413  0416                     	;# 
  3414  0417                     	;# 
  3415  0418                     	;# 
  3416  0418                     	;# 
  3417  0419                     	;# 
  3418  041A                     	;# 
  3419  041A                     	;# 
  3420  041B                     	;# 
  3421  041C                     	;# 
  3422  041C                     	;# 
  3423  041D                     	;# 
  3424  041E                     	;# 
  3425  041F                     	;# 
  3426  048C                     	;# 
  3427  048C                     	;# 
  3428  048D                     	;# 
  3429  048E                     	;# 
  3430  048F                     	;# 
  3431  048F                     	;# 
  3432  0490                     	;# 
  3433  0491                     	;# 
  3434  0492                     	;# 
  3435  0492                     	;# 
  3436  0493                     	;# 
  3437  0494                     	;# 
  3438  0495                     	;# 
  3439  0495                     	;# 
  3440  0496                     	;# 
  3441  0497                     	;# 
  3442  0498                     	;# 
  3443  0499                     	;# 
  3444  049A                     	;# 
  3445  049B                     	;# 
  3446  049C                     	;# 
  3447  049D                     	;# 
  3448  050C                     	;# 
  3449  050C                     	;# 
  3450  050D                     	;# 
  3451  050E                     	;# 
  3452  050F                     	;# 
  3453  050F                     	;# 
  3454  0510                     	;# 
  3455  0511                     	;# 
  3456  0512                     	;# 
  3457  0512                     	;# 
  3458  0513                     	;# 
  3459  0514                     	;# 
  3460  0515                     	;# 
  3461  0515                     	;# 
  3462  0516                     	;# 
  3463  0517                     	;# 
  3464  0518                     	;# 
  3465  0519                     	;# 
  3466  051A                     	;# 
  3467  051B                     	;# 
  3468  051C                     	;# 
  3469  051D                     	;# 
  3470  058C                     	;# 
  3471  058C                     	;# 
  3472  058D                     	;# 
  3473  058E                     	;# 
  3474  058F                     	;# 
  3475  058F                     	;# 
  3476  0590                     	;# 
  3477  0591                     	;# 
  3478  0592                     	;# 
  3479  0593                     	;# 
  3480  060C                     	;# 
  3481  060D                     	;# 
  3482  060E                     	;# 
  3483  060F                     	;# 
  3484  0610                     	;# 
  3485  0611                     	;# 
  3486  0612                     	;# 
  3487  0613                     	;# 
  3488  0614                     	;# 
  3489  0616                     	;# 
  3490  0617                     	;# 
  3491  0618                     	;# 
  3492  0619                     	;# 
  3493  061A                     	;# 
  3494  061B                     	;# 
  3495  061C                     	;# 
  3496  061D                     	;# 
  3497  061E                     	;# 
  3498  068C                     	;# 
  3499  068D                     	;# 
  3500  068E                     	;# 
  3501  068F                     	;# 
  3502  0690                     	;# 
  3503  0691                     	;# 
  3504  0692                     	;# 
  3505  0693                     	;# 
  3506  0694                     	;# 
  3507  070C                     	;# 
  3508  070D                     	;# 
  3509  070E                     	;# 
  3510  070F                     	;# 
  3511  0710                     	;# 
  3512  0711                     	;# 
  3513  0712                     	;# 
  3514  0713                     	;# 
  3515  0714                     	;# 
  3516  0716                     	;# 
  3517  0717                     	;# 
  3518  0718                     	;# 
  3519  0719                     	;# 
  3520  071A                     	;# 
  3521  071B                     	;# 
  3522  071C                     	;# 
  3523  071D                     	;# 
  3524  071E                     	;# 
  3525  0796                     	;# 
  3526  0797                     	;# 
  3527  0798                     	;# 
  3528  0799                     	;# 
  3529  079A                     	;# 
  3530  079B                     	;# 
  3531  080C                     	;# 
  3532  080D                     	;# 
  3533  080E                     	;# 
  3534  080F                     	;# 
  3535  0810                     	;# 
  3536  0811                     	;# 
  3537  0812                     	;# 
  3538  0813                     	;# 
  3539  0814                     	;# 
  3540  081A                     	;# 
  3541  081B                     	;# 
  3542  081C                     	;# 
  3543  081D                     	;# 
  3544  081E                     	;# 
  3545  081F                     	;# 
  3546  088C                     	;# 
  3547  088D                     	;# 
  3548  088E                     	;# 
  3549  088F                     	;# 
  3550  0890                     	;# 
  3551  0891                     	;# 
  3552  0892                     	;# 
  3553  0893                     	;# 
  3554  0895                     	;# 
  3555  0896                     	;# 
  3556  0897                     	;# 
  3557  0898                     	;# 
  3558  0899                     	;# 
  3559  089A                     	;# 
  3560  089B                     	;# 
  3561  090C                     	;# 
  3562  090E                     	;# 
  3563  090F                     	;# 
  3564  091F                     	;# 
  3565  091F                     	;# 
  3566  098F                     	;# 
  3567  098F                     	;# 
  3568  0990                     	;# 
  3569  0991                     	;# 
  3570  0992                     	;# 
  3571  0993                     	;# 
  3572  0994                     	;# 
  3573  0995                     	;# 
  3574  0996                     	;# 
  3575  0997                     	;# 
  3576  0E0F                     	;# 
  3577  0E10                     	;# 
  3578  0E11                     	;# 
  3579  0E12                     	;# 
  3580  0E13                     	;# 
  3581  0E14                     	;# 
  3582  0E15                     	;# 
  3583  0E16                     	;# 
  3584  0E17                     	;# 
  3585  0E18                     	;# 
  3586  0E19                     	;# 
  3587  0E1A                     	;# 
  3588  0E1B                     	;# 
  3589  0E1C                     	;# 
  3590  0E1D                     	;# 
  3591  0E1E                     	;# 
  3592  0E1F                     	;# 
  3593  0E20                     	;# 
  3594  0E21                     	;# 
  3595  0E22                     	;# 
  3596  0E23                     	;# 
  3597  0E24                     	;# 
  3598  0E25                     	;# 
  3599  0E26                     	;# 
  3600  0E27                     	;# 
  3601  0E28                     	;# 
  3602  0E29                     	;# 
  3603  0E2A                     	;# 
  3604  0E2B                     	;# 
  3605  0E2C                     	;# 
  3606  0E2D                     	;# 
  3607  0E2E                     	;# 
  3608  0E2F                     	;# 
  3609  0E30                     	;# 
  3610  0E31                     	;# 
  3611  0E32                     	;# 
  3612  0E33                     	;# 
  3613  0E34                     	;# 
  3614  0E35                     	;# 
  3615  0E36                     	;# 
  3616  0E37                     	;# 
  3617  0E8F                     	;# 
  3618  0E90                     	;# 
  3619  0E91                     	;# 
  3620  0E92                     	;# 
  3621  0E93                     	;# 
  3622  0E94                     	;# 
  3623  0E95                     	;# 
  3624  0E96                     	;# 
  3625  0E97                     	;# 
  3626  0E9C                     	;# 
  3627  0E9D                     	;# 
  3628  0E9E                     	;# 
  3629  0EA1                     	;# 
  3630  0EA2                     	;# 
  3631  0EA3                     	;# 
  3632  0EA4                     	;# 
  3633  0EA5                     	;# 
  3634  0EA9                     	;# 
  3635  0EAA                     	;# 
  3636  0EAB                     	;# 
  3637  0EAC                     	;# 
  3638  0EB1                     	;# 
  3639  0EB2                     	;# 
  3640  0EB3                     	;# 
  3641  0EB8                     	;# 
  3642  0EB9                     	;# 
  3643  0EBA                     	;# 
  3644  0EBB                     	;# 
  3645  0EBC                     	;# 
  3646  0EBD                     	;# 
  3647  0EBE                     	;# 
  3648  0EC3                     	;# 
  3649  0EC5                     	;# 
  3650  0EC6                     	;# 
  3651  0EC7                     	;# 
  3652  0EC8                     	;# 
  3653  0EC9                     	;# 
  3654  0ECA                     	;# 
  3655  0ECB                     	;# 
  3656  0ECC                     	;# 
  3657  0F10                     	;# 
  3658  0F11                     	;# 
  3659  0F12                     	;# 
  3660  0F13                     	;# 
  3661  0F14                     	;# 
  3662  0F15                     	;# 
  3663  0F16                     	;# 
  3664  0F17                     	;# 
  3665  0F18                     	;# 
  3666  0F19                     	;# 
  3667  0F1A                     	;# 
  3668  0F1B                     	;# 
  3669  0F1C                     	;# 
  3670  0F1D                     	;# 
  3671  0F1E                     	;# 
  3672  0F1F                     	;# 
  3673  0F20                     	;# 
  3674  0F21                     	;# 
  3675  0F22                     	;# 
  3676  0F23                     	;# 
  3677  0F24                     	;# 
  3678  0F25                     	;# 
  3679  0F26                     	;# 
  3680  0F27                     	;# 
  3681  0F38                     	;# 
  3682  0F39                     	;# 
  3683  0F3A                     	;# 
  3684  0F3B                     	;# 
  3685  0F3C                     	;# 
  3686  0F3D                     	;# 
  3687  0F3E                     	;# 
  3688  0F3F                     	;# 
  3689  0F40                     	;# 
  3690  0F41                     	;# 
  3691  0F43                     	;# 
  3692  0F44                     	;# 
  3693  0F45                     	;# 
  3694  0F46                     	;# 
  3695  0F47                     	;# 
  3696  0F48                     	;# 
  3697  0F49                     	;# 
  3698  0F4A                     	;# 
  3699  0F4B                     	;# 
  3700  0F4C                     	;# 
  3701  0F4E                     	;# 
  3702  0F4F                     	;# 
  3703  0F50                     	;# 
  3704  0F51                     	;# 
  3705  0F52                     	;# 
  3706  0F53                     	;# 
  3707  0F54                     	;# 
  3708  0F55                     	;# 
  3709  0F56                     	;# 
  3710  0F57                     	;# 
  3711  0F65                     	;# 
  3712  0F68                     	;# 
  3713  0F69                     	;# 
  3714  0F6A                     	;# 
  3715  0F6B                     	;# 
  3716  0FE4                     	;# 
  3717  0FE5                     	;# 
  3718  0FE6                     	;# 
  3719  0FE7                     	;# 
  3720  0FE8                     	;# 
  3721  0FE9                     	;# 
  3722  0FEA                     	;# 
  3723  0FEB                     	;# 
  3724  0FED                     	;# 
  3725  0FEE                     	;# 
  3726  0FEF                     	;# 
  3727  0000                     	;# 
  3728  0001                     	;# 
  3729  0002                     	;# 
  3730  0003                     	;# 
  3731  0004                     	;# 
  3732  0005                     	;# 
  3733  0006                     	;# 
  3734  0007                     	;# 
  3735  0008                     	;# 
  3736  0009                     	;# 
  3737  000A                     	;# 
  3738  000B                     	;# 
  3739  000C                     	;# 
  3740  000D                     	;# 
  3741  000E                     	;# 
  3742  0010                     	;# 
  3743  0011                     	;# 
  3744  0012                     	;# 
  3745  0013                     	;# 
  3746  0016                     	;# 
  3747  0017                     	;# 
  3748  0018                     	;# 
  3749  001C                     	;# 
  3750  001C                     	;# 
  3751  001D                     	;# 
  3752  001D                     	;# 
  3753  001E                     	;# 
  3754  001F                     	;# 
  3755  008C                     	;# 
  3756  008C                     	;# 
  3757  008D                     	;# 
  3758  008E                     	;# 
  3759  008E                     	;# 
  3760  008F                     	;# 
  3761  0090                     	;# 
  3762  0090                     	;# 
  3763  0091                     	;# 
  3764  0093                     	;# 
  3765  0094                     	;# 
  3766  0095                     	;# 
  3767  0096                     	;# 
  3768  0097                     	;# 
  3769  0098                     	;# 
  3770  0099                     	;# 
  3771  009A                     	;# 
  3772  009B                     	;# 
  3773  009C                     	;# 
  3774  009D                     	;# 
  3775  009E                     	;# 
  3776  010C                     	;# 
  3777  010D                     	;# 
  3778  010E                     	;# 
  3779  010E                     	;# 
  3780  010F                     	;# 
  3781  0110                     	;# 
  3782  0110                     	;# 
  3783  0111                     	;# 
  3784  0112                     	;# 
  3785  0112                     	;# 
  3786  0113                     	;# 
  3787  0114                     	;# 
  3788  0114                     	;# 
  3789  0115                     	;# 
  3790  0116                     	;# 
  3791  0116                     	;# 
  3792  0117                     	;# 
  3793  0119                     	;# 
  3794  0119                     	;# 
  3795  0119                     	;# 
  3796  011A                     	;# 
  3797  011A                     	;# 
  3798  011A                     	;# 
  3799  011B                     	;# 
  3800  011B                     	;# 
  3801  011B                     	;# 
  3802  011B                     	;# 
  3803  011B                     	;# 
  3804  011C                     	;# 
  3805  011C                     	;# 
  3806  011C                     	;# 
  3807  011D                     	;# 
  3808  011D                     	;# 
  3809  011D                     	;# 
  3810  011E                     	;# 
  3811  011E                     	;# 
  3812  011E                     	;# 
  3813  011F                     	;# 
  3814  011F                     	;# 
  3815  011F                     	;# 
  3816  011F                     	;# 
  3817  011F                     	;# 
  3818  018C                     	;# 
  3819  018D                     	;# 
  3820  018E                     	;# 
  3821  018F                     	;# 
  3822  0190                     	;# 
  3823  0191                     	;# 
  3824  0192                     	;# 
  3825  0196                     	;# 
  3826  0197                     	;# 
  3827  0198                     	;# 
  3828  0199                     	;# 
  3829  019A                     	;# 
  3830  019B                     	;# 
  3831  019C                     	;# 
  3832  020C                     	;# 
  3833  020C                     	;# 
  3834  020D                     	;# 
  3835  020E                     	;# 
  3836  020F                     	;# 
  3837  020F                     	;# 
  3838  0210                     	;# 
  3839  0210                     	;# 
  3840  0211                     	;# 
  3841  0211                     	;# 
  3842  0212                     	;# 
  3843  0212                     	;# 
  3844  0213                     	;# 
  3845  0214                     	;# 
  3846  0215                     	;# 
  3847  0215                     	;# 
  3848  0216                     	;# 
  3849  0216                     	;# 
  3850  0217                     	;# 
  3851  0217                     	;# 
  3852  0218                     	;# 
  3853  0218                     	;# 
  3854  0219                     	;# 
  3855  021A                     	;# 
  3856  021B                     	;# 
  3857  021B                     	;# 
  3858  021C                     	;# 
  3859  021C                     	;# 
  3860  021D                     	;# 
  3861  021D                     	;# 
  3862  021E                     	;# 
  3863  021F                     	;# 
  3864  028C                     	;# 
  3865  028C                     	;# 
  3866  028D                     	;# 
  3867  028D                     	;# 
  3868  028E                     	;# 
  3869  028F                     	;# 
  3870  0290                     	;# 
  3871  0290                     	;# 
  3872  0291                     	;# 
  3873  0292                     	;# 
  3874  0292                     	;# 
  3875  0293                     	;# 
  3876  0293                     	;# 
  3877  0294                     	;# 
  3878  0295                     	;# 
  3879  0296                     	;# 
  3880  0296                     	;# 
  3881  0297                     	;# 
  3882  0298                     	;# 
  3883  0298                     	;# 
  3884  0299                     	;# 
  3885  0299                     	;# 
  3886  029A                     	;# 
  3887  029B                     	;# 
  3888  029C                     	;# 
  3889  029C                     	;# 
  3890  029D                     	;# 
  3891  030C                     	;# 
  3892  030C                     	;# 
  3893  030D                     	;# 
  3894  030E                     	;# 
  3895  030F                     	;# 
  3896  0310                     	;# 
  3897  0310                     	;# 
  3898  0311                     	;# 
  3899  0312                     	;# 
  3900  0313                     	;# 
  3901  0314                     	;# 
  3902  0314                     	;# 
  3903  0315                     	;# 
  3904  0316                     	;# 
  3905  0317                     	;# 
  3906  0318                     	;# 
  3907  0318                     	;# 
  3908  0319                     	;# 
  3909  031A                     	;# 
  3910  031B                     	;# 
  3911  031C                     	;# 
  3912  031C                     	;# 
  3913  031D                     	;# 
  3914  031E                     	;# 
  3915  031F                     	;# 
  3916  038C                     	;# 
  3917  038D                     	;# 
  3918  038E                     	;# 
  3919  0390                     	;# 
  3920  0391                     	;# 
  3921  0392                     	;# 
  3922  040C                     	;# 
  3923  040D                     	;# 
  3924  040E                     	;# 
  3925  040F                     	;# 
  3926  0410                     	;# 
  3927  0411                     	;# 
  3928  0416                     	;# 
  3929  0416                     	;# 
  3930  0417                     	;# 
  3931  0418                     	;# 
  3932  0418                     	;# 
  3933  0419                     	;# 
  3934  041A                     	;# 
  3935  041A                     	;# 
  3936  041B                     	;# 
  3937  041C                     	;# 
  3938  041C                     	;# 
  3939  041D                     	;# 
  3940  041E                     	;# 
  3941  041F                     	;# 
  3942  048C                     	;# 
  3943  048C                     	;# 
  3944  048D                     	;# 
  3945  048E                     	;# 
  3946  048F                     	;# 
  3947  048F                     	;# 
  3948  0490                     	;# 
  3949  0491                     	;# 
  3950  0492                     	;# 
  3951  0492                     	;# 
  3952  0493                     	;# 
  3953  0494                     	;# 
  3954  0495                     	;# 
  3955  0495                     	;# 
  3956  0496                     	;# 
  3957  0497                     	;# 
  3958  0498                     	;# 
  3959  0499                     	;# 
  3960  049A                     	;# 
  3961  049B                     	;# 
  3962  049C                     	;# 
  3963  049D                     	;# 
  3964  050C                     	;# 
  3965  050C                     	;# 
  3966  050D                     	;# 
  3967  050E                     	;# 
  3968  050F                     	;# 
  3969  050F                     	;# 
  3970  0510                     	;# 
  3971  0511                     	;# 
  3972  0512                     	;# 
  3973  0512                     	;# 
  3974  0513                     	;# 
  3975  0514                     	;# 
  3976  0515                     	;# 
  3977  0515                     	;# 
  3978  0516                     	;# 
  3979  0517                     	;# 
  3980  0518                     	;# 
  3981  0519                     	;# 
  3982  051A                     	;# 
  3983  051B                     	;# 
  3984  051C                     	;# 
  3985  051D                     	;# 
  3986  058C                     	;# 
  3987  058C                     	;# 
  3988  058D                     	;# 
  3989  058E                     	;# 
  3990  058F                     	;# 
  3991  058F                     	;# 
  3992  0590                     	;# 
  3993  0591                     	;# 
  3994  0592                     	;# 
  3995  0593                     	;# 
  3996  060C                     	;# 
  3997  060D                     	;# 
  3998  060E                     	;# 
  3999  060F                     	;# 
  4000  0610                     	;# 
  4001  0611                     	;# 
  4002  0612                     	;# 
  4003  0613                     	;# 
  4004  0614                     	;# 
  4005  0616                     	;# 
  4006  0617                     	;# 
  4007  0618                     	;# 
  4008  0619                     	;# 
  4009  061A                     	;# 
  4010  061B                     	;# 
  4011  061C                     	;# 
  4012  061D                     	;# 
  4013  061E                     	;# 
  4014  068C                     	;# 
  4015  068D                     	;# 
  4016  068E                     	;# 
  4017  068F                     	;# 
  4018  0690                     	;# 
  4019  0691                     	;# 
  4020  0692                     	;# 
  4021  0693                     	;# 
  4022  0694                     	;# 
  4023  070C                     	;# 
  4024  070D                     	;# 
  4025  070E                     	;# 
  4026  070F                     	;# 
  4027  0710                     	;# 
  4028  0711                     	;# 
  4029  0712                     	;# 
  4030  0713                     	;# 
  4031  0714                     	;# 
  4032  0716                     	;# 
  4033  0717                     	;# 
  4034  0718                     	;# 
  4035  0719                     	;# 
  4036  071A                     	;# 
  4037  071B                     	;# 
  4038  071C                     	;# 
  4039  071D                     	;# 
  4040  071E                     	;# 
  4041  0796                     	;# 
  4042  0797                     	;# 
  4043  0798                     	;# 
  4044  0799                     	;# 
  4045  079A                     	;# 
  4046  079B                     	;# 
  4047  080C                     	;# 
  4048  080D                     	;# 
  4049  080E                     	;# 
  4050  080F                     	;# 
  4051  0810                     	;# 
  4052  0811                     	;# 
  4053  0812                     	;# 
  4054  0813                     	;# 
  4055  0814                     	;# 
  4056  081A                     	;# 
  4057  081B                     	;# 
  4058  081C                     	;# 
  4059  081D                     	;# 
  4060  081E                     	;# 
  4061  081F                     	;# 
  4062  088C                     	;# 
  4063  088D                     	;# 
  4064  088E                     	;# 
  4065  088F                     	;# 
  4066  0890                     	;# 
  4067  0891                     	;# 
  4068  0892                     	;# 
  4069  0893                     	;# 
  4070  0895                     	;# 
  4071  0896                     	;# 
  4072  0897                     	;# 
  4073  0898                     	;# 
  4074  0899                     	;# 
  4075  089A                     	;# 
  4076  089B                     	;# 
  4077  090C                     	;# 
  4078  090E                     	;# 
  4079  090F                     	;# 
  4080  091F                     	;# 
  4081  091F                     	;# 
  4082  098F                     	;# 
  4083  098F                     	;# 
  4084  0990                     	;# 
  4085  0991                     	;# 
  4086  0992                     	;# 
  4087  0993                     	;# 
  4088  0994                     	;# 
  4089  0995                     	;# 
  4090  0996                     	;# 
  4091  0997                     	;# 
  4092  0E0F                     	;# 
  4093  0E10                     	;# 
  4094  0E11                     	;# 
  4095  0E12                     	;# 
  4096  0E13                     	;# 
  4097  0E14                     	;# 
  4098  0E15                     	;# 
  4099  0E16                     	;# 
  4100  0E17                     	;# 
  4101  0E18                     	;# 
  4102  0E19                     	;# 
  4103  0E1A                     	;# 
  4104  0E1B                     	;# 
  4105  0E1C                     	;# 
  4106  0E1D                     	;# 
  4107  0E1E                     	;# 
  4108  0E1F                     	;# 
  4109  0E20                     	;# 
  4110  0E21                     	;# 
  4111  0E22                     	;# 
  4112  0E23                     	;# 
  4113  0E24                     	;# 
  4114  0E25                     	;# 
  4115  0E26                     	;# 
  4116  0E27                     	;# 
  4117  0E28                     	;# 
  4118  0E29                     	;# 
  4119  0E2A                     	;# 
  4120  0E2B                     	;# 
  4121  0E2C                     	;# 
  4122  0E2D                     	;# 
  4123  0E2E                     	;# 
  4124  0E2F                     	;# 
  4125  0E30                     	;# 
  4126  0E31                     	;# 
  4127  0E32                     	;# 
  4128  0E33                     	;# 
  4129  0E34                     	;# 
  4130  0E35                     	;# 
  4131  0E36                     	;# 
  4132  0E37                     	;# 
  4133  0E8F                     	;# 
  4134  0E90                     	;# 
  4135  0E91                     	;# 
  4136  0E92                     	;# 
  4137  0E93                     	;# 
  4138  0E94                     	;# 
  4139  0E95                     	;# 
  4140  0E96                     	;# 
  4141  0E97                     	;# 
  4142  0E9C                     	;# 
  4143  0E9D                     	;# 
  4144  0E9E                     	;# 
  4145  0EA1                     	;# 
  4146  0EA2                     	;# 
  4147  0EA3                     	;# 
  4148  0EA4                     	;# 
  4149  0EA5                     	;# 
  4150  0EA9                     	;# 
  4151  0EAA                     	;# 
  4152  0EAB                     	;# 
  4153  0EAC                     	;# 
  4154  0EB1                     	;# 
  4155  0EB2                     	;# 
  4156  0EB3                     	;# 
  4157  0EB8                     	;# 
  4158  0EB9                     	;# 
  4159  0EBA                     	;# 
  4160  0EBB                     	;# 
  4161  0EBC                     	;# 
  4162  0EBD                     	;# 
  4163  0EBE                     	;# 
  4164  0EC3                     	;# 
  4165  0EC5                     	;# 
  4166  0EC6                     	;# 
  4167  0EC7                     	;# 
  4168  0EC8                     	;# 
  4169  0EC9                     	;# 
  4170  0ECA                     	;# 
  4171  0ECB                     	;# 
  4172  0ECC                     	;# 
  4173  0F10                     	;# 
  4174  0F11                     	;# 
  4175  0F12                     	;# 
  4176  0F13                     	;# 
  4177  0F14                     	;# 
  4178  0F15                     	;# 
  4179  0F16                     	;# 
  4180  0F17                     	;# 
  4181  0F18                     	;# 
  4182  0F19                     	;# 
  4183  0F1A                     	;# 
  4184  0F1B                     	;# 
  4185  0F1C                     	;# 
  4186  0F1D                     	;# 
  4187  0F1E                     	;# 
  4188  0F1F                     	;# 
  4189  0F20                     	;# 
  4190  0F21                     	;# 
  4191  0F22                     	;# 
  4192  0F23                     	;# 
  4193  0F24                     	;# 
  4194  0F25                     	;# 
  4195  0F26                     	;# 
  4196  0F27                     	;# 
  4197  0F38                     	;# 
  4198  0F39                     	;# 
  4199  0F3A                     	;# 
  4200  0F3B                     	;# 
  4201  0F3C                     	;# 
  4202  0F3D                     	;# 
  4203  0F3E                     	;# 
  4204  0F3F                     	;# 
  4205  0F40                     	;# 
  4206  0F41                     	;# 
  4207  0F43                     	;# 
  4208  0F44                     	;# 
  4209  0F45                     	;# 
  4210  0F46                     	;# 
  4211  0F47                     	;# 
  4212  0F48                     	;# 
  4213  0F49                     	;# 
  4214  0F4A                     	;# 
  4215  0F4B                     	;# 
  4216  0F4C                     	;# 
  4217  0F4E                     	;# 
  4218  0F4F                     	;# 
  4219  0F50                     	;# 
  4220  0F51                     	;# 
  4221  0F52                     	;# 
  4222  0F53                     	;# 
  4223  0F54                     	;# 
  4224  0F55                     	;# 
  4225  0F56                     	;# 
  4226  0F57                     	;# 
  4227  0F65                     	;# 
  4228  0F68                     	;# 
  4229  0F69                     	;# 
  4230  0F6A                     	;# 
  4231  0F6B                     	;# 
  4232  0FE4                     	;# 
  4233  0FE5                     	;# 
  4234  0FE6                     	;# 
  4235  0FE7                     	;# 
  4236  0FE8                     	;# 
  4237  0FE9                     	;# 
  4238  0FEA                     	;# 
  4239  0FEB                     	;# 
  4240  0FED                     	;# 
  4241  0FEE                     	;# 
  4242  0FEF                     	;# 
  4243  0000                     	;# 
  4244  0001                     	;# 
  4245  0002                     	;# 
  4246  0003                     	;# 
  4247  0004                     	;# 
  4248  0005                     	;# 
  4249  0006                     	;# 
  4250  0007                     	;# 
  4251  0008                     	;# 
  4252  0009                     	;# 
  4253  000A                     	;# 
  4254  000B                     	;# 
  4255  000C                     	;# 
  4256  000D                     	;# 
  4257  000E                     	;# 
  4258  0010                     	;# 
  4259  0011                     	;# 
  4260  0012                     	;# 
  4261  0013                     	;# 
  4262  0016                     	;# 
  4263  0017                     	;# 
  4264  0018                     	;# 
  4265  001C                     	;# 
  4266  001C                     	;# 
  4267  001D                     	;# 
  4268  001D                     	;# 
  4269  001E                     	;# 
  4270  001F                     	;# 
  4271  008C                     	;# 
  4272  008C                     	;# 
  4273  008D                     	;# 
  4274  008E                     	;# 
  4275  008E                     	;# 
  4276  008F                     	;# 
  4277  0090                     	;# 
  4278  0090                     	;# 
  4279  0091                     	;# 
  4280  0093                     	;# 
  4281  0094                     	;# 
  4282  0095                     	;# 
  4283  0096                     	;# 
  4284  0097                     	;# 
  4285  0098                     	;# 
  4286  0099                     	;# 
  4287  009A                     	;# 
  4288  009B                     	;# 
  4289  009C                     	;# 
  4290  009D                     	;# 
  4291  009E                     	;# 
  4292  010C                     	;# 
  4293  010D                     	;# 
  4294  010E                     	;# 
  4295  010E                     	;# 
  4296  010F                     	;# 
  4297  0110                     	;# 
  4298  0110                     	;# 
  4299  0111                     	;# 
  4300  0112                     	;# 
  4301  0112                     	;# 
  4302  0113                     	;# 
  4303  0114                     	;# 
  4304  0114                     	;# 
  4305  0115                     	;# 
  4306  0116                     	;# 
  4307  0116                     	;# 
  4308  0117                     	;# 
  4309  0119                     	;# 
  4310  0119                     	;# 
  4311  0119                     	;# 
  4312  011A                     	;# 
  4313  011A                     	;# 
  4314  011A                     	;# 
  4315  011B                     	;# 
  4316  011B                     	;# 
  4317  011B                     	;# 
  4318  011B                     	;# 
  4319  011B                     	;# 
  4320  011C                     	;# 
  4321  011C                     	;# 
  4322  011C                     	;# 
  4323  011D                     	;# 
  4324  011D                     	;# 
  4325  011D                     	;# 
  4326  011E                     	;# 
  4327  011E                     	;# 
  4328  011E                     	;# 
  4329  011F                     	;# 
  4330  011F                     	;# 
  4331  011F                     	;# 
  4332  011F                     	;# 
  4333  011F                     	;# 
  4334  018C                     	;# 
  4335  018D                     	;# 
  4336  018E                     	;# 
  4337  018F                     	;# 
  4338  0190                     	;# 
  4339  0191                     	;# 
  4340  0192                     	;# 
  4341  0196                     	;# 
  4342  0197                     	;# 
  4343  0198                     	;# 
  4344  0199                     	;# 
  4345  019A                     	;# 
  4346  019B                     	;# 
  4347  019C                     	;# 
  4348  020C                     	;# 
  4349  020C                     	;# 
  4350  020D                     	;# 
  4351  020E                     	;# 
  4352  020F                     	;# 
  4353  020F                     	;# 
  4354  0210                     	;# 
  4355  0210                     	;# 
  4356  0211                     	;# 
  4357  0211                     	;# 
  4358  0212                     	;# 
  4359  0212                     	;# 
  4360  0213                     	;# 
  4361  0214                     	;# 
  4362  0215                     	;# 
  4363  0215                     	;# 
  4364  0216                     	;# 
  4365  0216                     	;# 
  4366  0217                     	;# 
  4367  0217                     	;# 
  4368  0218                     	;# 
  4369  0218                     	;# 
  4370  0219                     	;# 
  4371  021A                     	;# 
  4372  021B                     	;# 
  4373  021B                     	;# 
  4374  021C                     	;# 
  4375  021C                     	;# 
  4376  021D                     	;# 
  4377  021D                     	;# 
  4378  021E                     	;# 
  4379  021F                     	;# 
  4380  028C                     	;# 
  4381  028C                     	;# 
  4382  028D                     	;# 
  4383  028D                     	;# 
  4384  028E                     	;# 
  4385  028F                     	;# 
  4386  0290                     	;# 
  4387  0290                     	;# 
  4388  0291                     	;# 
  4389  0292                     	;# 
  4390  0292                     	;# 
  4391  0293                     	;# 
  4392  0293                     	;# 
  4393  0294                     	;# 
  4394  0295                     	;# 
  4395  0296                     	;# 
  4396  0296                     	;# 
  4397  0297                     	;# 
  4398  0298                     	;# 
  4399  0298                     	;# 
  4400  0299                     	;# 
  4401  0299                     	;# 
  4402  029A                     	;# 
  4403  029B                     	;# 
  4404  029C                     	;# 
  4405  029C                     	;# 
  4406  029D                     	;# 
  4407  030C                     	;# 
  4408  030C                     	;# 
  4409  030D                     	;# 
  4410  030E                     	;# 
  4411  030F                     	;# 
  4412  0310                     	;# 
  4413  0310                     	;# 
  4414  0311                     	;# 
  4415  0312                     	;# 
  4416  0313                     	;# 
  4417  0314                     	;# 
  4418  0314                     	;# 
  4419  0315                     	;# 
  4420  0316                     	;# 
  4421  0317                     	;# 
  4422  0318                     	;# 
  4423  0318                     	;# 
  4424  0319                     	;# 
  4425  031A                     	;# 
  4426  031B                     	;# 
  4427  031C                     	;# 
  4428  031C                     	;# 
  4429  031D                     	;# 
  4430  031E                     	;# 
  4431  031F                     	;# 
  4432  038C                     	;# 
  4433  038D                     	;# 
  4434  038E                     	;# 
  4435  0390                     	;# 
  4436  0391                     	;# 
  4437  0392                     	;# 
  4438  040C                     	;# 
  4439  040D                     	;# 
  4440  040E                     	;# 
  4441  040F                     	;# 
  4442  0410                     	;# 
  4443  0411                     	;# 
  4444  0416                     	;# 
  4445  0416                     	;# 
  4446  0417                     	;# 
  4447  0418                     	;# 
  4448  0418                     	;# 
  4449  0419                     	;# 
  4450  041A                     	;# 
  4451  041A                     	;# 
  4452  041B                     	;# 
  4453  041C                     	;# 
  4454  041C                     	;# 
  4455  041D                     	;# 
  4456  041E                     	;# 
  4457  041F                     	;# 
  4458  048C                     	;# 
  4459  048C                     	;# 
  4460  048D                     	;# 
  4461  048E                     	;# 
  4462  048F                     	;# 
  4463  048F                     	;# 
  4464  0490                     	;# 
  4465  0491                     	;# 
  4466  0492                     	;# 
  4467  0492                     	;# 
  4468  0493                     	;# 
  4469  0494                     	;# 
  4470  0495                     	;# 
  4471  0495                     	;# 
  4472  0496                     	;# 
  4473  0497                     	;# 
  4474  0498                     	;# 
  4475  0499                     	;# 
  4476  049A                     	;# 
  4477  049B                     	;# 
  4478  049C                     	;# 
  4479  049D                     	;# 
  4480  050C                     	;# 
  4481  050C                     	;# 
  4482  050D                     	;# 
  4483  050E                     	;# 
  4484  050F                     	;# 
  4485  050F                     	;# 
  4486  0510                     	;# 
  4487  0511                     	;# 
  4488  0512                     	;# 
  4489  0512                     	;# 
  4490  0513                     	;# 
  4491  0514                     	;# 
  4492  0515                     	;# 
  4493  0515                     	;# 
  4494  0516                     	;# 
  4495  0517                     	;# 
  4496  0518                     	;# 
  4497  0519                     	;# 
  4498  051A                     	;# 
  4499  051B                     	;# 
  4500  051C                     	;# 
  4501  051D                     	;# 
  4502  058C                     	;# 
  4503  058C                     	;# 
  4504  058D                     	;# 
  4505  058E                     	;# 
  4506  058F                     	;# 
  4507  058F                     	;# 
  4508  0590                     	;# 
  4509  0591                     	;# 
  4510  0592                     	;# 
  4511  0593                     	;# 
  4512  060C                     	;# 
  4513  060D                     	;# 
  4514  060E                     	;# 
  4515  060F                     	;# 
  4516  0610                     	;# 
  4517  0611                     	;# 
  4518  0612                     	;# 
  4519  0613                     	;# 
  4520  0614                     	;# 
  4521  0616                     	;# 
  4522  0617                     	;# 
  4523  0618                     	;# 
  4524  0619                     	;# 
  4525  061A                     	;# 
  4526  061B                     	;# 
  4527  061C                     	;# 
  4528  061D                     	;# 
  4529  061E                     	;# 
  4530  068C                     	;# 
  4531  068D                     	;# 
  4532  068E                     	;# 
  4533  068F                     	;# 
  4534  0690                     	;# 
  4535  0691                     	;# 
  4536  0692                     	;# 
  4537  0693                     	;# 
  4538  0694                     	;# 
  4539  070C                     	;# 
  4540  070D                     	;# 
  4541  070E                     	;# 
  4542  070F                     	;# 
  4543  0710                     	;# 
  4544  0711                     	;# 
  4545  0712                     	;# 
  4546  0713                     	;# 
  4547  0714                     	;# 
  4548  0716                     	;# 
  4549  0717                     	;# 
  4550  0718                     	;# 
  4551  0719                     	;# 
  4552  071A                     	;# 
  4553  071B                     	;# 
  4554  071C                     	;# 
  4555  071D                     	;# 
  4556  071E                     	;# 
  4557  0796                     	;# 
  4558  0797                     	;# 
  4559  0798                     	;# 
  4560  0799                     	;# 
  4561  079A                     	;# 
  4562  079B                     	;# 
  4563  080C                     	;# 
  4564  080D                     	;# 
  4565  080E                     	;# 
  4566  080F                     	;# 
  4567  0810                     	;# 
  4568  0811                     	;# 
  4569  0812                     	;# 
  4570  0813                     	;# 
  4571  0814                     	;# 
  4572  081A                     	;# 
  4573  081B                     	;# 
  4574  081C                     	;# 
  4575  081D                     	;# 
  4576  081E                     	;# 
  4577  081F                     	;# 
  4578  088C                     	;# 
  4579  088D                     	;# 
  4580  088E                     	;# 
  4581  088F                     	;# 
  4582  0890                     	;# 
  4583  0891                     	;# 
  4584  0892                     	;# 
  4585  0893                     	;# 
  4586  0895                     	;# 
  4587  0896                     	;# 
  4588  0897                     	;# 
  4589  0898                     	;# 
  4590  0899                     	;# 
  4591  089A                     	;# 
  4592  089B                     	;# 
  4593  090C                     	;# 
  4594  090E                     	;# 
  4595  090F                     	;# 
  4596  091F                     	;# 
  4597  091F                     	;# 
  4598  098F                     	;# 
  4599  098F                     	;# 
  4600  0990                     	;# 
  4601  0991                     	;# 
  4602  0992                     	;# 
  4603  0993                     	;# 
  4604  0994                     	;# 
  4605  0995                     	;# 
  4606  0996                     	;# 
  4607  0997                     	;# 
  4608  0E0F                     	;# 
  4609  0E10                     	;# 
  4610  0E11                     	;# 
  4611  0E12                     	;# 
  4612  0E13                     	;# 
  4613  0E14                     	;# 
  4614  0E15                     	;# 
  4615  0E16                     	;# 
  4616  0E17                     	;# 
  4617  0E18                     	;# 
  4618  0E19                     	;# 
  4619  0E1A                     	;# 
  4620  0E1B                     	;# 
  4621  0E1C                     	;# 
  4622  0E1D                     	;# 
  4623  0E1E                     	;# 
  4624  0E1F                     	;# 
  4625  0E20                     	;# 
  4626  0E21                     	;# 
  4627  0E22                     	;# 
  4628  0E23                     	;# 
  4629  0E24                     	;# 
  4630  0E25                     	;# 
  4631  0E26                     	;# 
  4632  0E27                     	;# 
  4633  0E28                     	;# 
  4634  0E29                     	;# 
  4635  0E2A                     	;# 
  4636  0E2B                     	;# 
  4637  0E2C                     	;# 
  4638  0E2D                     	;# 
  4639  0E2E                     	;# 
  4640  0E2F                     	;# 
  4641  0E30                     	;# 
  4642  0E31                     	;# 
  4643  0E32                     	;# 
  4644  0E33                     	;# 
  4645  0E34                     	;# 
  4646  0E35                     	;# 
  4647  0E36                     	;# 
  4648  0E37                     	;# 
  4649  0E8F                     	;# 
  4650  0E90                     	;# 
  4651  0E91                     	;# 
  4652  0E92                     	;# 
  4653  0E93                     	;# 
  4654  0E94                     	;# 
  4655  0E95                     	;# 
  4656  0E96                     	;# 
  4657  0E97                     	;# 
  4658  0E9C                     	;# 
  4659  0E9D                     	;# 
  4660  0E9E                     	;# 
  4661  0EA1                     	;# 
  4662  0EA2                     	;# 
  4663  0EA3                     	;# 
  4664  0EA4                     	;# 
  4665  0EA5                     	;# 
  4666  0EA9                     	;# 
  4667  0EAA                     	;# 
  4668  0EAB                     	;# 
  4669  0EAC                     	;# 
  4670  0EB1                     	;# 
  4671  0EB2                     	;# 
  4672  0EB3                     	;# 
  4673  0EB8                     	;# 
  4674  0EB9                     	;# 
  4675  0EBA                     	;# 
  4676  0EBB                     	;# 
  4677  0EBC                     	;# 
  4678  0EBD                     	;# 
  4679  0EBE                     	;# 
  4680  0EC3                     	;# 
  4681  0EC5                     	;# 
  4682  0EC6                     	;# 
  4683  0EC7                     	;# 
  4684  0EC8                     	;# 
  4685  0EC9                     	;# 
  4686  0ECA                     	;# 
  4687  0ECB                     	;# 
  4688  0ECC                     	;# 
  4689  0F10                     	;# 
  4690  0F11                     	;# 
  4691  0F12                     	;# 
  4692  0F13                     	;# 
  4693  0F14                     	;# 
  4694  0F15                     	;# 
  4695  0F16                     	;# 
  4696  0F17                     	;# 
  4697  0F18                     	;# 
  4698  0F19                     	;# 
  4699  0F1A                     	;# 
  4700  0F1B                     	;# 
  4701  0F1C                     	;# 
  4702  0F1D                     	;# 
  4703  0F1E                     	;# 
  4704  0F1F                     	;# 
  4705  0F20                     	;# 
  4706  0F21                     	;# 
  4707  0F22                     	;# 
  4708  0F23                     	;# 
  4709  0F24                     	;# 
  4710  0F25                     	;# 
  4711  0F26                     	;# 
  4712  0F27                     	;# 
  4713  0F38                     	;# 
  4714  0F39                     	;# 
  4715  0F3A                     	;# 
  4716  0F3B                     	;# 
  4717  0F3C                     	;# 
  4718  0F3D                     	;# 
  4719  0F3E                     	;# 
  4720  0F3F                     	;# 
  4721  0F40                     	;# 
  4722  0F41                     	;# 
  4723  0F43                     	;# 
  4724  0F44                     	;# 
  4725  0F45                     	;# 
  4726  0F46                     	;# 
  4727  0F47                     	;# 
  4728  0F48                     	;# 
  4729  0F49                     	;# 
  4730  0F4A                     	;# 
  4731  0F4B                     	;# 
  4732  0F4C                     	;# 
  4733  0F4E                     	;# 
  4734  0F4F                     	;# 
  4735  0F50                     	;# 
  4736  0F51                     	;# 
  4737  0F52                     	;# 
  4738  0F53                     	;# 
  4739  0F54                     	;# 
  4740  0F55                     	;# 
  4741  0F56                     	;# 
  4742  0F57                     	;# 
  4743  0F65                     	;# 
  4744  0F68                     	;# 
  4745  0F69                     	;# 
  4746  0F6A                     	;# 
  4747  0F6B                     	;# 
  4748  0FE4                     	;# 
  4749  0FE5                     	;# 
  4750  0FE6                     	;# 
  4751  0FE7                     	;# 
  4752  0FE8                     	;# 
  4753  0FE9                     	;# 
  4754  0FEA                     	;# 
  4755  0FEB                     	;# 
  4756  0FED                     	;# 
  4757  0FEE                     	;# 
  4758  0FEF                     	;_aPatchMemory
  4759                           
  4760                           	psect	idataBANK2
  4761  09EA                     __pidataBANK2:	
  4762                           
  4763                           ;initializer for _segdisp
  4764  09EA  3403               	retlw	3
  4765  09EB  3400               	retlw	0
  4766  09EC  349F               	retlw	159
  4767  09ED  3400               	retlw	0
  4768  09EE  3425               	retlw	37
  4769  09EF  3400               	retlw	0
  4770  09F0  340D               	retlw	13
  4771  09F1  3400               	retlw	0
  4772  09F2  3499               	retlw	153
  4773  09F3  3400               	retlw	0
  4774  09F4  3449               	retlw	73
  4775  09F5  3400               	retlw	0
  4776  09F6  3441               	retlw	65
  4777  09F7  3400               	retlw	0
  4778  09F8  341B               	retlw	27
  4779  09F9  3400               	retlw	0
  4780  09FA  3401               	retlw	1
  4781  09FB  3400               	retlw	0
  4782  09FC  3409               	retlw	9
  4783  09FD  3400               	retlw	0
  4784                           
  4785                           	psect	stringtext1
  4786  1000                     __pstringtext1:	
  4787  1000                     _cPowerOfTwo:	
  4788  1000  3401               	retlw	1
  4789  1001  3400               	retlw	0
  4790  1002  3402               	retlw	2
  4791  1003  3400               	retlw	0
  4792  1004  3404               	retlw	4
  4793  1005  3400               	retlw	0
  4794  1006  3408               	retlw	8
  4795  1007  3400               	retlw	0
  4796  1008  3410               	retlw	16
  4797  1009  3400               	retlw	0
  4798  100A  3420               	retlw	32
  4799  100B  3400               	retlw	0
  4800  100C  3440               	retlw	64
  4801  100D  3400               	retlw	0
  4802  100E  3480               	retlw	128
  4803  100F  3400               	retlw	0
  4804  1010                     __end_of_cPowerOfTwo:	
  4805                           
  4806                           	psect	stringtext2
  4807  1010                     __pstringtext2:	
  4808  1010                     _maxBanks:	
  4809  1010  3401               	retlw	1
  4810  1011  3400               	retlw	0
  4811  1012                     __end_of_maxBanks:	
  4812                           
  4813                           	psect	stringtext3
  4814  1012                     __pstringtext3:	
  4815  1012                     _maxPatches:	
  4816  1012  3464               	retlw	100
  4817  1013  3400               	retlw	0
  4818  1014                     __end_of_maxPatches:	
  4819                           
  4820                           	psect	stringtext4
  4821  1014                     __pstringtext4:	
  4822  1014                     _MvcMaxValue:	
  4823  1014  34FF               	retlw	255
  4824  1015  3403               	retlw	3
  4825  1016                     __end_of_MvcMaxValue:	
  4826                           
  4827                           	psect	stringtext5
  4828  1016                     __pstringtext5:	
  4829  1016                     _MvcMinValue:	
  4830  1016  3400               	retlw	0
  4831  1017  3400               	retlw	0
  4832  1018                     __end_of_MvcMinValue:	
  4833                           
  4834                           	psect	stringtext6
  4835  1018                     __pstringtext6:	
  4836  1018                     _clockMicroTime:	
  4837  1018  34C8               	retlw	200
  4838  1019  3400               	retlw	0
  4839  101A                     __end_of_clockMicroTime:	
  4840                           
  4841                           	psect	stringtext7
  4842  101A                     __pstringtext7:	
  4843  101A                     _lineSettleMicroTime:	
  4844  101A  3490               	retlw	144
  4845  101B  3401               	retlw	1
  4846  101C                     __end_of_lineSettleMicroTime:	
  4847                           
  4848                           	psect	stringtext8
  4849  101C                     __pstringtext8:	
  4850  101C                     _toggleDly:	
  4851  101C  340A               	retlw	10
  4852  101D  3400               	retlw	0
  4853  101E                     __end_of_toggleDly:	
  4854                           
  4855                           	psect	stringtext9
  4856  101E                     __pstringtext9:	
  4857  101E                     _twoK:	
  4858  101E  3410               	retlw	16
  4859  101F  3427               	retlw	39
  4860  1020                     __end_of_twoK:	
  4861                           
  4862                           	psect	stringtext10
  4863  1020                     __pstringtext10:	
  4864  1020                     _speed:	
  4865  1020  3432               	retlw	50
  4866  1021  3400               	retlw	0
  4867  1022                     __end_of_speed:	
  4868                           
  4869                           	psect	stringtext11
  4870  1022                     __pstringtext11:	
  4871  1022                     _datapin:	
  4872  1022  3412               	retlw	18
  4873  1023  3400               	retlw	0
  4874  1024                     __end_of_datapin:	
  4875                           
  4876                           	psect	stringtext12
  4877  1024                     __pstringtext12:	
  4878  1024                     _clockpin:	
  4879  1024  3411               	retlw	17
  4880  1025  3400               	retlw	0
  4881  1026                     __end_of_clockpin:	
  4882                           
  4883                           	psect	stringtext13
  4884  1026                     __pstringtext13:	
  4885  1026                     _latchpin:	
  4886  1026  3410               	retlw	16
  4887  1027  3400               	retlw	0
  4888  1028                     __end_of_latchpin:	
  4889                           
  4890                           	psect	stringtext14
  4891  1028                     __pstringtext14:	
  4892  1028                     main@iResetValue:	
  4893  1028  3464               	retlw	100
  4894  1029  3400               	retlw	0
  4895  102A                     __end_ofmain@iResetValue:	
  4896                           
  4897                           	psect	stringtext15
  4898  102A                     __pstringtext15:	
  4899  102A                     _cMstrClkAdjust:	
  4900  102A  3420               	retlw	32
  4901  102B  3400               	retlw	0
  4902  102C                     __end_of_cMstrClkAdjust:	
  4903                           
  4904                           	psect	stringtext16
  4905  102C                     __pstringtext16:	
  4906  102C                     _i2c_addr_dualADSR1:	
  4907  102C  3469               	retlw	105
  4908  102D                     __end_of_i2c_addr_dualADSR1:	
  4909                           
  4910                           	psect	stringtext17
  4911  102D                     __pstringtext17:	
  4912  102D                     _i2c_addr_dualADSR0:	
  4913  102D  3468               	retlw	104
  4914  102E                     __end_of_i2c_addr_dualADSR0:	
  4915                           
  4916                           	psect	stringtext18
  4917  102E                     __pstringtext18:	
  4918  102E                     _cPointerByteWriteLED:	
  4919  102E  3410               	retlw	16
  4920  102F                     __end_of_cPointerByteWriteLED:	
  4921                           
  4922                           	psect	stringtext19
  4923  102F                     __pstringtext19:	
  4924  102F                     _cPointerByteReadFaders:	
  4925  102F  3420               	retlw	32
  4926  1030                     __end_of_cPointerByteReadFaders:	
  4927                           
  4928                           	psect	stringtext20
  4929  1030                     __pstringtext20:	
  4930  1030                     _cPointerByteWriteFaders:	
  4931  1030  3430               	retlw	48
  4932  1031                     __end_of_cPointerByteWriteFaders:	
  4933  0018                     _LATCbits	set	24
  4934  0013                     _TRISCbits	set	19
  4935  000D                     _PORTBbits	set	13
  4936  000E                     _PORTC	set	14
  4937  000D                     _PORTB	set	13
  4938  000B                     _INTCONbits	set	11
  4939  0013                     _TRISC	set	19
  4940  0012                     _TRISB	set	18
  4941  0011                     _TRISA	set	17
  4942  0018                     _LATC	set	24
  4943  0017                     _LATB	set	23
  4944  0016                     _LATA	set	22
  4945  005F                     _GIE	set	95
  4946  0094                     _ADCON1bits	set	148
  4947  008E                     _ADPREVL	set	142
  4948  008F                     _ADPREVH	set	143
  4949  0097                     _ADSTATbits	set	151
  4950  0090                     _ADACCL	set	144
  4951  0091                     _ADACCH	set	145
  4952  0095                     _ADCON2bits	set	149
  4953  0096                     _ADCON3bits	set	150
  4954  008C                     _ADRESL	set	140
  4955  008D                     _ADRESH	set	141
  4956  0093                     _ADCON0bits	set	147
  4957  0093                     _ADCON0	set	147
  4958  009E                     _ADPCH	set	158
  4959  009D                     _ADACQ	set	157
  4960  009C                     _ADPRE	set	156
  4961  009B                     _ADCAP	set	155
  4962  009A                     _ADREF	set	154
  4963  0098                     _ADCLK	set	152
  4964  0097                     _ADSTAT	set	151
  4965  0099                     _ADACT	set	153
  4966  0096                     _ADCON3	set	150
  4967  0095                     _ADCON2	set	149
  4968  0094                     _ADCON1	set	148
  4969  0116                     _ADERRL	set	278
  4970  0117                     _ADERRH	set	279
  4971  0114                     _ADFLTRL	set	276
  4972  0115                     _ADFLTRH	set	277
  4973  010C                     _ADCNT	set	268
  4974  0113                     _ADSTPTH	set	275
  4975  0112                     _ADSTPTL	set	274
  4976  0111                     _ADUTHH	set	273
  4977  0110                     _ADUTHL	set	272
  4978  010F                     _ADLTHH	set	271
  4979  010E                     _ADLTHL	set	270
  4980  010D                     _ADRPT	set	269
  4981  018C                     _SSP1BUF	set	396
  4982  0191                     _SSP1CON2bits	set	401
  4983  0190                     _SSP1CON1bits	set	400
  4984  018D                     _SSP1ADD	set	397
  4985  0192                     _SSP1CON3	set	402
  4986  0190                     _SSP1CON1	set	400
  4987  018F                     _SSP1STAT	set	399
  4988  0719                     _PIE3bits	set	1817
  4989  070F                     _PIR3bits	set	1807
  4990  0892                     _OSCTUNE	set	2194
  4991  0893                     _OSCFRQ	set	2195
  4992  0891                     _OSCEN	set	2193
  4993  088F                     _OSCCON3	set	2191
  4994  088D                     _OSCCON1	set	2189
  4995  0EC5                     _SSP1CLKPPSbits	set	3781
  4996  0EC6                     _SSP1DATPPSbits	set	3782
  4997  0E8F                     _PPSLOCKbits	set	3727
  4998  0E8F                     _PPSLOCK	set	3727
  4999  0F4E                     _ANSELCbits	set	3918
  5000  0F24                     _RC4PPS	set	3876
  5001  0F23                     _RC3PPS	set	3875
  5002  0F50                     _ODCONC	set	3920
  5003  0F45                     _ODCONB	set	3909
  5004  0F3A                     _ODCONA	set	3898
  5005  0F4F                     _WPUC	set	3919
  5006  0F39                     _WPUA	set	3897
  5007  0F44                     _WPUB	set	3908
  5008  0F65                     _WPUE	set	3941
  5009  0F38                     _ANSELA	set	3896
  5010  0F43                     _ANSELB	set	3907
  5011  0F4E                     _ANSELC	set	3918
  5012                           
  5013                           ; #config settings
  5014  0000                     
  5015                           	psect	cinit
  5016  0022                     start_initialization:	
  5017  0022                     __initialization:		;BIGRAM
  5018                           
  5019                           ; Initialize objects allocated to BANK2
  5020  0022  30EA               	movlw	low __pidataBANK2
  5021  0023  0084               	movwf	4
  5022  0024  3089               	movlw	(high __pidataBANK2)| (0+128)
  5023  0025  0085               	movwf	5
  5024  0026  3020               	movlw	low __pdataBANK2
  5025  0027  0086               	movwf	6
  5026  0028  3001               	movlw	high __pdataBANK2
  5027  0029  0087               	movwf	7
  5028  002A  3000               	movlw	0
  5029  002B  00FF               	movwf	btemp+1
  5030  002C  3014               	movlw	20
  5031  002D  3189  21AB  3180   	fcall	init_ram
  5032                           
  5033                           ; Clear objects allocated to BIGRAM
  5034  0030  3070               	movlw	low (0+9072)
  5035  0031  0084               	movwf	4
  5036  0032  3023               	movlw	high (0+9072)
  5037  0033  0085               	movwf	5
  5038  0034  3080               	movlw	128
  5039  0035  00FE               	movwf	btemp
  5040  0036  3000               	movlw	0
  5041  0037  00FF               	movwf	btemp+1
  5042  0038  3189  219F  3180   	fcall	clear_ram0
  5043                           
  5044                           ; Clear objects allocated to COMMON
  5045  003B  01F0               	clrf	__pbssCOMMON& (0+127)
  5046  003C  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5047  003D  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5048  003E  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5049  003F  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5050  0040  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5051  0041  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  5052                           
  5053                           ; Clear objects allocated to BANK0
  5054  0042  01E7               	clrf	__pbssBANK0& (0+127)
  5055  0043  01E8               	clrf	(__pbssBANK0+1)& (0+127)
  5056  0044  01E9               	clrf	(__pbssBANK0+2)& (0+127)
  5057  0045  01EA               	clrf	(__pbssBANK0+3)& (0+127)
  5058  0046  01EB               	clrf	(__pbssBANK0+4)& (0+127)
  5059  0047  01EC               	clrf	(__pbssBANK0+5)& (0+127)
  5060  0048  01ED               	clrf	(__pbssBANK0+6)& (0+127)
  5061  0049  01EE               	clrf	(__pbssBANK0+7)& (0+127)
  5062  004A  01EF               	clrf	(__pbssBANK0+8)& (0+127)
  5063                           
  5064                           ; Clear objects allocated to BANK1
  5065  004B  30A0               	movlw	low __pbssBANK1
  5066  004C  0084               	movwf	4
  5067  004D  3000               	movlw	high __pbssBANK1
  5068  004E  0085               	movwf	5
  5069  004F  3038               	movlw	56
  5070  0050  00FE               	movwf	btemp
  5071  0051  3000               	movlw	0
  5072  0052  00FF               	movwf	btemp+1
  5073  0053  3189  219F  3180   	fcall	clear_ram0
  5074                           
  5075                           ; Clear objects allocated to BANK2
  5076  0056  3034               	movlw	low __pbssBANK2
  5077  0057  0084               	movwf	4
  5078  0058  3001               	movlw	high __pbssBANK2
  5079  0059  0085               	movwf	5
  5080  005A  3010               	movlw	16
  5081  005B  00FE               	movwf	btemp
  5082  005C  3000               	movlw	0
  5083  005D  00FF               	movwf	btemp+1
  5084  005E  3189  219F         	fcall	clear_ram0
  5085  0060                     end_of_initialization:	
  5086                           ;End of C runtime variable initialization code
  5087                           
  5088  0060                     __end_of__initialization:	
  5089  0060  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5090  0061  0020               	movlb	0
  5091  0062  3180  2864         	ljmp	_main	;jump to C main() function
  5092                           
  5093                           	psect	bssCOMMON
  5094  0070                     __pbssCOMMON:	
  5095  0070                     I2C1_ISR@i2c_bytes_left:	
  5096  0070                     	ds	1
  5097  0071                     I2C1_ISR@pi2c_buf_ptr:	
  5098  0071                     	ds	1
  5099  0072                     _p_i2c1_current:	
  5100  0072                     	ds	1
  5101  0073                     _p_i2c1_trb_current:	
  5102  0073                     	ds	1
  5103  0074                     _i2c1_trb_count:	
  5104  0074                     	ds	1
  5105  0075                     I2C1_ISR@i2c_address:	
  5106  0075                     	ds	2
  5107                           
  5108                           	psect	bssBANK0
  5109  0067                     __pbssBANK0:	
  5110  0067                     _i2c1_object:	
  5111  0067                     	ds	5
  5112  006C                     _iLEDs0_MSB:	
  5113  006C                     	ds	1
  5114  006D                     _MY_CONSTS:	
  5115  006D                     	ds	1
  5116  006E                     I2C1_ISR@i2c_10bit_address_restart:	
  5117  006E                     	ds	1
  5118  006F                     _i2c1_state:	
  5119  006F                     	ds	1
  5120                           
  5121                           	psect	bssBANK1
  5122  00A0                     __pbssBANK1:	
  5123  00A0                     _prevPanelInChannels:	
  5124  00A0                     	ds	4
  5125  00A4                     _PanelInChannels:	
  5126  00A4                     	ds	4
  5127  00A8                     _faderActiveFlag:	
  5128  00A8                     	ds	4
  5129  00AC                     _d:	
  5130  00AC                     	ds	3
  5131  00AF                     _b:	
  5132  00AF                     	ds	3
  5133  00B2                     _wkFloat:	
  5134  00B2                     	ds	3
  5135  00B5                     _e:	
  5136  00B5                     	ds	2
  5137  00B7                     _c:	
  5138  00B7                     	ds	2
  5139  00B9                     _mvcPatchNumber:	
  5140  00B9                     	ds	2
  5141  00BB                     _wkByte:	
  5142  00BB                     	ds	1
  5143  00BC                     _wkMIDICC:	
  5144  00BC                     	ds	1
  5145  00BD                     _wkFaderValue:	
  5146  00BD                     	ds	1
  5147  00BE                     _iLEDs1_LSB:	
  5148  00BE                     	ds	1
  5149  00BF                     _iLEDs1_MSB:	
  5150  00BF                     	ds	1
  5151  00C0                     _iLEDs0_LSB:	
  5152  00C0                     	ds	1
  5153  00C1                     _iI2CFaderValue:	
  5154  00C1                     	ds	8
  5155  00C9                     _mvcChannels:	
  5156  00C9                     	ds	4
  5157  00CD                     I2C1_MasterRead@trBlock:	
  5158  00CD                     	ds	4
  5159  00D1                     I2C1_MasterWrite@trBlock:	
  5160  00D1                     	ds	4
  5161  00D5                     _i2c1_tr_queue:	
  5162  00D5                     	ds	3
  5163                           
  5164                           	psect	bssBANK2
  5165  0134                     __pbssBANK2:	
  5166  0134                     _dualADSRdata1:	
  5167  0134                     	ds	8
  5168  013C                     _dualADSRdata0:	
  5169  013C                     	ds	8
  5170                           
  5171                           	psect	dataBANK2
  5172  0120                     __pdataBANK2:	
  5173  0120                     _segdisp:	
  5174  0120                     	ds	20
  5175                           
  5176                           	psect	inittext
  5177  09AB                     init_ram:	
  5178  09AB  00FE               	movwf	126
  5179  09AC                     initloop:	
  5180  09AC  0012               	moviw fsr0++
  5181  09AD  001E               	movwi fsr1++
  5182  09AE  3001               	movlw	1
  5183  09AF  02FE               	subwf	126,f
  5184  09B0  3000               	movlw	0
  5185  09B1  3BFF               	subwfb	127,f
  5186  09B2  087F               	movf	127,w
  5187  09B3  047E               	iorwf	126,w
  5188  09B4  1903               	btfsc	3,2
  5189  09B5  3400               	retlw	0
  5190  09B6  29AC               	goto	initloop
  5191                           
  5192                           	psect	clrtext
  5193  099F                     clear_ram0:	
  5194                           ;	Called with FSR0 containing the base address, and
  5195                           ;	btemp/btemp+1 has the size to clear
  5196                           
  5197  099F  0064               	clrwdt	;clear the watchdog before getting into this loop
  5198  09A0                     clrloop0:	
  5199  09A0  0180               	clrf	0	;clear RAM location pointed to by FSR
  5200  09A1  3101               	addfsr 0,1
  5201  09A2  3001               	movlw	1
  5202  09A3  02FE               	subwf	126,f
  5203  09A4  3000               	movlw	0
  5204  09A5  3BFF               	subwfb	127,f
  5205  09A6  087F               	movf	127,w
  5206  09A7  047E               	iorwf	126,w
  5207  09A8  1903               	btfsc	3,2
  5208  09A9  3400               	retlw	0	;all done for this memory range, return
  5209  09AA  29A0               	goto	clrloop0	;have we reached the end yet?
  5210                           
  5211                           	psect	cstackBANK1
  5212  00D8                     __pcstackBANK1:	
  5213  00D8                     main@readStatus:	
  5214                           
  5215                           ; 1 bytes @ 0x0
  5216  00D8                     	ds	1
  5217  00D9                     main@iCounter:	
  5218                           
  5219                           ; 2 bytes @ 0x1
  5220  00D9                     	ds	2
  5221  00DB                     main@iChangeCount:	
  5222                           
  5223                           ; 1 bytes @ 0x3
  5224  00DB                     	ds	1
  5225  00DC                     main@prevFader8bitValue:	
  5226                           
  5227                           ; 1 bytes @ 0x4
  5228  00DC                     	ds	1
  5229  00DD                     main@iLoopCounter:	
  5230                           
  5231                           ; 2 bytes @ 0x5
  5232  00DD                     	ds	2
  5233  00DF                     main@POT0Value:	
  5234                           
  5235                           ; 1 bytes @ 0x7
  5236  00DF                     	ds	1
  5237  00E0                     main@POT1Value:	
  5238                           
  5239                           ; 1 bytes @ 0x8
  5240  00E0                     	ds	1
  5241  00E1                     main@LoadDebounceCount:	
  5242                           
  5243                           ; 2 bytes @ 0x9
  5244  00E1                     	ds	2
  5245  00E3                     main@SaveDebounceCount:	
  5246                           
  5247                           ; 2 bytes @ 0xB
  5248  00E3                     	ds	2
  5249  00E5                     main@fader8bitValue:	
  5250                           
  5251                           ; 1 bytes @ 0xD
  5252  00E5                     	ds	1
  5253  00E6                     main@fx:	
  5254                           
  5255                           ; 2 bytes @ 0xE
  5256  00E6                     	ds	2
  5257  00E8                     main@faderValue:	
  5258                           
  5259                           ; 2 bytes @ 0x10
  5260  00E8                     	ds	2
  5261  00EA                     main@fx_978:	
  5262                           
  5263                           ; 2 bytes @ 0x12
  5264  00EA                     	ds	2
  5265                           
  5266                           	psect	cstackCOMMON
  5267  0077                     __pcstackCOMMON:	
  5268  0077                     ?_OSCILLATOR_Initialize:	
  5269  0077                     ?_I2C1_Initialize:	
  5270                           ; 1 bytes @ 0x0
  5271                           
  5272  0077                     ?_ADCC_Initialize:	
  5273                           ; 1 bytes @ 0x0
  5274                           
  5275  0077                     ?_I2C1_Stop:	
  5276                           ; 1 bytes @ 0x0
  5277                           
  5278  0077                     ??_I2C1_Stop:	
  5279                           ; 1 bytes @ 0x0
  5280                           
  5281  0077                     ?_I2C1_FunctionComplete:	
  5282                           ; 1 bytes @ 0x0
  5283                           
  5284  0077                     ??_I2C1_FunctionComplete:	
  5285                           ; 1 bytes @ 0x0
  5286                           
  5287  0077                     ?_initDAC528:	
  5288                           ; 1 bytes @ 0x0
  5289                           
  5290  0077                     ?_LED7SegSetup:	
  5291                           ; 1 bytes @ 0x0
  5292                           
  5293  0077                     ?_PIN_MANAGER_Initialize:	
  5294                           ; 1 bytes @ 0x0
  5295                           
  5296  0077                     ?_SYSTEM_Initialize:	
  5297                           ; 1 bytes @ 0x0
  5298                           
  5299  0077                     ?_I2C1_ISR:	
  5300                           ; 1 bytes @ 0x0
  5301                           
  5302  0077                     ?_I2C1_BusCollisionISR:	
  5303                           ; 1 bytes @ 0x0
  5304                           
  5305  0077                     ??_I2C1_BusCollisionISR:	
  5306                           ; 1 bytes @ 0x0
  5307                           
  5308  0077                     ?_INTERRUPT_InterruptManager:	
  5309                           ; 1 bytes @ 0x0
  5310                           
  5311  0077                     ?_InitPanelInChannels:	
  5312                           ; 1 bytes @ 0x0
  5313                           
  5314  0077                     ?_InitmvcChannels:	
  5315                           ; 1 bytes @ 0x0
  5316                           
  5317  0077                     ?_main:	
  5318                           ; 1 bytes @ 0x0
  5319                           
  5320  0077                     ?_LED7SegPinWrite:	
  5321                           ; 1 bytes @ 0x0
  5322                           
  5323  0077                     ?_LED7SegPulseClock:	
  5324                           ; 1 bytes @ 0x0
  5325                           
  5326  0077                     ?_LED7SegShiftOutPulseClock:	
  5327                           ; 1 bytes @ 0x0
  5328                           
  5329                           
  5330                           ; 1 bytes @ 0x0
  5331  0077                     	ds	1
  5332  0078                     I2C1_Stop@completion_code:	
  5333                           
  5334                           ; 1 bytes @ 0x1
  5335  0078                     	ds	1
  5336  0079                     ??_I2C1_ISR:	
  5337                           
  5338                           ; 1 bytes @ 0x2
  5339  0079                     	ds	4
  5340  007D                     ??_INTERRUPT_InterruptManager:	
  5341                           
  5342                           ; 1 bytes @ 0x6
  5343  007D                     	ds	1
  5344                           
  5345                           	psect	cstackBANK0
  5346  0020                     __pcstackBANK0:	
  5347  0020                     ??_OSCILLATOR_Initialize:	
  5348  0020                     ??_I2C1_Initialize:	
  5349                           ; 1 bytes @ 0x0
  5350                           
  5351  0020                     ??_ADCC_Initialize:	
  5352                           ; 1 bytes @ 0x0
  5353                           
  5354  0020                     ?_I2C1_MasterWriteTRBBuild:	
  5355                           ; 1 bytes @ 0x0
  5356                           
  5357  0020                     ?_I2C1_MasterTRBInsert:	
  5358                           ; 1 bytes @ 0x0
  5359                           
  5360  0020                     ??_LED7SegSetup:	
  5361                           ; 1 bytes @ 0x0
  5362                           
  5363  0020                     ?_marshallPatchMemory:	
  5364                           ; 1 bytes @ 0x0
  5365                           
  5366  0020                     ?_updateModelFromPatchMemory:	
  5367                           ; 1 bytes @ 0x0
  5368                           
  5369  0020                     ??_PIN_MANAGER_Initialize:	
  5370                           ; 1 bytes @ 0x0
  5371                           
  5372  0020                     ??_InitPanelInChannels:	
  5373                           ; 1 bytes @ 0x0
  5374                           
  5375  0020                     ??_InitmvcChannels:	
  5376                           ; 1 bytes @ 0x0
  5377                           
  5378  0020                     ??_LED7SegPinWrite:	
  5379                           ; 1 bytes @ 0x0
  5380                           
  5381  0020                     ?_ADCC_GetSingleConversion:	
  5382                           ; 1 bytes @ 0x0
  5383                           
  5384  0020                     ?___wmul:	
  5385                           ; 2 bytes @ 0x0
  5386                           
  5387  0020                     ?___ftpack:	
  5388                           ; 2 bytes @ 0x0
  5389                           
  5390  0020                     PIN_MANAGER_Initialize@state:	
  5391                           ; 3 bytes @ 0x0
  5392                           
  5393  0020                     I2C1_MasterTRBInsert@ptrb_list:	
  5394                           ; 1 bytes @ 0x0
  5395                           
  5396  0020                     I2C1_MasterWriteTRBBuild@pdata:	
  5397                           ; 1 bytes @ 0x0
  5398                           
  5399  0020                     LED7SegPinWrite@val:	
  5400                           ; 1 bytes @ 0x0
  5401                           
  5402  0020                     marshallPatchMemory@dualADSRdata0:	
  5403                           ; 1 bytes @ 0x0
  5404                           
  5405  0020                     updateModelFromPatchMemory@dualADSRdata0:	
  5406                           ; 1 bytes @ 0x0
  5407                           
  5408  0020                     ___wmul@multiplier:	
  5409                           ; 1 bytes @ 0x0
  5410                           
  5411  0020                     ___ftpack@arg:	
  5412                           ; 2 bytes @ 0x0
  5413                           
  5414                           
  5415                           ; 3 bytes @ 0x0
  5416  0020                     	ds	1
  5417  0021                     ??_SYSTEM_Initialize:	
  5418  0021                     I2C1_MasterTRBInsert@pflag:	
  5419                           ; 1 bytes @ 0x1
  5420                           
  5421  0021                     I2C1_MasterWriteTRBBuild@length:	
  5422                           ; 1 bytes @ 0x1
  5423                           
  5424  0021                     marshallPatchMemory@dualADSRdata1:	
  5425                           ; 1 bytes @ 0x1
  5426                           
  5427  0021                     updateModelFromPatchMemory@dualADSRdata1:	
  5428                           ; 1 bytes @ 0x1
  5429                           
  5430  0021                     InitPanelInChannels@i:	
  5431                           ; 1 bytes @ 0x1
  5432                           
  5433  0021                     InitmvcChannels@i:	
  5434                           ; 2 bytes @ 0x1
  5435                           
  5436                           
  5437                           ; 2 bytes @ 0x1
  5438  0021                     	ds	1
  5439  0022                     ??_I2C1_MasterTRBInsert:	
  5440  0022                     ??_marshallPatchMemory:	
  5441                           ; 1 bytes @ 0x2
  5442                           
  5443  0022                     ??_updateModelFromPatchMemory:	
  5444                           ; 1 bytes @ 0x2
  5445                           
  5446  0022                     I2C1_MasterWriteTRBBuild@address:	
  5447                           ; 1 bytes @ 0x2
  5448                           
  5449  0022                     ___wmul@multiplicand:	
  5450                           ; 2 bytes @ 0x2
  5451                           
  5452                           
  5453                           ; 2 bytes @ 0x2
  5454  0022                     	ds	1
  5455  0023                     ??_ADCC_GetSingleConversion:	
  5456  0023                     ADCC_GetSingleConversion@channel:	
  5457                           ; 1 bytes @ 0x3
  5458                           
  5459  0023                     I2C1_MasterTRBInsert@count:	
  5460                           ; 1 bytes @ 0x3
  5461                           
  5462  0023                     ___ftpack@exp:	
  5463                           ; 1 bytes @ 0x3
  5464                           
  5465                           
  5466                           ; 1 bytes @ 0x3
  5467  0023                     	ds	1
  5468  0024                     ??_I2C1_MasterWriteTRBBuild:	
  5469  0024                     ??___wmul:	
  5470                           ; 1 bytes @ 0x4
  5471                           
  5472  0024                     ___ftpack@sign:	
  5473                           ; 1 bytes @ 0x4
  5474                           
  5475  0024                     ___wmul@product:	
  5476                           ; 1 bytes @ 0x4
  5477                           
  5478                           
  5479                           ; 2 bytes @ 0x4
  5480  0024                     	ds	1
  5481  0025                     ??___ftpack:	
  5482                           
  5483                           ; 1 bytes @ 0x5
  5484  0025                     	ds	1
  5485  0026                     ?_delay:	
  5486  0026                     I2C1_MasterWriteTRBBuild@ptrb:	
  5487                           ; 1 bytes @ 0x6
  5488                           
  5489  0026                     updateModelFromPatchMemory@mvcChannels:	
  5490                           ; 1 bytes @ 0x6
  5491                           
  5492  0026                     delay@delaytime:	
  5493                           ; 1 bytes @ 0x6
  5494                           
  5495                           
  5496                           ; 2 bytes @ 0x6
  5497  0026                     	ds	1
  5498  0027                     ?_I2C1_MasterWrite:	
  5499  0027                     I2C1_MasterWrite@length:	
  5500                           ; 1 bytes @ 0x7
  5501                           
  5502  0027                     updateModelFromPatchMemory@i_1229:	
  5503                           ; 1 bytes @ 0x7
  5504                           
  5505                           
  5506                           ; 2 bytes @ 0x7
  5507  0027                     	ds	1
  5508  0028                     ??_delay:	
  5509  0028                     ?___awtoft:	
  5510                           ; 1 bytes @ 0x8
  5511                           
  5512  0028                     marshallPatchMemory@mvcChannels:	
  5513                           ; 3 bytes @ 0x8
  5514                           
  5515  0028                     I2C1_MasterWrite@address:	
  5516                           ; 1 bytes @ 0x8
  5517                           
  5518  0028                     ___awtoft@c:	
  5519                           ; 2 bytes @ 0x8
  5520                           
  5521                           
  5522                           ; 2 bytes @ 0x8
  5523  0028                     	ds	1
  5524  0029                     marshallPatchMemory@i:	
  5525  0029                     updateModelFromPatchMemory@i_1230:	
  5526                           ; 2 bytes @ 0x9
  5527                           
  5528  0029                     delay@adjustedDelaytime:	
  5529                           ; 2 bytes @ 0x9
  5530                           
  5531                           
  5532                           ; 4 bytes @ 0x9
  5533  0029                     	ds	1
  5534  002A                     I2C1_MasterWrite@pflag:	
  5535                           
  5536                           ; 1 bytes @ 0xA
  5537  002A                     	ds	1
  5538  002B                     ??_I2C1_MasterWrite:	
  5539  002B                     ??___awtoft:	
  5540                           ; 1 bytes @ 0xB
  5541                           
  5542  002B                     marshallPatchMemory@i_1221:	
  5543                           ; 1 bytes @ 0xB
  5544                           
  5545  002B                     updateModelFromPatchMemory@iPatchMemoryNDX:	
  5546                           ; 2 bytes @ 0xB
  5547                           
  5548                           
  5549                           ; 2 bytes @ 0xB
  5550  002B                     	ds	2
  5551  002D                     I2C1_MasterWrite@pdata:	
  5552  002D                     ___awtoft@sign:	
  5553                           ; 1 bytes @ 0xD
  5554                           
  5555  002D                     marshallPatchMemory@i_1222:	
  5556                           ; 1 bytes @ 0xD
  5557                           
  5558  002D                     updateModelFromPatchMemory@i:	
  5559                           ; 2 bytes @ 0xD
  5560                           
  5561  002D                     delay@counter:	
  5562                           ; 2 bytes @ 0xD
  5563                           
  5564                           
  5565                           ; 4 bytes @ 0xD
  5566  002D                     	ds	1
  5567  002E                     ?_MYI2C_Write2LEDBytes:	
  5568  002E                     ?_MYI2C_Write16EEPROMBytes:	
  5569                           ; 1 bytes @ 0xE
  5570                           
  5571  002E                     ?___ftdiv:	
  5572                           ; 1 bytes @ 0xE
  5573                           
  5574  002E                     ?___ftmul:	
  5575                           ; 3 bytes @ 0xE
  5576                           
  5577  002E                     MYI2C_Write2LEDBytes@MSBWriteByte:	
  5578                           ; 3 bytes @ 0xE
  5579                           
  5580  002E                     MYI2C_Write16EEPROMBytes@writeAddress:	
  5581                           ; 1 bytes @ 0xE
  5582                           
  5583  002E                     ___ftdiv@f2:	
  5584                           ; 2 bytes @ 0xE
  5585                           
  5586  002E                     ___ftmul@f1:	
  5587                           ; 3 bytes @ 0xE
  5588                           
  5589                           
  5590                           ; 3 bytes @ 0xE
  5591  002E                     	ds	1
  5592  002F                     MYI2C_Write2LEDBytes@LSBWriteByte:	
  5593  002F                     marshallPatchMemory@iPatchMemoryNDX:	
  5594                           ; 1 bytes @ 0xF
  5595                           
  5596                           
  5597                           ; 2 bytes @ 0xF
  5598  002F                     	ds	1
  5599  0030                     ??_MYI2C_Write2LEDBytes:	
  5600  0030                     MYI2C_Write16EEPROMBytes@pData:	
  5601                           ; 1 bytes @ 0x10
  5602                           
  5603                           
  5604                           ; 2 bytes @ 0x10
  5605  0030                     	ds	1
  5606  0031                     ??_LED7SegPulseClock:	
  5607  0031                     ??_LED7SegShiftOutPulseClock:	
  5608                           ; 1 bytes @ 0x11
  5609                           
  5610  0031                     ___ftdiv@f1:	
  5611                           ; 1 bytes @ 0x11
  5612                           
  5613  0031                     ___ftmul@f2:	
  5614                           ; 3 bytes @ 0x11
  5615                           
  5616                           
  5617                           ; 3 bytes @ 0x11
  5618  0031                     	ds	1
  5619  0032                     ??_MYI2C_Write16EEPROMBytes:	
  5620  0032                     LED7SegShiftOutPulseClock@val:	
  5621                           ; 1 bytes @ 0x12
  5622                           
  5623                           
  5624                           ; 1 bytes @ 0x12
  5625  0032                     	ds	1
  5626  0033                     LED7SegShiftOutPulseClock@i:	
  5627                           
  5628                           ; 1 bytes @ 0x13
  5629  0033                     	ds	1
  5630  0034                     ?_LED7SegDisplayValueByDigit:	
  5631  0034                     ??___ftdiv:	
  5632                           ; 1 bytes @ 0x14
  5633                           
  5634  0034                     ??___ftmul:	
  5635                           ; 1 bytes @ 0x14
  5636                           
  5637  0034                     MYI2C_Write2LEDBytes@nCount:	
  5638                           ; 1 bytes @ 0x14
  5639                           
  5640  0034                     LED7SegDisplayValueByDigit@iTensDigit:	
  5641                           ; 2 bytes @ 0x14
  5642                           
  5643                           
  5644                           ; 2 bytes @ 0x14
  5645  0034                     	ds	2
  5646  0036                     MYI2C_Write2LEDBytes@slaveDeviceAddress:	
  5647  0036                     LED7SegDisplayValueByDigit@iUnitsDigit:	
  5648                           ; 1 bytes @ 0x16
  5649                           
  5650  0036                     MYI2C_Write16EEPROMBytes@writeBuffer:	
  5651                           ; 2 bytes @ 0x16
  5652                           
  5653                           
  5654                           ; 17 bytes @ 0x16
  5655  0036                     	ds	1
  5656  0037                     MYI2C_Write2LEDBytes@counter:	
  5657                           
  5658                           ; 2 bytes @ 0x17
  5659  0037                     	ds	1
  5660  0038                     ??_LED7SegDisplayValueByDigit:	
  5661  0038                     ___ftdiv@cntr:	
  5662                           ; 1 bytes @ 0x18
  5663                           
  5664  0038                     ___ftmul@exp:	
  5665                           ; 1 bytes @ 0x18
  5666                           
  5667  0038                     LED7SegDisplayValueByDigit@iTensCode:	
  5668                           ; 1 bytes @ 0x18
  5669                           
  5670                           
  5671                           ; 2 bytes @ 0x18
  5672  0038                     	ds	1
  5673  0039                     MYI2C_Write2LEDBytes@timeOut:	
  5674  0039                     ___ftdiv@f3:	
  5675                           ; 2 bytes @ 0x19
  5676                           
  5677  0039                     ___ftmul@f3_as_product:	
  5678                           ; 3 bytes @ 0x19
  5679                           
  5680                           
  5681                           ; 3 bytes @ 0x19
  5682  0039                     	ds	2
  5683  003B                     MYI2C_Write2LEDBytes@pointerByte:	
  5684                           
  5685                           ; 1 bytes @ 0x1B
  5686  003B                     	ds	1
  5687  003C                     ___ftdiv@exp:	
  5688  003C                     ___ftmul@cntr:	
  5689                           ; 1 bytes @ 0x1C
  5690                           
  5691  003C                     MYI2C_Write2LEDBytes@writeBuffer:	
  5692                           ; 1 bytes @ 0x1C
  5693                           
  5694                           
  5695                           ; 3 bytes @ 0x1C
  5696  003C                     	ds	1
  5697  003D                     ___ftdiv@sign:	
  5698  003D                     ___ftmul@sign:	
  5699                           ; 1 bytes @ 0x1D
  5700                           
  5701                           
  5702                           ; 1 bytes @ 0x1D
  5703  003D                     	ds	1
  5704  003E                     ?___fttol:	
  5705  003E                     ___fttol@f1:	
  5706                           ; 4 bytes @ 0x1E
  5707                           
  5708                           
  5709                           ; 3 bytes @ 0x1E
  5710  003E                     	ds	1
  5711  003F                     MYI2C_Write2LEDBytes@status:	
  5712                           
  5713                           ; 1 bytes @ 0x1F
  5714  003F                     	ds	1
  5715  0040                     ?_blinkyLoop:	
  5716  0040                     blinkyLoop@maxLoops:	
  5717                           ; 1 bytes @ 0x20
  5718                           
  5719                           
  5720                           ; 2 bytes @ 0x20
  5721  0040                     	ds	2
  5722  0042                     ??_blinkyLoop:	
  5723  0042                     ??___fttol:	
  5724                           ; 1 bytes @ 0x22
  5725                           
  5726                           
  5727                           ; 1 bytes @ 0x22
  5728  0042                     	ds	2
  5729  0044                     blinkyLoop@delayTime:	
  5730                           
  5731                           ; 2 bytes @ 0x24
  5732  0044                     	ds	2
  5733  0046                     ___fttol@sign1:	
  5734  0046                     blinkyLoop@loopCount:	
  5735                           ; 1 bytes @ 0x26
  5736                           
  5737                           
  5738                           ; 2 bytes @ 0x26
  5739  0046                     	ds	1
  5740  0047                     MYI2C_Write16EEPROMBytes@iPatchAddressLow:	
  5741  0047                     ___fttol@lval:	
  5742                           ; 1 bytes @ 0x27
  5743                           
  5744                           
  5745                           ; 4 bytes @ 0x27
  5746  0047                     	ds	1
  5747  0048                     MYI2C_Write16EEPROMBytes@nCount:	
  5748                           
  5749                           ; 2 bytes @ 0x28
  5750  0048                     	ds	2
  5751  004A                     MYI2C_Write16EEPROMBytes@timeOut:	
  5752                           
  5753                           ; 2 bytes @ 0x2A
  5754  004A                     	ds	1
  5755  004B                     ___fttol@exp1:	
  5756                           
  5757                           ; 1 bytes @ 0x2B
  5758  004B                     	ds	1
  5759  004C                     ?_putByte:	
  5760  004C                     MYI2C_Write16EEPROMBytes@pointerByte:	
  5761                           ; 1 bytes @ 0x2C
  5762                           
  5763  004C                     putByte@clockPin:	
  5764                           ; 1 bytes @ 0x2C
  5765                           
  5766                           
  5767                           ; 2 bytes @ 0x2C
  5768  004C                     	ds	1
  5769  004D                     MYI2C_Write16EEPROMBytes@slaveDeviceAddress:	
  5770                           
  5771                           ; 1 bytes @ 0x2D
  5772  004D                     	ds	1
  5773  004E                     ??_putByte:	
  5774  004E                     MYI2C_Write16EEPROMBytes@iPatchAddressHigh:	
  5775                           ; 1 bytes @ 0x2E
  5776                           
  5777                           
  5778                           ; 1 bytes @ 0x2E
  5779  004E                     	ds	1
  5780  004F                     MYI2C_Write16EEPROMBytes@counter:	
  5781                           
  5782                           ; 2 bytes @ 0x2F
  5783  004F                     	ds	2
  5784  0051                     MYI2C_Write16EEPROMBytes@i:	
  5785                           
  5786                           ; 2 bytes @ 0x31
  5787  0051                     	ds	1
  5788  0052                     putByte@data:	
  5789                           
  5790                           ; 1 bytes @ 0x32
  5791  0052                     	ds	1
  5792  0053                     putByte@mask:	
  5793  0053                     MYI2C_Write16EEPROMBytes@status:	
  5794                           ; 1 bytes @ 0x33
  5795                           
  5796                           
  5797                           ; 1 bytes @ 0x33
  5798  0053                     	ds	1
  5799  0054                     ?_savePatch:	
  5800  0054                     putByte@i:	
  5801                           ; 1 bytes @ 0x34
  5802                           
  5803  0054                     savePatch@PatchNumber:	
  5804                           ; 1 bytes @ 0x34
  5805                           
  5806                           
  5807                           ; 2 bytes @ 0x34
  5808  0054                     	ds	1
  5809  0055                     ??_initDAC528:	
  5810  0055                     ?_writeDAC528:	
  5811                           ; 1 bytes @ 0x35
  5812                           
  5813  0055                     writeDAC528@dacNumber:	
  5814                           ; 1 bytes @ 0x35
  5815                           
  5816                           
  5817                           ; 2 bytes @ 0x35
  5818  0055                     	ds	1
  5819  0056                     ??_savePatch:	
  5820                           
  5821                           ; 1 bytes @ 0x36
  5822  0056                     	ds	1
  5823  0057                     writeDAC528@dacData:	
  5824                           
  5825                           ; 1 bytes @ 0x37
  5826  0057                     	ds	1
  5827  0058                     ??_writeDAC528:	
  5828                           
  5829                           ; 1 bytes @ 0x38
  5830  0058                     	ds	1
  5831  0059                     savePatch@iPatchAddressHigh:	
  5832  0059                     writeDAC528@wkDacNumber:	
  5833                           ; 1 bytes @ 0x39
  5834                           
  5835                           
  5836                           ; 1 bytes @ 0x39
  5837  0059                     	ds	1
  5838  005A                     ?_loadPatch:	
  5839  005A                     savePatch@iPatchAddressLow:	
  5840                           ; 1 bytes @ 0x3A
  5841                           
  5842  005A                     loadPatch@PatchNumber:	
  5843                           ; 1 bytes @ 0x3A
  5844                           
  5845                           
  5846                           ; 2 bytes @ 0x3A
  5847  005A                     	ds	1
  5848  005B                     savePatch@pData:	
  5849                           
  5850                           ; 2 bytes @ 0x3B
  5851  005B                     	ds	1
  5852  005C                     ??_loadPatch:	
  5853                           
  5854                           ; 1 bytes @ 0x3C
  5855  005C                     	ds	1
  5856  005D                     savePatch@idx:	
  5857                           
  5858                           ; 2 bytes @ 0x3D
  5859  005D                     	ds	1
  5860  005E                     loadPatch@iPatchAddress:	
  5861                           
  5862                           ; 2 bytes @ 0x3E
  5863  005E                     	ds	1
  5864  005F                     savePatch@batchNum:	
  5865                           
  5866                           ; 2 bytes @ 0x3F
  5867  005F                     	ds	1
  5868  0060                     loadPatch@i:	
  5869                           
  5870                           ; 2 bytes @ 0x40
  5871  0060                     	ds	1
  5872  0061                     savePatch@iPatchAddress:	
  5873                           
  5874                           ; 2 bytes @ 0x41
  5875  0061                     	ds	2
  5876  0063                     ??_main:	
  5877                           
  5878                           ; 1 bytes @ 0x43
  5879  0063                     	ds	4
  5880                           
  5881                           	psect	maintext
  5882  0064                     __pmaintext:	
  5883 ;;
  5884 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  5885 ;;
  5886 ;; *************** function _main *****************
  5887 ;; Defined at:
  5888 ;;		line 250 in file "main.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;		None
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  fx              2   18[BANK1 ] int 
  5893 ;;  fx              2   14[BANK1 ] int 
  5894 ;;  dFader8bitVa    3    0        int 
  5895 ;;  faderValue      2   16[BANK1 ] int 
  5896 ;;  SaveDebounce    2   11[BANK1 ] int 
  5897 ;;  LoadDebounce    2    9[BANK1 ] int 
  5898 ;;  iLoopCounter    2    5[BANK1 ] unsigned int 
  5899 ;;  iCounter        2    1[BANK1 ] unsigned int 
  5900 ;;  iLSByte         2    0        unsigned int 
  5901 ;;  iMSByte         2    0        unsigned int 
  5902 ;;  fader8bitVal    1   13[BANK1 ] unsigned char 
  5903 ;;  POT1Value       1    8[BANK1 ] unsigned char 
  5904 ;;  POT0Value       1    7[BANK1 ] unsigned char 
  5905 ;;  prevFader8bi    1    4[BANK1 ] unsigned char 
  5906 ;;  iChangeCount    1    3[BANK1 ] unsigned char 
  5907 ;;  readStatus      1    0[BANK1 ] enum E14335
  5908 ;;  DACDataValue    1    0        unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : B1F/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;      Totals:         0       4      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;Total ram usage:       24 bytes
  5923 ;; Hardware stack levels required when called:    8
  5924 ;; This function calls:
  5925 ;;		_ADCC_GetSingleConversion
  5926 ;;		_InitPanelInChannels
  5927 ;;		_InitmvcChannels
  5928 ;;		_LED7SegDisplayValueByDigit
  5929 ;;		_LED7SegSetup
  5930 ;;		_SYSTEM_Initialize
  5931 ;;		___awtoft
  5932 ;;		___ftdiv
  5933 ;;		___fttol
  5934 ;;		___wmul
  5935 ;;		_blinkyLoop
  5936 ;;		_delay
  5937 ;;		_initDAC528
  5938 ;;		_loadPatch
  5939 ;;		_savePatch
  5940 ;;		_writeDAC528
  5941 ;; This function is called by:
  5942 ;;		Startup code after reset
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           
  5947                           ;psect for function _main
  5948  0064                     _main:	
  5949                           
  5950                           ;main.c: 252: uint16_t iCounter=0;
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5954  0064  0021               	movlb	1	; select bank1
  5955  0065  01D9               	clrf	main@iCounter^(0+128)
  5956  0066  01DA               	clrf	(main@iCounter+1)^(0+128)
  5957                           
  5958                           ;main.c: 253: uint16_t iMSByte;
  5959                           ;main.c: 254: uint16_t iLSByte;
  5960                           ;main.c: 255: const uint16_t iResetValue=100;
  5961                           ;main.c: 256: uint16_t iLoopCounter=0;
  5962  0067  01DD               	clrf	main@iLoopCounter^(0+128)
  5963  0068  01DE               	clrf	(main@iLoopCounter+1)^(0+128)
  5964                           
  5965                           ;main.c: 257: uint8_t iChangeCount=0;
  5966  0069  01DB               	clrf	main@iChangeCount^(0+128)
  5967                           
  5968                           ;main.c: 258: int faderValue;
  5969                           ;main.c: 259: uint8_t fader8bitValue;
  5970                           ;main.c: 260: uint8_t prevFader8bitValue;
  5971                           ;main.c: 261: uint8_t POT0Value;
  5972                           ;main.c: 262: uint8_t POT1Value;
  5973                           ;main.c: 263: uint8_t DACDataValue;
  5974                           ;main.c: 264: double dFader8bitValue;
  5975                           ;main.c: 265: int LoadDebounceCount=0;
  5976  006A  01E1               	clrf	main@LoadDebounceCount^(0+128)
  5977  006B  01E2               	clrf	(main@LoadDebounceCount+1)^(0+128)
  5978                           
  5979                           ;main.c: 266: int SaveDebounceCount=0;
  5980  006C  01E3               	clrf	main@SaveDebounceCount^(0+128)
  5981  006D  01E4               	clrf	(main@SaveDebounceCount+1)^(0+128)
  5982                           
  5983                           ;main.c: 268: I2C1_MESSAGE_STATUS readStatus=0;
  5984  006E  01D8               	clrf	main@readStatus^(0+128)
  5985                           
  5986                           ;main.c: 271: SYSTEM_Initialize();
  5987  006F  3189  2193  3180   	fcall	_SYSTEM_Initialize
  5988                           
  5989                           ;main.c: 272: initDAC528();
  5990  0072  3189  21FE  3180   	fcall	_initDAC528
  5991                           
  5992                           ;main.c: 273: LED7SegSetup();
  5993  0075  3189  21B7  3180   	fcall	_LED7SegSetup
  5994                           
  5995                           ;main.c: 275: InitPanelInChannels();
  5996  0078  318A  22AF  3180   	fcall	_InitPanelInChannels
  5997                           
  5998                           ;main.c: 276: InitmvcChannels();
  5999  007B  318A  2243  3180   	fcall	_InitmvcChannels
  6000                           
  6001                           ;main.c: 281: (INTCONbits.GIE = 1);
  6002  007E  178B               	bsf	11,7	;volatile
  6003                           
  6004                           ;main.c: 284: (INTCONbits.PEIE = 1);
  6005  007F  170B               	bsf	11,6	;volatile
  6006                           
  6007                           ;main.c: 295: for(int fx=0;fx<4;fx++){
  6008  0080  0021               	movlb	1	; select bank1
  6009  0081  01E6               	clrf	main@fx^(0+128)
  6010  0082  01E7               	clrf	(main@fx+1)^(0+128)
  6011  0083  0867               	movf	(main@fx+1)^(0+128),w
  6012  0084  3A80               	xorlw	128
  6013  0085  0020               	movlb	0	; select bank0
  6014  0086  00E3               	movwf	??_main
  6015  0087  3080               	movlw	128
  6016  0088  0263               	subwf	??_main,w
  6017  0089  1D03               	skipz
  6018  008A  288E               	goto	u4165
  6019  008B  3004               	movlw	4
  6020  008C  0021               	movlb	1	; select bank1
  6021  008D  0266               	subwf	main@fx^(0+128),w
  6022  008E                     u4165:	
  6023  008E  1803               	btfsc	3,0
  6024  008F  28D9               	goto	l4448
  6025  0090                     l4438:	
  6026                           
  6027                           ;main.c: 296: faderValue=ADCC_GetSingleConversion(fx);
  6028  0090  0021               	movlb	1	; select bank1
  6029  0091  0866               	movf	main@fx^(0+128),w
  6030  0092  3189  21D6  3180   	fcall	_ADCC_GetSingleConversion
  6031  0095  0020               	movlb	0	; select bank0
  6032  0096  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6033  0097  0021               	movlb	1	; select bank1
  6034  0098  00E9               	movwf	(main@faderValue+1)^(0+128)
  6035  0099  0020               	movlb	0	; select bank0
  6036  009A  0820               	movf	?_ADCC_GetSingleConversion,w
  6037  009B  0021               	movlb	1	; select bank1
  6038  009C  00E8               	movwf	main@faderValue^(0+128)
  6039                           
  6040                           ;main.c: 297: PanelInChannels[fx]=255-(faderValue>>2);
  6041  009D  0869               	movf	(main@faderValue+1)^(0+128),w
  6042  009E  0020               	movlb	0	; select bank0
  6043  009F  00E4               	movwf	??_main+1
  6044  00A0  0021               	movlb	1	; select bank1
  6045  00A1  0868               	movf	main@faderValue^(0+128),w
  6046  00A2  0020               	movlb	0	; select bank0
  6047  00A3  00E3               	movwf	??_main
  6048  00A4  0D64               	rlf	??_main+1,w
  6049  00A5  0CE4               	rrf	??_main+1,f
  6050  00A6  0CE3               	rrf	??_main,f
  6051  00A7  0D64               	rlf	??_main+1,w
  6052  00A8  0CE4               	rrf	??_main+1,f
  6053  00A9  0CE3               	rrf	??_main,f
  6054  00AA  0863               	movf	??_main,w
  6055  00AB  3AFF               	xorlw	255
  6056  00AC  3E01               	addlw	1
  6057  00AD  3EFF               	addlw	255
  6058  00AE  00E5               	movwf	??_main+2
  6059  00AF  0021               	movlb	1	; select bank1
  6060  00B0  0866               	movf	main@fx^(0+128),w
  6061  00B1  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6062  00B2  0086               	movwf	6
  6063  00B3  0187               	clrf	7
  6064  00B4  0020               	movlb	0	; select bank0
  6065  00B5  0865               	movf	??_main+2,w
  6066  00B6  0081               	movwf	1
  6067                           
  6068                           ;main.c: 298: prevPanelInChannels[fx]= PanelInChannels[fx];
  6069  00B7  0021               	movlb	1	; select bank1
  6070  00B8  0866               	movf	main@fx^(0+128),w
  6071  00B9  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6072  00BA  0086               	movwf	6
  6073  00BB  0187               	clrf	7
  6074  00BC  0801               	movf	1,w
  6075  00BD  0020               	movlb	0	; select bank0
  6076  00BE  00E3               	movwf	??_main
  6077  00BF  0021               	movlb	1	; select bank1
  6078  00C0  0866               	movf	main@fx^(0+128),w
  6079  00C1  3EA0               	addlw	(low (_prevPanelInChannels| 0))& (0+255)
  6080  00C2  0086               	movwf	6
  6081  00C3  0187               	clrf	7
  6082  00C4  0020               	movlb	0	; select bank0
  6083  00C5  0863               	movf	??_main,w
  6084  00C6  0081               	movwf	1
  6085  00C7  3001               	movlw	1
  6086  00C8  0021               	movlb	1	; select bank1
  6087  00C9  07E6               	addwf	main@fx^(0+128),f
  6088  00CA  3000               	movlw	0
  6089  00CB  3DE7               	addwfc	(main@fx+1)^(0+128),f
  6090  00CC  0867               	movf	(main@fx+1)^(0+128),w
  6091  00CD  3A80               	xorlw	128
  6092  00CE  0020               	movlb	0	; select bank0
  6093  00CF  00E3               	movwf	??_main
  6094  00D0  3080               	movlw	128
  6095  00D1  0263               	subwf	??_main,w
  6096  00D2  1D03               	skipz
  6097  00D3  28D7               	goto	u4175
  6098  00D4  3004               	movlw	4
  6099  00D5  0021               	movlb	1	; select bank1
  6100  00D6  0266               	subwf	main@fx^(0+128),w
  6101  00D7                     u4175:	
  6102  00D7  1C03               	skipc
  6103  00D8  2890               	goto	l4438
  6104  00D9                     l4448:	
  6105                           
  6106                           ;main.c: 299: }
  6107                           ;main.c: 301: blinkyLoop(10);
  6108  00D9  300A               	movlw	10
  6109  00DA  0020               	movlb	0	; select bank0
  6110  00DB  00C0               	movwf	blinkyLoop@maxLoops
  6111  00DC  3000               	movlw	0
  6112  00DD  00C1               	movwf	blinkyLoop@maxLoops+1
  6113  00DE  318D  25BD  3180   	fcall	_blinkyLoop
  6114                           
  6115                           ;main.c: 306: PORTB |= 0x0F;
  6116  00E1  300F               	movlw	15
  6117  00E2  0020               	movlb	0	; select bank0
  6118  00E3  00E3               	movwf	??_main
  6119  00E4  0863               	movf	??_main,w
  6120  00E5  048D               	iorwf	13,f	;volatile
  6121                           
  6122                           ;main.c: 307: PORTC |= 0xE0;
  6123  00E6  30E0               	movlw	224
  6124  00E7  00E3               	movwf	??_main
  6125  00E8  0863               	movf	??_main,w
  6126  00E9  048E               	iorwf	14,f	;volatile
  6127                           
  6128                           ;main.c: 308: ODCONB &= 0xF0;
  6129  00EA  30F0               	movlw	240
  6130  00EB  00E3               	movwf	??_main
  6131  00EC  0863               	movf	??_main,w
  6132  00ED  003E               	movlb	30	; select bank30
  6133  00EE  05C5               	andwf	69,f	;volatile
  6134                           
  6135                           ;main.c: 309: ODCONC &= 0x1F;
  6136  00EF  301F               	movlw	31
  6137  00F0  0020               	movlb	0	; select bank0
  6138  00F1  00E3               	movwf	??_main
  6139  00F2  0863               	movf	??_main,w
  6140  00F3  003E               	movlb	30	; select bank30
  6141  00F4  05D0               	andwf	80,f	;volatile
  6142  00F5                     l4458:	
  6143                           ;main.c: 311: while (1) {
  6144                           
  6145                           
  6146                           ;main.c: 312: iLoopCounter++;
  6147  00F5  3001               	movlw	1
  6148  00F6  0021               	movlb	1	; select bank1
  6149  00F7  07DD               	addwf	main@iLoopCounter^(0+128),f
  6150  00F8  3000               	movlw	0
  6151  00F9  3DDE               	addwfc	(main@iLoopCounter+1)^(0+128),f
  6152                           
  6153                           ;main.c: 313: if (iResetValue<=iLoopCounter) iLoopCounter=0;
  6154  00FA  3028               	movlw	low (main@iResetValue| (0+32768))
  6155  00FB  0084               	movwf	4
  6156  00FC  3090               	movlw	high (main@iResetValue| (0+32768))
  6157  00FD  0085               	movwf	5
  6158  00FE  3F00               	moviw [0]fsr0
  6159  00FF  0020               	movlb	0	; select bank0
  6160  0100  00E3               	movwf	??_main
  6161  0101  3F01               	moviw [1]fsr0
  6162  0102  00E4               	movwf	??_main+1
  6163  0103  0864               	movf	??_main+1,w
  6164  0104  0021               	movlb	1	; select bank1
  6165  0105  025E               	subwf	(main@iLoopCounter+1)^(0+128),w
  6166  0106  1D03               	skipz
  6167  0107  290C               	goto	u4185
  6168  0108  0020               	movlb	0	; select bank0
  6169  0109  0863               	movf	??_main,w
  6170  010A  0021               	movlb	1	; select bank1
  6171  010B  025D               	subwf	main@iLoopCounter^(0+128),w
  6172  010C                     u4185:	
  6173  010C  1C03               	skipc
  6174  010D  2910               	goto	l523
  6175  010E  01DD               	clrf	main@iLoopCounter^(0+128)
  6176  010F  01DE               	clrf	(main@iLoopCounter+1)^(0+128)
  6177  0110                     l523:	
  6178                           
  6179                           ;main.c: 316: {
  6180                           ;main.c: 318: for(int fx=0;fx<cMixFaderCount;fx++){
  6181  0110  01EA               	clrf	main@fx_978^(0+128)
  6182  0111  01EB               	clrf	(main@fx_978+1)^(0+128)
  6183  0112  086B               	movf	(main@fx_978+1)^(0+128),w
  6184  0113  3A80               	xorlw	128
  6185  0114  0020               	movlb	0	; select bank0
  6186  0115  00E3               	movwf	??_main
  6187  0116  3080               	movlw	128
  6188  0117  0263               	subwf	??_main,w
  6189  0118  1D03               	skipz
  6190  0119  291D               	goto	u4195
  6191  011A  3004               	movlw	4
  6192  011B  0021               	movlb	1	; select bank1
  6193  011C  026A               	subwf	main@fx_978^(0+128),w
  6194  011D                     u4195:	
  6195  011D  1803               	btfsc	3,0
  6196  011E  29FC               	goto	l4498
  6197  011F                     l4468:	
  6198                           
  6199                           ;main.c: 319: faderValue=ADCC_GetSingleConversion(fx);
  6200  011F  0021               	movlb	1	; select bank1
  6201  0120  086A               	movf	main@fx_978^(0+128),w
  6202  0121  3189  21D6  3180   	fcall	_ADCC_GetSingleConversion
  6203  0124  0020               	movlb	0	; select bank0
  6204  0125  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6205  0126  0021               	movlb	1	; select bank1
  6206  0127  00E9               	movwf	(main@faderValue+1)^(0+128)
  6207  0128  0020               	movlb	0	; select bank0
  6208  0129  0820               	movf	?_ADCC_GetSingleConversion,w
  6209  012A  0021               	movlb	1	; select bank1
  6210  012B  00E8               	movwf	main@faderValue^(0+128)
  6211                           
  6212                           ;main.c: 320: _delay((unsigned long)((1)*(32000000/4000.0)));
  6213  012C  300B               	movlw	11
  6214  012D  0020               	movlb	0	; select bank0
  6215  012E  00E3               	movwf	??_main
  6216  012F  3062               	movlw	98
  6217  0130                     u4407:	
  6218  0130  0B89               	decfsz	9,f
  6219  0131  2930               	goto	u4407
  6220  0132  0BE3               	decfsz	??_main,f
  6221  0133  2930               	goto	u4407
  6222  0134  0000               	nop
  6223                           
  6224                           ;main.c: 321: faderValue=ADCC_GetSingleConversion(fx);
  6225  0135  0021               	movlb	1	; select bank1
  6226  0136  086A               	movf	main@fx_978^(0+128),w
  6227  0137  3189  21D6  3180   	fcall	_ADCC_GetSingleConversion
  6228  013A  0020               	movlb	0	; select bank0
  6229  013B  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6230  013C  0021               	movlb	1	; select bank1
  6231  013D  00E9               	movwf	(main@faderValue+1)^(0+128)
  6232  013E  0020               	movlb	0	; select bank0
  6233  013F  0820               	movf	?_ADCC_GetSingleConversion,w
  6234  0140  0021               	movlb	1	; select bank1
  6235  0141  00E8               	movwf	main@faderValue^(0+128)
  6236                           
  6237                           ;main.c: 322: PanelInChannels[fx]=255-(faderValue>>2);
  6238  0142  0869               	movf	(main@faderValue+1)^(0+128),w
  6239  0143  0020               	movlb	0	; select bank0
  6240  0144  00E4               	movwf	??_main+1
  6241  0145  0021               	movlb	1	; select bank1
  6242  0146  0868               	movf	main@faderValue^(0+128),w
  6243  0147  0020               	movlb	0	; select bank0
  6244  0148  00E3               	movwf	??_main
  6245  0149  0D64               	rlf	??_main+1,w
  6246  014A  0CE4               	rrf	??_main+1,f
  6247  014B  0CE3               	rrf	??_main,f
  6248  014C  0D64               	rlf	??_main+1,w
  6249  014D  0CE4               	rrf	??_main+1,f
  6250  014E  0CE3               	rrf	??_main,f
  6251  014F  0863               	movf	??_main,w
  6252  0150  3AFF               	xorlw	255
  6253  0151  3E01               	addlw	1
  6254  0152  3EFF               	addlw	255
  6255  0153  00E5               	movwf	??_main+2
  6256  0154  0021               	movlb	1	; select bank1
  6257  0155  086A               	movf	main@fx_978^(0+128),w
  6258  0156  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6259  0157  0086               	movwf	6
  6260  0158  0187               	clrf	7
  6261  0159  0020               	movlb	0	; select bank0
  6262  015A  0865               	movf	??_main+2,w
  6263  015B  0081               	movwf	1
  6264                           
  6265                           ;main.c: 324: fader8bitValue=PanelInChannels[fx];
  6266  015C  0021               	movlb	1	; select bank1
  6267  015D  086A               	movf	main@fx_978^(0+128),w
  6268  015E  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6269  015F  0086               	movwf	6
  6270  0160  0187               	clrf	7
  6271  0161  0801               	movf	1,w
  6272  0162  0020               	movlb	0	; select bank0
  6273  0163  00E3               	movwf	??_main
  6274  0164  0863               	movf	??_main,w
  6275  0165  0021               	movlb	1	; select bank1
  6276  0166  00E5               	movwf	main@fader8bitValue^(0+128)
  6277                           
  6278                           ;main.c: 325: if( (PanelInChannels[fx]<(mvcChannels[fx]+4))
  6279                           ;main.c: 326: && (PanelInChannels[fx]>(mvcChannels[fx]-4)) ) {
  6280  0167  086A               	movf	main@fx_978^(0+128),w
  6281  0168  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6282  0169  0086               	movwf	6
  6283  016A  0187               	clrf	7
  6284  016B  0801               	movf	1,w
  6285  016C  3E04               	addlw	4
  6286  016D  0020               	movlb	0	; select bank0
  6287  016E  00E3               	movwf	??_main
  6288  016F  3000               	movlw	0
  6289  0170  1803               	skipnc
  6290  0171  3001               	movlw	1
  6291  0172  00E4               	movwf	??_main+1
  6292  0173  0021               	movlb	1	; select bank1
  6293  0174  086A               	movf	main@fx_978^(0+128),w
  6294  0175  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6295  0176  0086               	movwf	6
  6296  0177  0187               	clrf	7
  6297  0178  0020               	movlb	0	; select bank0
  6298  0179  0864               	movf	??_main+1,w
  6299  017A  3A80               	xorlw	128
  6300  017B  3C80               	sublw	128
  6301  017C  1D03               	skipz
  6302  017D  2980               	goto	u4205
  6303  017E  0863               	movf	??_main,w
  6304  017F  0201               	subwf	1,w
  6305  0180                     u4205:	
  6306  0180  1803               	skipnc
  6307  0181  29A7               	goto	l526
  6308  0182  0021               	movlb	1	; select bank1
  6309  0183  086A               	movf	main@fx_978^(0+128),w
  6310  0184  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6311  0185  0086               	movwf	6
  6312  0186  0187               	clrf	7
  6313  0187  086A               	movf	main@fx_978^(0+128),w
  6314  0188  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6315  0189  0084               	movwf	4
  6316  018A  0185               	clrf	5
  6317  018B  0800               	movf	0,w
  6318  018C  3EFC               	addlw	252
  6319  018D  0020               	movlb	0	; select bank0
  6320  018E  00E3               	movwf	??_main
  6321  018F  30FF               	movlw	255
  6322  0190  1803               	skipnc
  6323  0191  3000               	movlw	0
  6324  0192  00E4               	movwf	??_main+1
  6325  0193  0864               	movf	??_main+1,w
  6326  0194  3A80               	xorlw	128
  6327  0195  00E5               	movwf	??_main+2
  6328  0196  3080               	movlw	128
  6329  0197  0265               	subwf	??_main+2,w
  6330  0198  1D03               	skipz
  6331  0199  299C               	goto	u4215
  6332  019A  0801               	movf	1,w
  6333  019B  0263               	subwf	??_main,w
  6334  019C                     u4215:	
  6335  019C  1803               	skipnc
  6336  019D  29A7               	goto	l526
  6337                           
  6338                           ;main.c: 327: faderActiveFlag[fx]=1;
  6339  019E  0021               	movlb	1	; select bank1
  6340  019F  086A               	movf	main@fx_978^(0+128),w
  6341  01A0  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  6342  01A1  0086               	movwf	6
  6343  01A2  0187               	clrf	7
  6344  01A3  0181               	clrf	1
  6345  01A4  0A81               	incf	1,f
  6346                           
  6347                           ;main.c: 328: LATB |= 0b00000010 ;
  6348  01A5  0020               	movlb	0	; select bank0
  6349  01A6  1497               	bsf	23,1	;volatile
  6350  01A7                     l526:	
  6351                           
  6352                           ;main.c: 329: }
  6353                           ;main.c: 330: if(faderActiveFlag[fx]>0){
  6354  01A7  0021               	movlb	1	; select bank1
  6355  01A8  086A               	movf	main@fx_978^(0+128),w
  6356  01A9  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  6357  01AA  0086               	movwf	6
  6358  01AB  0187               	clrf	7
  6359  01AC  0801               	movf	1,w
  6360  01AD  1903               	btfsc	3,2
  6361  01AE  29D1               	goto	l4490
  6362                           
  6363                           ;main.c: 331: mvcChannels[fx]=PanelInChannels[fx];
  6364  01AF  086A               	movf	main@fx_978^(0+128),w
  6365  01B0  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6366  01B1  0086               	movwf	6
  6367  01B2  0187               	clrf	7
  6368  01B3  0801               	movf	1,w
  6369  01B4  0020               	movlb	0	; select bank0
  6370  01B5  00E3               	movwf	??_main
  6371  01B6  0021               	movlb	1	; select bank1
  6372  01B7  086A               	movf	main@fx_978^(0+128),w
  6373  01B8  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6374  01B9  0086               	movwf	6
  6375  01BA  0187               	clrf	7
  6376  01BB  0020               	movlb	0	; select bank0
  6377  01BC  0863               	movf	??_main,w
  6378  01BD  0081               	movwf	1
  6379                           
  6380                           ;main.c: 332: writeDAC528(fx+4,fader8bitValue);
  6381  01BE  0021               	movlb	1	; select bank1
  6382  01BF  086A               	movf	main@fx_978^(0+128),w
  6383  01C0  3E04               	addlw	4
  6384  01C1  0020               	movlb	0	; select bank0
  6385  01C2  00D5               	movwf	writeDAC528@dacNumber
  6386  01C3  3000               	movlw	0
  6387  01C4  0021               	movlb	1	; select bank1
  6388  01C5  3D6B               	addwfc	(main@fx_978+1)^(0+128),w
  6389  01C6  0020               	movlb	0	; select bank0
  6390  01C7  00D6               	movwf	writeDAC528@dacNumber+1
  6391  01C8  0021               	movlb	1	; select bank1
  6392  01C9  0865               	movf	main@fader8bitValue^(0+128),w
  6393  01CA  0020               	movlb	0	; select bank0
  6394  01CB  00E3               	movwf	??_main
  6395  01CC  0863               	movf	??_main,w
  6396  01CD  00D7               	movwf	writeDAC528@dacData
  6397  01CE  318B  230F  3180   	fcall	_writeDAC528
  6398  01D1                     l4490:	
  6399                           
  6400                           ;main.c: 333: }
  6401                           ;main.c: 334: prevPanelInChannels[fx]=PanelInChannels[fx];
  6402  01D1  0021               	movlb	1	; select bank1
  6403  01D2  086A               	movf	main@fx_978^(0+128),w
  6404  01D3  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6405  01D4  0086               	movwf	6
  6406  01D5  0187               	clrf	7
  6407  01D6  0801               	movf	1,w
  6408  01D7  0020               	movlb	0	; select bank0
  6409  01D8  00E3               	movwf	??_main
  6410  01D9  0021               	movlb	1	; select bank1
  6411  01DA  086A               	movf	main@fx_978^(0+128),w
  6412  01DB  3EA0               	addlw	(low (_prevPanelInChannels| 0))& (0+255)
  6413  01DC  0086               	movwf	6
  6414  01DD  0187               	clrf	7
  6415  01DE  0020               	movlb	0	; select bank0
  6416  01DF  0863               	movf	??_main,w
  6417  01E0  0081               	movwf	1
  6418                           
  6419                           ;main.c: 335: _delay((unsigned long)((1)*(32000000/4000.0)));
  6420  01E1  300B               	movlw	11
  6421  01E2  0020               	movlb	0	; select bank0
  6422  01E3  00E3               	movwf	??_main
  6423  01E4  3062               	movlw	98
  6424  01E5                     u4417:	
  6425  01E5  0B89               	decfsz	9,f
  6426  01E6  29E5               	goto	u4417
  6427  01E7  0BE3               	decfsz	??_main,f
  6428  01E8  29E5               	goto	u4417
  6429  01E9  0000               	nop
  6430  01EA  3001               	movlw	1
  6431  01EB  0021               	movlb	1	; select bank1
  6432  01EC  07EA               	addwf	main@fx_978^(0+128),f
  6433  01ED  3000               	movlw	0
  6434  01EE  3DEB               	addwfc	(main@fx_978+1)^(0+128),f
  6435  01EF  086B               	movf	(main@fx_978+1)^(0+128),w
  6436  01F0  3A80               	xorlw	128
  6437  01F1  0020               	movlb	0	; select bank0
  6438  01F2  00E3               	movwf	??_main
  6439  01F3  3080               	movlw	128
  6440  01F4  0263               	subwf	??_main,w
  6441  01F5  1D03               	skipz
  6442  01F6  29FA               	goto	u4235
  6443  01F7  3004               	movlw	4
  6444  01F8  0021               	movlb	1	; select bank1
  6445  01F9  026A               	subwf	main@fx_978^(0+128),w
  6446  01FA                     u4235:	
  6447  01FA  1C03               	skipc
  6448  01FB  291F               	goto	l4468
  6449  01FC                     l4498:	
  6450                           
  6451                           ;main.c: 336: }
  6452                           ;main.c: 339: _delay((unsigned long)((1)*(32000000/4000.0)));
  6453  01FC  300B               	movlw	11
  6454  01FD  0020               	movlb	0	; select bank0
  6455  01FE  00E3               	movwf	??_main
  6456  01FF  3062               	movlw	98
  6457  0200                     u4427:	
  6458  0200  0B89               	decfsz	9,f
  6459  0201  2A00               	goto	u4427
  6460  0202  0BE3               	decfsz	??_main,f
  6461  0203  2A00               	goto	u4427
  6462  0204  0000               	nop
  6463                           
  6464                           ;main.c: 340: faderValue=ADCC_GetSingleConversion(POT0);
  6465  0205  3004               	movlw	4
  6466  0206  3189  21D6  3180   	fcall	_ADCC_GetSingleConversion
  6467  0209  0020               	movlb	0	; select bank0
  6468  020A  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6469  020B  0021               	movlb	1	; select bank1
  6470  020C  00E9               	movwf	(main@faderValue+1)^(0+128)
  6471  020D  0020               	movlb	0	; select bank0
  6472  020E  0820               	movf	?_ADCC_GetSingleConversion,w
  6473  020F  0021               	movlb	1	; select bank1
  6474  0210  00E8               	movwf	main@faderValue^(0+128)
  6475                           
  6476                           ;main.c: 341: _delay((unsigned long)((1)*(32000000/4000.0)));
  6477  0211  300B               	movlw	11
  6478  0212  0020               	movlb	0	; select bank0
  6479  0213  00E3               	movwf	??_main
  6480  0214  3062               	movlw	98
  6481  0215                     u4437:	
  6482  0215  0B89               	decfsz	9,f
  6483  0216  2A15               	goto	u4437
  6484  0217  0BE3               	decfsz	??_main,f
  6485  0218  2A15               	goto	u4437
  6486  0219  0000               	nop
  6487                           
  6488                           ;main.c: 342: faderValue=ADCC_GetSingleConversion(POT0);
  6489  021A  3004               	movlw	4
  6490  021B  3189  21D6  3180   	fcall	_ADCC_GetSingleConversion
  6491  021E  0020               	movlb	0	; select bank0
  6492  021F  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6493  0220  0021               	movlb	1	; select bank1
  6494  0221  00E9               	movwf	(main@faderValue+1)^(0+128)
  6495  0222  0020               	movlb	0	; select bank0
  6496  0223  0820               	movf	?_ADCC_GetSingleConversion,w
  6497  0224  0021               	movlb	1	; select bank1
  6498  0225  00E8               	movwf	main@faderValue^(0+128)
  6499                           
  6500                           ;main.c: 343: faderValue=1023-faderValue;
  6501  0226  0968               	comf	main@faderValue^(0+128),w
  6502  0227  0020               	movlb	0	; select bank0
  6503  0228  00E3               	movwf	??_main
  6504  0229  0021               	movlb	1	; select bank1
  6505  022A  0969               	comf	(main@faderValue+1)^(0+128),w
  6506  022B  0020               	movlb	0	; select bank0
  6507  022C  00E4               	movwf	??_main+1
  6508  022D  0AE3               	incf	??_main,f
  6509  022E  1903               	skipnz
  6510  022F  0AE4               	incf	??_main+1,f
  6511  0230  0863               	movf	??_main,w
  6512  0231  3EFF               	addlw	255
  6513  0232  0021               	movlb	1	; select bank1
  6514  0233  00E8               	movwf	main@faderValue^(0+128)
  6515  0234  3003               	movlw	3
  6516  0235  0020               	movlb	0	; select bank0
  6517  0236  3D64               	addwfc	??_main+1,w
  6518  0237  0021               	movlb	1	; select bank1
  6519  0238  00E9               	movwf	(main@faderValue+1)^(0+128)
  6520                           
  6521                           ;main.c: 345: POT0Value=faderValue/102.3;
  6522  0239  0869               	movf	(main@faderValue+1)^(0+128),w
  6523  023A  0020               	movlb	0	; select bank0
  6524  023B  00A9               	movwf	___awtoft@c+1
  6525  023C  0021               	movlb	1	; select bank1
  6526  023D  0868               	movf	main@faderValue^(0+128),w
  6527  023E  0020               	movlb	0	; select bank0
  6528  023F  00A8               	movwf	___awtoft@c
  6529  0240  318A  22ED  3180   	fcall	___awtoft
  6530  0243  0020               	movlb	0	; select bank0
  6531  0244  0828               	movf	?___awtoft,w
  6532  0245  00B1               	movwf	___ftdiv@f1
  6533  0246  0829               	movf	?___awtoft+1,w
  6534  0247  00B2               	movwf	___ftdiv@f1+1
  6535  0248  082A               	movf	?___awtoft+2,w
  6536  0249  00B3               	movwf	___ftdiv@f1+2
  6537  024A  309A               	movlw	154
  6538  024B  00AE               	movwf	___ftdiv@f2
  6539  024C  30CC               	movlw	204
  6540  024D  00AF               	movwf	___ftdiv@f2+1
  6541  024E  3042               	movlw	66
  6542  024F  00B0               	movwf	___ftdiv@f2+2
  6543  0250  3187  272E  3180   	fcall	___ftdiv
  6544  0253  0020               	movlb	0	; select bank0
  6545  0254  082E               	movf	?___ftdiv,w
  6546  0255  00BE               	movwf	___fttol@f1
  6547  0256  082F               	movf	?___ftdiv+1,w
  6548  0257  00BF               	movwf	___fttol@f1+1
  6549  0258  0830               	movf	?___ftdiv+2,w
  6550  0259  00C0               	movwf	___fttol@f1+2
  6551  025A  318E  2640  3180   	fcall	___fttol
  6552  025D  0020               	movlb	0	; select bank0
  6553  025E  083E               	movf	?___fttol,w
  6554  025F  00E3               	movwf	??_main
  6555  0260  0863               	movf	??_main,w
  6556  0261  0021               	movlb	1	; select bank1
  6557  0262  00DF               	movwf	main@POT0Value^(0+128)
  6558                           
  6559                           ;main.c: 346: _delay((unsigned long)((1)*(32000000/4000.0)));
  6560  0263  300B               	movlw	11
  6561  0264  0020               	movlb	0	; select bank0
  6562  0265  00E3               	movwf	??_main
  6563  0266  3062               	movlw	98
  6564  0267                     u4447:	
  6565  0267  0B89               	decfsz	9,f
  6566  0268  2A67               	goto	u4447
  6567  0269  0BE3               	decfsz	??_main,f
  6568  026A  2A67               	goto	u4447
  6569  026B  0000               	nop
  6570                           
  6571                           ;main.c: 347: faderValue=ADCC_GetSingleConversion(POT1);
  6572  026C  3005               	movlw	5
  6573  026D  3189  21D6  3180   	fcall	_ADCC_GetSingleConversion
  6574  0270  0020               	movlb	0	; select bank0
  6575  0271  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6576  0272  0021               	movlb	1	; select bank1
  6577  0273  00E9               	movwf	(main@faderValue+1)^(0+128)
  6578  0274  0020               	movlb	0	; select bank0
  6579  0275  0820               	movf	?_ADCC_GetSingleConversion,w
  6580  0276  0021               	movlb	1	; select bank1
  6581  0277  00E8               	movwf	main@faderValue^(0+128)
  6582                           
  6583                           ;main.c: 348: _delay((unsigned long)((1)*(32000000/4000.0)));
  6584  0278  300B               	movlw	11
  6585  0279  0020               	movlb	0	; select bank0
  6586  027A  00E3               	movwf	??_main
  6587  027B  3062               	movlw	98
  6588  027C                     u4457:	
  6589  027C  0B89               	decfsz	9,f
  6590  027D  2A7C               	goto	u4457
  6591  027E  0BE3               	decfsz	??_main,f
  6592  027F  2A7C               	goto	u4457
  6593  0280  0000               	nop
  6594                           
  6595                           ;main.c: 349: faderValue=ADCC_GetSingleConversion(POT1);
  6596  0281  3005               	movlw	5
  6597  0282  3189  21D6  3180   	fcall	_ADCC_GetSingleConversion
  6598  0285  0020               	movlb	0	; select bank0
  6599  0286  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6600  0287  0021               	movlb	1	; select bank1
  6601  0288  00E9               	movwf	(main@faderValue+1)^(0+128)
  6602  0289  0020               	movlb	0	; select bank0
  6603  028A  0820               	movf	?_ADCC_GetSingleConversion,w
  6604  028B  0021               	movlb	1	; select bank1
  6605  028C  00E8               	movwf	main@faderValue^(0+128)
  6606                           
  6607                           ;main.c: 350: faderValue=1023-faderValue;
  6608  028D  0968               	comf	main@faderValue^(0+128),w
  6609  028E  0020               	movlb	0	; select bank0
  6610  028F  00E3               	movwf	??_main
  6611  0290  0021               	movlb	1	; select bank1
  6612  0291  0969               	comf	(main@faderValue+1)^(0+128),w
  6613  0292  0020               	movlb	0	; select bank0
  6614  0293  00E4               	movwf	??_main+1
  6615  0294  0AE3               	incf	??_main,f
  6616  0295  1903               	skipnz
  6617  0296  0AE4               	incf	??_main+1,f
  6618  0297  0863               	movf	??_main,w
  6619  0298  3EFF               	addlw	255
  6620  0299  0021               	movlb	1	; select bank1
  6621  029A  00E8               	movwf	main@faderValue^(0+128)
  6622  029B  3003               	movlw	3
  6623  029C  0020               	movlb	0	; select bank0
  6624  029D  3D64               	addwfc	??_main+1,w
  6625  029E  0021               	movlb	1	; select bank1
  6626  029F  00E9               	movwf	(main@faderValue+1)^(0+128)
  6627                           
  6628                           ;main.c: 351: POT1Value=faderValue/102.3;
  6629  02A0  0869               	movf	(main@faderValue+1)^(0+128),w
  6630  02A1  0020               	movlb	0	; select bank0
  6631  02A2  00A9               	movwf	___awtoft@c+1
  6632  02A3  0021               	movlb	1	; select bank1
  6633  02A4  0868               	movf	main@faderValue^(0+128),w
  6634  02A5  0020               	movlb	0	; select bank0
  6635  02A6  00A8               	movwf	___awtoft@c
  6636  02A7  318A  22ED  3180   	fcall	___awtoft
  6637  02AA  0020               	movlb	0	; select bank0
  6638  02AB  0828               	movf	?___awtoft,w
  6639  02AC  00B1               	movwf	___ftdiv@f1
  6640  02AD  0829               	movf	?___awtoft+1,w
  6641  02AE  00B2               	movwf	___ftdiv@f1+1
  6642  02AF  082A               	movf	?___awtoft+2,w
  6643  02B0  00B3               	movwf	___ftdiv@f1+2
  6644  02B1  309A               	movlw	154
  6645  02B2  00AE               	movwf	___ftdiv@f2
  6646  02B3  30CC               	movlw	204
  6647  02B4  00AF               	movwf	___ftdiv@f2+1
  6648  02B5  3042               	movlw	66
  6649  02B6  00B0               	movwf	___ftdiv@f2+2
  6650  02B7  3187  272E  3180   	fcall	___ftdiv
  6651  02BA  0020               	movlb	0	; select bank0
  6652  02BB  082E               	movf	?___ftdiv,w
  6653  02BC  00BE               	movwf	___fttol@f1
  6654  02BD  082F               	movf	?___ftdiv+1,w
  6655  02BE  00BF               	movwf	___fttol@f1+1
  6656  02BF  0830               	movf	?___ftdiv+2,w
  6657  02C0  00C0               	movwf	___fttol@f1+2
  6658  02C1  318E  2640  3180   	fcall	___fttol
  6659  02C4  0020               	movlb	0	; select bank0
  6660  02C5  083E               	movf	?___fttol,w
  6661  02C6  00E3               	movwf	??_main
  6662  02C7  0863               	movf	??_main,w
  6663  02C8  0021               	movlb	1	; select bank1
  6664  02C9  00E0               	movwf	main@POT1Value^(0+128)
  6665                           
  6666                           ;main.c: 352: }
  6667                           ;main.c: 415: if (prevFader8bitValue!=fader8bitValue) {
  6668  02CA  085C               	movf	main@prevFader8bitValue^(0+128),w
  6669  02CB  0665               	xorwf	main@fader8bitValue^(0+128),w
  6670  02CC  1903               	skipnz
  6671  02CD  2AD4               	goto	l4518
  6672                           
  6673                           ;main.c: 416: iChangeCount++;
  6674  02CE  3001               	movlw	1
  6675  02CF  0020               	movlb	0	; select bank0
  6676  02D0  00E3               	movwf	??_main
  6677  02D1  0863               	movf	??_main,w
  6678  02D2  0021               	movlb	1	; select bank1
  6679  02D3  07DB               	addwf	main@iChangeCount^(0+128),f
  6680  02D4                     l4518:	
  6681                           
  6682                           ;main.c: 418: }
  6683                           ;main.c: 419: prevFader8bitValue=fader8bitValue;
  6684  02D4  0865               	movf	main@fader8bitValue^(0+128),w
  6685  02D5  0020               	movlb	0	; select bank0
  6686  02D6  00E3               	movwf	??_main
  6687  02D7  0863               	movf	??_main,w
  6688  02D8  0021               	movlb	1	; select bank1
  6689  02D9  00DC               	movwf	main@prevFader8bitValue^(0+128)
  6690                           
  6691                           ;main.c: 422: iCounter++;
  6692  02DA  3001               	movlw	1
  6693  02DB  07D9               	addwf	main@iCounter^(0+128),f
  6694  02DC  3000               	movlw	0
  6695  02DD  3DDA               	addwfc	(main@iCounter+1)^(0+128),f
  6696                           
  6697                           ;main.c: 423: if (fader8bitValue<252)
  6698  02DE  30FC               	movlw	252
  6699  02DF  0265               	subwf	main@fader8bitValue^(0+128),w
  6700  02E0  1803               	skipnc
  6701  02E1  2AF4               	goto	l4526
  6702                           
  6703                           ;main.c: 424: delay(1*(255-fader8bitValue));
  6704  02E2  0865               	movf	main@fader8bitValue^(0+128),w
  6705  02E3  0020               	movlb	0	; select bank0
  6706  02E4  00E3               	movwf	??_main
  6707  02E5  01E4               	clrf	??_main+1
  6708  02E6  09E3               	comf	??_main,f
  6709  02E7  09E4               	comf	??_main+1,f
  6710  02E8  0AE3               	incf	??_main,f
  6711  02E9  1903               	skipnz
  6712  02EA  0AE4               	incf	??_main+1,f
  6713  02EB  0863               	movf	??_main,w
  6714  02EC  3EFF               	addlw	255
  6715  02ED  00A6               	movwf	delay@delaytime
  6716  02EE  3000               	movlw	0
  6717  02EF  3D64               	addwfc	??_main+1,w
  6718  02F0  00A7               	movwf	delay@delaytime+1
  6719  02F1  318C  2432  3180   	fcall	_delay
  6720  02F4                     l4526:	
  6721                           
  6722                           ;main.c: 430: mvcPatchNumber=(POT1Value*10)+POT0Value;
  6723  02F4  0021               	movlb	1	; select bank1
  6724  02F5  085F               	movf	main@POT0Value^(0+128),w
  6725  02F6  0020               	movlb	0	; select bank0
  6726  02F7  00E3               	movwf	??_main
  6727  02F8  01E4               	clrf	??_main+1
  6728  02F9  0021               	movlb	1	; select bank1
  6729  02FA  0860               	movf	main@POT1Value^(0+128),w
  6730  02FB  0020               	movlb	0	; select bank0
  6731  02FC  00E5               	movwf	??_main+2
  6732  02FD  01E6               	clrf	??_main+3
  6733  02FE  0865               	movf	??_main+2,w
  6734  02FF  00A0               	movwf	___wmul@multiplier
  6735  0300  0866               	movf	??_main+3,w
  6736  0301  00A1               	movwf	___wmul@multiplier+1
  6737  0302  300A               	movlw	10
  6738  0303  00A2               	movwf	___wmul@multiplicand
  6739  0304  3000               	movlw	0
  6740  0305  00A3               	movwf	___wmul@multiplicand+1
  6741  0306  318A  2277  3180   	fcall	___wmul
  6742  0309  0020               	movlb	0	; select bank0
  6743  030A  0863               	movf	??_main,w
  6744  030B  0720               	addwf	?___wmul,w
  6745  030C  0021               	movlb	1	; select bank1
  6746  030D  00B9               	movwf	_mvcPatchNumber^(0+128)
  6747  030E  0020               	movlb	0	; select bank0
  6748  030F  0864               	movf	??_main+1,w
  6749  0310  3D21               	addwfc	?___wmul+1,w
  6750  0311  0021               	movlb	1	; select bank1
  6751  0312  00BA               	movwf	(_mvcPatchNumber+1)^(0+128)
  6752                           
  6753                           ;main.c: 431: LED7SegDisplayValueByDigit(POT1Value,POT0Value);
  6754  0313  0860               	movf	main@POT1Value^(0+128),w
  6755  0314  0020               	movlb	0	; select bank0
  6756  0315  00E3               	movwf	??_main
  6757  0316  01E4               	clrf	??_main+1
  6758  0317  0863               	movf	??_main,w
  6759  0318  00B4               	movwf	LED7SegDisplayValueByDigit@iTensDigit
  6760  0319  0864               	movf	??_main+1,w
  6761  031A  00B5               	movwf	LED7SegDisplayValueByDigit@iTensDigit+1
  6762  031B  0021               	movlb	1	; select bank1
  6763  031C  085F               	movf	main@POT0Value^(0+128),w
  6764  031D  0020               	movlb	0	; select bank0
  6765  031E  00E5               	movwf	??_main+2
  6766  031F  01E6               	clrf	??_main+3
  6767  0320  0865               	movf	??_main+2,w
  6768  0321  00B6               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit
  6769  0322  0866               	movf	??_main+3,w
  6770  0323  00B7               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit+1
  6771  0324  318B  2334  3180   	fcall	_LED7SegDisplayValueByDigit
  6772                           
  6773                           ;main.c: 436: if (PORTBbits.RB4 == 0){
  6774  0327  0020               	movlb	0	; select bank0
  6775  0328  1A0D               	btfsc	13,4	;volatile
  6776  0329  2B5F               	goto	l4542
  6777                           
  6778                           ;main.c: 438: LoadDebounceCount++;
  6779  032A  3001               	movlw	1
  6780  032B  0021               	movlb	1	; select bank1
  6781  032C  07E1               	addwf	main@LoadDebounceCount^(0+128),f
  6782  032D  3000               	movlw	0
  6783  032E  3DE2               	addwfc	(main@LoadDebounceCount+1)^(0+128),f
  6784                           
  6785                           ;main.c: 439: if(5<LoadDebounceCount) {
  6786  032F  0862               	movf	(main@LoadDebounceCount+1)^(0+128),w
  6787  0330  3A80               	xorlw	128
  6788  0331  0020               	movlb	0	; select bank0
  6789  0332  00E3               	movwf	??_main
  6790  0333  3080               	movlw	128
  6791  0334  0263               	subwf	??_main,w
  6792  0335  1D03               	skipz
  6793  0336  2B3A               	goto	u4275
  6794  0337  3006               	movlw	6
  6795  0338  0021               	movlb	1	; select bank1
  6796  0339  0261               	subwf	main@LoadDebounceCount^(0+128),w
  6797  033A                     u4275:	
  6798  033A  1C03               	skipc
  6799  033B  2B72               	goto	l4548
  6800                           
  6801                           ;main.c: 440: LATB &= 0b10011110 ;
  6802  033C  309E               	movlw	158
  6803  033D  0020               	movlb	0	; select bank0
  6804  033E  00E3               	movwf	??_main
  6805  033F  0863               	movf	??_main,w
  6806  0340  0597               	andwf	23,f	;volatile
  6807                           
  6808                           ;main.c: 442: loadPatch(mvcPatchNumber);
  6809  0341  0021               	movlb	1	; select bank1
  6810  0342  083A               	movf	(_mvcPatchNumber+1)^(0+128),w
  6811  0343  0020               	movlb	0	; select bank0
  6812  0344  00DB               	movwf	loadPatch@PatchNumber+1
  6813  0345  0021               	movlb	1	; select bank1
  6814  0346  0839               	movf	_mvcPatchNumber^(0+128),w
  6815  0347  0020               	movlb	0	; select bank0
  6816  0348  00DA               	movwf	loadPatch@PatchNumber
  6817  0349  318B  23AC  3180   	fcall	_loadPatch
  6818                           
  6819                           ;main.c: 444: LoadDebounceCount=1;
  6820  034C  3001               	movlw	1
  6821  034D  0021               	movlb	1	; select bank1
  6822  034E  00E1               	movwf	main@LoadDebounceCount^(0+128)
  6823  034F  3000               	movlw	0
  6824  0350  00E2               	movwf	(main@LoadDebounceCount^(0+128)+1)
  6825                           
  6826                           ;main.c: 445: _delay((unsigned long)((500)*(32000000/4000.0)));
  6827  0351  3015               	movlw	21
  6828  0352  0020               	movlb	0	; select bank0
  6829  0353  00E4               	movwf	??_main+1
  6830  0354  304B               	movlw	75
  6831  0355  00E3               	movwf	??_main
  6832  0356  30BE               	movlw	190
  6833  0357                     u4467:	
  6834  0357  0B89               	decfsz	9,f
  6835  0358  2B57               	goto	u4467
  6836  0359  0BE3               	decfsz	??_main,f
  6837  035A  2B57               	goto	u4467
  6838  035B  0BE4               	decfsz	??_main+1,f
  6839  035C  2B57               	goto	u4467
  6840  035D  0000               	nop
  6841                           
  6842                           ;main.c: 446: }
  6843                           ;main.c: 447: }else{
  6844  035E  2B72               	goto	l4548
  6845  035F                     l4542:	
  6846                           
  6847                           ;main.c: 448: if(0<LoadDebounceCount){
  6848  035F  0021               	movlb	1	; select bank1
  6849  0360  0862               	movf	(main@LoadDebounceCount+1)^(0+128),w
  6850  0361  3A80               	xorlw	128
  6851  0362  0020               	movlb	0	; select bank0
  6852  0363  00E3               	movwf	??_main
  6853  0364  3080               	movlw	128
  6854  0365  0263               	subwf	??_main,w
  6855  0366  1D03               	skipz
  6856  0367  2B6B               	goto	u4285
  6857  0368  3001               	movlw	1
  6858  0369  0021               	movlb	1	; select bank1
  6859  036A  0261               	subwf	main@LoadDebounceCount^(0+128),w
  6860  036B                     u4285:	
  6861  036B  1C03               	skipc
  6862  036C  2B72               	goto	l4548
  6863                           
  6864                           ;main.c: 449: LoadDebounceCount=0;
  6865  036D  0021               	movlb	1	; select bank1
  6866  036E  01E1               	clrf	main@LoadDebounceCount^(0+128)
  6867  036F  01E2               	clrf	(main@LoadDebounceCount+1)^(0+128)
  6868                           
  6869                           ;main.c: 450: LATB |= 0b00000001 ;
  6870  0370  0020               	movlb	0	; select bank0
  6871  0371  1417               	bsf	23,0	;volatile
  6872  0372                     l4548:	
  6873                           
  6874                           ;main.c: 451: }
  6875                           ;main.c: 452: }
  6876                           ;main.c: 453: if (PORTBbits.RB5 == 0){
  6877  0372  0020               	movlb	0	; select bank0
  6878  0373  1A8D               	btfsc	13,5	;volatile
  6879  0374  2BAA               	goto	l4560
  6880                           
  6881                           ;main.c: 455: SaveDebounceCount++;
  6882  0375  3001               	movlw	1
  6883  0376  0021               	movlb	1	; select bank1
  6884  0377  07E3               	addwf	main@SaveDebounceCount^(0+128),f
  6885  0378  3000               	movlw	0
  6886  0379  3DE4               	addwfc	(main@SaveDebounceCount+1)^(0+128),f
  6887                           
  6888                           ;main.c: 456: if(5<SaveDebounceCount) {
  6889  037A  0864               	movf	(main@SaveDebounceCount+1)^(0+128),w
  6890  037B  3A80               	xorlw	128
  6891  037C  0020               	movlb	0	; select bank0
  6892  037D  00E3               	movwf	??_main
  6893  037E  3080               	movlw	128
  6894  037F  0263               	subwf	??_main,w
  6895  0380  1D03               	skipz
  6896  0381  2B85               	goto	u4305
  6897  0382  3006               	movlw	6
  6898  0383  0021               	movlb	1	; select bank1
  6899  0384  0263               	subwf	main@SaveDebounceCount^(0+128),w
  6900  0385                     u4305:	
  6901  0385  1C03               	skipc
  6902  0386  28F5               	goto	l4458
  6903                           
  6904                           ;main.c: 457: LATB &= 0b10011101 ;
  6905  0387  309D               	movlw	157
  6906  0388  0020               	movlb	0	; select bank0
  6907  0389  00E3               	movwf	??_main
  6908  038A  0863               	movf	??_main,w
  6909  038B  0597               	andwf	23,f	;volatile
  6910                           
  6911                           ;main.c: 476: savePatch(mvcPatchNumber);
  6912  038C  0021               	movlb	1	; select bank1
  6913  038D  083A               	movf	(_mvcPatchNumber+1)^(0+128),w
  6914  038E  0020               	movlb	0	; select bank0
  6915  038F  00D5               	movwf	savePatch@PatchNumber+1
  6916  0390  0021               	movlb	1	; select bank1
  6917  0391  0839               	movf	_mvcPatchNumber^(0+128),w
  6918  0392  0020               	movlb	0	; select bank0
  6919  0393  00D4               	movwf	savePatch@PatchNumber
  6920  0394  318D  2544  3180   	fcall	_savePatch
  6921                           
  6922                           ;main.c: 481: SaveDebounceCount=1;
  6923  0397  3001               	movlw	1
  6924  0398  0021               	movlb	1	; select bank1
  6925  0399  00E3               	movwf	main@SaveDebounceCount^(0+128)
  6926  039A  3000               	movlw	0
  6927  039B  00E4               	movwf	(main@SaveDebounceCount^(0+128)+1)
  6928                           
  6929                           ;main.c: 482: _delay((unsigned long)((500)*(32000000/4000.0)));
  6930  039C  3015               	movlw	21
  6931  039D  0020               	movlb	0	; select bank0
  6932  039E  00E4               	movwf	??_main+1
  6933  039F  304B               	movlw	75
  6934  03A0  00E3               	movwf	??_main
  6935  03A1  30BE               	movlw	190
  6936  03A2                     u4477:	
  6937  03A2  0B89               	decfsz	9,f
  6938  03A3  2BA2               	goto	u4477
  6939  03A4  0BE3               	decfsz	??_main,f
  6940  03A5  2BA2               	goto	u4477
  6941  03A6  0BE4               	decfsz	??_main+1,f
  6942  03A7  2BA2               	goto	u4477
  6943  03A8  0000               	nop
  6944                           
  6945                           ;main.c: 483: }
  6946                           ;main.c: 484: }else{
  6947  03A9  28F5               	goto	l4458
  6948  03AA                     l4560:	
  6949                           
  6950                           ;main.c: 485: if(0<SaveDebounceCount){
  6951  03AA  0021               	movlb	1	; select bank1
  6952  03AB  0864               	movf	(main@SaveDebounceCount+1)^(0+128),w
  6953  03AC  3A80               	xorlw	128
  6954  03AD  0020               	movlb	0	; select bank0
  6955  03AE  00E3               	movwf	??_main
  6956  03AF  3080               	movlw	128
  6957  03B0  0263               	subwf	??_main,w
  6958  03B1  1D03               	skipz
  6959  03B2  2BB6               	goto	u4315
  6960  03B3  3001               	movlw	1
  6961  03B4  0021               	movlb	1	; select bank1
  6962  03B5  0263               	subwf	main@SaveDebounceCount^(0+128),w
  6963  03B6                     u4315:	
  6964  03B6  1C03               	skipc
  6965  03B7  28F5               	goto	l4458
  6966                           
  6967                           ;main.c: 486: SaveDebounceCount=0;
  6968  03B8  0021               	movlb	1	; select bank1
  6969  03B9  01E3               	clrf	main@SaveDebounceCount^(0+128)
  6970  03BA  01E4               	clrf	(main@SaveDebounceCount+1)^(0+128)
  6971                           
  6972                           ;main.c: 487: LATB |= 0b00000010;
  6973  03BB  0020               	movlb	0	; select bank0
  6974  03BC  1497               	bsf	23,1	;volatile
  6975  03BD  28F5               	goto	l4458
  6976  03BE                     __end_of_main:	
  6977                           
  6978                           	psect	text1
  6979  0D44                     __ptext1:	
  6980 ;; *************** function _savePatch *****************
  6981 ;; Defined at:
  6982 ;;		line 821 in file "main.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;  PatchNumber     2   52[BANK0 ] int 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  batchNum        2   63[BANK0 ] int 
  6987 ;;  iPatchAddres    2   65[BANK0 ] int 
  6988 ;;  idx             2   61[BANK0 ] int 
  6989 ;;  pData           2   59[BANK0 ] PTR unsigned char 
  6990 ;;		 -> aPatchMemory(128), 
  6991 ;;  iPatchAddres    1   58[BANK0 ] unsigned char 
  6992 ;;  iPatchAddres    1   57[BANK0 ] unsigned char 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  1    wreg      void 
  6995 ;; Registers used:
  6996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7002 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7003 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7004 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;Total ram usage:       15 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    6
  7009 ;; This function calls:
  7010 ;;		_MYI2C_Write16EEPROMBytes
  7011 ;;		_marshallPatchMemory
  7012 ;; This function is called by:
  7013 ;;		_main
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           
  7018                           ;psect for function _savePatch
  7019  0D44                     _savePatch:	
  7020                           
  7021                           ;main.c: 822: int iPatchAddress=PatchNumber*cPatchSize;
  7022                           
  7023                           ;incstack = 0
  7024                           ; Regs used in _savePatch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7025  0D44  0020               	movlb	0	; select bank0
  7026  0D45  0855               	movf	savePatch@PatchNumber+1,w
  7027  0D46  00D7               	movwf	??_savePatch+1
  7028  0D47  0854               	movf	savePatch@PatchNumber,w
  7029  0D48  00D6               	movwf	??_savePatch
  7030  0D49  3007               	movlw	7
  7031  0D4A                     u3095:	
  7032  0D4A  35D6               	lslf	??_savePatch,f
  7033  0D4B  0DD7               	rlf	??_savePatch+1,f
  7034  0D4C  0B89               	decfsz	9,f
  7035  0D4D  2D4A               	goto	u3095
  7036  0D4E  0856               	movf	??_savePatch,w
  7037  0D4F  00E1               	movwf	savePatch@iPatchAddress
  7038  0D50  0857               	movf	??_savePatch+1,w
  7039  0D51  00E2               	movwf	savePatch@iPatchAddress+1
  7040                           
  7041                           ;main.c: 823: uint8_t iPatchAddressHigh=iPatchAddress>>8;
  7042  0D52  0862               	movf	savePatch@iPatchAddress+1,w
  7043  0D53  00D6               	movwf	??_savePatch
  7044  0D54  0856               	movf	??_savePatch,w
  7045  0D55  00D9               	movwf	savePatch@iPatchAddressHigh
  7046                           
  7047                           ;main.c: 824: uint8_t iPatchAddressLow=iPatchAddress&0xFF;
  7048  0D56  0861               	movf	savePatch@iPatchAddress,w
  7049  0D57  00D6               	movwf	??_savePatch
  7050  0D58  0856               	movf	??_savePatch,w
  7051  0D59  00DA               	movwf	savePatch@iPatchAddressLow
  7052                           
  7053                           ;main.c: 827: marshallPatchMemory(mvcChannels,dualADSRdata0,dualADSRdata1);
  7054  0D5A  303C               	movlw	(low (_dualADSRdata0| (0+256)))& (0+255)
  7055  0D5B  00D6               	movwf	??_savePatch
  7056  0D5C  0856               	movf	??_savePatch,w
  7057  0D5D  00A0               	movwf	marshallPatchMemory@dualADSRdata0
  7058  0D5E  3034               	movlw	(low (_dualADSRdata1| (0+256)))& (0+255)
  7059  0D5F  00D7               	movwf	??_savePatch+1
  7060  0D60  0857               	movf	??_savePatch+1,w
  7061  0D61  00A1               	movwf	marshallPatchMemory@dualADSRdata1
  7062  0D62  30C9               	movlw	(low (_mvcChannels| 0))& (0+255)
  7063  0D63  3184  24F9  318D   	fcall	_marshallPatchMemory
  7064                           
  7065                           ;main.c: 830: uint8_t *pData;
  7066                           ;main.c: 831: int idx;
  7067                           ;main.c: 834: for(int batchNum=0;(batchNum*ciBatchSize)<cPatchSize;batchNum++){
  7068  0D66  0020               	movlb	0	; select bank0
  7069  0D67  01DF               	clrf	savePatch@batchNum
  7070  0D68  01E0               	clrf	savePatch@batchNum+1
  7071  0D69                     l3612:	
  7072  0D69  0860               	movf	savePatch@batchNum+1,w
  7073  0D6A  00D7               	movwf	??_savePatch+1
  7074  0D6B  085F               	movf	savePatch@batchNum,w
  7075  0D6C  00D6               	movwf	??_savePatch
  7076  0D6D  0ED6               	swapf	??_savePatch,f
  7077  0D6E  0ED7               	swapf	??_savePatch+1,f
  7078  0D6F  30F0               	movlw	240
  7079  0D70  05D7               	andwf	??_savePatch+1,f
  7080  0D71  0856               	movf	??_savePatch,w
  7081  0D72  390F               	andlw	15
  7082  0D73  04D7               	iorwf	??_savePatch+1,f
  7083  0D74  30F0               	movlw	240
  7084  0D75  05D6               	andwf	??_savePatch,f
  7085  0D76  0857               	movf	??_savePatch+1,w
  7086  0D77  3A80               	xorlw	128
  7087  0D78  00D8               	movwf	??_savePatch+2
  7088  0D79  3080               	movlw	128
  7089  0D7A  0258               	subwf	??_savePatch+2,w
  7090  0D7B  1D03               	skipz
  7091  0D7C  2D7F               	goto	u3105
  7092  0D7D  3080               	movlw	128
  7093  0D7E  0256               	subwf	??_savePatch,w
  7094  0D7F                     u3105:	
  7095  0D7F  1803               	btfsc	3,0
  7096  0D80  0008               	return
  7097                           
  7098                           ;main.c: 836: idx=batchNum*ciBatchSize;
  7099  0D81  0020               	movlb	0	; select bank0
  7100  0D82  0860               	movf	savePatch@batchNum+1,w
  7101  0D83  00D7               	movwf	??_savePatch+1
  7102  0D84  085F               	movf	savePatch@batchNum,w
  7103  0D85  00D6               	movwf	??_savePatch
  7104  0D86  0ED6               	swapf	??_savePatch,f
  7105  0D87  0ED7               	swapf	??_savePatch+1,f
  7106  0D88  30F0               	movlw	240
  7107  0D89  05D7               	andwf	??_savePatch+1,f
  7108  0D8A  0856               	movf	??_savePatch,w
  7109  0D8B  390F               	andlw	15
  7110  0D8C  04D7               	iorwf	??_savePatch+1,f
  7111  0D8D  30F0               	movlw	240
  7112  0D8E  05D6               	andwf	??_savePatch,f
  7113  0D8F  0856               	movf	??_savePatch,w
  7114  0D90  00DD               	movwf	savePatch@idx
  7115  0D91  0857               	movf	??_savePatch+1,w
  7116  0D92  00DE               	movwf	savePatch@idx+1
  7117                           
  7118                           ;main.c: 837: pData=&aPatchMemory[idx];
  7119  0D93  3070               	movlw	112
  7120  0D94  00D6               	movwf	??_savePatch
  7121  0D95  3023               	movlw	35
  7122  0D96  00D7               	movwf	??_savePatch+1
  7123  0D97  085D               	movf	savePatch@idx,w
  7124  0D98  0756               	addwf	??_savePatch,w
  7125  0D99  00DB               	movwf	savePatch@pData
  7126  0D9A  085E               	movf	savePatch@idx+1,w
  7127  0D9B  3D57               	addwfc	??_savePatch+1,w
  7128  0D9C  00DC               	movwf	savePatch@pData+1
  7129                           
  7130                           ;main.c: 838: MYI2C_Write16EEPROMBytes(ciI2C_EEPROM_DEVICE_ADDRESS,iPatchAddress,pData);
  7131  0D9D  0862               	movf	savePatch@iPatchAddress+1,w
  7132  0D9E  00AF               	movwf	MYI2C_Write16EEPROMBytes@writeAddress+1
  7133  0D9F  0861               	movf	savePatch@iPatchAddress,w
  7134  0DA0  00AE               	movwf	MYI2C_Write16EEPROMBytes@writeAddress
  7135  0DA1  085C               	movf	savePatch@pData+1,w
  7136  0DA2  00B1               	movwf	MYI2C_Write16EEPROMBytes@pData+1
  7137  0DA3  085B               	movf	savePatch@pData,w
  7138  0DA4  00B0               	movwf	MYI2C_Write16EEPROMBytes@pData
  7139  0DA5  3050               	movlw	80
  7140  0DA6  318E  26C7  318D   	fcall	_MYI2C_Write16EEPROMBytes
  7141                           
  7142                           ;main.c: 840: iPatchAddress+=ciBatchSize;
  7143  0DA9  3010               	movlw	16
  7144  0DAA  0020               	movlb	0	; select bank0
  7145  0DAB  07E1               	addwf	savePatch@iPatchAddress,f
  7146  0DAC  3000               	movlw	0
  7147  0DAD  3DE2               	addwfc	savePatch@iPatchAddress+1,f
  7148                           
  7149                           ;main.c: 842: _delay((unsigned long)((5)*(32000000/4000.0)));
  7150  0DAE  3034               	movlw	52
  7151  0DAF  0020               	movlb	0	; select bank0
  7152  0DB0  00D6               	movwf	??_savePatch
  7153  0DB1  30F1               	movlw	241
  7154  0DB2                     u4487:	
  7155  0DB2  0B89               	decfsz	9,f
  7156  0DB3  2DB2               	goto	u4487
  7157  0DB4  0BD6               	decfsz	??_savePatch,f
  7158  0DB5  2DB2               	goto	u4487
  7159  0DB6  3200               	nop2
  7160  0DB7  3001               	movlw	1
  7161  0DB8  0020               	movlb	0	; select bank0
  7162  0DB9  07DF               	addwf	savePatch@batchNum,f
  7163  0DBA  3000               	movlw	0
  7164  0DBB  3DE0               	addwfc	savePatch@batchNum+1,f
  7165  0DBC  2D69               	goto	l3612
  7166  0DBD                     __end_of_savePatch:	
  7167                           
  7168                           	psect	text2
  7169  04F9                     __ptext2:	
  7170 ;; *************** function _marshallPatchMemory *****************
  7171 ;; Defined at:
  7172 ;;		line 22 in file "EEPROM_24LC256.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;  mvcChannels     1    wreg     PTR unsigned char 
  7175 ;;		 -> mvcChannels(4), 
  7176 ;;  dualADSRdata    1    0[BANK0 ] PTR unsigned char 
  7177 ;;		 -> dualADSRdata0(8), 
  7178 ;;  dualADSRdata    1    1[BANK0 ] PTR unsigned char 
  7179 ;;		 -> dualADSRdata1(8), 
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  mvcChannels     1    8[BANK0 ] PTR unsigned char 
  7182 ;;		 -> mvcChannels(4), 
  7183 ;;  i               2   13[BANK0 ] int 
  7184 ;;  i               2   11[BANK0 ] int 
  7185 ;;  i               2    9[BANK0 ] int 
  7186 ;;  iPatchMemory    2   15[BANK0 ] int 
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  1    wreg      void 
  7189 ;; Registers used:
  7190 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7196 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7200 ;;Total ram usage:       17 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    3
  7203 ;; This function calls:
  7204 ;;		Nothing
  7205 ;; This function is called by:
  7206 ;;		_savePatch
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           
  7211                           ;psect for function _marshallPatchMemory
  7212  04F9                     _marshallPatchMemory:	
  7213                           
  7214                           ;incstack = 0
  7215                           ; Regs used in _marshallPatchMemory: [wreg+fsr1l+fsr1h+status,2+status,0]
  7216                           ;marshallPatchMemory@mvcChannels stored from wreg
  7217  04F9  0020               	movlb	0	; select bank0
  7218  04FA  00A8               	movwf	marshallPatchMemory@mvcChannels
  7219                           
  7220                           ;EEPROM_24LC256.c: 23: int iPatchMemoryNDX=0;
  7221  04FB  01AF               	clrf	marshallPatchMemory@iPatchMemoryNDX
  7222  04FC  01B0               	clrf	marshallPatchMemory@iPatchMemoryNDX+1
  7223                           
  7224                           ;EEPROM_24LC256.c: 24: for(int i=0; i<cMixFaderCount;i++) {
  7225  04FD  01A9               	clrf	marshallPatchMemory@i
  7226  04FE  01AA               	clrf	marshallPatchMemory@i+1
  7227  04FF  082A               	movf	marshallPatchMemory@i+1,w
  7228  0500  3A80               	xorlw	128
  7229  0501  00A2               	movwf	??_marshallPatchMemory
  7230  0502  3080               	movlw	128
  7231  0503  0222               	subwf	??_marshallPatchMemory,w
  7232  0504  1D03               	skipz
  7233  0505  2D08               	goto	u2545
  7234  0506  3004               	movlw	4
  7235  0507  0229               	subwf	marshallPatchMemory@i,w
  7236  0508                     u2545:	
  7237  0508  1803               	btfsc	3,0
  7238  0509  2D36               	goto	l3170
  7239  050A                     l3162:	
  7240                           
  7241                           ;EEPROM_24LC256.c: 25: aPatchMemory[iPatchMemoryNDX++]=mvcChannels[i];
  7242  050A  0020               	movlb	0	; select bank0
  7243  050B  0829               	movf	marshallPatchMemory@i,w
  7244  050C  0728               	addwf	marshallPatchMemory@mvcChannels,w
  7245  050D  00A2               	movwf	??_marshallPatchMemory
  7246  050E  0822               	movf	??_marshallPatchMemory,w
  7247  050F  0086               	movwf	6
  7248  0510  0187               	clrf	7
  7249  0511  0801               	movf	1,w
  7250  0512  00A3               	movwf	??_marshallPatchMemory+1
  7251  0513  3070               	movlw	112
  7252  0514  00A4               	movwf	??_marshallPatchMemory+2
  7253  0515  3023               	movlw	35
  7254  0516  00A5               	movwf	??_marshallPatchMemory+3
  7255  0517  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7256  0518  0724               	addwf	??_marshallPatchMemory+2,w
  7257  0519  00A6               	movwf	??_marshallPatchMemory+4
  7258  051A  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7259  051B  3D25               	addwfc	??_marshallPatchMemory+3,w
  7260  051C  00A7               	movwf	??_marshallPatchMemory+5
  7261  051D  0826               	movf	??_marshallPatchMemory+4,w
  7262  051E  0086               	movwf	6
  7263  051F  0827               	movf	??_marshallPatchMemory+5,w
  7264  0520  0087               	movwf	7
  7265  0521  0823               	movf	??_marshallPatchMemory+1,w
  7266  0522  0081               	movwf	1
  7267  0523  3001               	movlw	1
  7268  0524  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7269  0525  3000               	movlw	0
  7270  0526  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7271  0527  3001               	movlw	1
  7272  0528  07A9               	addwf	marshallPatchMemory@i,f
  7273  0529  3000               	movlw	0
  7274  052A  3DAA               	addwfc	marshallPatchMemory@i+1,f
  7275  052B  082A               	movf	marshallPatchMemory@i+1,w
  7276  052C  3A80               	xorlw	128
  7277  052D  00A2               	movwf	??_marshallPatchMemory
  7278  052E  3080               	movlw	128
  7279  052F  0222               	subwf	??_marshallPatchMemory,w
  7280  0530  1D03               	skipz
  7281  0531  2D34               	goto	u2555
  7282  0532  3004               	movlw	4
  7283  0533  0229               	subwf	marshallPatchMemory@i,w
  7284  0534                     u2555:	
  7285  0534  1C03               	skipc
  7286  0535  2D0A               	goto	l3162
  7287  0536                     l3170:	
  7288                           
  7289                           ;EEPROM_24LC256.c: 26: }
  7290                           ;EEPROM_24LC256.c: 27: for(int i=0; i<cADSRdataBytes;i++) {
  7291  0536  0020               	movlb	0	; select bank0
  7292  0537  01AB               	clrf	marshallPatchMemory@i_1221
  7293  0538  01AC               	clrf	marshallPatchMemory@i_1221+1
  7294  0539  082C               	movf	marshallPatchMemory@i_1221+1,w
  7295  053A  3A80               	xorlw	128
  7296  053B  00A2               	movwf	??_marshallPatchMemory
  7297  053C  3080               	movlw	128
  7298  053D  0222               	subwf	??_marshallPatchMemory,w
  7299  053E  3008               	movlw	8
  7300  053F  1903               	btfsc	3,2
  7301  0540  022B               	subwf	marshallPatchMemory@i_1221,w
  7302  0541  1803               	btfsc	3,0
  7303  0542  2D6F               	goto	l3184
  7304  0543                     l3176:	
  7305                           
  7306                           ;EEPROM_24LC256.c: 28: aPatchMemory[iPatchMemoryNDX++]=dualADSRdata0[i];
  7307  0543  0020               	movlb	0	; select bank0
  7308  0544  082B               	movf	marshallPatchMemory@i_1221,w
  7309  0545  0720               	addwf	marshallPatchMemory@dualADSRdata0,w
  7310  0546  00A2               	movwf	??_marshallPatchMemory
  7311  0547  0822               	movf	??_marshallPatchMemory,w
  7312  0548  0086               	movwf	6
  7313  0549  3001               	movlw	1	; select bank2/3
  7314  054A  0087               	movwf	7
  7315  054B  0801               	movf	1,w
  7316  054C  00A3               	movwf	??_marshallPatchMemory+1
  7317  054D  3070               	movlw	112
  7318  054E  00A4               	movwf	??_marshallPatchMemory+2
  7319  054F  3023               	movlw	35
  7320  0550  00A5               	movwf	??_marshallPatchMemory+3
  7321  0551  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7322  0552  0724               	addwf	??_marshallPatchMemory+2,w
  7323  0553  00A6               	movwf	??_marshallPatchMemory+4
  7324  0554  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7325  0555  3D25               	addwfc	??_marshallPatchMemory+3,w
  7326  0556  00A7               	movwf	??_marshallPatchMemory+5
  7327  0557  0826               	movf	??_marshallPatchMemory+4,w
  7328  0558  0086               	movwf	6
  7329  0559  0827               	movf	??_marshallPatchMemory+5,w
  7330  055A  0087               	movwf	7
  7331  055B  0823               	movf	??_marshallPatchMemory+1,w
  7332  055C  0081               	movwf	1
  7333  055D  3001               	movlw	1
  7334  055E  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7335  055F  3000               	movlw	0
  7336  0560  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7337  0561  3001               	movlw	1
  7338  0562  07AB               	addwf	marshallPatchMemory@i_1221,f
  7339  0563  3000               	movlw	0
  7340  0564  3DAC               	addwfc	marshallPatchMemory@i_1221+1,f
  7341  0565  082C               	movf	marshallPatchMemory@i_1221+1,w
  7342  0566  3A80               	xorlw	128
  7343  0567  00A2               	movwf	??_marshallPatchMemory
  7344  0568  3080               	movlw	128
  7345  0569  0222               	subwf	??_marshallPatchMemory,w
  7346  056A  3008               	movlw	8
  7347  056B  1903               	btfsc	3,2
  7348  056C  022B               	subwf	marshallPatchMemory@i_1221,w
  7349  056D  1C03               	skipc
  7350  056E  2D43               	goto	l3176
  7351  056F                     l3184:	
  7352                           
  7353                           ;EEPROM_24LC256.c: 29: }
  7354                           ;EEPROM_24LC256.c: 30: for(int i=0; i<cADSRdataBytes;i++) {
  7355  056F  0020               	movlb	0	; select bank0
  7356  0570  01AD               	clrf	marshallPatchMemory@i_1222
  7357  0571  01AE               	clrf	marshallPatchMemory@i_1222+1
  7358  0572  082E               	movf	marshallPatchMemory@i_1222+1,w
  7359  0573  3A80               	xorlw	128
  7360  0574  00A2               	movwf	??_marshallPatchMemory
  7361  0575  3080               	movlw	128
  7362  0576  0222               	subwf	??_marshallPatchMemory,w
  7363  0577  3008               	movlw	8
  7364  0578  1903               	btfsc	3,2
  7365  0579  022D               	subwf	marshallPatchMemory@i_1222,w
  7366  057A  1803               	btfsc	3,0
  7367  057B  2DA8               	goto	l3198
  7368  057C                     l3190:	
  7369                           
  7370                           ;EEPROM_24LC256.c: 31: aPatchMemory[iPatchMemoryNDX++]=dualADSRdata1[i];
  7371  057C  0020               	movlb	0	; select bank0
  7372  057D  082D               	movf	marshallPatchMemory@i_1222,w
  7373  057E  0721               	addwf	marshallPatchMemory@dualADSRdata1,w
  7374  057F  00A2               	movwf	??_marshallPatchMemory
  7375  0580  0822               	movf	??_marshallPatchMemory,w
  7376  0581  0086               	movwf	6
  7377  0582  3001               	movlw	1	; select bank2/3
  7378  0583  0087               	movwf	7
  7379  0584  0801               	movf	1,w
  7380  0585  00A3               	movwf	??_marshallPatchMemory+1
  7381  0586  3070               	movlw	112
  7382  0587  00A4               	movwf	??_marshallPatchMemory+2
  7383  0588  3023               	movlw	35
  7384  0589  00A5               	movwf	??_marshallPatchMemory+3
  7385  058A  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7386  058B  0724               	addwf	??_marshallPatchMemory+2,w
  7387  058C  00A6               	movwf	??_marshallPatchMemory+4
  7388  058D  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7389  058E  3D25               	addwfc	??_marshallPatchMemory+3,w
  7390  058F  00A7               	movwf	??_marshallPatchMemory+5
  7391  0590  0826               	movf	??_marshallPatchMemory+4,w
  7392  0591  0086               	movwf	6
  7393  0592  0827               	movf	??_marshallPatchMemory+5,w
  7394  0593  0087               	movwf	7
  7395  0594  0823               	movf	??_marshallPatchMemory+1,w
  7396  0595  0081               	movwf	1
  7397  0596  3001               	movlw	1
  7398  0597  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7399  0598  3000               	movlw	0
  7400  0599  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7401  059A  3001               	movlw	1
  7402  059B  07AD               	addwf	marshallPatchMemory@i_1222,f
  7403  059C  3000               	movlw	0
  7404  059D  3DAE               	addwfc	marshallPatchMemory@i_1222+1,f
  7405  059E  082E               	movf	marshallPatchMemory@i_1222+1,w
  7406  059F  3A80               	xorlw	128
  7407  05A0  00A2               	movwf	??_marshallPatchMemory
  7408  05A1  3080               	movlw	128
  7409  05A2  0222               	subwf	??_marshallPatchMemory,w
  7410  05A3  3008               	movlw	8
  7411  05A4  1903               	btfsc	3,2
  7412  05A5  022D               	subwf	marshallPatchMemory@i_1222,w
  7413  05A6  1C03               	skipc
  7414  05A7  2D7C               	goto	l3190
  7415  05A8                     l3198:	
  7416                           
  7417                           ;EEPROM_24LC256.c: 32: }
  7418                           ;EEPROM_24LC256.c: 34: for(;iPatchMemoryNDX<cPatchSize;iPatchMemoryNDX++){
  7419  05A8  0020               	movlb	0	; select bank0
  7420  05A9                     L1:	
  7421  05A9  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7422  05AA  3A80               	xorlw	128
  7423  05AB  00A2               	movwf	??_marshallPatchMemory
  7424  05AC  3080               	movlw	128
  7425  05AD  0222               	subwf	??_marshallPatchMemory,w
  7426  05AE  1D03               	skipz
  7427  05AF  2DB2               	goto	u2605
  7428  05B0  3080               	movlw	128
  7429  05B1  022F               	subwf	marshallPatchMemory@iPatchMemoryNDX,w
  7430  05B2                     u2605:	
  7431  05B2  1803               	btfsc	3,0
  7432  05B3  0008               	return
  7433                           
  7434                           ;EEPROM_24LC256.c: 35: aPatchMemory[iPatchMemoryNDX]=0;
  7435  05B4  3070               	movlw	112
  7436  05B5  0020               	movlb	0	; select bank0
  7437  05B6  00A2               	movwf	??_marshallPatchMemory
  7438  05B7  3023               	movlw	35
  7439  05B8  00A3               	movwf	??_marshallPatchMemory+1
  7440  05B9  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7441  05BA  0722               	addwf	??_marshallPatchMemory,w
  7442  05BB  0086               	movwf	6
  7443  05BC  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7444  05BD  3D23               	addwfc	??_marshallPatchMemory+1,w
  7445  05BE  0087               	movwf	7
  7446  05BF  0181               	clrf	1
  7447  05C0  3001               	movlw	1
  7448  05C1  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7449  05C2  3000               	movlw	0
  7450  05C3  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7451  05C4  2DA9               	goto	L1
  7452  05C5                     __end_of_marshallPatchMemory:	
  7453                           
  7454                           	psect	text3
  7455  0EC7                     __ptext3:	
  7456 ;; *************** function _MYI2C_Write16EEPROMBytes *****************
  7457 ;; Defined at:
  7458 ;;		line 73 in file "EEPROM_24LC256.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  slaveDeviceA    1    wreg     unsigned char 
  7461 ;;  writeAddress    2   14[BANK0 ] int 
  7462 ;;  pData           2   16[BANK0 ] PTR unsigned char 
  7463 ;;		 -> aPatchMemory(128), 
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;  slaveDeviceA    1   45[BANK0 ] unsigned char 
  7466 ;;  i               2   49[BANK0 ] int 
  7467 ;;  writeBuffer    17   22[BANK0 ] unsigned char [17]
  7468 ;;  counter         2   47[BANK0 ] unsigned int 
  7469 ;;  timeOut         2   42[BANK0 ] unsigned int 
  7470 ;;  nCount          2   40[BANK0 ] unsigned int 
  7471 ;;  status          1   51[BANK0 ] enum E14260
  7472 ;;  iPatchAddres    1   46[BANK0 ] unsigned char 
  7473 ;;  pointerByte     1   44[BANK0 ] unsigned char 
  7474 ;;  iPatchAddres    1   39[BANK0 ] unsigned char 
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  1    wreg      void 
  7477 ;; Registers used:
  7478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7484 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7488 ;;Total ram usage:       38 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    5
  7491 ;; This function calls:
  7492 ;;		_I2C1_MasterWrite
  7493 ;; This function is called by:
  7494 ;;		_savePatch
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           
  7499                           ;psect for function _MYI2C_Write16EEPROMBytes
  7500  0EC7                     _MYI2C_Write16EEPROMBytes:	
  7501                           
  7502                           ;incstack = 0
  7503                           ; Regs used in _MYI2C_Write16EEPROMBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7504                           ;MYI2C_Write16EEPROMBytes@slaveDeviceAddress stored from wreg
  7505  0EC7  0020               	movlb	0	; select bank0
  7506  0EC8  00CD               	movwf	MYI2C_Write16EEPROMBytes@slaveDeviceAddress
  7507                           
  7508                           ;EEPROM_24LC256.c: 75: uint8_t iPatchAddressHigh=writeAddress>>8;
  7509  0EC9  082F               	movf	MYI2C_Write16EEPROMBytes@writeAddress+1,w
  7510  0ECA  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7511  0ECB  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7512  0ECC  00CE               	movwf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh
  7513                           
  7514                           ;EEPROM_24LC256.c: 76: uint8_t iPatchAddressLow=writeAddress&0xFF;
  7515  0ECD  082E               	movf	MYI2C_Write16EEPROMBytes@writeAddress,w
  7516  0ECE  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7517  0ECF  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7518  0ED0  00C7               	movwf	MYI2C_Write16EEPROMBytes@iPatchAddressLow
  7519                           
  7520                           ;EEPROM_24LC256.c: 82: uint16_t nCount;
  7521                           ;EEPROM_24LC256.c: 83: uint8_t writeBuffer[ciBufferSize];
  7522                           ;EEPROM_24LC256.c: 84: uint16_t counter, timeOut;
  7523                           ;EEPROM_24LC256.c: 86: uint8_t pointerByte = 0b10100000;
  7524  0ED1  30A0               	movlw	160
  7525  0ED2  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7526  0ED3  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7527  0ED4  00CC               	movwf	MYI2C_Write16EEPROMBytes@pointerByte
  7528                           
  7529                           ;EEPROM_24LC256.c: 88: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
  7530  0ED5  3002               	movlw	2
  7531  0ED6  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7532  0ED7  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7533  0ED8  00D3               	movwf	MYI2C_Write16EEPROMBytes@status
  7534                           
  7535                           ;EEPROM_24LC256.c: 92: nCount = 2;
  7536  0ED9  3002               	movlw	2
  7537  0EDA  00C8               	movwf	MYI2C_Write16EEPROMBytes@nCount
  7538  0EDB  3000               	movlw	0
  7539  0EDC  00C9               	movwf	MYI2C_Write16EEPROMBytes@nCount+1
  7540                           
  7541                           ;EEPROM_24LC256.c: 95: for (counter = 0; counter < nCount; counter++)
  7542  0EDD  01CF               	clrf	MYI2C_Write16EEPROMBytes@counter
  7543  0EDE  01D0               	clrf	MYI2C_Write16EEPROMBytes@counter+1
  7544  0EDF                     l833:	
  7545  0EDF  0849               	movf	MYI2C_Write16EEPROMBytes@nCount+1,w
  7546  0EE0  0250               	subwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7547  0EE1  1D03               	skipz
  7548  0EE2  2EE5               	goto	u2715
  7549  0EE3  0848               	movf	MYI2C_Write16EEPROMBytes@nCount,w
  7550  0EE4  024F               	subwf	MYI2C_Write16EEPROMBytes@counter,w
  7551  0EE5                     u2715:	
  7552  0EE5  1803               	btfsc	3,0
  7553  0EE6  0008               	return
  7554                           
  7555                           ;EEPROM_24LC256.c: 96: {
  7556                           ;EEPROM_24LC256.c: 99: writeBuffer[0] = pointerByte;
  7557  0EE7  084C               	movf	MYI2C_Write16EEPROMBytes@pointerByte,w
  7558  0EE8  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7559  0EE9  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7560  0EEA  00B6               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer
  7561                           
  7562                           ;EEPROM_24LC256.c: 101: if(0==counter) {
  7563  0EEB  084F               	movf	MYI2C_Write16EEPROMBytes@counter,w
  7564  0EEC  0450               	iorwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7565  0EED  1D03               	btfss	3,2
  7566  0EEE  2EF8               	goto	l3226
  7567                           
  7568                           ;EEPROM_24LC256.c: 103: writeBuffer[1] = iPatchAddressHigh;
  7569  0EEF  084E               	movf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh,w
  7570  0EF0  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7571  0EF1  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7572  0EF2  00B7               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer+1
  7573                           
  7574                           ;EEPROM_24LC256.c: 104: writeBuffer[2] = iPatchAddressHigh;
  7575  0EF3  084E               	movf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh,w
  7576  0EF4  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7577  0EF5  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7578  0EF6  00B8               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer+2
  7579                           
  7580                           ;EEPROM_24LC256.c: 105: }
  7581  0EF7  2F27               	goto	l3238
  7582  0EF8                     l3226:	
  7583                           
  7584                           ;EEPROM_24LC256.c: 106: else
  7585                           ;EEPROM_24LC256.c: 107: {
  7586                           ;EEPROM_24LC256.c: 109: for(int i=1;i<ciBatchSize;i++){
  7587  0EF8  3001               	movlw	1
  7588  0EF9  00D1               	movwf	MYI2C_Write16EEPROMBytes@i
  7589  0EFA  3000               	movlw	0
  7590  0EFB  00D2               	movwf	MYI2C_Write16EEPROMBytes@i+1
  7591  0EFC  0852               	movf	MYI2C_Write16EEPROMBytes@i+1,w
  7592  0EFD  3A80               	xorlw	128
  7593  0EFE  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7594  0EFF  3080               	movlw	128
  7595  0F00  0232               	subwf	??_MYI2C_Write16EEPROMBytes,w
  7596  0F01  1D03               	skipz
  7597  0F02  2F05               	goto	u2635
  7598  0F03  3010               	movlw	16
  7599  0F04  0251               	subwf	MYI2C_Write16EEPROMBytes@i,w
  7600  0F05                     u2635:	
  7601  0F05  1803               	btfsc	3,0
  7602  0F06  2F27               	goto	l3238
  7603  0F07                     l3230:	
  7604                           
  7605                           ;EEPROM_24LC256.c: 110: writeBuffer[i]=(*pData++);
  7606  0F07  0020               	movlb	0	; select bank0
  7607  0F08  0830               	movf	MYI2C_Write16EEPROMBytes@pData,w
  7608  0F09  0086               	movwf	6
  7609  0F0A  0831               	movf	MYI2C_Write16EEPROMBytes@pData+1,w
  7610  0F0B  0087               	movwf	7
  7611  0F0C  0801               	movf	1,w
  7612  0F0D  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7613  0F0E  0851               	movf	MYI2C_Write16EEPROMBytes@i,w
  7614  0F0F  3E36               	addlw	(low (MYI2C_Write16EEPROMBytes@writeBuffer| 0))& (0+255)
  7615  0F10  0086               	movwf	6
  7616  0F11  0187               	clrf	7
  7617  0F12  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7618  0F13  0081               	movwf	1
  7619  0F14  3001               	movlw	1
  7620  0F15  07B0               	addwf	MYI2C_Write16EEPROMBytes@pData,f
  7621  0F16  3000               	movlw	0
  7622  0F17  3DB1               	addwfc	MYI2C_Write16EEPROMBytes@pData+1,f
  7623  0F18  3001               	movlw	1
  7624  0F19  07D1               	addwf	MYI2C_Write16EEPROMBytes@i,f
  7625  0F1A  3000               	movlw	0
  7626  0F1B  3DD2               	addwfc	MYI2C_Write16EEPROMBytes@i+1,f
  7627  0F1C  0852               	movf	MYI2C_Write16EEPROMBytes@i+1,w
  7628  0F1D  3A80               	xorlw	128
  7629  0F1E  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7630  0F1F  3080               	movlw	128
  7631  0F20  0232               	subwf	??_MYI2C_Write16EEPROMBytes,w
  7632  0F21  1D03               	skipz
  7633  0F22  2F25               	goto	u2645
  7634  0F23  3010               	movlw	16
  7635  0F24  0251               	subwf	MYI2C_Write16EEPROMBytes@i,w
  7636  0F25                     u2645:	
  7637  0F25  1C03               	skipc
  7638  0F26  2F07               	goto	l3230
  7639  0F27                     l3238:	
  7640                           
  7641                           ;EEPROM_24LC256.c: 111: }
  7642                           ;EEPROM_24LC256.c: 112: }
  7643                           ;EEPROM_24LC256.c: 117: timeOut = 0;
  7644  0F27  0020               	movlb	0	; select bank0
  7645  0F28  01CA               	clrf	MYI2C_Write16EEPROMBytes@timeOut
  7646  0F29  01CB               	clrf	MYI2C_Write16EEPROMBytes@timeOut+1
  7647  0F2A                     l3260:	
  7648                           ;EEPROM_24LC256.c: 118: while(status != I2C1_MESSAGE_FAIL)
  7649                           
  7650  0F2A  0353               	decf	MYI2C_Write16EEPROMBytes@status,w
  7651  0F2B  1903               	btfsc	3,2
  7652  0F2C  2F59               	goto	l3262
  7653                           
  7654                           ;EEPROM_24LC256.c: 119: {
  7655                           ;EEPROM_24LC256.c: 120: if(0==counter) {
  7656  0F2D  084F               	movf	MYI2C_Write16EEPROMBytes@counter,w
  7657  0F2E  0450               	iorwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7658  0F2F  1D03               	btfss	3,2
  7659  0F30  2F33               	goto	l3244
  7660                           
  7661                           ;EEPROM_24LC256.c: 122: I2C1_MasterWrite( writeBuffer,
  7662                           ;EEPROM_24LC256.c: 123: 3,
  7663                           ;EEPROM_24LC256.c: 124: slaveDeviceAddress,
  7664                           ;EEPROM_24LC256.c: 125: &status);
  7665  0F31  3003               	movlw	3
  7666  0F32  2F35               	goto	L2
  7667  0F33                     l3244:	
  7668                           ;EEPROM_24LC256.c: 126: } else {
  7669                           
  7670                           
  7671                           ;EEPROM_24LC256.c: 128: I2C1_MasterWrite( writeBuffer,
  7672                           ;EEPROM_24LC256.c: 129: ciBatchSize+1,
  7673                           ;EEPROM_24LC256.c: 130: slaveDeviceAddress,
  7674                           ;EEPROM_24LC256.c: 131: &status);
  7675  0F33  3011               	movlw	17
  7676  0F34  0020               	movlb	0	; select bank0
  7677  0F35                     L2:	
  7678  0F35  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7679  0F36  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7680  0F37  00A7               	movwf	I2C1_MasterWrite@length
  7681  0F38  084D               	movf	MYI2C_Write16EEPROMBytes@slaveDeviceAddress,w
  7682  0F39  00B3               	movwf	??_MYI2C_Write16EEPROMBytes+1
  7683  0F3A  01B4               	clrf	??_MYI2C_Write16EEPROMBytes+2
  7684  0F3B  0833               	movf	??_MYI2C_Write16EEPROMBytes+1,w
  7685  0F3C  00A8               	movwf	I2C1_MasterWrite@address
  7686  0F3D  0834               	movf	??_MYI2C_Write16EEPROMBytes+2,w
  7687  0F3E  00A9               	movwf	I2C1_MasterWrite@address+1
  7688  0F3F  3053               	movlw	(low (MYI2C_Write16EEPROMBytes@status| 0))& (0+255)
  7689  0F40  00B5               	movwf	??_MYI2C_Write16EEPROMBytes+3
  7690  0F41  0835               	movf	??_MYI2C_Write16EEPROMBytes+3,w
  7691  0F42  00AA               	movwf	I2C1_MasterWrite@pflag
  7692  0F43  3036               	movlw	(low (MYI2C_Write16EEPROMBytes@writeBuffer| 0))& (0+255)
  7693  0F44  3187  27D7  318E   	fcall	_I2C1_MasterWrite
  7694  0F47                     l3246:	
  7695                           ;EEPROM_24LC256.c: 132: }
  7696                           ;EEPROM_24LC256.c: 135: while(status == I2C1_MESSAGE_PENDING);
  7697                           
  7698  0F47  3002               	movlw	2
  7699  0F48  0020               	movlb	0	; select bank0
  7700  0F49  0653               	xorwf	MYI2C_Write16EEPROMBytes@status,w
  7701  0F4A  1903               	btfsc	3,2
  7702  0F4B  2F47               	goto	l3246
  7703                           
  7704                           ;EEPROM_24LC256.c: 137: if (status == I2C1_MESSAGE_COMPLETE)
  7705  0F4C  0853               	movf	MYI2C_Write16EEPROMBytes@status,w
  7706  0F4D  1903               	btfsc	3,2
  7707  0F4E  2F59               	goto	l3262
  7708                           
  7709                           ;EEPROM_24LC256.c: 147: if (timeOut == 100)
  7710                           
  7711                           ;EEPROM_24LC256.c: 138: break;
  7712  0F4F  3064               	movlw	100
  7713  0F50  064A               	xorwf	MYI2C_Write16EEPROMBytes@timeOut,w
  7714  0F51  044B               	iorwf	MYI2C_Write16EEPROMBytes@timeOut+1,w
  7715  0F52  1903               	btfsc	3,2
  7716  0F53  2F59               	goto	l3262
  7717                           
  7718                           ;EEPROM_24LC256.c: 149: else
  7719                           ;EEPROM_24LC256.c: 150: timeOut++;
  7720                           
  7721                           ;EEPROM_24LC256.c: 148: break;
  7722  0F54  3001               	movlw	1
  7723  0F55  07CA               	addwf	MYI2C_Write16EEPROMBytes@timeOut,f
  7724  0F56  3000               	movlw	0
  7725  0F57  3DCB               	addwfc	MYI2C_Write16EEPROMBytes@timeOut+1,f
  7726  0F58  2F2A               	goto	l3260
  7727  0F59                     l3262:	
  7728                           
  7729                           ;EEPROM_24LC256.c: 151: }
  7730                           ;EEPROM_24LC256.c: 153: if (status == I2C1_MESSAGE_FAIL) { break; }
  7731  0F59  0353               	decf	MYI2C_Write16EEPROMBytes@status,w
  7732  0F5A  1903               	btfsc	3,2
  7733  0F5B  0008               	return
  7734  0F5C  3001               	movlw	1
  7735  0F5D  07CF               	addwf	MYI2C_Write16EEPROMBytes@counter,f
  7736  0F5E  3000               	movlw	0
  7737  0F5F  3DD0               	addwfc	MYI2C_Write16EEPROMBytes@counter+1,f
  7738  0F60  2EDF               	goto	l833
  7739  0F61                     __end_of_MYI2C_Write16EEPROMBytes:	
  7740                           
  7741                           	psect	text4
  7742  0BAC                     __ptext4:	
  7743 ;; *************** function _loadPatch *****************
  7744 ;; Defined at:
  7745 ;;		line 860 in file "main.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  PatchNumber     2   58[BANK0 ] int 
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;  i               2   64[BANK0 ] int 
  7750 ;;  iPatchAddres    2   62[BANK0 ] int 
  7751 ;;  idx             2    0        int 
  7752 ;;  pData           2    0        PTR unsigned char 
  7753 ;; Return value:  Size  Location     Type
  7754 ;;                  1    wreg      void 
  7755 ;; Registers used:
  7756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7757 ;; Tracked objects:
  7758 ;;		On entry : 0/0
  7759 ;;		On exit  : 0/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7762 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7763 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7764 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;Total ram usage:        8 bytes
  7767 ;; Hardware stack levels used:    1
  7768 ;; Hardware stack levels required when called:    7
  7769 ;; This function calls:
  7770 ;;		_updateModelFromPatchMemory
  7771 ;;		_writeDAC528
  7772 ;; This function is called by:
  7773 ;;		_main
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           
  7778                           ;psect for function _loadPatch
  7779  0BAC                     _loadPatch:	
  7780                           
  7781                           ;main.c: 861: int iPatchAddress=PatchNumber*cPatchSize;
  7782                           
  7783                           ;incstack = 0
  7784                           ; Regs used in _loadPatch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7785  0BAC  0020               	movlb	0	; select bank0
  7786  0BAD  085B               	movf	loadPatch@PatchNumber+1,w
  7787  0BAE  00DD               	movwf	??_loadPatch+1
  7788  0BAF  085A               	movf	loadPatch@PatchNumber,w
  7789  0BB0  00DC               	movwf	??_loadPatch
  7790  0BB1  3007               	movlw	7
  7791  0BB2                     u3065:	
  7792  0BB2  35DC               	lslf	??_loadPatch,f
  7793  0BB3  0DDD               	rlf	??_loadPatch+1,f
  7794  0BB4  0B89               	decfsz	9,f
  7795  0BB5  2BB2               	goto	u3065
  7796  0BB6  085C               	movf	??_loadPatch,w
  7797  0BB7  00DE               	movwf	loadPatch@iPatchAddress
  7798  0BB8  085D               	movf	??_loadPatch+1,w
  7799  0BB9  00DF               	movwf	loadPatch@iPatchAddress+1
  7800                           
  7801                           ;main.c: 864: uint8_t *pData;
  7802                           ;main.c: 865: int idx;
  7803                           ;main.c: 878: updateModelFromPatchMemory(mvcChannels,dualADSRdata0,dualADSRdata1);
  7804  0BBA  303C               	movlw	(low (_dualADSRdata0| (0+256)))& (0+255)
  7805  0BBB  00DC               	movwf	??_loadPatch
  7806  0BBC  085C               	movf	??_loadPatch,w
  7807  0BBD  00A0               	movwf	updateModelFromPatchMemory@dualADSRdata0
  7808  0BBE  3034               	movlw	(low (_dualADSRdata1| (0+256)))& (0+255)
  7809  0BBF  00DD               	movwf	??_loadPatch+1
  7810  0BC0  085D               	movf	??_loadPatch+1,w
  7811  0BC1  00A1               	movwf	updateModelFromPatchMemory@dualADSRdata1
  7812  0BC2  30C9               	movlw	(low (_mvcChannels| 0))& (0+255)
  7813  0BC3  318F  2761  318B   	fcall	_updateModelFromPatchMemory
  7814                           
  7815                           ;main.c: 881: for(int i=0;i<cMixFaderCount;i++){
  7816  0BC6  0020               	movlb	0	; select bank0
  7817  0BC7  01E0               	clrf	loadPatch@i
  7818  0BC8  01E1               	clrf	loadPatch@i+1
  7819  0BC9                     L3:	
  7820  0BC9  0861               	movf	loadPatch@i+1,w
  7821  0BCA  3A80               	xorlw	128
  7822  0BCB  00DC               	movwf	??_loadPatch
  7823  0BCC  3080               	movlw	128
  7824  0BCD  025C               	subwf	??_loadPatch,w
  7825  0BCE  1D03               	skipz
  7826  0BCF  2BD2               	goto	u3075
  7827  0BD0  3004               	movlw	4
  7828  0BD1  0260               	subwf	loadPatch@i,w
  7829  0BD2                     u3075:	
  7830  0BD2  1803               	btfsc	3,0
  7831  0BD3  0008               	return
  7832                           
  7833                           ;main.c: 882: writeDAC528(i+4,mvcChannels[i]);
  7834  0BD4  0020               	movlb	0	; select bank0
  7835  0BD5  0860               	movf	loadPatch@i,w
  7836  0BD6  3E04               	addlw	4
  7837  0BD7  00D5               	movwf	writeDAC528@dacNumber
  7838  0BD8  3000               	movlw	0
  7839  0BD9  3D61               	addwfc	loadPatch@i+1,w
  7840  0BDA  00D6               	movwf	writeDAC528@dacNumber+1
  7841  0BDB  0860               	movf	loadPatch@i,w
  7842  0BDC  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  7843  0BDD  0086               	movwf	6
  7844  0BDE  0187               	clrf	7
  7845  0BDF  0801               	movf	1,w
  7846  0BE0  00DC               	movwf	??_loadPatch
  7847  0BE1  085C               	movf	??_loadPatch,w
  7848  0BE2  00D7               	movwf	writeDAC528@dacData
  7849  0BE3  318B  230F  318B   	fcall	_writeDAC528
  7850  0BE6  3001               	movlw	1
  7851  0BE7  0020               	movlb	0	; select bank0
  7852  0BE8  07E0               	addwf	loadPatch@i,f
  7853  0BE9  3000               	movlw	0
  7854  0BEA  3DE1               	addwfc	loadPatch@i+1,f
  7855  0BEB  2BC9               	goto	L3
  7856  0BEC                     __end_of_loadPatch:	
  7857                           
  7858                           	psect	text5
  7859  0B0F                     __ptext5:	
  7860 ;; *************** function _writeDAC528 *****************
  7861 ;; Defined at:
  7862 ;;		line 57 in file "VCAMIX_SPI_Master.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;  dacNumber       2   53[BANK0 ] int 
  7865 ;;  dacData         1   55[BANK0 ] unsigned char 
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;  wkDacNumber     1   57[BANK0 ] unsigned char 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      void 
  7870 ;; Registers used:
  7871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7877 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;Total ram usage:        5 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    6
  7884 ;; This function calls:
  7885 ;;		_putByte
  7886 ;; This function is called by:
  7887 ;;		_main
  7888 ;;		_loadPatch
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           
  7893                           ;psect for function _writeDAC528
  7894  0B0F                     _writeDAC528:	
  7895                           
  7896                           ;VCAMIX_SPI_Master.c: 58: uint8_t wkDacNumber=0;
  7897                           
  7898                           ;incstack = 0
  7899                           ; Regs used in _writeDAC528: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7900  0B0F  0020               	movlb	0	; select bank0
  7901  0B10  01D9               	clrf	writeDAC528@wkDacNumber
  7902                           
  7903                           ;VCAMIX_SPI_Master.c: 59: wkDacNumber=cPowerOfTwo[dacNumber];
  7904  0B11  0856               	movf	writeDAC528@dacNumber+1,w
  7905  0B12  0085               	movwf	5
  7906  0B13  0855               	movf	writeDAC528@dacNumber,w
  7907  0B14  0084               	movwf	4
  7908  0B15  3584               	lslf	4,f
  7909  0B16  0D85               	rlf	5,f
  7910  0B17  3000               	movlw	low (_cPowerOfTwo| (0+32768))
  7911  0B18  0784               	addwf	4,f
  7912  0B19  3090               	movlw	high (_cPowerOfTwo| (0+32768))
  7913  0B1A  3D85               	addwfc	5,f
  7914  0B1B  0800               	movf	0,w	;code access
  7915  0B1C  00D8               	movwf	??_writeDAC528
  7916  0B1D  0858               	movf	??_writeDAC528,w
  7917  0B1E  00D9               	movwf	writeDAC528@wkDacNumber
  7918                           
  7919                           ;VCAMIX_SPI_Master.c: 61: LATA &= 0x7F ;
  7920  0B1F  307F               	movlw	127
  7921  0B20  00D8               	movwf	??_writeDAC528
  7922  0B21  0858               	movf	??_writeDAC528,w
  7923  0B22  0596               	andwf	22,f	;volatile
  7924                           
  7925                           ;VCAMIX_SPI_Master.c: 63: putByte(wkDacNumber,0);
  7926  0B23  3000               	movlw	0
  7927  0B24  00CC               	movwf	putByte@clockPin
  7928  0B25  00CD               	movwf	putByte@clockPin+1
  7929  0B26  0859               	movf	writeDAC528@wkDacNumber,w
  7930  0B27  3185  25C5  318B   	fcall	_putByte
  7931                           
  7932                           ;VCAMIX_SPI_Master.c: 65: putByte(dacData,0);
  7933  0B2A  3000               	movlw	0
  7934  0B2B  0020               	movlb	0	; select bank0
  7935  0B2C  00CC               	movwf	putByte@clockPin
  7936  0B2D  00CD               	movwf	putByte@clockPin+1
  7937  0B2E  0857               	movf	writeDAC528@dacData,w
  7938  0B2F  3185  25C5         	fcall	_putByte
  7939                           
  7940                           ;VCAMIX_SPI_Master.c: 67: LATA |= 0x80 ;
  7941  0B31  0020               	movlb	0	; select bank0
  7942  0B32  1796               	bsf	22,7	;volatile
  7943  0B33  0008               	return
  7944  0B34                     __end_of_writeDAC528:	
  7945                           
  7946                           	psect	text6
  7947  0F61                     __ptext6:	
  7948 ;; *************** function _updateModelFromPatchMemory *****************
  7949 ;; Defined at:
  7950 ;;		line 39 in file "EEPROM_24LC256.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;  mvcChannels     1    wreg     PTR unsigned char 
  7953 ;;		 -> mvcChannels(4), 
  7954 ;;  dualADSRdata    1    0[BANK0 ] PTR unsigned char 
  7955 ;;		 -> dualADSRdata0(8), 
  7956 ;;  dualADSRdata    1    1[BANK0 ] PTR unsigned char 
  7957 ;;		 -> dualADSRdata1(8), 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  mvcChannels     1    6[BANK0 ] PTR unsigned char 
  7960 ;;		 -> mvcChannels(4), 
  7961 ;;  i               2    9[BANK0 ] int 
  7962 ;;  i               2    7[BANK0 ] int 
  7963 ;;  i               2   13[BANK0 ] int 
  7964 ;;  iPatchMemory    2   11[BANK0 ] int 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  1    wreg      void 
  7967 ;; Registers used:
  7968 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7974 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;Total ram usage:       15 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    3
  7981 ;; This function calls:
  7982 ;;		Nothing
  7983 ;; This function is called by:
  7984 ;;		_loadPatch
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           
  7989                           ;psect for function _updateModelFromPatchMemory
  7990  0F61                     _updateModelFromPatchMemory:	
  7991                           
  7992                           ;incstack = 0
  7993                           ; Regs used in _updateModelFromPatchMemory: [wreg+fsr1l+fsr1h+status,2+status,0]
  7994                           ;updateModelFromPatchMemory@mvcChannels stored from wreg
  7995  0F61  0020               	movlb	0	; select bank0
  7996  0F62  00A6               	movwf	updateModelFromPatchMemory@mvcChannels
  7997                           
  7998                           ;EEPROM_24LC256.c: 40: int iPatchMemoryNDX=0;
  7999  0F63  01AB               	clrf	updateModelFromPatchMemory@iPatchMemoryNDX
  8000  0F64  01AC               	clrf	updateModelFromPatchMemory@iPatchMemoryNDX+1
  8001                           
  8002                           ;EEPROM_24LC256.c: 41: for(int i=0; i<cMixFaderCount;i++) {
  8003  0F65  01AD               	clrf	updateModelFromPatchMemory@i
  8004  0F66  01AE               	clrf	updateModelFromPatchMemory@i+1
  8005  0F67  082E               	movf	updateModelFromPatchMemory@i+1,w
  8006  0F68  3A80               	xorlw	128
  8007  0F69  00A2               	movwf	??_updateModelFromPatchMemory
  8008  0F6A  3080               	movlw	128
  8009  0F6B  0222               	subwf	??_updateModelFromPatchMemory,w
  8010  0F6C  1D03               	skipz
  8011  0F6D  2F70               	goto	u2725
  8012  0F6E  3004               	movlw	4
  8013  0F6F  022D               	subwf	updateModelFromPatchMemory@i,w
  8014  0F70                     u2725:	
  8015  0F70  1803               	btfsc	3,0
  8016  0F71  2F9F               	goto	l3280
  8017  0F72                     l3274:	
  8018                           
  8019                           ;EEPROM_24LC256.c: 42: mvcChannels[i]=aPatchMemory[iPatchMemoryNDX++];
  8020  0F72  3070               	movlw	112
  8021  0F73  0020               	movlb	0	; select bank0
  8022  0F74  00A2               	movwf	??_updateModelFromPatchMemory
  8023  0F75  3023               	movlw	35
  8024  0F76  00A3               	movwf	??_updateModelFromPatchMemory+1
  8025  0F77  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  8026  0F78  0722               	addwf	??_updateModelFromPatchMemory,w
  8027  0F79  0086               	movwf	6
  8028  0F7A  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  8029  0F7B  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  8030  0F7C  0087               	movwf	7
  8031  0F7D  0801               	movf	1,w
  8032  0F7E  00A4               	movwf	??_updateModelFromPatchMemory+2
  8033  0F7F  082D               	movf	updateModelFromPatchMemory@i,w
  8034  0F80  0726               	addwf	updateModelFromPatchMemory@mvcChannels,w
  8035  0F81  00A5               	movwf	??_updateModelFromPatchMemory+3
  8036  0F82  0825               	movf	??_updateModelFromPatchMemory+3,w
  8037  0F83  0086               	movwf	6
  8038  0F84  0187               	clrf	7
  8039  0F85  0824               	movf	??_updateModelFromPatchMemory+2,w
  8040  0F86  0081               	movwf	1
  8041  0F87  3001               	movlw	1
  8042  0F88  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  8043  0F89  3000               	movlw	0
  8044  0F8A  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  8045                           
  8046                           ;EEPROM_24LC256.c: 43: faderActiveFlag[i]=0;
  8047  0F8B  082D               	movf	updateModelFromPatchMemory@i,w
  8048  0F8C  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  8049  0F8D  0086               	movwf	6
  8050  0F8E  0187               	clrf	7
  8051  0F8F  0181               	clrf	1
  8052  0F90  3001               	movlw	1
  8053  0F91  07AD               	addwf	updateModelFromPatchMemory@i,f
  8054  0F92  3000               	movlw	0
  8055  0F93  3DAE               	addwfc	updateModelFromPatchMemory@i+1,f
  8056  0F94  082E               	movf	updateModelFromPatchMemory@i+1,w
  8057  0F95  3A80               	xorlw	128
  8058  0F96  00A2               	movwf	??_updateModelFromPatchMemory
  8059  0F97  3080               	movlw	128
  8060  0F98  0222               	subwf	??_updateModelFromPatchMemory,w
  8061  0F99  1D03               	skipz
  8062  0F9A  2F9D               	goto	u2735
  8063  0F9B  3004               	movlw	4
  8064  0F9C  022D               	subwf	updateModelFromPatchMemory@i,w
  8065  0F9D                     u2735:	
  8066  0F9D  1C03               	skipc
  8067  0F9E  2F72               	goto	l3274
  8068  0F9F                     l3280:	
  8069                           
  8070                           ;EEPROM_24LC256.c: 44: }
  8071                           ;EEPROM_24LC256.c: 45: for(int i=0; i<cADSRdataBytes;i++) {
  8072  0F9F  0020               	movlb	0	; select bank0
  8073  0FA0  01A7               	clrf	updateModelFromPatchMemory@i_1229
  8074  0FA1  01A8               	clrf	updateModelFromPatchMemory@i_1229+1
  8075  0FA2  0828               	movf	updateModelFromPatchMemory@i_1229+1,w
  8076  0FA3  3A80               	xorlw	128
  8077  0FA4  00A2               	movwf	??_updateModelFromPatchMemory
  8078  0FA5  3080               	movlw	128
  8079  0FA6  0222               	subwf	??_updateModelFromPatchMemory,w
  8080  0FA7  3008               	movlw	8
  8081  0FA8  1903               	btfsc	3,2
  8082  0FA9  0227               	subwf	updateModelFromPatchMemory@i_1229,w
  8083  0FAA  1803               	btfsc	3,0
  8084  0FAB  2FD4               	goto	l3294
  8085  0FAC                     l3286:	
  8086                           
  8087                           ;EEPROM_24LC256.c: 46: dualADSRdata0[i]=aPatchMemory[iPatchMemoryNDX++];
  8088  0FAC  3070               	movlw	112
  8089  0FAD  0020               	movlb	0	; select bank0
  8090  0FAE  00A2               	movwf	??_updateModelFromPatchMemory
  8091  0FAF  3023               	movlw	35
  8092  0FB0  00A3               	movwf	??_updateModelFromPatchMemory+1
  8093  0FB1  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  8094  0FB2  0722               	addwf	??_updateModelFromPatchMemory,w
  8095  0FB3  0086               	movwf	6
  8096  0FB4  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  8097  0FB5  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  8098  0FB6  0087               	movwf	7
  8099  0FB7  0801               	movf	1,w
  8100  0FB8  00A4               	movwf	??_updateModelFromPatchMemory+2
  8101  0FB9  0827               	movf	updateModelFromPatchMemory@i_1229,w
  8102  0FBA  0720               	addwf	updateModelFromPatchMemory@dualADSRdata0,w
  8103  0FBB  00A5               	movwf	??_updateModelFromPatchMemory+3
  8104  0FBC  0825               	movf	??_updateModelFromPatchMemory+3,w
  8105  0FBD  0086               	movwf	6
  8106  0FBE  3001               	movlw	1	; select bank2/3
  8107  0FBF  0087               	movwf	7
  8108  0FC0  0824               	movf	??_updateModelFromPatchMemory+2,w
  8109  0FC1  0081               	movwf	1
  8110  0FC2  3001               	movlw	1
  8111  0FC3  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  8112  0FC4  3000               	movlw	0
  8113  0FC5  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  8114  0FC6  3001               	movlw	1
  8115  0FC7  07A7               	addwf	updateModelFromPatchMemory@i_1229,f
  8116  0FC8  3000               	movlw	0
  8117  0FC9  3DA8               	addwfc	updateModelFromPatchMemory@i_1229+1,f
  8118  0FCA  0828               	movf	updateModelFromPatchMemory@i_1229+1,w
  8119  0FCB  3A80               	xorlw	128
  8120  0FCC  00A2               	movwf	??_updateModelFromPatchMemory
  8121  0FCD  3080               	movlw	128
  8122  0FCE  0222               	subwf	??_updateModelFromPatchMemory,w
  8123  0FCF  3008               	movlw	8
  8124  0FD0  1903               	btfsc	3,2
  8125  0FD1  0227               	subwf	updateModelFromPatchMemory@i_1229,w
  8126  0FD2  1C03               	skipc
  8127  0FD3  2FAC               	goto	l3286
  8128  0FD4                     l3294:	
  8129                           
  8130                           ;EEPROM_24LC256.c: 47: }
  8131                           ;EEPROM_24LC256.c: 48: for(int i=0; i<cADSRdataBytes;i++) {
  8132  0FD4  0020               	movlb	0	; select bank0
  8133  0FD5  01A9               	clrf	updateModelFromPatchMemory@i_1230
  8134  0FD6  01AA               	clrf	updateModelFromPatchMemory@i_1230+1
  8135  0FD7                     L4:	
  8136  0FD7  082A               	movf	updateModelFromPatchMemory@i_1230+1,w
  8137  0FD8  3A80               	xorlw	128
  8138  0FD9  00A2               	movwf	??_updateModelFromPatchMemory
  8139  0FDA  3080               	movlw	128
  8140  0FDB  0222               	subwf	??_updateModelFromPatchMemory,w
  8141  0FDC  3008               	movlw	8
  8142  0FDD  1903               	btfsc	3,2
  8143  0FDE  0229               	subwf	updateModelFromPatchMemory@i_1230,w
  8144  0FDF  1803               	btfsc	3,0
  8145  0FE0  0008               	return
  8146                           
  8147                           ;EEPROM_24LC256.c: 49: dualADSRdata1[i]=aPatchMemory[iPatchMemoryNDX++];
  8148  0FE1  3070               	movlw	112
  8149  0FE2  0020               	movlb	0	; select bank0
  8150  0FE3  00A2               	movwf	??_updateModelFromPatchMemory
  8151  0FE4  3023               	movlw	35
  8152  0FE5  00A3               	movwf	??_updateModelFromPatchMemory+1
  8153  0FE6  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  8154  0FE7  0722               	addwf	??_updateModelFromPatchMemory,w
  8155  0FE8  0086               	movwf	6
  8156  0FE9  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  8157  0FEA  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  8158  0FEB  0087               	movwf	7
  8159  0FEC  0801               	movf	1,w
  8160  0FED  00A4               	movwf	??_updateModelFromPatchMemory+2
  8161  0FEE  0829               	movf	updateModelFromPatchMemory@i_1230,w
  8162  0FEF  0721               	addwf	updateModelFromPatchMemory@dualADSRdata1,w
  8163  0FF0  00A5               	movwf	??_updateModelFromPatchMemory+3
  8164  0FF1  0825               	movf	??_updateModelFromPatchMemory+3,w
  8165  0FF2  0086               	movwf	6
  8166  0FF3  3001               	movlw	1	; select bank2/3
  8167  0FF4  0087               	movwf	7
  8168  0FF5  0824               	movf	??_updateModelFromPatchMemory+2,w
  8169  0FF6  0081               	movwf	1
  8170  0FF7  3001               	movlw	1
  8171  0FF8  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  8172  0FF9  3000               	movlw	0
  8173  0FFA  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  8174  0FFB  3001               	movlw	1
  8175  0FFC  07A9               	addwf	updateModelFromPatchMemory@i_1230,f
  8176  0FFD  3000               	movlw	0
  8177  0FFE  3DAA               	addwfc	updateModelFromPatchMemory@i_1230+1,f
  8178  0FFF  2FD7               	goto	L4
  8179  1000                     __end_of_updateModelFromPatchMemory:	
  8180                           
  8181                           	psect	text7
  8182  09FE                     __ptext7:	
  8183 ;; *************** function _initDAC528 *****************
  8184 ;; Defined at:
  8185 ;;		line 44 in file "VCAMIX_SPI_Master.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;		None
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;		None
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  1    wreg      void 
  8192 ;; Registers used:
  8193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;Total ram usage:        1 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    6
  8206 ;; This function calls:
  8207 ;;		_putByte
  8208 ;; This function is called by:
  8209 ;;		_main
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           
  8214                           ;psect for function _initDAC528
  8215  09FE                     _initDAC528:	
  8216                           
  8217                           ;VCAMIX_SPI_Master.c: 48: LATA &= 0x7F ;
  8218                           
  8219                           ;incstack = 0
  8220                           ; Regs used in _initDAC528: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8221  09FE  307F               	movlw	127
  8222  09FF  0020               	movlb	0	; select bank0
  8223  0A00  00D5               	movwf	??_initDAC528
  8224  0A01  0855               	movf	??_initDAC528,w
  8225  0A02  0596               	andwf	22,f	;volatile
  8226                           
  8227                           ;VCAMIX_SPI_Master.c: 50: putByte(0x00,0);
  8228  0A03  3000               	movlw	0
  8229  0A04  00CC               	movwf	putByte@clockPin
  8230  0A05  00CD               	movwf	putByte@clockPin+1
  8231  0A06  3000               	movlw	0
  8232  0A07  3185  25C5  3189   	fcall	_putByte
  8233                           
  8234                           ;VCAMIX_SPI_Master.c: 52: putByte(0xFF,0);
  8235  0A0A  3000               	movlw	0
  8236  0A0B  0020               	movlb	0	; select bank0
  8237  0A0C  00CC               	movwf	putByte@clockPin
  8238  0A0D  00CD               	movwf	putByte@clockPin+1
  8239  0A0E  30FF               	movlw	255
  8240  0A0F  3185  25C5         	fcall	_putByte
  8241                           
  8242                           ;VCAMIX_SPI_Master.c: 54: LATA |= 0x80 ;
  8243  0A11  0020               	movlb	0	; select bank0
  8244  0A12  1796               	bsf	22,7	;volatile
  8245  0A13  0008               	return
  8246  0A14                     __end_of_initDAC528:	
  8247                           
  8248                           	psect	text8
  8249  05C5                     __ptext8:	
  8250 ;; *************** function _putByte *****************
  8251 ;; Defined at:
  8252 ;;		line 14 in file "VCAMIX_SPI_Master.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  data            1    wreg     unsigned char 
  8255 ;;  clockPin        2   44[BANK0 ] int 
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;  data            1   50[BANK0 ] unsigned char 
  8258 ;;  i               1   52[BANK0 ] unsigned char 
  8259 ;;  mask            1   51[BANK0 ] unsigned char 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  1    wreg      void 
  8262 ;; Registers used:
  8263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8269 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;Total ram usage:        9 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    5
  8276 ;; This function calls:
  8277 ;;		___awtoft
  8278 ;;		___ftmul
  8279 ;;		___fttol
  8280 ;; This function is called by:
  8281 ;;		_initDAC528
  8282 ;;		_writeDAC528
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           
  8287                           ;psect for function _putByte
  8288  05C5                     _putByte:	
  8289                           
  8290                           ;incstack = 0
  8291                           ; Regs used in _putByte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8292                           ;putByte@data stored from wreg
  8293  05C5  0020               	movlb	0	; select bank0
  8294  05C6  00D2               	movwf	putByte@data
  8295                           
  8296                           ;VCAMIX_SPI_Master.c: 15: uint8_t i = 8;
  8297  05C7  3008               	movlw	8
  8298  05C8  00CE               	movwf	??_putByte
  8299  05C9  084E               	movf	??_putByte,w
  8300  05CA  00D4               	movwf	putByte@i
  8301  05CB                     l775:	
  8302                           ;VCAMIX_SPI_Master.c: 16: uint8_t mask;
  8303                           ;VCAMIX_SPI_Master.c: 17: while(i > 0) {
  8304                           
  8305  05CB  0854               	movf	putByte@i,w
  8306  05CC  1903               	btfsc	3,2
  8307  05CD  0008               	return
  8308                           
  8309                           ;VCAMIX_SPI_Master.c: 18: mask = 0x01 << (i - 1);
  8310  05CE  3001               	movlw	1
  8311  05CF  00CE               	movwf	??_putByte
  8312  05D0  0854               	movf	putByte@i,w
  8313  05D1  3EFF               	addlw	-1
  8314  05D2  0A89               	incf	9,f
  8315  05D3  2DD5               	goto	u2414
  8316  05D4                     u2415:	
  8317  05D4  35CE               	lslf	??_putByte,f
  8318  05D5                     u2414:	
  8319  05D5  0B89               	decfsz	9,f
  8320  05D6  2DD4               	goto	u2415
  8321  05D7  084E               	movf	??_putByte,w
  8322  05D8  00CF               	movwf	??_putByte+1
  8323  05D9  084F               	movf	??_putByte+1,w
  8324  05DA  00D3               	movwf	putByte@mask
  8325                           
  8326                           ;VCAMIX_SPI_Master.c: 20: LATB &= 0xBF ;
  8327  05DB  30BF               	movlw	191
  8328  05DC  00CE               	movwf	??_putByte
  8329  05DD  084E               	movf	??_putByte,w
  8330  05DE  0597               	andwf	23,f	;volatile
  8331                           
  8332                           ;VCAMIX_SPI_Master.c: 22: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8333  05DF  3018               	movlw	low (_clockMicroTime| (0+32768))
  8334  05E0  0084               	movwf	4
  8335  05E1  3090               	movlw	high (_clockMicroTime| (0+32768))
  8336  05E2  0085               	movwf	5
  8337  05E3  3F00               	moviw [0]fsr0
  8338  05E4  00A8               	movwf	___awtoft@c
  8339  05E5  3F01               	moviw [1]fsr0
  8340  05E6  00A9               	movwf	___awtoft@c+1
  8341  05E7  318A  22ED  3185   	fcall	___awtoft
  8342  05EA  0020               	movlb	0	; select bank0
  8343  05EB  0828               	movf	?___awtoft,w
  8344  05EC  00B1               	movwf	___ftmul@f2
  8345  05ED  0829               	movf	?___awtoft+1,w
  8346  05EE  00B2               	movwf	___ftmul@f2+1
  8347  05EF  082A               	movf	?___awtoft+2,w
  8348  05F0  00B3               	movwf	___ftmul@f2+2
  8349  05F1  3000               	movlw	0
  8350  05F2  00AE               	movwf	___ftmul@f1
  8351  05F3  3000               	movlw	0
  8352  05F4  00AF               	movwf	___ftmul@f1+1
  8353  05F5  3041               	movlw	65
  8354  05F6  00B0               	movwf	___ftmul@f1+2
  8355  05F7  3186  267A  3185   	fcall	___ftmul
  8356  05FA  0020               	movlb	0	; select bank0
  8357  05FB  082E               	movf	?___ftmul,w
  8358  05FC  00BE               	movwf	___fttol@f1
  8359  05FD  082F               	movf	?___ftmul+1,w
  8360  05FE  00BF               	movwf	___fttol@f1+1
  8361  05FF  0830               	movf	?___ftmul+2,w
  8362  0600  00C0               	movwf	___fttol@f1+2
  8363  0601  318E  2640  3185   	fcall	___fttol
  8364  0604  0020               	movlb	0	; select bank0
  8365  0605  083E               	movf	?___fttol,w
  8366  0606  00CE               	movwf	??_putByte
  8367  0607  083F               	movf	?___fttol+1,w
  8368  0608  00CF               	movwf	??_putByte+1
  8369  0609  0840               	movf	?___fttol+2,w
  8370  060A  00D0               	movwf	??_putByte+2
  8371  060B  0841               	movf	?___fttol+3,w
  8372  060C  00D1               	movwf	??_putByte+3
  8373                           
  8374                           ;VCAMIX_SPI_Master.c: 23: if (data & mask){
  8375  060D  0020               	movlb	0	; select bank0
  8376  060E  0852               	movf	putByte@data,w
  8377  060F  0553               	andwf	putByte@mask,w
  8378  0610  1903               	btfsc	3,2
  8379  0611  2E14               	goto	l2990
  8380                           
  8381                           ;VCAMIX_SPI_Master.c: 25: LATB |= 0x80 ;
  8382  0612  1797               	bsf	23,7	;volatile
  8383                           
  8384                           ;VCAMIX_SPI_Master.c: 26: }else{
  8385  0613  2E18               	goto	l2992
  8386  0614                     l2990:	
  8387                           
  8388                           ;VCAMIX_SPI_Master.c: 28: LATB &= 0x7F ;
  8389  0614  307F               	movlw	127
  8390  0615  00CE               	movwf	??_putByte
  8391  0616  084E               	movf	??_putByte,w
  8392  0617  0597               	andwf	23,f	;volatile
  8393  0618                     l2992:	
  8394                           
  8395                           ;VCAMIX_SPI_Master.c: 29: }
  8396                           ;VCAMIX_SPI_Master.c: 31: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8397  0618  3018               	movlw	low (_clockMicroTime| (0+32768))
  8398  0619  0084               	movwf	4
  8399  061A  3090               	movlw	high (_clockMicroTime| (0+32768))
  8400  061B  0085               	movwf	5
  8401  061C  3F00               	moviw [0]fsr0
  8402  061D  00A8               	movwf	___awtoft@c
  8403  061E  3F01               	moviw [1]fsr0
  8404  061F  00A9               	movwf	___awtoft@c+1
  8405  0620  318A  22ED  3185   	fcall	___awtoft
  8406  0623  0020               	movlb	0	; select bank0
  8407  0624  0828               	movf	?___awtoft,w
  8408  0625  00B1               	movwf	___ftmul@f2
  8409  0626  0829               	movf	?___awtoft+1,w
  8410  0627  00B2               	movwf	___ftmul@f2+1
  8411  0628  082A               	movf	?___awtoft+2,w
  8412  0629  00B3               	movwf	___ftmul@f2+2
  8413  062A  3000               	movlw	0
  8414  062B  00AE               	movwf	___ftmul@f1
  8415  062C  3000               	movlw	0
  8416  062D  00AF               	movwf	___ftmul@f1+1
  8417  062E  3041               	movlw	65
  8418  062F  00B0               	movwf	___ftmul@f1+2
  8419  0630  3186  267A  3185   	fcall	___ftmul
  8420  0633  0020               	movlb	0	; select bank0
  8421  0634  082E               	movf	?___ftmul,w
  8422  0635  00BE               	movwf	___fttol@f1
  8423  0636  082F               	movf	?___ftmul+1,w
  8424  0637  00BF               	movwf	___fttol@f1+1
  8425  0638  0830               	movf	?___ftmul+2,w
  8426  0639  00C0               	movwf	___fttol@f1+2
  8427  063A  318E  2640  3185   	fcall	___fttol
  8428  063D  0020               	movlb	0	; select bank0
  8429  063E  083E               	movf	?___fttol,w
  8430  063F  00CE               	movwf	??_putByte
  8431  0640  083F               	movf	?___fttol+1,w
  8432  0641  00CF               	movwf	??_putByte+1
  8433  0642  0840               	movf	?___fttol+2,w
  8434  0643  00D0               	movwf	??_putByte+2
  8435  0644  0841               	movf	?___fttol+3,w
  8436  0645  00D1               	movwf	??_putByte+3
  8437                           
  8438                           ;VCAMIX_SPI_Master.c: 33: LATB |= 0x40 ;
  8439  0646  0020               	movlb	0	; select bank0
  8440  0647  1717               	bsf	23,6	;volatile
  8441                           
  8442                           ;VCAMIX_SPI_Master.c: 35: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8443  0648  3018               	movlw	low (_clockMicroTime| (0+32768))
  8444  0649  0084               	movwf	4
  8445  064A  3090               	movlw	high (_clockMicroTime| (0+32768))
  8446  064B  0085               	movwf	5
  8447  064C  3F00               	moviw [0]fsr0
  8448  064D  00A8               	movwf	___awtoft@c
  8449  064E  3F01               	moviw [1]fsr0
  8450  064F  00A9               	movwf	___awtoft@c+1
  8451  0650  318A  22ED  3185   	fcall	___awtoft
  8452  0653  0020               	movlb	0	; select bank0
  8453  0654  0828               	movf	?___awtoft,w
  8454  0655  00B1               	movwf	___ftmul@f2
  8455  0656  0829               	movf	?___awtoft+1,w
  8456  0657  00B2               	movwf	___ftmul@f2+1
  8457  0658  082A               	movf	?___awtoft+2,w
  8458  0659  00B3               	movwf	___ftmul@f2+2
  8459  065A  3000               	movlw	0
  8460  065B  00AE               	movwf	___ftmul@f1
  8461  065C  3000               	movlw	0
  8462  065D  00AF               	movwf	___ftmul@f1+1
  8463  065E  3041               	movlw	65
  8464  065F  00B0               	movwf	___ftmul@f1+2
  8465  0660  3186  267A  3185   	fcall	___ftmul
  8466  0663  0020               	movlb	0	; select bank0
  8467  0664  082E               	movf	?___ftmul,w
  8468  0665  00BE               	movwf	___fttol@f1
  8469  0666  082F               	movf	?___ftmul+1,w
  8470  0667  00BF               	movwf	___fttol@f1+1
  8471  0668  0830               	movf	?___ftmul+2,w
  8472  0669  00C0               	movwf	___fttol@f1+2
  8473  066A  318E  2640  3185   	fcall	___fttol
  8474  066D  0020               	movlb	0	; select bank0
  8475  066E  083E               	movf	?___fttol,w
  8476  066F  00CE               	movwf	??_putByte
  8477  0670  083F               	movf	?___fttol+1,w
  8478  0671  00CF               	movwf	??_putByte+1
  8479  0672  0840               	movf	?___fttol+2,w
  8480  0673  00D0               	movwf	??_putByte+2
  8481  0674  0841               	movf	?___fttol+3,w
  8482  0675  00D1               	movwf	??_putByte+3
  8483                           
  8484                           ;VCAMIX_SPI_Master.c: 36: --i;
  8485  0676  3001               	movlw	1
  8486  0677  0020               	movlb	0	; select bank0
  8487  0678  02D4               	subwf	putByte@i,f
  8488  0679  2DCB               	goto	l775
  8489  067A                     __end_of_putByte:	
  8490                           
  8491                           	psect	text9
  8492  0E40                     __ptext9:	
  8493 ;; *************** function ___fttol *****************
  8494 ;; Defined at:
  8495 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  8496 ;; Parameters:    Size  Location     Type
  8497 ;;  f1              3   30[BANK0 ] float 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  lval            4   39[BANK0 ] unsigned long 
  8500 ;;  exp1            1   43[BANK0 ] unsigned char 
  8501 ;;  sign1           1   38[BANK0 ] unsigned char 
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  4   30[BANK0 ] long 
  8504 ;; Registers used:
  8505 ;;		wreg, status,2, status,0
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;Total ram usage:       14 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:    3
  8518 ;; This function calls:
  8519 ;;		Nothing
  8520 ;; This function is called by:
  8521 ;;		_main
  8522 ;;		_putByte
  8523 ;;		_LED7SegDisplayValue
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function ___fttol
  8529  0E40                     ___fttol:	
  8530                           
  8531                           ;incstack = 0
  8532                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8533  0E40  0020               	movlb	0	; select bank0
  8534  0E41  083E               	movf	___fttol@f1,w
  8535  0E42  00C2               	movwf	??___fttol
  8536  0E43  083F               	movf	___fttol@f1+1,w
  8537  0E44  00C3               	movwf	??___fttol+1
  8538  0E45  0840               	movf	___fttol@f1+2,w
  8539  0E46  00C4               	movwf	??___fttol+2
  8540  0E47  1003               	clrc
  8541  0E48  0D43               	rlf	??___fttol+1,w
  8542  0E49  0D44               	rlf	??___fttol+2,w
  8543  0E4A  00C5               	movwf	??___fttol+3
  8544  0E4B  0845               	movf	??___fttol+3,w
  8545  0E4C  00CB               	movwf	___fttol@exp1
  8546  0E4D  084B               	movf	___fttol@exp1,w
  8547  0E4E  1D03               	btfss	3,2
  8548  0E4F  2E59               	goto	l2932
  8549  0E50  3000               	movlw	0
  8550  0E51  00C1               	movwf	?___fttol+3
  8551  0E52  3000               	movlw	0
  8552  0E53  00C0               	movwf	?___fttol+2
  8553  0E54  3000               	movlw	0
  8554  0E55  00BF               	movwf	?___fttol+1
  8555  0E56  3000               	movlw	0
  8556  0E57  00BE               	movwf	?___fttol
  8557  0E58  0008               	return
  8558  0E59                     l2932:	
  8559  0E59  083E               	movf	___fttol@f1,w
  8560  0E5A  00C2               	movwf	??___fttol
  8561  0E5B  083F               	movf	___fttol@f1+1,w
  8562  0E5C  00C3               	movwf	??___fttol+1
  8563  0E5D  0840               	movf	___fttol@f1+2,w
  8564  0E5E  00C4               	movwf	??___fttol+2
  8565  0E5F  3017               	movlw	23
  8566  0E60                     u2305:	
  8567  0E60  36C4               	lsrf	??___fttol+2,f
  8568  0E61  0CC3               	rrf	??___fttol+1,f
  8569  0E62  0CC2               	rrf	??___fttol,f
  8570  0E63  0B89               	decfsz	9,f
  8571  0E64  2E60               	goto	u2305
  8572  0E65  0842               	movf	??___fttol,w
  8573  0E66  00C5               	movwf	??___fttol+3
  8574  0E67  0845               	movf	??___fttol+3,w
  8575  0E68  00C6               	movwf	___fttol@sign1
  8576  0E69  17BF               	bsf	___fttol@f1+1,7
  8577  0E6A  30FF               	movlw	255
  8578  0E6B  05BE               	andwf	___fttol@f1,f
  8579  0E6C  30FF               	movlw	255
  8580  0E6D  05BF               	andwf	___fttol@f1+1,f
  8581  0E6E  3000               	movlw	0
  8582  0E6F  05C0               	andwf	___fttol@f1+2,f
  8583  0E70  083E               	movf	___fttol@f1,w
  8584  0E71  00C7               	movwf	___fttol@lval
  8585  0E72  083F               	movf	___fttol@f1+1,w
  8586  0E73  00C8               	movwf	___fttol@lval+1
  8587  0E74  0840               	movf	___fttol@f1+2,w
  8588  0E75  00C9               	movwf	___fttol@lval+2
  8589  0E76  01CA               	clrf	___fttol@lval+3
  8590  0E77  308E               	movlw	142
  8591  0E78  02CB               	subwf	___fttol@exp1,f
  8592  0E79  1FCB               	btfss	___fttol@exp1,7
  8593  0E7A  2E97               	goto	l2952
  8594  0E7B  084B               	movf	___fttol@exp1,w
  8595  0E7C  3A80               	xorlw	128
  8596  0E7D  3E8F               	addlw	143
  8597  0E7E  1803               	skipnc
  8598  0E7F  2E89               	goto	l2950
  8599  0E80  3000               	movlw	0
  8600  0E81  00C1               	movwf	?___fttol+3
  8601  0E82  3000               	movlw	0
  8602  0E83  00C0               	movwf	?___fttol+2
  8603  0E84  3000               	movlw	0
  8604  0E85  00BF               	movwf	?___fttol+1
  8605  0E86  3000               	movlw	0
  8606  0E87  00BE               	movwf	?___fttol
  8607  0E88  0008               	return
  8608  0E89                     l2950:	
  8609  0E89  3001               	movlw	1
  8610  0E8A                     u2335:	
  8611  0E8A  36CA               	lsrf	___fttol@lval+3,f
  8612  0E8B  0CC9               	rrf	___fttol@lval+2,f
  8613  0E8C  0CC8               	rrf	___fttol@lval+1,f
  8614  0E8D  0CC7               	rrf	___fttol@lval,f
  8615  0E8E  0B89               	decfsz	9,f
  8616  0E8F  2E8A               	goto	u2335
  8617  0E90  3001               	movlw	1
  8618  0E91  00C2               	movwf	??___fttol
  8619  0E92  0842               	movf	??___fttol,w
  8620  0E93  07CB               	addwf	___fttol@exp1,f
  8621  0E94  1903               	btfsc	3,2
  8622  0E95  2EB0               	goto	l2960
  8623  0E96  2E89               	goto	l2950
  8624  0E97                     l2952:	
  8625  0E97  3018               	movlw	24
  8626  0E98  024B               	subwf	___fttol@exp1,w
  8627  0E99  1C03               	skipc
  8628  0E9A  2EAD               	goto	l1202
  8629  0E9B  3000               	movlw	0
  8630  0E9C  00C1               	movwf	?___fttol+3
  8631  0E9D  3000               	movlw	0
  8632  0E9E  00C0               	movwf	?___fttol+2
  8633  0E9F  3000               	movlw	0
  8634  0EA0  00BF               	movwf	?___fttol+1
  8635  0EA1  3000               	movlw	0
  8636  0EA2  00BE               	movwf	?___fttol
  8637  0EA3  0008               	return
  8638  0EA4                     l2958:	
  8639  0EA4  3001               	movlw	1
  8640  0EA5                     u2365:	
  8641  0EA5  35C7               	lslf	___fttol@lval,f
  8642  0EA6  0DC8               	rlf	___fttol@lval+1,f
  8643  0EA7  0DC9               	rlf	___fttol@lval+2,f
  8644  0EA8  0DCA               	rlf	___fttol@lval+3,f
  8645  0EA9  0B89               	decfsz	9,f
  8646  0EAA  2EA5               	goto	u2365
  8647  0EAB  3001               	movlw	1
  8648  0EAC  02CB               	subwf	___fttol@exp1,f
  8649  0EAD                     l1202:	
  8650  0EAD  084B               	movf	___fttol@exp1,w
  8651  0EAE  1D03               	btfss	3,2
  8652  0EAF  2EA4               	goto	l2958
  8653  0EB0                     l2960:	
  8654  0EB0  0846               	movf	___fttol@sign1,w
  8655  0EB1  1903               	btfsc	3,2
  8656  0EB2  2EBE               	goto	l2964
  8657  0EB3  09C7               	comf	___fttol@lval,f
  8658  0EB4  09C8               	comf	___fttol@lval+1,f
  8659  0EB5  09C9               	comf	___fttol@lval+2,f
  8660  0EB6  09CA               	comf	___fttol@lval+3,f
  8661  0EB7  0AC7               	incf	___fttol@lval,f
  8662  0EB8  1903               	skipnz
  8663  0EB9  0AC8               	incf	___fttol@lval+1,f
  8664  0EBA  1903               	skipnz
  8665  0EBB  0AC9               	incf	___fttol@lval+2,f
  8666  0EBC  1903               	skipnz
  8667  0EBD  0ACA               	incf	___fttol@lval+3,f
  8668  0EBE                     l2964:	
  8669  0EBE  084A               	movf	___fttol@lval+3,w
  8670  0EBF  00C1               	movwf	?___fttol+3
  8671  0EC0  0849               	movf	___fttol@lval+2,w
  8672  0EC1  00C0               	movwf	?___fttol+2
  8673  0EC2  0848               	movf	___fttol@lval+1,w
  8674  0EC3  00BF               	movwf	?___fttol+1
  8675  0EC4  0847               	movf	___fttol@lval,w
  8676  0EC5  00BE               	movwf	?___fttol
  8677  0EC6  0008               	return
  8678  0EC7                     __end_of___fttol:	
  8679                           
  8680                           	psect	text10
  8681  067A                     __ptext10:	
  8682 ;; *************** function ___ftmul *****************
  8683 ;; Defined at:
  8684 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;  f1              3   14[BANK0 ] float 
  8687 ;;  f2              3   17[BANK0 ] float 
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8690 ;;  sign            1   29[BANK0 ] unsigned char 
  8691 ;;  cntr            1   28[BANK0 ] unsigned char 
  8692 ;;  exp             1   24[BANK0 ] unsigned char 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  3   14[BANK0 ] float 
  8695 ;; Registers used:
  8696 ;;		wreg, status,2, status,0, pclath, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8702 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;Total ram usage:       16 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:    4
  8709 ;; This function calls:
  8710 ;;		___ftpack
  8711 ;; This function is called by:
  8712 ;;		_putByte
  8713 ;; This function uses a non-reentrant model
  8714 ;;
  8715                           
  8716                           
  8717                           ;psect for function ___ftmul
  8718  067A                     ___ftmul:	
  8719                           
  8720                           ;incstack = 0
  8721                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8722  067A  0020               	movlb	0	; select bank0
  8723  067B  082E               	movf	___ftmul@f1,w
  8724  067C  00B4               	movwf	??___ftmul
  8725  067D  082F               	movf	___ftmul@f1+1,w
  8726  067E  00B5               	movwf	??___ftmul+1
  8727  067F  0830               	movf	___ftmul@f1+2,w
  8728  0680  00B6               	movwf	??___ftmul+2
  8729  0681  1003               	clrc
  8730  0682  0D35               	rlf	??___ftmul+1,w
  8731  0683  0D36               	rlf	??___ftmul+2,w
  8732  0684  00B7               	movwf	??___ftmul+3
  8733  0685  0837               	movf	??___ftmul+3,w
  8734  0686  00B8               	movwf	___ftmul@exp
  8735  0687  0838               	movf	___ftmul@exp,w
  8736  0688  1D03               	btfss	3,2
  8737  0689  2E91               	goto	l2882
  8738  068A  3000               	movlw	0
  8739  068B  00AE               	movwf	?___ftmul
  8740  068C  3000               	movlw	0
  8741  068D  00AF               	movwf	?___ftmul+1
  8742  068E  3000               	movlw	0
  8743  068F  00B0               	movwf	?___ftmul+2
  8744  0690  0008               	return
  8745  0691                     l2882:	
  8746  0691  0831               	movf	___ftmul@f2,w
  8747  0692  00B4               	movwf	??___ftmul
  8748  0693  0832               	movf	___ftmul@f2+1,w
  8749  0694  00B5               	movwf	??___ftmul+1
  8750  0695  0833               	movf	___ftmul@f2+2,w
  8751  0696  00B6               	movwf	??___ftmul+2
  8752  0697  1003               	clrc
  8753  0698  0D35               	rlf	??___ftmul+1,w
  8754  0699  0D36               	rlf	??___ftmul+2,w
  8755  069A  00B7               	movwf	??___ftmul+3
  8756  069B  0837               	movf	??___ftmul+3,w
  8757  069C  00BD               	movwf	___ftmul@sign
  8758  069D  083D               	movf	___ftmul@sign,w
  8759  069E  1D03               	btfss	3,2
  8760  069F  2EA7               	goto	l2888
  8761  06A0  3000               	movlw	0
  8762  06A1  00AE               	movwf	?___ftmul
  8763  06A2  3000               	movlw	0
  8764  06A3  00AF               	movwf	?___ftmul+1
  8765  06A4  3000               	movlw	0
  8766  06A5  00B0               	movwf	?___ftmul+2
  8767  06A6  0008               	return
  8768  06A7                     l2888:	
  8769  06A7  083D               	movf	___ftmul@sign,w
  8770  06A8  3E7B               	addlw	123
  8771  06A9  00B4               	movwf	??___ftmul
  8772  06AA  0834               	movf	??___ftmul,w
  8773  06AB  07B8               	addwf	___ftmul@exp,f
  8774  06AC  082E               	movf	___ftmul@f1,w
  8775  06AD  00B4               	movwf	??___ftmul
  8776  06AE  082F               	movf	___ftmul@f1+1,w
  8777  06AF  00B5               	movwf	??___ftmul+1
  8778  06B0  0830               	movf	___ftmul@f1+2,w
  8779  06B1  00B6               	movwf	??___ftmul+2
  8780  06B2  3010               	movlw	16
  8781  06B3                     u2195:	
  8782  06B3  36B6               	lsrf	??___ftmul+2,f
  8783  06B4  0CB5               	rrf	??___ftmul+1,f
  8784  06B5  0CB4               	rrf	??___ftmul,f
  8785  06B6  0B89               	decfsz	9,f
  8786  06B7  2EB3               	goto	u2195
  8787  06B8  0834               	movf	??___ftmul,w
  8788  06B9  00B7               	movwf	??___ftmul+3
  8789  06BA  0837               	movf	??___ftmul+3,w
  8790  06BB  00BD               	movwf	___ftmul@sign
  8791  06BC  0831               	movf	___ftmul@f2,w
  8792  06BD  00B4               	movwf	??___ftmul
  8793  06BE  0832               	movf	___ftmul@f2+1,w
  8794  06BF  00B5               	movwf	??___ftmul+1
  8795  06C0  0833               	movf	___ftmul@f2+2,w
  8796  06C1  00B6               	movwf	??___ftmul+2
  8797  06C2  3010               	movlw	16
  8798  06C3                     u2205:	
  8799  06C3  36B6               	lsrf	??___ftmul+2,f
  8800  06C4  0CB5               	rrf	??___ftmul+1,f
  8801  06C5  0CB4               	rrf	??___ftmul,f
  8802  06C6  0B89               	decfsz	9,f
  8803  06C7  2EC3               	goto	u2205
  8804  06C8  0834               	movf	??___ftmul,w
  8805  06C9  00B7               	movwf	??___ftmul+3
  8806  06CA  0837               	movf	??___ftmul+3,w
  8807  06CB  06BD               	xorwf	___ftmul@sign,f
  8808  06CC  3080               	movlw	128
  8809  06CD  00B4               	movwf	??___ftmul
  8810  06CE  0834               	movf	??___ftmul,w
  8811  06CF  05BD               	andwf	___ftmul@sign,f
  8812  06D0  17AF               	bsf	___ftmul@f1+1,7
  8813  06D1  17B2               	bsf	___ftmul@f2+1,7
  8814  06D2  30FF               	movlw	255
  8815  06D3  05B1               	andwf	___ftmul@f2,f
  8816  06D4  30FF               	movlw	255
  8817  06D5  05B2               	andwf	___ftmul@f2+1,f
  8818  06D6  3000               	movlw	0
  8819  06D7  05B3               	andwf	___ftmul@f2+2,f
  8820  06D8  3000               	movlw	0
  8821  06D9  00B9               	movwf	___ftmul@f3_as_product
  8822  06DA  3000               	movlw	0
  8823  06DB  00BA               	movwf	___ftmul@f3_as_product+1
  8824  06DC  3000               	movlw	0
  8825  06DD  00BB               	movwf	___ftmul@f3_as_product+2
  8826  06DE  3007               	movlw	7
  8827  06DF  00B4               	movwf	??___ftmul
  8828  06E0  0834               	movf	??___ftmul,w
  8829  06E1  00BC               	movwf	___ftmul@cntr
  8830  06E2                     l2900:	
  8831  06E2  1C2E               	btfss	___ftmul@f1,0
  8832  06E3  2EEA               	goto	l2904
  8833  06E4  0831               	movf	___ftmul@f2,w
  8834  06E5  07B9               	addwf	___ftmul@f3_as_product,f
  8835  06E6  0832               	movf	___ftmul@f2+1,w
  8836  06E7  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8837  06E8  0833               	movf	___ftmul@f2+2,w
  8838  06E9  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8839  06EA                     l2904:	
  8840  06EA  3001               	movlw	1
  8841  06EB                     u2225:	
  8842  06EB  36B0               	lsrf	___ftmul@f1+2,f
  8843  06EC  0CAF               	rrf	___ftmul@f1+1,f
  8844  06ED  0CAE               	rrf	___ftmul@f1,f
  8845  06EE  0B89               	decfsz	9,f
  8846  06EF  2EEB               	goto	u2225
  8847  06F0  3001               	movlw	1
  8848  06F1                     u2235:	
  8849  06F1  35B1               	lslf	___ftmul@f2,f
  8850  06F2  0DB2               	rlf	___ftmul@f2+1,f
  8851  06F3  0DB3               	rlf	___ftmul@f2+2,f
  8852  06F4  0B89               	decfsz	9,f
  8853  06F5  2EF1               	goto	u2235
  8854  06F6  3001               	movlw	1
  8855  06F7  02BC               	subwf	___ftmul@cntr,f
  8856  06F8  1D03               	btfss	3,2
  8857  06F9  2EE2               	goto	l2900
  8858  06FA  3009               	movlw	9
  8859  06FB  00B4               	movwf	??___ftmul
  8860  06FC  0834               	movf	??___ftmul,w
  8861  06FD  00BC               	movwf	___ftmul@cntr
  8862  06FE                     l2912:	
  8863  06FE  1C2E               	btfss	___ftmul@f1,0
  8864  06FF  2F06               	goto	l2916
  8865  0700  0831               	movf	___ftmul@f2,w
  8866  0701  07B9               	addwf	___ftmul@f3_as_product,f
  8867  0702  0832               	movf	___ftmul@f2+1,w
  8868  0703  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8869  0704  0833               	movf	___ftmul@f2+2,w
  8870  0705  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8871  0706                     l2916:	
  8872  0706  3001               	movlw	1
  8873  0707                     u2265:	
  8874  0707  36B0               	lsrf	___ftmul@f1+2,f
  8875  0708  0CAF               	rrf	___ftmul@f1+1,f
  8876  0709  0CAE               	rrf	___ftmul@f1,f
  8877  070A  0B89               	decfsz	9,f
  8878  070B  2F07               	goto	u2265
  8879  070C  3001               	movlw	1
  8880  070D                     u2275:	
  8881  070D  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8882  070E  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8883  070F  0CB9               	rrf	___ftmul@f3_as_product,f
  8884  0710  0B89               	decfsz	9,f
  8885  0711  2F0D               	goto	u2275
  8886  0712  3001               	movlw	1
  8887  0713  02BC               	subwf	___ftmul@cntr,f
  8888  0714  1D03               	btfss	3,2
  8889  0715  2EFE               	goto	l2912
  8890  0716  0839               	movf	___ftmul@f3_as_product,w
  8891  0717  00A0               	movwf	___ftpack@arg
  8892  0718  083A               	movf	___ftmul@f3_as_product+1,w
  8893  0719  00A1               	movwf	___ftpack@arg+1
  8894  071A  083B               	movf	___ftmul@f3_as_product+2,w
  8895  071B  00A2               	movwf	___ftpack@arg+2
  8896  071C  0838               	movf	___ftmul@exp,w
  8897  071D  00B4               	movwf	??___ftmul
  8898  071E  0834               	movf	??___ftmul,w
  8899  071F  00A3               	movwf	___ftpack@exp
  8900  0720  083D               	movf	___ftmul@sign,w
  8901  0721  00B5               	movwf	??___ftmul+1
  8902  0722  0835               	movf	??___ftmul+1,w
  8903  0723  00A4               	movwf	___ftpack@sign
  8904  0724  318C  24DF         	fcall	___ftpack
  8905  0726  0020               	movlb	0	; select bank0
  8906  0727  0820               	movf	?___ftpack,w
  8907  0728  00AE               	movwf	?___ftmul
  8908  0729  0821               	movf	?___ftpack+1,w
  8909  072A  00AF               	movwf	?___ftmul+1
  8910  072B  0822               	movf	?___ftpack+2,w
  8911  072C  00B0               	movwf	?___ftmul+2
  8912  072D  0008               	return
  8913  072E                     __end_of___ftmul:	
  8914                           
  8915                           	psect	text11
  8916  0AED                     __ptext11:	
  8917 ;; *************** function ___awtoft *****************
  8918 ;; Defined at:
  8919 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  c               2    8[BANK0 ] int 
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;  sign            1   13[BANK0 ] unsigned char 
  8924 ;; Return value:  Size  Location     Type
  8925 ;;                  3    8[BANK0 ] float 
  8926 ;; Registers used:
  8927 ;;		wreg, status,2, status,0, pclath, cstack
  8928 ;; Tracked objects:
  8929 ;;		On entry : 0/0
  8930 ;;		On exit  : 0/0
  8931 ;;		Unchanged: 0/0
  8932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8933 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8937 ;;Total ram usage:        6 bytes
  8938 ;; Hardware stack levels used:    1
  8939 ;; Hardware stack levels required when called:    4
  8940 ;; This function calls:
  8941 ;;		___ftpack
  8942 ;; This function is called by:
  8943 ;;		_main
  8944 ;;		_putByte
  8945 ;; This function uses a non-reentrant model
  8946 ;;
  8947                           
  8948                           
  8949                           ;psect for function ___awtoft
  8950  0AED                     ___awtoft:	
  8951                           
  8952                           ;incstack = 0
  8953                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8954  0AED  0020               	movlb	0	; select bank0
  8955  0AEE  01AD               	clrf	___awtoft@sign
  8956  0AEF  1FA9               	btfss	___awtoft@c+1,7
  8957  0AF0  2AF8               	goto	l2872
  8958  0AF1  09A8               	comf	___awtoft@c,f
  8959  0AF2  09A9               	comf	___awtoft@c+1,f
  8960  0AF3  0AA8               	incf	___awtoft@c,f
  8961  0AF4  1903               	skipnz
  8962  0AF5  0AA9               	incf	___awtoft@c+1,f
  8963  0AF6  01AD               	clrf	___awtoft@sign
  8964  0AF7  0AAD               	incf	___awtoft@sign,f
  8965  0AF8                     l2872:	
  8966  0AF8  0828               	movf	___awtoft@c,w
  8967  0AF9  00A0               	movwf	___ftpack@arg
  8968  0AFA  0829               	movf	___awtoft@c+1,w
  8969  0AFB  00A1               	movwf	___ftpack@arg+1
  8970  0AFC  01A2               	clrf	___ftpack@arg+2
  8971  0AFD  308E               	movlw	142
  8972  0AFE  00AB               	movwf	??___awtoft
  8973  0AFF  082B               	movf	??___awtoft,w
  8974  0B00  00A3               	movwf	___ftpack@exp
  8975  0B01  082D               	movf	___awtoft@sign,w
  8976  0B02  00AC               	movwf	??___awtoft+1
  8977  0B03  082C               	movf	??___awtoft+1,w
  8978  0B04  00A4               	movwf	___ftpack@sign
  8979  0B05  318C  24DF         	fcall	___ftpack
  8980  0B07  0020               	movlb	0	; select bank0
  8981  0B08  0820               	movf	?___ftpack,w
  8982  0B09  00A8               	movwf	?___awtoft
  8983  0B0A  0821               	movf	?___ftpack+1,w
  8984  0B0B  00A9               	movwf	?___awtoft+1
  8985  0B0C  0822               	movf	?___ftpack+2,w
  8986  0B0D  00AA               	movwf	?___awtoft+2
  8987  0B0E  0008               	return
  8988  0B0F                     __end_of___awtoft:	
  8989                           
  8990                           	psect	text12
  8991  0DBD                     __ptext12:	
  8992 ;; *************** function _blinkyLoop *****************
  8993 ;; Defined at:
  8994 ;;		line 217 in file "main.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  maxLoops        2   32[BANK0 ] int 
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  loopCount       2   38[BANK0 ] int 
  8999 ;;  delayTime       2   36[BANK0 ] int 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      void 
  9002 ;; Registers used:
  9003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9009 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;Total ram usage:        8 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    6
  9016 ;; This function calls:
  9017 ;;		_MYI2C_Write2LEDBytes
  9018 ;;		___wmul
  9019 ;;		_delay
  9020 ;; This function is called by:
  9021 ;;		_main
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           
  9026                           ;psect for function _blinkyLoop
  9027  0DBD                     _blinkyLoop:	
  9028                           
  9029                           ;main.c: 218: int loopCount=maxLoops;
  9030                           
  9031                           ;incstack = 0
  9032                           ; Regs used in _blinkyLoop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9033  0DBD  0020               	movlb	0	; select bank0
  9034  0DBE  0841               	movf	blinkyLoop@maxLoops+1,w
  9035  0DBF  00C7               	movwf	blinkyLoop@loopCount+1
  9036  0DC0  0840               	movf	blinkyLoop@maxLoops,w
  9037  0DC1  00C6               	movwf	blinkyLoop@loopCount
  9038                           
  9039                           ;main.c: 219: int delayTime;
  9040                           ;main.c: 221: ODCONB &= 0xF0;
  9041  0DC2  30F0               	movlw	240
  9042  0DC3  00C2               	movwf	??_blinkyLoop
  9043  0DC4  0842               	movf	??_blinkyLoop,w
  9044  0DC5  003E               	movlb	30	; select bank30
  9045  0DC6  05C5               	andwf	69,f	;volatile
  9046                           
  9047                           ;main.c: 222: ODCONC &= 0x1F;
  9048  0DC7  301F               	movlw	31
  9049  0DC8  0020               	movlb	0	; select bank0
  9050  0DC9  00C2               	movwf	??_blinkyLoop
  9051  0DCA  0842               	movf	??_blinkyLoop,w
  9052  0DCB  003E               	movlb	30	; select bank30
  9053  0DCC  05D0               	andwf	80,f	;volatile
  9054  0DCD                     l4354:	
  9055                           ;main.c: 224: while(loopCount>0){
  9056                           
  9057  0DCD  0020               	movlb	0	; select bank0
  9058  0DCE  0847               	movf	blinkyLoop@loopCount+1,w
  9059  0DCF  3A80               	xorlw	128
  9060  0DD0  00C2               	movwf	??_blinkyLoop
  9061  0DD1  3080               	movlw	128
  9062  0DD2  0242               	subwf	??_blinkyLoop,w
  9063  0DD3  1D03               	skipz
  9064  0DD4  2DD7               	goto	u4115
  9065  0DD5  3001               	movlw	1
  9066  0DD6  0246               	subwf	blinkyLoop@loopCount,w
  9067  0DD7                     u4115:	
  9068  0DD7  1C03               	btfss	3,0
  9069  0DD8  2E23               	goto	l4356
  9070                           
  9071                           ;main.c: 225: delayTime=loopCount*400;
  9072  0DD9  0020               	movlb	0	; select bank0
  9073  0DDA  0847               	movf	blinkyLoop@loopCount+1,w
  9074  0DDB  00A1               	movwf	___wmul@multiplier+1
  9075  0DDC  0846               	movf	blinkyLoop@loopCount,w
  9076  0DDD  00A0               	movwf	___wmul@multiplier
  9077  0DDE  3090               	movlw	144
  9078  0DDF  00A2               	movwf	___wmul@multiplicand
  9079  0DE0  3001               	movlw	1
  9080  0DE1  00A3               	movwf	___wmul@multiplicand+1
  9081  0DE2  318A  2277  318D   	fcall	___wmul
  9082  0DE5  0020               	movlb	0	; select bank0
  9083  0DE6  0821               	movf	?___wmul+1,w
  9084  0DE7  00C5               	movwf	blinkyLoop@delayTime+1
  9085  0DE8  0820               	movf	?___wmul,w
  9086  0DE9  00C4               	movwf	blinkyLoop@delayTime
  9087                           
  9088                           ;main.c: 228: LATB |= 0x0F;
  9089  0DEA  300F               	movlw	15
  9090  0DEB  00C2               	movwf	??_blinkyLoop
  9091  0DEC  0842               	movf	??_blinkyLoop,w
  9092  0DED  0497               	iorwf	23,f	;volatile
  9093                           
  9094                           ;main.c: 230: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0xFF,0xFF);
  9095  0DEE  30FF               	movlw	255
  9096  0DEF  00C2               	movwf	??_blinkyLoop
  9097  0DF0  0842               	movf	??_blinkyLoop,w
  9098  0DF1  00AE               	movwf	MYI2C_Write2LEDBytes@MSBWriteByte
  9099  0DF2  30FF               	movlw	255
  9100  0DF3  00C3               	movwf	??_blinkyLoop+1
  9101  0DF4  0843               	movf	??_blinkyLoop+1,w
  9102  0DF5  00AF               	movwf	MYI2C_Write2LEDBytes@LSBWriteByte
  9103  0DF6  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9104  0DF7  0084               	movwf	4
  9105  0DF8  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9106  0DF9  0085               	movwf	5
  9107  0DFA  0800               	movf	0,w	;code access
  9108  0DFB  318C  2485  318D   	fcall	_MYI2C_Write2LEDBytes
  9109                           
  9110                           ;main.c: 231: delay(delayTime);
  9111  0DFE  0020               	movlb	0	; select bank0
  9112  0DFF  0845               	movf	blinkyLoop@delayTime+1,w
  9113  0E00  00A7               	movwf	delay@delaytime+1
  9114  0E01  0844               	movf	blinkyLoop@delayTime,w
  9115  0E02  00A6               	movwf	delay@delaytime
  9116  0E03  318C  2432  318D   	fcall	_delay
  9117                           
  9118                           ;main.c: 233: LATB &= 0xF0;
  9119  0E06  30F0               	movlw	240
  9120  0E07  0020               	movlb	0	; select bank0
  9121  0E08  00C2               	movwf	??_blinkyLoop
  9122  0E09  0842               	movf	??_blinkyLoop,w
  9123  0E0A  0597               	andwf	23,f	;volatile
  9124                           
  9125                           ;main.c: 235: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0x0,0x0);
  9126  0E0B  01AE               	clrf	MYI2C_Write2LEDBytes@MSBWriteByte
  9127  0E0C  01AF               	clrf	MYI2C_Write2LEDBytes@LSBWriteByte
  9128  0E0D  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9129  0E0E  0084               	movwf	4
  9130  0E0F  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9131  0E10  0085               	movwf	5
  9132  0E11  0800               	movf	0,w	;code access
  9133  0E12  318C  2485  318D   	fcall	_MYI2C_Write2LEDBytes
  9134                           
  9135                           ;main.c: 236: delay(delayTime);
  9136  0E15  0020               	movlb	0	; select bank0
  9137  0E16  0845               	movf	blinkyLoop@delayTime+1,w
  9138  0E17  00A7               	movwf	delay@delaytime+1
  9139  0E18  0844               	movf	blinkyLoop@delayTime,w
  9140  0E19  00A6               	movwf	delay@delaytime
  9141  0E1A  318C  2432  318D   	fcall	_delay
  9142                           
  9143                           ;main.c: 238: loopCount--;
  9144  0E1D  30FF               	movlw	255
  9145  0E1E  0020               	movlb	0	; select bank0
  9146  0E1F  07C6               	addwf	blinkyLoop@loopCount,f
  9147  0E20  30FF               	movlw	255
  9148  0E21  3DC7               	addwfc	blinkyLoop@loopCount+1,f
  9149  0E22  2DCD               	goto	l4354
  9150  0E23                     l4356:	
  9151                           
  9152                           ;main.c: 239: }
  9153                           ;main.c: 240: LATB |= 0x0F;
  9154  0E23  300F               	movlw	15
  9155  0E24  0020               	movlb	0	; select bank0
  9156  0E25  00C2               	movwf	??_blinkyLoop
  9157  0E26  0842               	movf	??_blinkyLoop,w
  9158  0E27  0497               	iorwf	23,f	;volatile
  9159                           
  9160                           ;main.c: 242: delay(5000);
  9161  0E28  3088               	movlw	136
  9162  0E29  00A6               	movwf	delay@delaytime
  9163  0E2A  3013               	movlw	19
  9164  0E2B  00A7               	movwf	delay@delaytime+1
  9165  0E2C  318C  2432  318D   	fcall	_delay
  9166                           
  9167                           ;main.c: 243: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0xFF,0xFF);
  9168  0E2F  30FF               	movlw	255
  9169  0E30  0020               	movlb	0	; select bank0
  9170  0E31  00C2               	movwf	??_blinkyLoop
  9171  0E32  0842               	movf	??_blinkyLoop,w
  9172  0E33  00AE               	movwf	MYI2C_Write2LEDBytes@MSBWriteByte
  9173  0E34  30FF               	movlw	255
  9174  0E35  00C3               	movwf	??_blinkyLoop+1
  9175  0E36  0843               	movf	??_blinkyLoop+1,w
  9176  0E37  00AF               	movwf	MYI2C_Write2LEDBytes@LSBWriteByte
  9177  0E38  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9178  0E39  0084               	movwf	4
  9179  0E3A  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9180  0E3B  0085               	movwf	5
  9181  0E3C  0800               	movf	0,w	;code access
  9182  0E3D  318C  2485         	fcall	_MYI2C_Write2LEDBytes
  9183  0E3F  0008               	return
  9184  0E40                     __end_of_blinkyLoop:	
  9185                           ;main.c: 244: return;
  9186                           
  9187                           
  9188                           	psect	text13
  9189  0C85                     __ptext13:	
  9190 ;; *************** function _MYI2C_Write2LEDBytes *****************
  9191 ;; Defined at:
  9192 ;;		line 755 in file "main.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;  slaveDeviceA    1    wreg     unsigned char 
  9195 ;;  MSBWriteByte    1   14[BANK0 ] unsigned char 
  9196 ;;  LSBWriteByte    1   15[BANK0 ] unsigned char 
  9197 ;; Auto vars:     Size  Location     Type
  9198 ;;  slaveDeviceA    1   22[BANK0 ] unsigned char 
  9199 ;;  writeBuffer     3   28[BANK0 ] unsigned char [3]
  9200 ;;  timeOut         2   25[BANK0 ] unsigned int 
  9201 ;;  counter         2   23[BANK0 ] unsigned int 
  9202 ;;  nCount          2   20[BANK0 ] unsigned int 
  9203 ;;  pData           2    0        PTR unsigned char 
  9204 ;;  status          1   31[BANK0 ] enum E14335
  9205 ;;  pointerByte     1   27[BANK0 ] unsigned char 
  9206 ;; Return value:  Size  Location     Type
  9207 ;;                  1    wreg      void 
  9208 ;; Registers used:
  9209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9215 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;Total ram usage:       18 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    5
  9222 ;; This function calls:
  9223 ;;		_I2C1_MasterWrite
  9224 ;; This function is called by:
  9225 ;;		_blinkyLoop
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           
  9230                           ;psect for function _MYI2C_Write2LEDBytes
  9231  0C85                     _MYI2C_Write2LEDBytes:	
  9232                           
  9233                           ;incstack = 0
  9234                           ; Regs used in _MYI2C_Write2LEDBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9235                           ;MYI2C_Write2LEDBytes@slaveDeviceAddress stored from wreg
  9236  0C85  0020               	movlb	0	; select bank0
  9237  0C86  00B6               	movwf	MYI2C_Write2LEDBytes@slaveDeviceAddress
  9238                           
  9239                           ;main.c: 759: uint8_t *pData;
  9240                           ;main.c: 760: uint16_t nCount;
  9241                           ;main.c: 762: uint8_t writeBuffer[3];
  9242                           ;main.c: 764: uint16_t counter, timeOut;
  9243                           ;main.c: 765: uint8_t pointerByte = cPointerByteWriteLED;
  9244  0C87  302E               	movlw	low (_cPointerByteWriteLED| (0+32768))
  9245  0C88  0084               	movwf	4
  9246  0C89  3090               	movlw	high (_cPointerByteWriteLED| (0+32768))
  9247  0C8A  0085               	movwf	5
  9248  0C8B  0800               	movf	0,w	;code access
  9249  0C8C  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9250  0C8D  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9251  0C8E  00BB               	movwf	MYI2C_Write2LEDBytes@pointerByte
  9252                           
  9253                           ;main.c: 767: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
  9254  0C8F  3002               	movlw	2
  9255  0C90  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9256  0C91  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9257  0C92  00BF               	movwf	MYI2C_Write2LEDBytes@status
  9258                           
  9259                           ;main.c: 771: nCount = 1;
  9260  0C93  3001               	movlw	1
  9261  0C94  00B4               	movwf	MYI2C_Write2LEDBytes@nCount
  9262  0C95  3000               	movlw	0
  9263  0C96  00B5               	movwf	MYI2C_Write2LEDBytes@nCount+1
  9264                           
  9265                           ;main.c: 773: for (counter = 0; counter < nCount; counter++)
  9266  0C97  01B7               	clrf	MYI2C_Write2LEDBytes@counter
  9267  0C98  01B8               	clrf	MYI2C_Write2LEDBytes@counter+1
  9268  0C99                     l621:	
  9269  0C99  0835               	movf	MYI2C_Write2LEDBytes@nCount+1,w
  9270  0C9A  0238               	subwf	MYI2C_Write2LEDBytes@counter+1,w
  9271  0C9B  1D03               	skipz
  9272  0C9C  2C9F               	goto	u2535
  9273  0C9D  0834               	movf	MYI2C_Write2LEDBytes@nCount,w
  9274  0C9E  0237               	subwf	MYI2C_Write2LEDBytes@counter,w
  9275  0C9F                     u2535:	
  9276  0C9F  1803               	btfsc	3,0
  9277  0CA0  0008               	return
  9278                           
  9279                           ;main.c: 774: {
  9280                           ;main.c: 777: writeBuffer[0] = pointerByte;
  9281  0CA1  083B               	movf	MYI2C_Write2LEDBytes@pointerByte,w
  9282  0CA2  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9283  0CA3  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9284  0CA4  00BC               	movwf	MYI2C_Write2LEDBytes@writeBuffer
  9285                           
  9286                           ;main.c: 779: writeBuffer[1] = (MSBWriteByte);
  9287  0CA5  082E               	movf	MYI2C_Write2LEDBytes@MSBWriteByte,w
  9288  0CA6  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9289  0CA7  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9290  0CA8  00BD               	movwf	MYI2C_Write2LEDBytes@writeBuffer+1
  9291                           
  9292                           ;main.c: 780: writeBuffer[2] = (LSBWriteByte);
  9293  0CA9  082F               	movf	MYI2C_Write2LEDBytes@LSBWriteByte,w
  9294  0CAA  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9295  0CAB  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9296  0CAC  00BE               	movwf	MYI2C_Write2LEDBytes@writeBuffer+2
  9297                           
  9298                           ;main.c: 785: timeOut = 0;
  9299  0CAD  01B9               	clrf	MYI2C_Write2LEDBytes@timeOut
  9300  0CAE  01BA               	clrf	MYI2C_Write2LEDBytes@timeOut+1
  9301  0CAF                     l3136:	
  9302                           ;main.c: 786: while(status != I2C1_MESSAGE_FAIL)
  9303                           
  9304  0CAF  033F               	decf	MYI2C_Write2LEDBytes@status,w
  9305  0CB0  1903               	btfsc	3,2
  9306  0CB1  2CD7               	goto	l3138
  9307                           
  9308                           ;main.c: 787: {
  9309                           ;main.c: 789: I2C1_MasterWrite( writeBuffer,
  9310                           ;main.c: 790: 3,
  9311                           ;main.c: 791: slaveDeviceAddress,
  9312                           ;main.c: 792: &status);
  9313  0CB2  3003               	movlw	3
  9314  0CB3  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9315  0CB4  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9316  0CB5  00A7               	movwf	I2C1_MasterWrite@length
  9317  0CB6  0836               	movf	MYI2C_Write2LEDBytes@slaveDeviceAddress,w
  9318  0CB7  00B1               	movwf	??_MYI2C_Write2LEDBytes+1
  9319  0CB8  01B2               	clrf	??_MYI2C_Write2LEDBytes+2
  9320  0CB9  0831               	movf	??_MYI2C_Write2LEDBytes+1,w
  9321  0CBA  00A8               	movwf	I2C1_MasterWrite@address
  9322  0CBB  0832               	movf	??_MYI2C_Write2LEDBytes+2,w
  9323  0CBC  00A9               	movwf	I2C1_MasterWrite@address+1
  9324  0CBD  303F               	movlw	(low (MYI2C_Write2LEDBytes@status| 0))& (0+255)
  9325  0CBE  00B3               	movwf	??_MYI2C_Write2LEDBytes+3
  9326  0CBF  0833               	movf	??_MYI2C_Write2LEDBytes+3,w
  9327  0CC0  00AA               	movwf	I2C1_MasterWrite@pflag
  9328  0CC1  303C               	movlw	(low (MYI2C_Write2LEDBytes@writeBuffer| 0))& (0+255)
  9329  0CC2  3187  27D7  318C   	fcall	_I2C1_MasterWrite
  9330  0CC5                     l3122:	
  9331                           ;main.c: 795: while(status == I2C1_MESSAGE_PENDING);
  9332                           
  9333  0CC5  3002               	movlw	2
  9334  0CC6  0020               	movlb	0	; select bank0
  9335  0CC7  063F               	xorwf	MYI2C_Write2LEDBytes@status,w
  9336  0CC8  1903               	btfsc	3,2
  9337  0CC9  2CC5               	goto	l3122
  9338                           
  9339                           ;main.c: 797: if (status == I2C1_MESSAGE_COMPLETE)
  9340  0CCA  083F               	movf	MYI2C_Write2LEDBytes@status,w
  9341  0CCB  1903               	btfsc	3,2
  9342  0CCC  2CD7               	goto	l3138
  9343                           
  9344                           ;main.c: 807: if (timeOut == 100)
  9345                           
  9346                           ;main.c: 798: break;
  9347  0CCD  3064               	movlw	100
  9348  0CCE  0639               	xorwf	MYI2C_Write2LEDBytes@timeOut,w
  9349  0CCF  043A               	iorwf	MYI2C_Write2LEDBytes@timeOut+1,w
  9350  0CD0  1903               	btfsc	3,2
  9351  0CD1  2CD7               	goto	l3138
  9352                           
  9353                           ;main.c: 809: else
  9354                           ;main.c: 810: timeOut++;
  9355                           
  9356                           ;main.c: 808: break;
  9357  0CD2  3001               	movlw	1
  9358  0CD3  07B9               	addwf	MYI2C_Write2LEDBytes@timeOut,f
  9359  0CD4  3000               	movlw	0
  9360  0CD5  3DBA               	addwfc	MYI2C_Write2LEDBytes@timeOut+1,f
  9361  0CD6  2CAF               	goto	l3136
  9362  0CD7                     l3138:	
  9363                           
  9364                           ;main.c: 811: }
  9365                           ;main.c: 813: if (status == I2C1_MESSAGE_FAIL)
  9366  0CD7  033F               	decf	MYI2C_Write2LEDBytes@status,w
  9367  0CD8  1903               	btfsc	3,2
  9368  0CD9  0008               	return
  9369                           
  9370                           ;main.c: 814: {
  9371                           ;main.c: 815: break;
  9372  0CDA  3001               	movlw	1
  9373  0CDB  07B7               	addwf	MYI2C_Write2LEDBytes@counter,f
  9374  0CDC  3000               	movlw	0
  9375  0CDD  3DB8               	addwfc	MYI2C_Write2LEDBytes@counter+1,f
  9376  0CDE  2C99               	goto	l621
  9377  0CDF                     __end_of_MYI2C_Write2LEDBytes:	
  9378                           
  9379                           	psect	text14
  9380  07D7                     __ptext14:	
  9381 ;; *************** function _I2C1_MasterWrite *****************
  9382 ;; Defined at:
  9383 ;;		line 598 in file "mcc_generated_files/i2c1.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;  pdata           1    wreg     PTR unsigned char 
  9386 ;;		 -> MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), MYI2C_WriteFaders@writeBuffer(9),
      + 
  9387 ;;  length          1    7[BANK0 ] unsigned char 
  9388 ;;  address         2    8[BANK0 ] unsigned int 
  9389 ;;  pflag           1   10[BANK0 ] PTR enum E14260
  9390 ;;		 -> MYI2C_Write16EEPROMBytes@status(1), MYI2C_Write2LEDBytes@status(1), MYI2C_WriteFaders@status(1), 
  9391 ;; Auto vars:     Size  Location     Type
  9392 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  9393 ;;		 -> MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), MYI2C_WriteFaders@writeBuffer(9),
      + 
  9394 ;; Return value:  Size  Location     Type
  9395 ;;                  1    wreg      void 
  9396 ;; Registers used:
  9397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9398 ;; Tracked objects:
  9399 ;;		On entry : 0/0
  9400 ;;		On exit  : 0/0
  9401 ;;		Unchanged: 0/0
  9402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9403 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;Total ram usage:        7 bytes
  9408 ;; Hardware stack levels used:    1
  9409 ;; Hardware stack levels required when called:    4
  9410 ;; This function calls:
  9411 ;;		_I2C1_MasterTRBInsert
  9412 ;;		_I2C1_MasterWriteTRBBuild
  9413 ;; This function is called by:
  9414 ;;		_MYI2C_Write2LEDBytes
  9415 ;;		_MYI2C_Write16EEPROMBytes
  9416 ;;		_MYI2C_WriteFaders
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           
  9421                           ;psect for function _I2C1_MasterWrite
  9422  07D7                     _I2C1_MasterWrite:	
  9423                           
  9424                           ;incstack = 0
  9425                           ; Regs used in _I2C1_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9426                           ;I2C1_MasterWrite@pdata stored from wreg
  9427  07D7  0020               	movlb	0	; select bank0
  9428  07D8  00AD               	movwf	I2C1_MasterWrite@pdata
  9429                           
  9430                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9431                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
  9432  07D9  1869               	btfsc	_i2c1_object+2,0
  9433  07DA  2FF8               	goto	l2972
  9434                           
  9435                           ;i2c1.c: 608: {
  9436                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  9437  07DB  082D               	movf	I2C1_MasterWrite@pdata,w
  9438  07DC  00AB               	movwf	??_I2C1_MasterWrite
  9439  07DD  082B               	movf	??_I2C1_MasterWrite,w
  9440  07DE  00A0               	movwf	I2C1_MasterWriteTRBBuild@pdata
  9441  07DF  0827               	movf	I2C1_MasterWrite@length,w
  9442  07E0  00AC               	movwf	??_I2C1_MasterWrite+1
  9443  07E1  082C               	movf	??_I2C1_MasterWrite+1,w
  9444  07E2  00A1               	movwf	I2C1_MasterWriteTRBBuild@length
  9445  07E3  0829               	movf	I2C1_MasterWrite@address+1,w
  9446  07E4  00A3               	movwf	I2C1_MasterWriteTRBBuild@address+1
  9447  07E5  0828               	movf	I2C1_MasterWrite@address,w
  9448  07E6  00A2               	movwf	I2C1_MasterWriteTRBBuild@address
  9449  07E7  30D1               	movlw	(low (I2C1_MasterWrite@trBlock| 0))& (0+255)
  9450  07E8  318A  22CD  3187   	fcall	_I2C1_MasterWriteTRBBuild
  9451                           
  9452                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9453  07EB  30D1               	movlw	(low (I2C1_MasterWrite@trBlock| 0))& (0+255)
  9454  07EC  0020               	movlb	0	; select bank0
  9455  07ED  00AB               	movwf	??_I2C1_MasterWrite
  9456  07EE  082B               	movf	??_I2C1_MasterWrite,w
  9457  07EF  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9458  07F0  082A               	movf	I2C1_MasterWrite@pflag,w
  9459  07F1  00AC               	movwf	??_I2C1_MasterWrite+1
  9460  07F2  082C               	movf	??_I2C1_MasterWrite+1,w
  9461  07F3  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9462  07F4  3001               	movlw	1
  9463  07F5  318B  23EC         	fcall	_I2C1_MasterTRBInsert
  9464                           
  9465                           ;i2c1.c: 611: }
  9466  07F7  0008               	return
  9467  07F8                     l2972:	
  9468                           
  9469                           ;i2c1.c: 612: else
  9470                           ;i2c1.c: 613: {
  9471                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
  9472  07F8  0020               	movlb	0	; select bank0
  9473  07F9  082A               	movf	I2C1_MasterWrite@pflag,w
  9474  07FA  0086               	movwf	6
  9475  07FB  0187               	clrf	7
  9476  07FC  0181               	clrf	1
  9477  07FD  0A81               	incf	1,f
  9478  07FE  0008               	return
  9479  07FF                     __end_of_I2C1_MasterWrite:	
  9480                           
  9481                           	psect	text15
  9482  0ACD                     __ptext15:	
  9483 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  9484 ;; Defined at:
  9485 ;;		line 707 in file "mcc_generated_files/i2c1.c"
  9486 ;; Parameters:    Size  Location     Type
  9487 ;;  ptrb            1    wreg     PTR struct .
  9488 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterWrite@trBlock(4), 
  9489 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  9490 ;;		 -> MYI2C_ReadPatch@pointerByte(1), MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), M
      +YI2C_WriteFaders@writeBuffer(9), 
  9491 ;;		 -> MYI2C_ReadFaders@pointerByte(1), 
  9492 ;;  length          1    1[BANK0 ] unsigned char 
  9493 ;;  address         2    2[BANK0 ] unsigned int 
  9494 ;; Auto vars:     Size  Location     Type
  9495 ;;  ptrb            1    6[BANK0 ] PTR struct .
  9496 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterWrite@trBlock(4), 
  9497 ;; Return value:  Size  Location     Type
  9498 ;;                  1    wreg      void 
  9499 ;; Registers used:
  9500 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9501 ;; Tracked objects:
  9502 ;;		On entry : 0/0
  9503 ;;		On exit  : 0/0
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9506 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;Total ram usage:        7 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    3
  9513 ;; This function calls:
  9514 ;;		Nothing
  9515 ;; This function is called by:
  9516 ;;		_I2C1_MasterWrite
  9517 ;;		_MYI2C_ReadFaders
  9518 ;;		_MYI2C_ReadPatch
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           
  9523                           ;psect for function _I2C1_MasterWriteTRBBuild
  9524  0ACD                     _I2C1_MasterWriteTRBBuild:	
  9525                           
  9526                           ;incstack = 0
  9527                           ; Regs used in _I2C1_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9528                           ;I2C1_MasterWriteTRBBuild@ptrb stored from wreg
  9529  0ACD  0020               	movlb	0	; select bank0
  9530  0ACE  00A6               	movwf	I2C1_MasterWriteTRBBuild@ptrb
  9531                           
  9532                           ;i2c1.c: 713: ptrb->address = address << 1;
  9533  0ACF  0823               	movf	I2C1_MasterWriteTRBBuild@address+1,w
  9534  0AD0  00A5               	movwf	??_I2C1_MasterWriteTRBBuild+1
  9535  0AD1  0822               	movf	I2C1_MasterWriteTRBBuild@address,w
  9536  0AD2  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9537  0AD3  35A4               	lslf	??_I2C1_MasterWriteTRBBuild,f
  9538  0AD4  0DA5               	rlf	??_I2C1_MasterWriteTRBBuild+1,f
  9539  0AD5  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9540  0AD6  0086               	movwf	6
  9541  0AD7  0187               	clrf	7
  9542  0AD8  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9543  0AD9  3FC0               	movwi [0]fsr1
  9544  0ADA  0825               	movf	??_I2C1_MasterWriteTRBBuild+1,w
  9545  0ADB  3FC1               	movwi [1]fsr1
  9546                           
  9547                           ;i2c1.c: 714: ptrb->length = length;
  9548  0ADC  0821               	movf	I2C1_MasterWriteTRBBuild@length,w
  9549  0ADD  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9550  0ADE  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9551  0ADF  3E02               	addlw	2
  9552  0AE0  0086               	movwf	6
  9553  0AE1  0187               	clrf	7
  9554  0AE2  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9555  0AE3  0081               	movwf	1
  9556                           
  9557                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
  9558  0AE4  0820               	movf	I2C1_MasterWriteTRBBuild@pdata,w
  9559  0AE5  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9560  0AE6  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9561  0AE7  3E03               	addlw	3
  9562  0AE8  0086               	movwf	6
  9563  0AE9  0187               	clrf	7
  9564  0AEA  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9565  0AEB  0081               	movwf	1
  9566  0AEC  0008               	return
  9567  0AED                     __end_of_I2C1_MasterWriteTRBBuild:	
  9568                           
  9569                           	psect	text16
  9570  0BEC                     __ptext16:	
  9571 ;; *************** function _I2C1_MasterTRBInsert *****************
  9572 ;; Defined at:
  9573 ;;		line 641 in file "mcc_generated_files/i2c1.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;  count           1    wreg     unsigned char 
  9576 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  9577 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterRead@trBlock(4), I2C1_MasterWrite@trBlock(4)
      +, 
  9578 ;;  pflag           1    1[BANK0 ] PTR enum E14260
  9579 ;;		 -> MYI2C_ReadPatch@status(1), MYI2C_Write16EEPROMBytes@status(1), MYI2C_Write2LEDBytes@status(1), MYI2C_WriteFaders
      +@status(1), 
  9580 ;;		 -> MYI2C_ReadFaders@status(1), 
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;  count           1    3[BANK0 ] unsigned char 
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  1    wreg      void 
  9585 ;; Registers used:
  9586 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9592 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;Total ram usage:        4 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    3
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_I2C1_MasterWrite
  9603 ;;		_I2C1_MasterRead
  9604 ;;		_MYI2C_ReadFaders
  9605 ;;		_MYI2C_ReadPatch
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           
  9610                           ;psect for function _I2C1_MasterTRBInsert
  9611  0BEC                     _I2C1_MasterTRBInsert:	
  9612                           
  9613                           ;incstack = 0
  9614                           ; Regs used in _I2C1_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9615                           ;I2C1_MasterTRBInsert@count stored from wreg
  9616  0BEC  0020               	movlb	0	; select bank0
  9617  0BED  00A3               	movwf	I2C1_MasterTRBInsert@count
  9618                           
  9619                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
  9620  0BEE  1869               	btfsc	_i2c1_object+2,0
  9621  0BEF  2C20               	goto	l2846
  9622                           
  9623                           ;i2c1.c: 649: {
  9624                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
  9625  0BF0  3002               	movlw	2
  9626  0BF1  00A2               	movwf	??_I2C1_MasterTRBInsert
  9627  0BF2  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9628  0BF3  0086               	movwf	6
  9629  0BF4  0187               	clrf	7
  9630  0BF5  0822               	movf	??_I2C1_MasterTRBInsert,w
  9631  0BF6  0081               	movwf	1
  9632                           
  9633                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  9634  0BF7  0820               	movf	I2C1_MasterTRBInsert@ptrb_list,w
  9635  0BF8  00A2               	movwf	??_I2C1_MasterTRBInsert
  9636  0BF9  0A67               	incf	_i2c1_object,w
  9637  0BFA  0086               	movwf	6
  9638  0BFB  0187               	clrf	7
  9639  0BFC  0822               	movf	??_I2C1_MasterTRBInsert,w
  9640  0BFD  0081               	movwf	1
  9641                           
  9642                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
  9643  0BFE  0823               	movf	I2C1_MasterTRBInsert@count,w
  9644  0BFF  00A2               	movwf	??_I2C1_MasterTRBInsert
  9645  0C00  0867               	movf	_i2c1_object,w
  9646  0C01  0086               	movwf	6
  9647  0C02  0187               	clrf	7
  9648  0C03  0822               	movf	??_I2C1_MasterTRBInsert,w
  9649  0C04  0081               	movwf	1
  9650                           
  9651                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
  9652  0C05  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9653  0C06  00A2               	movwf	??_I2C1_MasterTRBInsert
  9654  0C07  0867               	movf	_i2c1_object,w
  9655  0C08  3E02               	addlw	2
  9656  0C09  0086               	movwf	6
  9657  0C0A  0187               	clrf	7
  9658  0C0B  0822               	movf	??_I2C1_MasterTRBInsert,w
  9659  0C0C  0081               	movwf	1
  9660                           
  9661                           ;i2c1.c: 655: i2c1_object.pTrTail++;
  9662  0C0D  3003               	movlw	3
  9663  0C0E  00A2               	movwf	??_I2C1_MasterTRBInsert
  9664  0C0F  0822               	movf	??_I2C1_MasterTRBInsert,w
  9665  0C10  07E7               	addwf	_i2c1_object,f
  9666                           
  9667                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  9668  0C11  0867               	movf	_i2c1_object,w
  9669  0C12  3AD8               	xorlw	(low ((_i2c1_tr_queue| 0+3)))& (0+255)
  9670  0C13  1D03               	skipz
  9671  0C14  2C19               	goto	l2842
  9672                           
  9673                           ;i2c1.c: 659: {
  9674                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
  9675  0C15  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
  9676  0C16  00A2               	movwf	??_I2C1_MasterTRBInsert
  9677  0C17  0822               	movf	??_I2C1_MasterTRBInsert,w
  9678  0C18  00E7               	movwf	_i2c1_object
  9679  0C19                     l2842:	
  9680                           
  9681                           ;i2c1.c: 662: }
  9682                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
  9683  0C19  10E9               	bcf	_i2c1_object+2,1
  9684                           
  9685                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  9686  0C1A  0868               	movf	low ((_i2c1_object| 0+1)),w
  9687  0C1B  0667               	xorwf	_i2c1_object,w
  9688  0C1C  1D03               	skipz
  9689  0C1D  2C25               	goto	l2848
  9690                           
  9691                           ;i2c1.c: 670: {
  9692                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
  9693  0C1E  1469               	bsf	_i2c1_object+2,0
  9694                           
  9695                           ;i2c1.c: 673: }
  9696                           ;i2c1.c: 675: }
  9697  0C1F  2C25               	goto	l2848
  9698  0C20                     l2846:	
  9699                           
  9700                           ;i2c1.c: 676: else
  9701                           ;i2c1.c: 677: {
  9702                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
  9703  0C20  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9704  0C21  0086               	movwf	6
  9705  0C22  0187               	clrf	7
  9706  0C23  0181               	clrf	1
  9707  0C24  0A81               	incf	1,f
  9708  0C25                     l2848:	
  9709                           
  9710                           ;i2c1.c: 679: }
  9711                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
  9712  0C25  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9713  0C26  0086               	movwf	6
  9714  0C27  0187               	clrf	7
  9715  0C28  3002               	movlw	2
  9716  0C29  0601               	xorwf	1,w
  9717  0C2A  1D03               	btfss	3,2
  9718  0C2B  0008               	return
  9719  0C2C                     l2852:	
  9720                           ;i2c1.c: 683: {
  9721                           ;i2c1.c: 684: while(i2c1_state != S_MASTER_IDLE);
  9722                           
  9723  0C2C  086F               	movf	_i2c1_state,w
  9724  0C2D  1D03               	btfss	3,2
  9725  0C2E  2C2C               	goto	l2852
  9726                           
  9727                           ;i2c1.c: 685: {
  9728                           ;i2c1.c: 688: PIR3bits.SSP1IF = 1;
  9729  0C2F  002E               	movlb	14	; select bank14
  9730  0C30  140F               	bsf	15,0	;volatile
  9731  0C31  0008               	return
  9732  0C32                     __end_of_I2C1_MasterTRBInsert:	
  9733                           
  9734                           	psect	text17
  9735  072E                     __ptext17:	
  9736 ;; *************** function ___ftdiv *****************
  9737 ;; Defined at:
  9738 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9739 ;; Parameters:    Size  Location     Type
  9740 ;;  f2              3   14[BANK0 ] float 
  9741 ;;  f1              3   17[BANK0 ] float 
  9742 ;; Auto vars:     Size  Location     Type
  9743 ;;  f3              3   25[BANK0 ] float 
  9744 ;;  sign            1   29[BANK0 ] unsigned char 
  9745 ;;  exp             1   28[BANK0 ] unsigned char 
  9746 ;;  cntr            1   24[BANK0 ] unsigned char 
  9747 ;; Return value:  Size  Location     Type
  9748 ;;                  3   14[BANK0 ] float 
  9749 ;; Registers used:
  9750 ;;		wreg, status,2, status,0, pclath, cstack
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9756 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;Total ram usage:       16 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    4
  9763 ;; This function calls:
  9764 ;;		___ftpack
  9765 ;; This function is called by:
  9766 ;;		_main
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function ___ftdiv
  9772  072E                     ___ftdiv:	
  9773                           
  9774                           ;incstack = 0
  9775                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9776  072E  0020               	movlb	0	; select bank0
  9777  072F  0831               	movf	___ftdiv@f1,w
  9778  0730  00B4               	movwf	??___ftdiv
  9779  0731  0832               	movf	___ftdiv@f1+1,w
  9780  0732  00B5               	movwf	??___ftdiv+1
  9781  0733  0833               	movf	___ftdiv@f1+2,w
  9782  0734  00B6               	movwf	??___ftdiv+2
  9783  0735  1003               	clrc
  9784  0736  0D35               	rlf	??___ftdiv+1,w
  9785  0737  0D36               	rlf	??___ftdiv+2,w
  9786  0738  00B7               	movwf	??___ftdiv+3
  9787  0739  0837               	movf	??___ftdiv+3,w
  9788  073A  00BC               	movwf	___ftdiv@exp
  9789  073B  083C               	movf	___ftdiv@exp,w
  9790  073C  1D03               	btfss	3,2
  9791  073D  2F45               	goto	l3688
  9792  073E  3000               	movlw	0
  9793  073F  00AE               	movwf	?___ftdiv
  9794  0740  3000               	movlw	0
  9795  0741  00AF               	movwf	?___ftdiv+1
  9796  0742  3000               	movlw	0
  9797  0743  00B0               	movwf	?___ftdiv+2
  9798  0744  0008               	return
  9799  0745                     l3688:	
  9800  0745  082E               	movf	___ftdiv@f2,w
  9801  0746  00B4               	movwf	??___ftdiv
  9802  0747  082F               	movf	___ftdiv@f2+1,w
  9803  0748  00B5               	movwf	??___ftdiv+1
  9804  0749  0830               	movf	___ftdiv@f2+2,w
  9805  074A  00B6               	movwf	??___ftdiv+2
  9806  074B  1003               	clrc
  9807  074C  0D35               	rlf	??___ftdiv+1,w
  9808  074D  0D36               	rlf	??___ftdiv+2,w
  9809  074E  00B7               	movwf	??___ftdiv+3
  9810  074F  0837               	movf	??___ftdiv+3,w
  9811  0750  00BD               	movwf	___ftdiv@sign
  9812  0751  083D               	movf	___ftdiv@sign,w
  9813  0752  1D03               	btfss	3,2
  9814  0753  2F5B               	goto	l3694
  9815  0754  3000               	movlw	0
  9816  0755  00AE               	movwf	?___ftdiv
  9817  0756  3000               	movlw	0
  9818  0757  00AF               	movwf	?___ftdiv+1
  9819  0758  3000               	movlw	0
  9820  0759  00B0               	movwf	?___ftdiv+2
  9821  075A  0008               	return
  9822  075B                     l3694:	
  9823  075B  3000               	movlw	0
  9824  075C  00B9               	movwf	___ftdiv@f3
  9825  075D  3000               	movlw	0
  9826  075E  00BA               	movwf	___ftdiv@f3+1
  9827  075F  3000               	movlw	0
  9828  0760  00BB               	movwf	___ftdiv@f3+2
  9829  0761  3089               	movlw	137
  9830  0762  073D               	addwf	___ftdiv@sign,w
  9831  0763  00B4               	movwf	??___ftdiv
  9832  0764  0834               	movf	??___ftdiv,w
  9833  0765  02BC               	subwf	___ftdiv@exp,f
  9834  0766  0831               	movf	___ftdiv@f1,w
  9835  0767  00B4               	movwf	??___ftdiv
  9836  0768  0832               	movf	___ftdiv@f1+1,w
  9837  0769  00B5               	movwf	??___ftdiv+1
  9838  076A  0833               	movf	___ftdiv@f1+2,w
  9839  076B  00B6               	movwf	??___ftdiv+2
  9840  076C  3010               	movlw	16
  9841  076D                     u3225:	
  9842  076D  36B6               	lsrf	??___ftdiv+2,f
  9843  076E  0CB5               	rrf	??___ftdiv+1,f
  9844  076F  0CB4               	rrf	??___ftdiv,f
  9845  0770  0B89               	decfsz	9,f
  9846  0771  2F6D               	goto	u3225
  9847  0772  0834               	movf	??___ftdiv,w
  9848  0773  00B7               	movwf	??___ftdiv+3
  9849  0774  0837               	movf	??___ftdiv+3,w
  9850  0775  00BD               	movwf	___ftdiv@sign
  9851  0776  082E               	movf	___ftdiv@f2,w
  9852  0777  00B4               	movwf	??___ftdiv
  9853  0778  082F               	movf	___ftdiv@f2+1,w
  9854  0779  00B5               	movwf	??___ftdiv+1
  9855  077A  0830               	movf	___ftdiv@f2+2,w
  9856  077B  00B6               	movwf	??___ftdiv+2
  9857  077C  3010               	movlw	16
  9858  077D                     u3235:	
  9859  077D  36B6               	lsrf	??___ftdiv+2,f
  9860  077E  0CB5               	rrf	??___ftdiv+1,f
  9861  077F  0CB4               	rrf	??___ftdiv,f
  9862  0780  0B89               	decfsz	9,f
  9863  0781  2F7D               	goto	u3235
  9864  0782  0834               	movf	??___ftdiv,w
  9865  0783  00B7               	movwf	??___ftdiv+3
  9866  0784  0837               	movf	??___ftdiv+3,w
  9867  0785  06BD               	xorwf	___ftdiv@sign,f
  9868  0786  3080               	movlw	128
  9869  0787  00B4               	movwf	??___ftdiv
  9870  0788  0834               	movf	??___ftdiv,w
  9871  0789  05BD               	andwf	___ftdiv@sign,f
  9872  078A  17B2               	bsf	___ftdiv@f1+1,7
  9873  078B  30FF               	movlw	255
  9874  078C  05B1               	andwf	___ftdiv@f1,f
  9875  078D  30FF               	movlw	255
  9876  078E  05B2               	andwf	___ftdiv@f1+1,f
  9877  078F  3000               	movlw	0
  9878  0790  05B3               	andwf	___ftdiv@f1+2,f
  9879  0791  17AF               	bsf	___ftdiv@f2+1,7
  9880  0792  30FF               	movlw	255
  9881  0793  05AE               	andwf	___ftdiv@f2,f
  9882  0794  30FF               	movlw	255
  9883  0795  05AF               	andwf	___ftdiv@f2+1,f
  9884  0796  3000               	movlw	0
  9885  0797  05B0               	andwf	___ftdiv@f2+2,f
  9886  0798  3018               	movlw	24
  9887  0799  00B4               	movwf	??___ftdiv
  9888  079A  0834               	movf	??___ftdiv,w
  9889  079B  00B8               	movwf	___ftdiv@cntr
  9890  079C                     l3708:	
  9891  079C  3001               	movlw	1
  9892  079D                     u3245:	
  9893  079D  35B9               	lslf	___ftdiv@f3,f
  9894  079E  0DBA               	rlf	___ftdiv@f3+1,f
  9895  079F  0DBB               	rlf	___ftdiv@f3+2,f
  9896  07A0  0B89               	decfsz	9,f
  9897  07A1  2F9D               	goto	u3245
  9898  07A2  0830               	movf	___ftdiv@f2+2,w
  9899  07A3  0233               	subwf	___ftdiv@f1+2,w
  9900  07A4  1D03               	skipz
  9901  07A5  2FAC               	goto	u3255
  9902  07A6  082F               	movf	___ftdiv@f2+1,w
  9903  07A7  0232               	subwf	___ftdiv@f1+1,w
  9904  07A8  1D03               	skipz
  9905  07A9  2FAC               	goto	u3255
  9906  07AA  082E               	movf	___ftdiv@f2,w
  9907  07AB  0231               	subwf	___ftdiv@f1,w
  9908  07AC                     u3255:	
  9909  07AC  1C03               	skipc
  9910  07AD  2FB5               	goto	l3716
  9911  07AE  082E               	movf	___ftdiv@f2,w
  9912  07AF  02B1               	subwf	___ftdiv@f1,f
  9913  07B0  082F               	movf	___ftdiv@f2+1,w
  9914  07B1  3BB2               	subwfb	___ftdiv@f1+1,f
  9915  07B2  0830               	movf	___ftdiv@f2+2,w
  9916  07B3  3BB3               	subwfb	___ftdiv@f1+2,f
  9917  07B4  1439               	bsf	___ftdiv@f3,0
  9918  07B5                     l3716:	
  9919  07B5  3001               	movlw	1
  9920  07B6                     u3265:	
  9921  07B6  35B1               	lslf	___ftdiv@f1,f
  9922  07B7  0DB2               	rlf	___ftdiv@f1+1,f
  9923  07B8  0DB3               	rlf	___ftdiv@f1+2,f
  9924  07B9  0B89               	decfsz	9,f
  9925  07BA  2FB6               	goto	u3265
  9926  07BB  3001               	movlw	1
  9927  07BC  02B8               	subwf	___ftdiv@cntr,f
  9928  07BD  1D03               	btfss	3,2
  9929  07BE  2F9C               	goto	l3708
  9930  07BF  0839               	movf	___ftdiv@f3,w
  9931  07C0  00A0               	movwf	___ftpack@arg
  9932  07C1  083A               	movf	___ftdiv@f3+1,w
  9933  07C2  00A1               	movwf	___ftpack@arg+1
  9934  07C3  083B               	movf	___ftdiv@f3+2,w
  9935  07C4  00A2               	movwf	___ftpack@arg+2
  9936  07C5  083C               	movf	___ftdiv@exp,w
  9937  07C6  00B4               	movwf	??___ftdiv
  9938  07C7  0834               	movf	??___ftdiv,w
  9939  07C8  00A3               	movwf	___ftpack@exp
  9940  07C9  083D               	movf	___ftdiv@sign,w
  9941  07CA  00B5               	movwf	??___ftdiv+1
  9942  07CB  0835               	movf	??___ftdiv+1,w
  9943  07CC  00A4               	movwf	___ftpack@sign
  9944  07CD  318C  24DF         	fcall	___ftpack
  9945  07CF  0020               	movlb	0	; select bank0
  9946  07D0  0820               	movf	?___ftpack,w
  9947  07D1  00AE               	movwf	?___ftdiv
  9948  07D2  0821               	movf	?___ftpack+1,w
  9949  07D3  00AF               	movwf	?___ftdiv+1
  9950  07D4  0822               	movf	?___ftpack+2,w
  9951  07D5  00B0               	movwf	?___ftdiv+2
  9952  07D6  0008               	return
  9953  07D7                     __end_of___ftdiv:	
  9954                           
  9955                           	psect	text18
  9956  0CDF                     __ptext18:	
  9957 ;; *************** function ___ftpack *****************
  9958 ;; Defined at:
  9959 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;  arg             3    0[BANK0 ] unsigned um
  9962 ;;  exp             1    3[BANK0 ] unsigned char 
  9963 ;;  sign            1    4[BANK0 ] unsigned char 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;		None
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  3    0[BANK0 ] float 
  9968 ;; Registers used:
  9969 ;;		wreg, status,2, status,0
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9975 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;Total ram usage:        8 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    3
  9982 ;; This function calls:
  9983 ;;		Nothing
  9984 ;; This function is called by:
  9985 ;;		___awtoft
  9986 ;;		___ftdiv
  9987 ;;		___ftmul
  9988 ;;		___lwtoft
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           
  9993                           ;psect for function ___ftpack
  9994  0CDF                     ___ftpack:	
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9998  0CDF  0020               	movlb	0	; select bank0
  9999  0CE0  0823               	movf	___ftpack@exp,w
 10000  0CE1  1903               	btfsc	3,2
 10001  0CE2  2CE8               	goto	l2802
 10002  0CE3  0822               	movf	___ftpack@arg+2,w
 10003  0CE4  0421               	iorwf	___ftpack@arg+1,w
 10004  0CE5  0420               	iorwf	___ftpack@arg,w
 10005  0CE6  1D03               	skipz
 10006  0CE7  2CF9               	goto	l2808
 10007  0CE8                     l2802:	
 10008  0CE8  3000               	movlw	0
 10009  0CE9  00A0               	movwf	?___ftpack
 10010  0CEA  3000               	movlw	0
 10011  0CEB  00A1               	movwf	?___ftpack+1
 10012  0CEC  3000               	movlw	0
 10013  0CED  00A2               	movwf	?___ftpack+2
 10014  0CEE  0008               	return
 10015  0CEF                     l2806:	
 10016  0CEF  3001               	movlw	1
 10017  0CF0  00A5               	movwf	??___ftpack
 10018  0CF1  0825               	movf	??___ftpack,w
 10019  0CF2  07A3               	addwf	___ftpack@exp,f
 10020  0CF3  3001               	movlw	1
 10021  0CF4                     u1995:	
 10022  0CF4  36A2               	lsrf	___ftpack@arg+2,f
 10023  0CF5  0CA1               	rrf	___ftpack@arg+1,f
 10024  0CF6  0CA0               	rrf	___ftpack@arg,f
 10025  0CF7  0B89               	decfsz	9,f
 10026  0CF8  2CF4               	goto	u1995
 10027  0CF9                     l2808:	
 10028  0CF9  30FE               	movlw	254
 10029  0CFA  0522               	andwf	___ftpack@arg+2,w
 10030  0CFB  1903               	btfsc	3,2
 10031  0CFC  2D12               	goto	l1111
 10032  0CFD  2CEF               	goto	l2806
 10033  0CFE                     l2810:	
 10034  0CFE  3001               	movlw	1
 10035  0CFF  00A5               	movwf	??___ftpack
 10036  0D00  0825               	movf	??___ftpack,w
 10037  0D01  07A3               	addwf	___ftpack@exp,f
 10038  0D02  3001               	movlw	1
 10039  0D03  07A0               	addwf	___ftpack@arg,f
 10040  0D04  3000               	movlw	0
 10041  0D05  1803               	skipnc
 10042  0D06  3001               	movlw	1
 10043  0D07  07A1               	addwf	___ftpack@arg+1,f
 10044  0D08  3000               	movlw	0
 10045  0D09  1803               	skipnc
 10046  0D0A  3001               	movlw	1
 10047  0D0B  07A2               	addwf	___ftpack@arg+2,f
 10048  0D0C  3001               	movlw	1
 10049  0D0D                     u2015:	
 10050  0D0D  36A2               	lsrf	___ftpack@arg+2,f
 10051  0D0E  0CA1               	rrf	___ftpack@arg+1,f
 10052  0D0F  0CA0               	rrf	___ftpack@arg,f
 10053  0D10  0B89               	decfsz	9,f
 10054  0D11  2D0D               	goto	u2015
 10055  0D12                     l1111:	
 10056  0D12  30FF               	movlw	255
 10057  0D13  0522               	andwf	___ftpack@arg+2,w
 10058  0D14  1903               	btfsc	3,2
 10059  0D15  2D1F               	goto	l2818
 10060  0D16  2CFE               	goto	l2810
 10061  0D17                     l2816:	
 10062  0D17  3001               	movlw	1
 10063  0D18  02A3               	subwf	___ftpack@exp,f
 10064  0D19  3001               	movlw	1
 10065  0D1A                     u2035:	
 10066  0D1A  35A0               	lslf	___ftpack@arg,f
 10067  0D1B  0DA1               	rlf	___ftpack@arg+1,f
 10068  0D1C  0DA2               	rlf	___ftpack@arg+2,f
 10069  0D1D  0B89               	decfsz	9,f
 10070  0D1E  2D1A               	goto	u2035
 10071  0D1F                     l2818:	
 10072  0D1F  1BA1               	btfsc	___ftpack@arg+1,7
 10073  0D20  2D25               	goto	l1118
 10074  0D21  3002               	movlw	2
 10075  0D22  0223               	subwf	___ftpack@exp,w
 10076  0D23  1803               	skipnc
 10077  0D24  2D17               	goto	l2816
 10078  0D25                     l1118:	
 10079  0D25  1823               	btfsc	___ftpack@exp,0
 10080  0D26  2D2D               	goto	l1119
 10081  0D27  30FF               	movlw	255
 10082  0D28  05A0               	andwf	___ftpack@arg,f
 10083  0D29  307F               	movlw	127
 10084  0D2A  05A1               	andwf	___ftpack@arg+1,f
 10085  0D2B  30FF               	movlw	255
 10086  0D2C  05A2               	andwf	___ftpack@arg+2,f
 10087  0D2D                     l1119:	
 10088  0D2D  1003               	clrc
 10089  0D2E  0CA3               	rrf	___ftpack@exp,f
 10090  0D2F  0823               	movf	___ftpack@exp,w
 10091  0D30  00A5               	movwf	??___ftpack
 10092  0D31  01A6               	clrf	??___ftpack+1
 10093  0D32  01A7               	clrf	??___ftpack+2
 10094  0D33  3010               	movlw	16
 10095  0D34                     u2075:	
 10096  0D34  35A5               	lslf	??___ftpack,f
 10097  0D35  0DA6               	rlf	??___ftpack+1,f
 10098  0D36  0DA7               	rlf	??___ftpack+2,f
 10099  0D37  0B89               	decfsz	9,f
 10100  0D38  2D34               	goto	u2075
 10101  0D39  0825               	movf	??___ftpack,w
 10102  0D3A  04A0               	iorwf	___ftpack@arg,f
 10103  0D3B  0826               	movf	??___ftpack+1,w
 10104  0D3C  04A1               	iorwf	___ftpack@arg+1,f
 10105  0D3D  0827               	movf	??___ftpack+2,w
 10106  0D3E  04A2               	iorwf	___ftpack@arg+2,f
 10107  0D3F  0824               	movf	___ftpack@sign,w
 10108  0D40  1903               	btfsc	3,2
 10109  0D41  0008               	return
 10110  0D42  17A2               	bsf	___ftpack@arg+2,7
 10111  0D43  0008               	return
 10112  0D44                     __end_of___ftpack:	
 10113                           
 10114                           	psect	text19
 10115  0993                     __ptext19:	
 10116 ;; *************** function _SYSTEM_Initialize *****************
 10117 ;; Defined at:
 10118 ;;		line 83 in file "mcc_generated_files/mcc.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;		None
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;		None
 10123 ;; Return value:  Size  Location     Type
 10124 ;;                  1    wreg      void 
 10125 ;; Registers used:
 10126 ;;		wreg, status,2, status,0, pclath, cstack
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;Total ram usage:        0 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    4
 10139 ;; This function calls:
 10140 ;;		_ADCC_Initialize
 10141 ;;		_I2C1_Initialize
 10142 ;;		_OSCILLATOR_Initialize
 10143 ;;		_PIN_MANAGER_Initialize
 10144 ;; This function is called by:
 10145 ;;		_main
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           
 10150                           ;psect for function _SYSTEM_Initialize
 10151  0993                     _SYSTEM_Initialize:	
 10152                           
 10153                           ;mcc.c: 86: PIN_MANAGER_Initialize();
 10154                           
 10155                           ;incstack = 0
 10156                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10157  0993  318B  236D  3189   	fcall	_PIN_MANAGER_Initialize
 10158                           
 10159                           ;mcc.c: 87: OSCILLATOR_Initialize();
 10160  0996  3189  217F  3189   	fcall	_OSCILLATOR_Initialize
 10161                           
 10162                           ;mcc.c: 88: I2C1_Initialize();
 10163  0999  318A  2214  3189   	fcall	_I2C1_Initialize
 10164                           
 10165                           ;mcc.c: 89: ADCC_Initialize();
 10166  099C  318A  225C         	fcall	_ADCC_Initialize
 10167  099E  0008               	return
 10168  099F                     __end_of_SYSTEM_Initialize:	
 10169                           
 10170                           	psect	text20
 10171  0B6D                     __ptext20:	
 10172 ;; *************** function _PIN_MANAGER_Initialize *****************
 10173 ;; Defined at:
 10174 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;		None
 10177 ;; Auto vars:     Size  Location     Type
 10178 ;;  state           1    0[BANK0 ] unsigned char 
 10179 ;; Return value:  Size  Location     Type
 10180 ;;                  1    wreg      void 
 10181 ;; Registers used:
 10182 ;;		wreg, status,2, status,0
 10183 ;; Tracked objects:
 10184 ;;		On entry : 0/0
 10185 ;;		On exit  : 0/0
 10186 ;;		Unchanged: 0/0
 10187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;Total ram usage:        1 bytes
 10193 ;; Hardware stack levels used:    1
 10194 ;; Hardware stack levels required when called:    3
 10195 ;; This function calls:
 10196 ;;		Nothing
 10197 ;; This function is called by:
 10198 ;;		_SYSTEM_Initialize
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           
 10203                           ;psect for function _PIN_MANAGER_Initialize
 10204  0B6D                     _PIN_MANAGER_Initialize:	
 10205                           
 10206                           ;pin_manager.c: 57: LATA = 0x00;
 10207                           
 10208                           ;incstack = 0
 10209                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 10210  0B6D  0020               	movlb	0	; select bank0
 10211  0B6E  0196               	clrf	22	;volatile
 10212                           
 10213                           ;pin_manager.c: 58: LATB = 0x00;
 10214  0B6F  0197               	clrf	23	;volatile
 10215                           
 10216                           ;pin_manager.c: 59: LATC = 0x00;
 10217  0B70  0198               	clrf	24	;volatile
 10218                           
 10219                           ;pin_manager.c: 64: TRISA = 0x7F;
 10220  0B71  307F               	movlw	127
 10221  0B72  0091               	movwf	17	;volatile
 10222                           
 10223                           ;pin_manager.c: 65: TRISB = 0x30;
 10224  0B73  3030               	movlw	48
 10225  0B74  0092               	movwf	18	;volatile
 10226                           
 10227                           ;pin_manager.c: 66: TRISC = 0x1D;
 10228  0B75  301D               	movlw	29
 10229  0B76  0093               	movwf	19	;volatile
 10230                           
 10231                           ;pin_manager.c: 71: ANSELC = 0xE7;
 10232  0B77  30E7               	movlw	231
 10233  0B78  003E               	movlb	30	; select bank30
 10234  0B79  00CE               	movwf	78	;volatile
 10235                           
 10236                           ;pin_manager.c: 72: ANSELB = 0xCF;
 10237  0B7A  30CF               	movlw	207
 10238  0B7B  00C3               	movwf	67	;volatile
 10239                           
 10240                           ;pin_manager.c: 73: ANSELA = 0xFF;
 10241  0B7C  30FF               	movlw	255
 10242  0B7D  00B8               	movwf	56	;volatile
 10243                           
 10244                           ;pin_manager.c: 78: WPUE = 0x00;
 10245  0B7E  01E5               	clrf	101	;volatile
 10246                           
 10247                           ;pin_manager.c: 79: WPUB = 0x30;
 10248  0B7F  3030               	movlw	48
 10249  0B80  00C4               	movwf	68	;volatile
 10250                           
 10251                           ;pin_manager.c: 80: WPUA = 0x00;
 10252  0B81  01B9               	clrf	57	;volatile
 10253                           
 10254                           ;pin_manager.c: 81: WPUC = 0x00;
 10255  0B82  01CF               	clrf	79	;volatile
 10256                           
 10257                           ;pin_manager.c: 86: ODCONA = 0x00;
 10258  0B83  01BA               	clrf	58	;volatile
 10259                           
 10260                           ;pin_manager.c: 87: ODCONB = 0x00;
 10261  0B84  01C5               	clrf	69	;volatile
 10262                           
 10263                           ;pin_manager.c: 88: ODCONC = 0x00;
 10264  0B85  01D0               	clrf	80	;volatile
 10265                           
 10266                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
 10267  0B86  3000               	movlw	0
 10268  0B87  1B8B               	btfsc	11,7	;volatile
 10269  0B88  3001               	movlw	1
 10270  0B89  0020               	movlb	0	; select bank0
 10271  0B8A  00A0               	movwf	PIN_MANAGER_Initialize@state
 10272                           
 10273                           ;pin_manager.c: 96: GIE = 0;
 10274  0B8B  138B               	bcf	11,7	;volatile
 10275                           
 10276                           ;pin_manager.c: 97: PPSLOCK = 0x55;
 10277  0B8C  3055               	movlw	85
 10278  0B8D  003D               	movlb	29	; select bank29
 10279  0B8E  008F               	movwf	15	;volsfr
 10280                           
 10281                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
 10282  0B8F  30AA               	movlw	170
 10283  0B90  008F               	movwf	15	;volsfr
 10284                           
 10285                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
 10286  0B91  100F               	bcf	15,0	;volsfr
 10287                           
 10288                           ;pin_manager.c: 101: SSP1DATPPSbits.SSP1DATPPS = 0x13;
 10289  0B92  0846               	movf	70,w	;volatile
 10290  0B93  39E0               	andlw	-32
 10291  0B94  3813               	iorlw	19
 10292  0B95  00C6               	movwf	70	;volatile
 10293                           
 10294                           ;pin_manager.c: 102: SSP1CLKPPSbits.SSP1CLKPPS = 0x14;
 10295  0B96  0845               	movf	69,w	;volatile
 10296  0B97  39E0               	andlw	-32
 10297  0B98  3814               	iorlw	20
 10298  0B99  00C5               	movwf	69	;volatile
 10299                           
 10300                           ;pin_manager.c: 103: RC3PPS = 0x15;
 10301  0B9A  3015               	movlw	21
 10302  0B9B  003E               	movlb	30	; select bank30
 10303  0B9C  00A3               	movwf	35	;volatile
 10304                           
 10305                           ;pin_manager.c: 104: RC4PPS = 0x14;
 10306  0B9D  3014               	movlw	20
 10307  0B9E  00A4               	movwf	36	;volatile
 10308                           
 10309                           ;pin_manager.c: 106: PPSLOCK = 0x55;
 10310  0B9F  3055               	movlw	85
 10311  0BA0  003D               	movlb	29	; select bank29
 10312  0BA1  008F               	movwf	15	;volsfr
 10313                           
 10314                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
 10315  0BA2  30AA               	movlw	170
 10316  0BA3  008F               	movwf	15	;volsfr
 10317                           
 10318                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x01;
 10319  0BA4  140F               	bsf	15,0	;volsfr
 10320                           
 10321                           ;pin_manager.c: 110: GIE = state;
 10322  0BA5  0020               	movlb	0	; select bank0
 10323  0BA6  1C20               	btfss	PIN_MANAGER_Initialize@state,0
 10324  0BA7  2BAA               	goto	u4050
 10325  0BA8  178B               	bsf	11,7	;volatile
 10326  0BA9  0008               	return
 10327  0BAA                     u4050:	
 10328  0BAA  138B               	bcf	11,7	;volatile
 10329  0BAB  0008               	return
 10330  0BAC                     __end_of_PIN_MANAGER_Initialize:	
 10331                           
 10332                           	psect	text21
 10333  097F                     __ptext21:	
 10334 ;; *************** function _OSCILLATOR_Initialize *****************
 10335 ;; Defined at:
 10336 ;;		line 92 in file "mcc_generated_files/mcc.c"
 10337 ;; Parameters:    Size  Location     Type
 10338 ;;		None
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;		None
 10341 ;; Return value:  Size  Location     Type
 10342 ;;                  1    wreg      void 
 10343 ;; Registers used:
 10344 ;;		wreg, status,2
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;Total ram usage:        0 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; Hardware stack levels required when called:    3
 10357 ;; This function calls:
 10358 ;;		Nothing
 10359 ;; This function is called by:
 10360 ;;		_SYSTEM_Initialize
 10361 ;; This function uses a non-reentrant model
 10362 ;;
 10363                           
 10364                           
 10365                           ;psect for function _OSCILLATOR_Initialize
 10366  097F                     _OSCILLATOR_Initialize:	
 10367                           
 10368                           ;mcc.c: 95: OSCCON1 = 0x60;
 10369                           
 10370                           ;incstack = 0
 10371                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10372  097F  3060               	movlw	96
 10373  0980  0031               	movlb	17	; select bank17
 10374  0981  008D               	movwf	13	;volatile
 10375                           
 10376                           ;mcc.c: 97: OSCCON3 = 0x00;
 10377  0982  018F               	clrf	15	;volatile
 10378                           
 10379                           ;mcc.c: 99: OSCEN = 0x00;
 10380  0983  0191               	clrf	17	;volatile
 10381                           
 10382                           ;mcc.c: 101: OSCFRQ = 0x06;
 10383  0984  3006               	movlw	6
 10384  0985  0093               	movwf	19	;volatile
 10385                           
 10386                           ;mcc.c: 103: OSCTUNE = 0x00;
 10387  0986  0192               	clrf	18	;volatile
 10388  0987  0008               	return
 10389  0988                     __end_of_OSCILLATOR_Initialize:	
 10390                           
 10391                           	psect	text22
 10392  0A14                     __ptext22:	
 10393 ;; *************** function _I2C1_Initialize *****************
 10394 ;; Defined at:
 10395 ;;		line 198 in file "mcc_generated_files/i2c1.c"
 10396 ;; Parameters:    Size  Location     Type
 10397 ;;		None
 10398 ;; Auto vars:     Size  Location     Type
 10399 ;;		None
 10400 ;; Return value:  Size  Location     Type
 10401 ;;                  1    wreg      void 
 10402 ;; Registers used:
 10403 ;;		wreg, status,2
 10404 ;; Tracked objects:
 10405 ;;		On entry : 0/0
 10406 ;;		On exit  : 0/0
 10407 ;;		Unchanged: 0/0
 10408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;Total ram usage:        1 bytes
 10414 ;; Hardware stack levels used:    1
 10415 ;; Hardware stack levels required when called:    3
 10416 ;; This function calls:
 10417 ;;		Nothing
 10418 ;; This function is called by:
 10419 ;;		_SYSTEM_Initialize
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           
 10424                           ;psect for function _I2C1_Initialize
 10425  0A14                     _I2C1_Initialize:	
 10426                           
 10427                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in _I2C1_Initialize: [wreg+status,2]
 10431  0A14  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 10432  0A15  0020               	movlb	0	; select bank0
 10433  0A16  00A0               	movwf	??_I2C1_Initialize
 10434  0A17  0820               	movf	??_I2C1_Initialize,w
 10435  0A18  00E8               	movwf	low ((_i2c1_object| 0+1))
 10436                           
 10437                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
 10438  0A19  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 10439  0A1A  00A0               	movwf	??_I2C1_Initialize
 10440  0A1B  0820               	movf	??_I2C1_Initialize,w
 10441  0A1C  00E7               	movwf	_i2c1_object
 10442                           
 10443                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
 10444  0A1D  14E9               	bsf	_i2c1_object+2,1
 10445                           
 10446                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
 10447  0A1E  1069               	bcf	_i2c1_object+2,0
 10448                           
 10449                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
 10450  0A1F  01EB               	clrf	_i2c1_object+4
 10451                           
 10452                           ;i2c1.c: 208: SSP1STAT = 0x00;
 10453  0A20  0023               	movlb	3	; select bank3
 10454  0A21  018F               	clrf	15	;volatile
 10455                           
 10456                           ;i2c1.c: 210: SSP1CON1 = 0x28;
 10457  0A22  3028               	movlw	40
 10458  0A23  0090               	movwf	16	;volatile
 10459                           
 10460                           ;i2c1.c: 212: SSP1CON3 = 0x00;
 10461  0A24  0192               	clrf	18	;volatile
 10462                           
 10463                           ;i2c1.c: 214: SSP1ADD = 0x13;
 10464  0A25  3013               	movlw	19
 10465  0A26  008D               	movwf	13	;volatile
 10466                           
 10467                           ;i2c1.c: 218: PIR3bits.SSP1IF = 0;
 10468  0A27  002E               	movlb	14	; select bank14
 10469  0A28  100F               	bcf	15,0	;volatile
 10470                           
 10471                           ;i2c1.c: 220: PIE3bits.SSP1IE = 1;
 10472  0A29  1419               	bsf	25,0	;volatile
 10473  0A2A  0008               	return
 10474  0A2B                     __end_of_I2C1_Initialize:	
 10475                           
 10476                           	psect	text23
 10477  0A5C                     __ptext23:	
 10478 ;; *************** function _ADCC_Initialize *****************
 10479 ;; Defined at:
 10480 ;;		line 62 in file "mcc_generated_files/adcc.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;		None
 10483 ;; Auto vars:     Size  Location     Type
 10484 ;;		None
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  1    wreg      void 
 10487 ;; Registers used:
 10488 ;;		wreg, status,2
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;Total ram usage:        0 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    3
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_SYSTEM_Initialize
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           
 10509                           ;psect for function _ADCC_Initialize
 10510  0A5C                     _ADCC_Initialize:	
 10511                           
 10512                           ;adcc.c: 66: ADCON1 = 0x00;
 10513                           
 10514                           ;incstack = 0
 10515                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 10516  0A5C  0021               	movlb	1	; select bank1
 10517  0A5D  0194               	clrf	20	;volatile
 10518                           
 10519                           ;adcc.c: 68: ADCON2 = 0x03;
 10520  0A5E  3003               	movlw	3
 10521  0A5F  0095               	movwf	21	;volatile
 10522                           
 10523                           ;adcc.c: 70: ADCON3 = 0x00;
 10524  0A60  0196               	clrf	22	;volatile
 10525                           
 10526                           ;adcc.c: 72: ADACT = 0x00;
 10527  0A61  0199               	clrf	25	;volatile
 10528                           
 10529                           ;adcc.c: 74: ADSTAT = 0x00;
 10530  0A62  0197               	clrf	23	;volatile
 10531                           
 10532                           ;adcc.c: 76: ADCLK = 0x13;
 10533  0A63  3013               	movlw	19
 10534  0A64  0098               	movwf	24	;volatile
 10535                           
 10536                           ;adcc.c: 78: ADREF = 0x00;
 10537  0A65  019A               	clrf	26	;volatile
 10538                           
 10539                           ;adcc.c: 80: ADCAP = 0x00;
 10540  0A66  019B               	clrf	27	;volatile
 10541                           
 10542                           ;adcc.c: 82: ADPRE = 0x00;
 10543  0A67  019C               	clrf	28	;volatile
 10544                           
 10545                           ;adcc.c: 84: ADACQ = 0x04;
 10546  0A68  3004               	movlw	4
 10547  0A69  009D               	movwf	29	;volatile
 10548                           
 10549                           ;adcc.c: 86: ADPCH = 0x00;
 10550  0A6A  019E               	clrf	30	;volatile
 10551                           
 10552                           ;adcc.c: 88: ADRPT = 0x00;
 10553  0A6B  0022               	movlb	2	; select bank2
 10554  0A6C  018D               	clrf	13	;volatile
 10555                           
 10556                           ;adcc.c: 90: ADLTHL = 0x00;
 10557  0A6D  018E               	clrf	14	;volatile
 10558                           
 10559                           ;adcc.c: 92: ADLTHH = 0x00;
 10560  0A6E  018F               	clrf	15	;volatile
 10561                           
 10562                           ;adcc.c: 94: ADUTHL = 0x00;
 10563  0A6F  0190               	clrf	16	;volatile
 10564                           
 10565                           ;adcc.c: 96: ADUTHH = 0x00;
 10566  0A70  0191               	clrf	17	;volatile
 10567                           
 10568                           ;adcc.c: 98: ADSTPTL = 0x00;
 10569  0A71  0192               	clrf	18	;volatile
 10570                           
 10571                           ;adcc.c: 100: ADSTPTH = 0x00;
 10572  0A72  0193               	clrf	19	;volatile
 10573                           
 10574                           ;adcc.c: 103: ADCON0 = 0x84;
 10575  0A73  3084               	movlw	132
 10576  0A74  0021               	movlb	1	; select bank1
 10577  0A75  0093               	movwf	19	;volatile
 10578  0A76  0008               	return
 10579  0A77                     __end_of_ADCC_Initialize:	
 10580                           
 10581                           	psect	text24
 10582  09B7                     __ptext24:	
 10583 ;; *************** function _LED7SegSetup *****************
 10584 ;; Defined at:
 10585 ;;		line 31 in file "LED7Seg.c"
 10586 ;; Parameters:    Size  Location     Type
 10587 ;;		None
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;		None
 10590 ;; Return value:  Size  Location     Type
 10591 ;;                  1    wreg      void 
 10592 ;; Registers used:
 10593 ;;		None
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;Total ram usage:        0 bytes
 10604 ;; Hardware stack levels used:    1
 10605 ;; Hardware stack levels required when called:    3
 10606 ;; This function calls:
 10607 ;;		Nothing
 10608 ;; This function is called by:
 10609 ;;		_main
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           
 10614                           ;psect for function _LED7SegSetup
 10615  09B7                     _LED7SegSetup:	
 10616                           
 10617                           ;incstack = 0
 10618                           ; Regs used in _LED7SegSetup: []
 10619                           ;LED7Seg.c: 34: do { ANSELCbits.ANSC5 = 0; } while(0);
 10620  09B7  003E               	movlb	30	; select bank30
 10621  09B8  12CE               	bcf	78,5	;volatile
 10622                           
 10623                           ;LED7Seg.c: 35: do { TRISCbits.TRISC5 = 0; } while(0);
 10624  09B9  0020               	movlb	0	; select bank0
 10625  09BA  1293               	bcf	19,5	;volatile
 10626                           
 10627                           ;LED7Seg.c: 38: do { ANSELCbits.ANSC6 = 0; } while(0);
 10628  09BB  003E               	movlb	30	; select bank30
 10629  09BC  134E               	bcf	78,6	;volatile
 10630                           
 10631                           ;LED7Seg.c: 39: do { TRISCbits.TRISC6 = 0; } while(0);
 10632  09BD  0020               	movlb	0	; select bank0
 10633  09BE  1313               	bcf	19,6	;volatile
 10634                           
 10635                           ;LED7Seg.c: 42: do { ANSELCbits.ANSC7 = 0; } while(0);
 10636  09BF  003E               	movlb	30	; select bank30
 10637  09C0  13CE               	bcf	78,7	;volatile
 10638                           
 10639                           ;LED7Seg.c: 43: do { TRISCbits.TRISC7 = 0; } while(0);
 10640  09C1  0020               	movlb	0	; select bank0
 10641  09C2  1393               	bcf	19,7	;volatile
 10642  09C3  0008               	return
 10643  09C4                     __end_of_LED7SegSetup:	
 10644                           
 10645                           	psect	text25
 10646  0B34                     __ptext25:	
 10647 ;; *************** function _LED7SegDisplayValueByDigit *****************
 10648 ;; Defined at:
 10649 ;;		line 95 in file "LED7Seg.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;  iTensDigit      2   20[BANK0 ] unsigned int 
 10652 ;;  iUnitsDigit     2   22[BANK0 ] unsigned int 
 10653 ;; Auto vars:     Size  Location     Type
 10654 ;;  iTensCode       2   24[BANK0 ] unsigned int 
 10655 ;; Return value:  Size  Location     Type
 10656 ;;                  1    wreg      void 
 10657 ;; Registers used:
 10658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10659 ;; Tracked objects:
 10660 ;;		On entry : 0/0
 10661 ;;		On exit  : 0/0
 10662 ;;		Unchanged: 0/0
 10663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10664 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;Total ram usage:        6 bytes
 10669 ;; Hardware stack levels used:    1
 10670 ;; Hardware stack levels required when called:    7
 10671 ;; This function calls:
 10672 ;;		_LED7SegShiftOutPulseClock
 10673 ;; This function is called by:
 10674 ;;		_main
 10675 ;;		_LED7SegDisplayValue
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           
 10680                           ;psect for function _LED7SegDisplayValueByDigit
 10681  0B34                     _LED7SegDisplayValueByDigit:	
 10682                           
 10683                           ;LED7Seg.c: 99: if(iUnitsDigit>9) iUnitsDigit=9;
 10684                           
 10685                           ;LED7Seg.c: 96: unsigned int iTensCode;
 10686                           ;LED7Seg.c: 98: if(0>iUnitsDigit) iUnitsDigit=0;
 10687                           
 10688                           ;incstack = 0
 10689                           ; Regs used in _LED7SegDisplayValueByDigit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10690  0B34  3000               	movlw	0
 10691  0B35  0020               	movlb	0	; select bank0
 10692  0B36  0237               	subwf	LED7SegDisplayValueByDigit@iUnitsDigit+1,w
 10693  0B37  300A               	movlw	10
 10694  0B38  1903               	skipnz
 10695  0B39  0236               	subwf	LED7SegDisplayValueByDigit@iUnitsDigit,w
 10696  0B3A  1C03               	skipc
 10697  0B3B  2B40               	goto	l4374
 10698  0B3C  3009               	movlw	9
 10699  0B3D  00B6               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit
 10700  0B3E  3000               	movlw	0
 10701  0B3F  00B7               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit+1
 10702  0B40                     l4374:	
 10703                           ;LED7Seg.c: 101: if(0>iTensDigit) iTensDigit=0;
 10704                           
 10705                           
 10706                           ;LED7Seg.c: 102: if(iTensDigit>9) iTensDigit=9;
 10707  0B40  3000               	movlw	0
 10708  0B41  0235               	subwf	LED7SegDisplayValueByDigit@iTensDigit+1,w
 10709  0B42  300A               	movlw	10
 10710  0B43  1903               	skipnz
 10711  0B44  0234               	subwf	LED7SegDisplayValueByDigit@iTensDigit,w
 10712  0B45  1C03               	skipc
 10713  0B46  2B4B               	goto	l4378
 10714  0B47  3009               	movlw	9
 10715  0B48  00B4               	movwf	LED7SegDisplayValueByDigit@iTensDigit
 10716  0B49  3000               	movlw	0
 10717  0B4A  00B5               	movwf	LED7SegDisplayValueByDigit@iTensDigit+1
 10718  0B4B                     l4378:	
 10719                           
 10720                           ;LED7Seg.c: 104: iTensCode=segdisp[iTensDigit];
 10721  0B4B  3534               	lslf	LED7SegDisplayValueByDigit@iTensDigit,w
 10722  0B4C  3E20               	addlw	(low (_segdisp| (0+256)))& (0+255)
 10723  0B4D  0086               	movwf	6
 10724  0B4E  3001               	movlw	1	; select bank2/3
 10725  0B4F  0087               	movwf	7
 10726  0B50  3F40               	moviw [0]fsr1
 10727  0B51  00B8               	movwf	LED7SegDisplayValueByDigit@iTensCode
 10728  0B52  3F41               	moviw [1]fsr1
 10729  0B53  00B9               	movwf	LED7SegDisplayValueByDigit@iTensCode+1
 10730                           
 10731                           ;LED7Seg.c: 105: if(0==iTensDigit) iTensCode=255;
 10732  0B54  0834               	movf	LED7SegDisplayValueByDigit@iTensDigit,w
 10733  0B55  0435               	iorwf	LED7SegDisplayValueByDigit@iTensDigit+1,w
 10734  0B56  1D03               	btfss	3,2
 10735  0B57  2B5C               	goto	l4384
 10736  0B58  30FF               	movlw	255
 10737  0B59  00B8               	movwf	LED7SegDisplayValueByDigit@iTensCode
 10738  0B5A  3000               	movlw	0
 10739  0B5B  00B9               	movwf	LED7SegDisplayValueByDigit@iTensCode+1
 10740  0B5C                     l4384:	
 10741                           
 10742                           ;LED7Seg.c: 107: LED7SegShiftOutPulseClock( segdisp[iUnitsDigit]);
 10743  0B5C  3536               	lslf	LED7SegDisplayValueByDigit@iUnitsDigit,w
 10744  0B5D  3E20               	addlw	(low (_segdisp| (0+256)))& (0+255)
 10745  0B5E  0086               	movwf	6
 10746  0B5F  3001               	movlw	1	; select bank2/3
 10747  0B60  0087               	movwf	7
 10748  0B61  0801               	movf	1,w
 10749  0B62  318A  2293  318B   	fcall	_LED7SegShiftOutPulseClock
 10750                           
 10751                           ;LED7Seg.c: 108: LED7SegShiftOutPulseClock( iTensCode );
 10752  0B65  0020               	movlb	0	; select bank0
 10753  0B66  0838               	movf	LED7SegDisplayValueByDigit@iTensCode,w
 10754  0B67  318A  2293         	fcall	_LED7SegShiftOutPulseClock
 10755                           
 10756                           ;LED7Seg.c: 110: do { LATCbits.LATC5 = 1; } while(0);
 10757  0B69  0020               	movlb	0	; select bank0
 10758  0B6A  1698               	bsf	24,5	;volatile
 10759                           
 10760                           ;LED7Seg.c: 111: do { LATCbits.LATC5 = 0; } while(0);
 10761  0B6B  1298               	bcf	24,5	;volatile
 10762  0B6C  0008               	return
 10763  0B6D                     __end_of_LED7SegDisplayValueByDigit:	
 10764                           
 10765                           	psect	text26
 10766  0A93                     __ptext26:	
 10767 ;; *************** function _LED7SegShiftOutPulseClock *****************
 10768 ;; Defined at:
 10769 ;;		line 69 in file "LED7Seg.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;  val             1    wreg     unsigned char 
 10772 ;; Auto vars:     Size  Location     Type
 10773 ;;  val             1   18[BANK0 ] unsigned char 
 10774 ;;  i               1   19[BANK0 ] unsigned char 
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;Total ram usage:        3 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:    6
 10791 ;; This function calls:
 10792 ;;		_LED7SegPinWrite
 10793 ;;		_LED7SegPulseClock
 10794 ;; This function is called by:
 10795 ;;		_LED7SegDisplayValueByDigit
 10796 ;;		_LED7SegBlankDisplay
 10797 ;; This function uses a non-reentrant model
 10798 ;;
 10799                           
 10800                           
 10801                           ;psect for function _LED7SegShiftOutPulseClock
 10802  0A93                     _LED7SegShiftOutPulseClock:	
 10803                           
 10804                           ;incstack = 0
 10805                           ; Regs used in _LED7SegShiftOutPulseClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10806                           ;LED7SegShiftOutPulseClock@val stored from wreg
 10807  0A93  0020               	movlb	0	; select bank0
 10808  0A94  00B2               	movwf	LED7SegShiftOutPulseClock@val
 10809                           
 10810                           ;LED7Seg.c: 71: char i;
 10811                           ;LED7Seg.c: 75: for (i = 0; i < 8; i++) {
 10812  0A95  01B3               	clrf	LED7SegShiftOutPulseClock@i
 10813  0A96                     L5:	
 10814  0A96  3008               	movlw	8
 10815  0A97  0233               	subwf	LED7SegShiftOutPulseClock@i,w
 10816  0A98  1803               	btfsc	3,0
 10817  0A99  0008               	return
 10818                           
 10819                           ;LED7Seg.c: 76: LED7SegPinWrite((val & (1 << i)));
 10820  0A9A  3001               	movlw	1
 10821  0A9B  00B1               	movwf	??_LED7SegShiftOutPulseClock
 10822  0A9C  0A33               	incf	LED7SegShiftOutPulseClock@i,w
 10823  0A9D  2A9F               	goto	u4084
 10824  0A9E                     u4085:	
 10825  0A9E  35B1               	lslf	??_LED7SegShiftOutPulseClock,f
 10826  0A9F                     u4084:	
 10827  0A9F  0B89               	decfsz	9,f
 10828  0AA0  2A9E               	goto	u4085
 10829  0AA1  0831               	movf	??_LED7SegShiftOutPulseClock,w
 10830  0AA2  0532               	andwf	LED7SegShiftOutPulseClock@val,w
 10831  0AA3  3189  2176  318A   	fcall	_LED7SegPinWrite
 10832                           
 10833                           ;LED7Seg.c: 77: LED7SegPulseClock();
 10834  0AA6  3189  2188  318A   	fcall	_LED7SegPulseClock
 10835  0AA9  3001               	movlw	1
 10836  0AAA  0020               	movlb	0	; select bank0
 10837  0AAB  00B1               	movwf	??_LED7SegShiftOutPulseClock
 10838  0AAC  0831               	movf	??_LED7SegShiftOutPulseClock,w
 10839  0AAD  07B3               	addwf	LED7SegShiftOutPulseClock@i,f
 10840  0AAE  2A96               	goto	L5
 10841  0AAF                     __end_of_LED7SegShiftOutPulseClock:	
 10842                           
 10843                           	psect	text27
 10844  0988                     __ptext27:	
 10845 ;; *************** function _LED7SegPulseClock *****************
 10846 ;; Defined at:
 10847 ;;		line 60 in file "LED7Seg.c"
 10848 ;; Parameters:    Size  Location     Type
 10849 ;;		None
 10850 ;; Auto vars:     Size  Location     Type
 10851 ;;		None
 10852 ;; Return value:  Size  Location     Type
 10853 ;;                  1    wreg      void 
 10854 ;; Registers used:
 10855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10856 ;; Tracked objects:
 10857 ;;		On entry : 0/0
 10858 ;;		On exit  : 0/0
 10859 ;;		Unchanged: 0/0
 10860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;Total ram usage:        0 bytes
 10866 ;; Hardware stack levels used:    1
 10867 ;; Hardware stack levels required when called:    5
 10868 ;; This function calls:
 10869 ;;		_delay
 10870 ;; This function is called by:
 10871 ;;		_LED7SegShiftOutPulseClock
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           
 10876                           ;psect for function _LED7SegPulseClock
 10877  0988                     _LED7SegPulseClock:	
 10878                           
 10879                           ;incstack = 0
 10880                           ; Regs used in _LED7SegPulseClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10881                           ;LED7Seg.c: 63: do { LATCbits.LATC6 = 1; } while(0);
 10882  0988  0020               	movlb	0	; select bank0
 10883  0989  1718               	bsf	24,6	;volatile
 10884                           
 10885                           ;LED7Seg.c: 64: delay(1);
 10886  098A  3001               	movlw	1
 10887  098B  00A6               	movwf	delay@delaytime
 10888  098C  3000               	movlw	0
 10889  098D  00A7               	movwf	delay@delaytime+1
 10890  098E  318C  2432         	fcall	_delay
 10891                           
 10892                           ;LED7Seg.c: 66: do { LATCbits.LATC6 = 0; } while(0);
 10893  0990  0020               	movlb	0	; select bank0
 10894  0991  1318               	bcf	24,6	;volatile
 10895  0992  0008               	return
 10896  0993                     __end_of_LED7SegPulseClock:	
 10897                           
 10898                           	psect	text28
 10899  0C32                     __ptext28:	
 10900 ;; *************** function _delay *****************
 10901 ;; Defined at:
 10902 ;;		line 194 in file "main.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;  delaytime       2    6[BANK0 ] int 
 10905 ;; Auto vars:     Size  Location     Type
 10906 ;;  counter         4   13[BANK0 ] long 
 10907 ;;  adjustedDela    4    9[BANK0 ] long 
 10908 ;; Return value:  Size  Location     Type
 10909 ;;                  1    wreg      void 
 10910 ;; Registers used:
 10911 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10917 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;Total ram usage:       11 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    4
 10924 ;; This function calls:
 10925 ;;		___wmul
 10926 ;; This function is called by:
 10927 ;;		_blinkyLoop
 10928 ;;		_main
 10929 ;;		_LED7SegPulseClock
 10930 ;;		_LED7SegLoop
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           
 10935                           ;psect for function _delay
 10936  0C32                     _delay:	
 10937                           
 10938                           ;main.c: 195: long counter = 0;
 10939                           
 10940                           ;incstack = 0
 10941                           ; Regs used in _delay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10942  0C32  3000               	movlw	0
 10943  0C33  0020               	movlb	0	; select bank0
 10944  0C34  00B0               	movwf	delay@counter+3
 10945  0C35  3000               	movlw	0
 10946  0C36  00AF               	movwf	delay@counter+2
 10947  0C37  3000               	movlw	0
 10948  0C38  00AE               	movwf	delay@counter+1
 10949  0C39  3000               	movlw	0
 10950  0C3A  00AD               	movwf	delay@counter
 10951                           
 10952                           ;main.c: 196: long adjustedDelaytime=delaytime*cMstrClkAdjust;
 10953  0C3B  0827               	movf	delay@delaytime+1,w
 10954  0C3C  00A1               	movwf	___wmul@multiplier+1
 10955  0C3D  0826               	movf	delay@delaytime,w
 10956  0C3E  00A0               	movwf	___wmul@multiplier
 10957  0C3F  302A               	movlw	low (_cMstrClkAdjust| (0+32768))
 10958  0C40  0084               	movwf	4
 10959  0C41  3090               	movlw	high (_cMstrClkAdjust| (0+32768))
 10960  0C42  0085               	movwf	5
 10961  0C43  3F00               	moviw [0]fsr0
 10962  0C44  00A2               	movwf	___wmul@multiplicand
 10963  0C45  3F01               	moviw [1]fsr0
 10964  0C46  00A3               	movwf	___wmul@multiplicand+1
 10965  0C47  318A  2277  318C   	fcall	___wmul
 10966  0C4A  0020               	movlb	0	; select bank0
 10967  0C4B  0820               	movf	?___wmul,w
 10968  0C4C  00A9               	movwf	delay@adjustedDelaytime
 10969  0C4D  0821               	movf	?___wmul+1,w
 10970  0C4E  00AA               	movwf	delay@adjustedDelaytime+1
 10971  0C4F  0D89               	rlf	9,f
 10972  0C50  3B89               	subwfb	9,f
 10973  0C51  0989               	comf	9,f
 10974  0C52  00AB               	movwf	delay@adjustedDelaytime+2
 10975  0C53  00AC               	movwf	delay@adjustedDelaytime+3
 10976                           
 10977                           ;main.c: 198: if (0<delaytime)
 10978  0C54  0827               	movf	delay@delaytime+1,w
 10979  0C55  3A80               	xorlw	128
 10980  0C56  00A8               	movwf	??_delay
 10981  0C57  3080               	movlw	128
 10982  0C58  0228               	subwf	??_delay,w
 10983  0C59  1D03               	skipz
 10984  0C5A  2C5D               	goto	u4025
 10985  0C5B  3001               	movlw	1
 10986  0C5C  0226               	subwf	delay@delaytime,w
 10987  0C5D                     u4025:	
 10988  0C5D  1C03               	skipc
 10989  0C5E  0008               	return
 10990                           
 10991                           ;main.c: 199: for (counter = 0; counter<adjustedDelaytime; counter++);
 10992  0C5F  3000               	movlw	0
 10993  0C60  0020               	movlb	0	; select bank0
 10994  0C61  00B0               	movwf	delay@counter+3
 10995  0C62  3000               	movlw	0
 10996  0C63  00AF               	movwf	delay@counter+2
 10997  0C64  3000               	movlw	0
 10998  0C65  00AE               	movwf	delay@counter+1
 10999  0C66  3000               	movlw	0
 11000  0C67  00AD               	movwf	delay@counter
 11001  0C68                     l504:	
 11002  0C68  0830               	movf	delay@counter+3,w
 11003  0C69  3A80               	xorlw	128
 11004  0C6A  00A8               	movwf	??_delay
 11005  0C6B  082C               	movf	delay@adjustedDelaytime+3,w
 11006  0C6C  3A80               	xorlw	128
 11007  0C6D  0228               	subwf	??_delay,w
 11008  0C6E  1D03               	skipz
 11009  0C6F  2C7A               	goto	u4033
 11010  0C70  082B               	movf	delay@adjustedDelaytime+2,w
 11011  0C71  022F               	subwf	delay@counter+2,w
 11012  0C72  1D03               	skipz
 11013  0C73  2C7A               	goto	u4033
 11014  0C74  082A               	movf	delay@adjustedDelaytime+1,w
 11015  0C75  022E               	subwf	delay@counter+1,w
 11016  0C76  1D03               	skipz
 11017  0C77  2C7A               	goto	u4033
 11018  0C78  0829               	movf	delay@adjustedDelaytime,w
 11019  0C79  022D               	subwf	delay@counter,w
 11020  0C7A                     u4033:	
 11021  0C7A  1803               	btfsc	3,0
 11022  0C7B  0008               	return
 11023  0C7C  3001               	movlw	1
 11024  0C7D  07AD               	addwf	delay@counter,f
 11025  0C7E  3000               	movlw	0
 11026  0C7F  3DAE               	addwfc	delay@counter+1,f
 11027  0C80  3000               	movlw	0
 11028  0C81  3DAF               	addwfc	delay@counter+2,f
 11029  0C82  3000               	movlw	0
 11030  0C83  3DB0               	addwfc	delay@counter+3,f
 11031  0C84  2C68               	goto	l504
 11032  0C85                     __end_of_delay:	
 11033                           
 11034                           	psect	text29
 11035  0A77                     __ptext29:	
 11036 ;; *************** function ___wmul *****************
 11037 ;; Defined at:
 11038 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11041 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11042 ;; Auto vars:     Size  Location     Type
 11043 ;;  product         2    4[BANK0 ] unsigned int 
 11044 ;; Return value:  Size  Location     Type
 11045 ;;                  2    0[BANK0 ] unsigned int 
 11046 ;; Registers used:
 11047 ;;		wreg, status,2, status,0
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11053 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;Total ram usage:        6 bytes
 11058 ;; Hardware stack levels used:    1
 11059 ;; Hardware stack levels required when called:    3
 11060 ;; This function calls:
 11061 ;;		Nothing
 11062 ;; This function is called by:
 11063 ;;		_delay
 11064 ;;		_blinkyLoop
 11065 ;;		_main
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           
 11070                           ;psect for function ___wmul
 11071  0A77                     ___wmul:	
 11072                           
 11073                           ;incstack = 0
 11074                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11075  0A77  0020               	movlb	0	; select bank0
 11076  0A78  01A4               	clrf	___wmul@product
 11077  0A79  01A5               	clrf	___wmul@product+1
 11078  0A7A                     l4194:	
 11079  0A7A  1C20               	btfss	___wmul@multiplier,0
 11080  0A7B  2A80               	goto	l950
 11081  0A7C  0822               	movf	___wmul@multiplicand,w
 11082  0A7D  07A4               	addwf	___wmul@product,f
 11083  0A7E  0823               	movf	___wmul@multiplicand+1,w
 11084  0A7F  3DA5               	addwfc	___wmul@product+1,f
 11085  0A80                     l950:	
 11086  0A80  3001               	movlw	1
 11087  0A81                     u3995:	
 11088  0A81  35A2               	lslf	___wmul@multiplicand,f
 11089  0A82  0DA3               	rlf	___wmul@multiplicand+1,f
 11090  0A83  0B89               	decfsz	9,f
 11091  0A84  2A81               	goto	u3995
 11092  0A85  3001               	movlw	1
 11093  0A86                     u4005:	
 11094  0A86  36A1               	lsrf	___wmul@multiplier+1,f
 11095  0A87  0CA0               	rrf	___wmul@multiplier,f
 11096  0A88  0B89               	decfsz	9,f
 11097  0A89  2A86               	goto	u4005
 11098  0A8A  0820               	movf	___wmul@multiplier,w
 11099  0A8B  0421               	iorwf	___wmul@multiplier+1,w
 11100  0A8C  1D03               	btfss	3,2
 11101  0A8D  2A7A               	goto	l4194
 11102  0A8E  0825               	movf	___wmul@product+1,w
 11103  0A8F  00A1               	movwf	?___wmul+1
 11104  0A90  0824               	movf	___wmul@product,w
 11105  0A91  00A0               	movwf	?___wmul
 11106  0A92  0008               	return
 11107  0A93                     __end_of___wmul:	
 11108                           
 11109                           	psect	text30
 11110  0976                     __ptext30:	
 11111 ;; *************** function _LED7SegPinWrite *****************
 11112 ;; Defined at:
 11113 ;;		line 48 in file "LED7Seg.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;  val             1    wreg     unsigned char 
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;  val             1    0[BANK0 ] unsigned char 
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  1    wreg      void 
 11120 ;; Registers used:
 11121 ;;		wreg, status,2, status,0
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;Total ram usage:        1 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:    3
 11134 ;; This function calls:
 11135 ;;		Nothing
 11136 ;; This function is called by:
 11137 ;;		_LED7SegShiftOutPulseClock
 11138 ;; This function uses a non-reentrant model
 11139 ;;
 11140                           
 11141                           
 11142                           ;psect for function _LED7SegPinWrite
 11143  0976                     _LED7SegPinWrite:	
 11144                           
 11145                           ;incstack = 0
 11146                           ; Regs used in _LED7SegPinWrite: [wreg+status,2+status,0]
 11147                           ;LED7SegPinWrite@val stored from wreg
 11148  0976  0020               	movlb	0	; select bank0
 11149  0977  00A0               	movwf	LED7SegPinWrite@val
 11150                           
 11151                           ;LED7Seg.c: 50: if (val){
 11152  0978  0820               	movf	LED7SegPinWrite@val,w
 11153  0979  1903               	btfsc	3,2
 11154  097A  297D               	goto	l711
 11155                           
 11156                           ;LED7Seg.c: 52: do { LATCbits.LATC7 = 1; } while(0);
 11157  097B  1798               	bsf	24,7	;volatile
 11158                           
 11159                           ;LED7Seg.c: 53: } else {
 11160  097C  0008               	return
 11161  097D                     l711:	
 11162                           ;LED7Seg.c: 55: do { LATCbits.LATC7 = 0; } while(0);
 11163                           
 11164  097D  1398               	bcf	24,7	;volatile
 11165  097E  0008               	return
 11166  097F                     __end_of_LED7SegPinWrite:	
 11167                           
 11168                           	psect	text31
 11169  0A43                     __ptext31:	
 11170 ;; *************** function _InitmvcChannels *****************
 11171 ;; Defined at:
 11172 ;;		line 182 in file "main.c"
 11173 ;; Parameters:    Size  Location     Type
 11174 ;;		None
 11175 ;; Auto vars:     Size  Location     Type
 11176 ;;  i               2    1[BANK0 ] int 
 11177 ;; Return value:  Size  Location     Type
 11178 ;;                  1    wreg      void 
 11179 ;; Registers used:
 11180 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11181 ;; Tracked objects:
 11182 ;;		On entry : 0/0
 11183 ;;		On exit  : 0/0
 11184 ;;		Unchanged: 0/0
 11185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11187 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;Total ram usage:        3 bytes
 11191 ;; Hardware stack levels used:    1
 11192 ;; Hardware stack levels required when called:    3
 11193 ;; This function calls:
 11194 ;;		Nothing
 11195 ;; This function is called by:
 11196 ;;		_main
 11197 ;; This function uses a non-reentrant model
 11198 ;;
 11199                           
 11200                           
 11201                           ;psect for function _InitmvcChannels
 11202  0A43                     _InitmvcChannels:	
 11203                           
 11204                           ;main.c: 183: for(int i=0; i<cMixFaderCount;i++) {
 11205                           
 11206                           ;incstack = 0
 11207                           ; Regs used in _InitmvcChannels: [wreg+fsr1l+fsr1h+status,2+status,0]
 11208  0A43  0020               	movlb	0	; select bank0
 11209  0A44  01A1               	clrf	InitmvcChannels@i
 11210  0A45  01A2               	clrf	InitmvcChannels@i+1
 11211  0A46                     L6:	
 11212  0A46  0822               	movf	InitmvcChannels@i+1,w
 11213  0A47  3A80               	xorlw	128
 11214  0A48  00A0               	movwf	??_InitmvcChannels
 11215  0A49  3080               	movlw	128
 11216  0A4A  0220               	subwf	??_InitmvcChannels,w
 11217  0A4B  1D03               	skipz
 11218  0A4C  2A4F               	goto	u3005
 11219  0A4D  3004               	movlw	4
 11220  0A4E  0221               	subwf	InitmvcChannels@i,w
 11221  0A4F                     u3005:	
 11222  0A4F  1803               	btfsc	3,0
 11223  0A50  0008               	return
 11224                           
 11225                           ;main.c: 184: mvcChannels[i]=0;
 11226  0A51  0020               	movlb	0	; select bank0
 11227  0A52  0821               	movf	InitmvcChannels@i,w
 11228  0A53  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
 11229  0A54  0086               	movwf	6
 11230  0A55  0187               	clrf	7
 11231  0A56  0181               	clrf	1
 11232  0A57  3001               	movlw	1
 11233  0A58  07A1               	addwf	InitmvcChannels@i,f
 11234  0A59  3000               	movlw	0
 11235  0A5A  3DA2               	addwfc	InitmvcChannels@i+1,f
 11236  0A5B  2A46               	goto	L6
 11237  0A5C                     __end_of_InitmvcChannels:	
 11238                           
 11239                           	psect	text32
 11240  0AAF                     __ptext32:	
 11241 ;; *************** function _InitPanelInChannels *****************
 11242 ;; Defined at:
 11243 ;;		line 176 in file "main.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;		None
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;  i               2    1[BANK0 ] int 
 11248 ;; Return value:  Size  Location     Type
 11249 ;;                  1    wreg      void 
 11250 ;; Registers used:
 11251 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11252 ;; Tracked objects:
 11253 ;;		On entry : 0/0
 11254 ;;		On exit  : 0/0
 11255 ;;		Unchanged: 0/0
 11256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;Total ram usage:        3 bytes
 11262 ;; Hardware stack levels used:    1
 11263 ;; Hardware stack levels required when called:    3
 11264 ;; This function calls:
 11265 ;;		Nothing
 11266 ;; This function is called by:
 11267 ;;		_main
 11268 ;; This function uses a non-reentrant model
 11269 ;;
 11270                           
 11271                           
 11272                           ;psect for function _InitPanelInChannels
 11273  0AAF                     _InitPanelInChannels:	
 11274                           
 11275                           ;main.c: 177: for(int i=0; i<cMixFaderCount;i++) {
 11276                           
 11277                           ;incstack = 0
 11278                           ; Regs used in _InitPanelInChannels: [wreg+fsr1l+fsr1h+status,2+status,0]
 11279  0AAF  0020               	movlb	0	; select bank0
 11280  0AB0  01A1               	clrf	InitPanelInChannels@i
 11281  0AB1  01A2               	clrf	InitPanelInChannels@i+1
 11282  0AB2                     L7:	
 11283  0AB2  0822               	movf	InitPanelInChannels@i+1,w
 11284  0AB3  3A80               	xorlw	128
 11285  0AB4  00A0               	movwf	??_InitPanelInChannels
 11286  0AB5  3080               	movlw	128
 11287  0AB6  0220               	subwf	??_InitPanelInChannels,w
 11288  0AB7  1D03               	skipz
 11289  0AB8  2ABB               	goto	u2985
 11290  0AB9  3004               	movlw	4
 11291  0ABA  0221               	subwf	InitPanelInChannels@i,w
 11292  0ABB                     u2985:	
 11293  0ABB  1803               	btfsc	3,0
 11294  0ABC  0008               	return
 11295                           
 11296                           ;main.c: 178: PanelInChannels[i]=0;
 11297  0ABD  0020               	movlb	0	; select bank0
 11298  0ABE  0821               	movf	InitPanelInChannels@i,w
 11299  0ABF  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
 11300  0AC0  0086               	movwf	6
 11301  0AC1  0187               	clrf	7
 11302  0AC2  0181               	clrf	1
 11303                           
 11304                           ;main.c: 179: faderActiveFlag[i]=0;
 11305  0AC3  0821               	movf	InitPanelInChannels@i,w
 11306  0AC4  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
 11307  0AC5  0086               	movwf	6
 11308  0AC6  0187               	clrf	7
 11309  0AC7  0181               	clrf	1
 11310  0AC8  3001               	movlw	1
 11311  0AC9  07A1               	addwf	InitPanelInChannels@i,f
 11312  0ACA  3000               	movlw	0
 11313  0ACB  3DA2               	addwfc	InitPanelInChannels@i+1,f
 11314  0ACC  2AB2               	goto	L7
 11315  0ACD                     __end_of_InitPanelInChannels:	
 11316                           
 11317                           	psect	text33
 11318  09D6                     __ptext33:	
 11319 ;; *************** function _ADCC_GetSingleConversion *****************
 11320 ;; Defined at:
 11321 ;;		line 132 in file "mcc_generated_files/adcc.c"
 11322 ;; Parameters:    Size  Location     Type
 11323 ;;  channel         1    wreg     enum E14259
 11324 ;; Auto vars:     Size  Location     Type
 11325 ;;  channel         1    3[BANK0 ] enum E14259
 11326 ;; Return value:  Size  Location     Type
 11327 ;;                  2    0[BANK0 ] unsigned int 
 11328 ;; Registers used:
 11329 ;;		wreg
 11330 ;; Tracked objects:
 11331 ;;		On entry : 0/0
 11332 ;;		On exit  : 0/0
 11333 ;;		Unchanged: 0/0
 11334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11335 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11338 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11339 ;;Total ram usage:        4 bytes
 11340 ;; Hardware stack levels used:    1
 11341 ;; Hardware stack levels required when called:    3
 11342 ;; This function calls:
 11343 ;;		Nothing
 11344 ;; This function is called by:
 11345 ;;		_main
 11346 ;; This function uses a non-reentrant model
 11347 ;;
 11348                           
 11349                           
 11350                           ;psect for function _ADCC_GetSingleConversion
 11351  09D6                     _ADCC_GetSingleConversion:	
 11352                           
 11353                           ;incstack = 0
 11354                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 11355                           ;ADCC_GetSingleConversion@channel stored from wreg
 11356  09D6  0020               	movlb	0	; select bank0
 11357  09D7  00A3               	movwf	ADCC_GetSingleConversion@channel
 11358                           
 11359                           ;adcc.c: 135: ADPCH = channel;
 11360  09D8  0823               	movf	ADCC_GetSingleConversion@channel,w
 11361  09D9  0021               	movlb	1	; select bank1
 11362  09DA  009E               	movwf	30	;volatile
 11363                           
 11364                           ;adcc.c: 138: ADCON0bits.ADON = 1;
 11365  09DB  1793               	bsf	19,7	;volatile
 11366                           
 11367                           ;adcc.c: 141: ADCON0bits.ADCONT = 0;
 11368  09DC  1313               	bcf	19,6	;volatile
 11369                           
 11370                           ;adcc.c: 144: ADCON0bits.ADGO = 1;
 11371  09DD  1413               	bsf	19,0	;volatile
 11372                           
 11373                           ;adcc.c: 147: __nop();
 11374  09DE  0000               	nop
 11375  09DF                     l163:	
 11376                           ;adcc.c: 151: {
 11377                           
 11378                           ;adcc.c: 150: while (ADCON0bits.ADGO)
 11379                           
 11380  09DF  0021               	movlb	1	; select bank1
 11381  09E0  1813               	btfsc	19,0	;volatile
 11382  09E1  29DF               	goto	l163
 11383                           
 11384                           ;adcc.c: 152: }
 11385                           ;adcc.c: 155: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 11386  09E2  080D               	movf	13,w	;volatile
 11387  09E3  0020               	movlb	0	; select bank0
 11388  09E4  00A1               	movwf	?_ADCC_GetSingleConversion+1
 11389  09E5  0021               	movlb	1	; select bank1
 11390  09E6  080C               	movf	12,w	;volatile
 11391  09E7  0020               	movlb	0	; select bank0
 11392  09E8  00A0               	movwf	?_ADCC_GetSingleConversion
 11393  09E9  0008               	return
 11394  09EA                     __end_of_ADCC_GetSingleConversion:	
 11395                           
 11396                           	psect	intentry
 11397  0004                     __pintentry:	
 11398 ;; *************** function _INTERRUPT_InterruptManager *****************
 11399 ;; Defined at:
 11400 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;		None
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;		None
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  1    wreg      void 
 11407 ;; Registers used:
 11408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/0
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;Total ram usage:        1 bytes
 11419 ;; Hardware stack levels used:    1
 11420 ;; Hardware stack levels required when called:    2
 11421 ;; This function calls:
 11422 ;;		_I2C1_BusCollisionISR
 11423 ;;		_I2C1_ISR
 11424 ;; This function is called by:
 11425 ;;		Interrupt level 1
 11426 ;; This function uses a non-reentrant model
 11427 ;;
 11428                           
 11429  0004                     _INTERRUPT_InterruptManager:	
 11430                           
 11431                           ;incstack = 0
 11432  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11433                           
 11434                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11435  0005  3180               	pagesel	$
 11436  0006  0020               	movlb	0	; select bank0
 11437  0007  087F               	movf	127,w
 11438  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 11439                           
 11440                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.BCL1IE == 1 && PIR3bits.BC
      +                          L1IF == 1)
 11441  0009  1F0B               	btfss	11,6	;volatile
 11442  000A  2813               	goto	i1l394
 11443  000B  002E               	movlb	14	; select bank14
 11444  000C  1899               	btfsc	25,1	;volatile
 11445  000D  1C8F               	btfss	15,1	;volatile
 11446  000E  2813               	goto	i1l394
 11447                           
 11448                           ;interrupt_manager.c: 55: {
 11449                           ;interrupt_manager.c: 56: I2C1_BusCollisionISR();
 11450  000F  3187  27FF  3180   	fcall	_I2C1_BusCollisionISR
 11451                           
 11452                           ;interrupt_manager.c: 57: }
 11453  0012  281B               	goto	i1l398
 11454  0013                     i1l394:	
 11455                           
 11456                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE3bits.SSP1IE == 1 && PIR3bi
      +                          ts.SSP1IF == 1)
 11457  0013  1F0B               	btfss	11,6	;volatile
 11458  0014  281B               	goto	i1l398
 11459  0015  002E               	movlb	14	; select bank14
 11460  0016  1819               	btfsc	25,0	;volatile
 11461  0017  1C0F               	btfss	15,0	;volatile
 11462  0018  281B               	goto	i1l398
 11463                           
 11464                           ;interrupt_manager.c: 59: {
 11465                           ;interrupt_manager.c: 60: I2C1_ISR();
 11466  0019  3183  23BE         	fcall	_I2C1_ISR
 11467  001B                     i1l398:	
 11468                           ;interrupt_manager.c: 62: else
 11469                           ;interrupt_manager.c: 63: {
 11470                           
 11471                           ;interrupt_manager.c: 61: }
 11472                           
 11473  001B  087D               	movf	??_INTERRUPT_InterruptManager,w
 11474  001C  0020               	movlb	0	; select bank0
 11475  001D  00FF               	movwf	127
 11476  001E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11477  001F  0009               	retfie
 11478  0020                     __end_of_INTERRUPT_InterruptManager:	
 11479                           
 11480                           	psect	text35
 11481  03BE                     __ptext35:	
 11482 ;; *************** function _I2C1_ISR *****************
 11483 ;; Defined at:
 11484 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 11485 ;; Parameters:    Size  Location     Type
 11486 ;;		None
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;		None
 11489 ;; Return value:  Size  Location     Type
 11490 ;;                  1    wreg      void 
 11491 ;; Registers used:
 11492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11501 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;Total ram usage:        4 bytes
 11503 ;; Hardware stack levels used:    1
 11504 ;; Hardware stack levels required when called:    1
 11505 ;; This function calls:
 11506 ;;		_I2C1_FunctionComplete
 11507 ;;		_I2C1_Stop
 11508 ;; This function is called by:
 11509 ;;		_INTERRUPT_InterruptManager
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           
 11514                           ;psect for function _I2C1_ISR
 11515  03BE                     _I2C1_ISR:	
 11516                           
 11517                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 11518                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 11519                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 11520                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 11521                           ;i2c1.c: 241: PIR3bits.SSP1IF = 0;
 11522                           
 11523                           ;incstack = 0
 11524                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11525  03BE  002E               	movlb	14	; select bank14
 11526  03BF  100F               	bcf	15,0	;volatile
 11527                           
 11528                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 11529  03C0  0023               	movlb	3	; select bank3
 11530  03C1  1F90               	btfss	16,7	;volatile
 11531  03C2  2CED               	goto	i1l3474
 11532                           
 11533                           ;i2c1.c: 246: {
 11534                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 11535  03C3  1390               	bcf	16,7	;volatile
 11536                           
 11537                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
 11538  03C4  0020               	movlb	0	; select bank0
 11539  03C5  01EF               	clrf	_i2c1_state
 11540                           
 11541                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 11542  03C6  0872               	movf	_p_i2c1_current,w
 11543  03C7  3E02               	addlw	2
 11544  03C8  0086               	movwf	6
 11545  03C9  0187               	clrf	7
 11546  03CA  0801               	movf	1,w
 11547  03CB  0086               	movwf	6
 11548  03CC  0187               	clrf	7
 11549  03CD  0181               	clrf	1
 11550  03CE  0A81               	incf	1,f
 11551                           
 11552                           ;i2c1.c: 253: p_i2c1_current = (0);
 11553  03CF  01F2               	clrf	_p_i2c1_current
 11554                           
 11555                           ;i2c1.c: 255: return;
 11556  03D0  0008               	return
 11557  03D1                     i1l292:	
 11558                           ;i2c1.c: 260: {
 11559                           ;i2c1.c: 261: case S_MASTER_IDLE:
 11560                           
 11561                           ;i2c1.c: 256: }
 11562                           ;i2c1.c: 259: switch(i2c1_state)
 11563                           
 11564                           
 11565                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 11566  03D1  18E9               	btfsc	_i2c1_object+2,1
 11567  03D2  0008               	return
 11568                           
 11569                           ;i2c1.c: 264: {
 11570                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 11571  03D3  0868               	movf	low ((_i2c1_object| 0+1)),w
 11572  03D4  00F9               	movwf	??_I2C1_ISR
 11573  03D5  0879               	movf	??_I2C1_ISR,w
 11574  03D6  00F2               	movwf	_p_i2c1_current
 11575                           
 11576                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 11577  03D7  0868               	movf	low ((_i2c1_object| 0+1)),w
 11578  03D8  0086               	movwf	6
 11579  03D9  0187               	clrf	7
 11580  03DA  0801               	movf	1,w
 11581  03DB  00F9               	movwf	??_I2C1_ISR
 11582  03DC  0879               	movf	??_I2C1_ISR,w
 11583  03DD  00F4               	movwf	_i2c1_trb_count
 11584                           
 11585                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 11586  03DE  0868               	movf	low ((_i2c1_object| 0+1)),w
 11587  03DF  0086               	movwf	6
 11588  03E0  0187               	clrf	7
 11589  03E1  3F41               	moviw [1]fsr1
 11590  03E2  00F3               	movwf	_p_i2c1_trb_current
 11591                           
 11592                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 11593  03E3  3003               	movlw	3
 11594  03E4  00F9               	movwf	??_I2C1_ISR
 11595  03E5  0879               	movf	??_I2C1_ISR,w
 11596  03E6  07E8               	addwf	low ((_i2c1_object| 0+1)),f
 11597                           
 11598                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 11599  03E7  0868               	movf	low ((_i2c1_object| 0+1)),w
 11600  03E8  3AD8               	xorlw	(low ((_i2c1_tr_queue| 0+3)))& (0+255)
 11601  03E9  1D03               	skipz
 11602  03EA  2BEF               	goto	i1l3362
 11603                           
 11604                           ;i2c1.c: 274: {
 11605                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 11606  03EB  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 11607  03EC  00F9               	movwf	??_I2C1_ISR
 11608  03ED  0879               	movf	??_I2C1_ISR,w
 11609  03EE  00E8               	movwf	low ((_i2c1_object| 0+1))
 11610  03EF                     i1l3362:	
 11611                           
 11612                           ;i2c1.c: 277: }
 11613                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 11614  03EF  1069               	bcf	_i2c1_object+2,0
 11615                           
 11616                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 11617  03F0  0868               	movf	low ((_i2c1_object| 0+1)),w
 11618  03F1  0667               	xorwf	_i2c1_object,w
 11619  03F2  1903               	btfsc	3,2
 11620                           
 11621                           ;i2c1.c: 285: {
 11622                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 11623  03F3  14E9               	bsf	_i2c1_object+2,1
 11624                           
 11625                           ;i2c1.c: 288: }
 11626                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 11627  03F4  0023               	movlb	3	; select bank3
 11628  03F5  1411               	bsf	17,0	;volatile
 11629                           
 11630                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 11631  03F6  3002               	movlw	2
 11632  03F7  00F9               	movwf	??_I2C1_ISR
 11633  03F8  0879               	movf	??_I2C1_ISR,w
 11634  03F9  0020               	movlb	0	; select bank0
 11635  03FA  00EF               	movwf	_i2c1_state
 11636                           
 11637                           ;i2c1.c: 295: }
 11638                           ;i2c1.c: 297: break;
 11639  03FB  0008               	return
 11640  03FC                     i1l297:	
 11641                           ;i2c1.c: 299: case S_MASTER_RESTART:
 11642                           
 11643                           
 11644                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 11645  03FC  0023               	movlb	3	; select bank3
 11646  03FD  1491               	bsf	17,1	;volatile
 11647                           
 11648                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 11649  03FE  3002               	movlw	2
 11650  03FF  00F9               	movwf	??_I2C1_ISR
 11651  0400  0879               	movf	??_I2C1_ISR,w
 11652  0401  0020               	movlb	0	; select bank0
 11653  0402  00EF               	movwf	_i2c1_state
 11654                           
 11655                           ;i2c1.c: 309: break;
 11656  0403  0008               	return
 11657  0404                     i1l298:	
 11658                           ;i2c1.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 11659                           
 11660                           
 11661                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 11662  0404  0023               	movlb	3	; select bank3
 11663  0405  1F11               	btfss	17,6	;volatile
 11664  0406  2C10               	goto	i1l3374
 11665                           
 11666                           ;i2c1.c: 314: {
 11667                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 11668  0407  3001               	movlw	1
 11669  0408  00F9               	movwf	??_I2C1_ISR
 11670  0409  0879               	movf	??_I2C1_ISR,w
 11671  040A  0020               	movlb	0	; select bank0
 11672  040B  07EB               	addwf	_i2c1_object+4,f
 11673                           
 11674                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11675  040C  3004               	movlw	4
 11676  040D  318A  222B         	fcall	_I2C1_Stop
 11677                           
 11678                           ;i2c1.c: 317: }
 11679  040F  0008               	return
 11680  0410                     i1l3374:	
 11681                           
 11682                           ;i2c1.c: 318: else
 11683                           ;i2c1.c: 319: {
 11684                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 11685  0410  0876               	movf	I2C1_ISR@i2c_address+1,w
 11686  0411  00FA               	movwf	??_I2C1_ISR+1
 11687  0412  0875               	movf	I2C1_ISR@i2c_address,w
 11688  0413  00F9               	movwf	??_I2C1_ISR
 11689  0414  36FA               	lsrf	??_I2C1_ISR+1,f
 11690  0415  0CF9               	rrf	??_I2C1_ISR,f
 11691  0416  0879               	movf	??_I2C1_ISR,w
 11692  0417  0023               	movlb	3	; select bank3
 11693  0418  008C               	movwf	12	;volatile
 11694                           
 11695                           ;i2c1.c: 324: if(i2c_address & 0x01)
 11696  0419  1C75               	btfss	I2C1_ISR@i2c_address,0
 11697  041A  2C21               	goto	i1l3380
 11698                           
 11699                           ;i2c1.c: 325: {
 11700                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 11701  041B  300B               	movlw	11
 11702  041C  00F9               	movwf	??_I2C1_ISR
 11703  041D  0879               	movf	??_I2C1_ISR,w
 11704  041E  0020               	movlb	0	; select bank0
 11705  041F  00EF               	movwf	_i2c1_state
 11706                           
 11707                           ;i2c1.c: 329: }
 11708  0420  0008               	return
 11709  0421                     i1l3380:	
 11710                           
 11711                           ;i2c1.c: 330: else
 11712                           ;i2c1.c: 331: {
 11713                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 11714  0421  3003               	movlw	3
 11715  0422  00F9               	movwf	??_I2C1_ISR
 11716  0423  0879               	movf	??_I2C1_ISR,w
 11717  0424  0020               	movlb	0	; select bank0
 11718  0425  00EF               	movwf	_i2c1_state
 11719                           
 11720                           ;i2c1.c: 334: }
 11721                           ;i2c1.c: 335: }
 11722                           ;i2c1.c: 337: break;
 11723  0426  0008               	return
 11724  0427                     i1l303:	
 11725                           ;i2c1.c: 339: case S_MASTER_10BIT_RESTART:
 11726                           
 11727                           
 11728                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 11729  0427  0023               	movlb	3	; select bank3
 11730  0428  1F11               	btfss	17,6	;volatile
 11731  0429  2C33               	goto	i1l304
 11732                           
 11733                           ;i2c1.c: 342: {
 11734                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 11735  042A  3001               	movlw	1
 11736  042B  00F9               	movwf	??_I2C1_ISR
 11737  042C  0879               	movf	??_I2C1_ISR,w
 11738  042D  0020               	movlb	0	; select bank0
 11739  042E  07EB               	addwf	_i2c1_object+4,f
 11740                           
 11741                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11742  042F  3004               	movlw	4
 11743  0430  318A  222B         	fcall	_I2C1_Stop
 11744                           
 11745                           ;i2c1.c: 345: }
 11746  0432  0008               	return
 11747  0433                     i1l304:	
 11748                           
 11749                           ;i2c1.c: 346: else
 11750                           ;i2c1.c: 347: {
 11751                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 11752  0433  1491               	bsf	17,1	;volatile
 11753                           
 11754                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 11755  0434  0876               	movf	I2C1_ISR@i2c_address+1,w
 11756  0435  00FA               	movwf	??_I2C1_ISR+1
 11757  0436  0875               	movf	I2C1_ISR@i2c_address,w
 11758  0437  00F9               	movwf	??_I2C1_ISR
 11759  0438  087A               	movf	??_I2C1_ISR+1,w
 11760  0439  00F9               	movwf	??_I2C1_ISR
 11761  043A  01FA               	clrf	??_I2C1_ISR+1
 11762  043B  3006               	movlw	6
 11763  043C  0579               	andwf	??_I2C1_ISR,w
 11764  043D  00FB               	movwf	??_I2C1_ISR+2
 11765  043E  3000               	movlw	0
 11766  043F  057A               	andwf	??_I2C1_ISR+1,w
 11767  0440  00FC               	movwf	??_I2C1_ISR+3
 11768  0441  30F0               	movlw	240
 11769  0442  047B               	iorwf	??_I2C1_ISR+2,w
 11770  0443  00F5               	movwf	I2C1_ISR@i2c_address
 11771  0444  3000               	movlw	0
 11772  0445  047C               	iorwf	??_I2C1_ISR+3,w
 11773  0446  00F6               	movwf	I2C1_ISR@i2c_address+1
 11774                           
 11775                           ;i2c1.c: 357: i2c_address |= 0x0001;
 11776  0447  1475               	bsf	I2C1_ISR@i2c_address,0
 11777                           
 11778                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 11779  0448  0020               	movlb	0	; select bank0
 11780  0449  01EE               	clrf	I2C1_ISR@i2c_10bit_address_restart
 11781  044A  0AEE               	incf	I2C1_ISR@i2c_10bit_address_restart,f
 11782                           
 11783                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 11784  044B  3002               	movlw	2
 11785  044C  00F9               	movwf	??_I2C1_ISR
 11786  044D  0879               	movf	??_I2C1_ISR,w
 11787  044E  00EF               	movwf	_i2c1_state
 11788                           
 11789                           ;i2c1.c: 364: }
 11790                           ;i2c1.c: 366: break;
 11791  044F  0008               	return
 11792  0450                     i1l3394:	
 11793                           ;i2c1.c: 368: case S_MASTER_SEND_ADDR:
 11794                           
 11795                           
 11796                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 11797  0450  036E               	decf	I2C1_ISR@i2c_10bit_address_restart,w
 11798  0451  1903               	btfsc	3,2
 11799  0452  2C64               	goto	i1l3414
 11800                           
 11801                           ;i2c1.c: 382: {
 11802                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 11803  0453  0873               	movf	_p_i2c1_trb_current,w
 11804  0454  0086               	movwf	6
 11805  0455  0187               	clrf	7
 11806  0456  3F40               	moviw [0]fsr1
 11807  0457  00F5               	movwf	I2C1_ISR@i2c_address
 11808  0458  3F41               	moviw [1]fsr1
 11809  0459  00F6               	movwf	I2C1_ISR@i2c_address+1
 11810                           
 11811                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 11812  045A  0873               	movf	_p_i2c1_trb_current,w
 11813  045B  0086               	movwf	6
 11814  045C  0187               	clrf	7
 11815  045D  3F43               	moviw [3]fsr1
 11816  045E  00F1               	movwf	I2C1_ISR@pi2c_buf_ptr
 11817                           
 11818                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 11819  045F  0873               	movf	_p_i2c1_trb_current,w
 11820  0460  0086               	movwf	6
 11821  0461  0187               	clrf	7
 11822  0462  3F42               	moviw [2]fsr1
 11823  0463  00F0               	movwf	I2C1_ISR@i2c_bytes_left
 11824  0464                     i1l3414:	
 11825                           ;i2c1.c: 407: }
 11826                           ;i2c1.c: 408: }
 11827                           
 11828                           ;i2c1.c: 406: i2c_10bit_address_restart = 0;
 11829                           
 11830                           ;i2c1.c: 404: i2c1_state = S_MASTER_ACK_ADDR;
 11831                           
 11832                           ;i2c1.c: 400: else
 11833                           ;i2c1.c: 401: {
 11834                           ;i2c1.c: 403: SSP1BUF = i2c_address;
 11835                           
 11836                           ;i2c1.c: 399: }
 11837                           
 11838                           ;i2c1.c: 398: i2c1_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 11839                           
 11840                           ;i2c1.c: 393: {
 11841                           ;i2c1.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 11842                           
 11843                           ;i2c1.c: 391: {
 11844                           ;i2c1.c: 392: if (0 == i2c_10bit_address_restart)
 11845                           
 11846                           ;i2c1.c: 387: }
 11847                           ;i2c1.c: 390: if(!1 && (0x0 != i2c_address))
 11848                           
 11849                           
 11850                           ;i2c1.c: 409: else
 11851                           ;i2c1.c: 410: {
 11852                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 11853  0464  0875               	movf	I2C1_ISR@i2c_address,w
 11854  0465  0023               	movlb	3	; select bank3
 11855  0466  008C               	movwf	12	;volatile
 11856                           
 11857                           ;i2c1.c: 413: if(i2c_address & 0x01)
 11858  0467  1C75               	btfss	I2C1_ISR@i2c_address,0
 11859  0468  2C6F               	goto	i1l3420
 11860                           
 11861                           ;i2c1.c: 414: {
 11862                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 11863  0469  3005               	movlw	5
 11864  046A  00F9               	movwf	??_I2C1_ISR
 11865  046B  0879               	movf	??_I2C1_ISR,w
 11866  046C  0020               	movlb	0	; select bank0
 11867  046D  00EF               	movwf	_i2c1_state
 11868                           
 11869                           ;i2c1.c: 417: }
 11870  046E  0008               	return
 11871  046F                     i1l3420:	
 11872                           
 11873                           ;i2c1.c: 418: else
 11874                           ;i2c1.c: 419: {
 11875                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 11876  046F  3003               	movlw	3
 11877  0470  00F9               	movwf	??_I2C1_ISR
 11878  0471  0879               	movf	??_I2C1_ISR,w
 11879  0472  0020               	movlb	0	; select bank0
 11880  0473  00EF               	movwf	_i2c1_state
 11881                           
 11882                           ;i2c1.c: 422: }
 11883                           ;i2c1.c: 423: }
 11884                           ;i2c1.c: 424: break;
 11885  0474  0008               	return
 11886  0475                     i1l314:	
 11887                           ;i2c1.c: 426: case S_MASTER_SEND_DATA:
 11888                           
 11889                           
 11890                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 11891  0475  0023               	movlb	3	; select bank3
 11892  0476  1F11               	btfss	17,6	;volatile
 11893  0477  2C83               	goto	i1l3428
 11894                           
 11895                           ;i2c1.c: 430: {
 11896                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 11897  0478  3001               	movlw	1
 11898  0479  00F9               	movwf	??_I2C1_ISR
 11899  047A  0879               	movf	??_I2C1_ISR,w
 11900  047B  0020               	movlb	0	; select bank0
 11901  047C  07EB               	addwf	_i2c1_object+4,f
 11902                           
 11903                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 11904  047D  0023               	movlb	3	; select bank3
 11905  047E  1311               	bcf	17,6	;volatile
 11906                           
 11907                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 11908  047F  3005               	movlw	5
 11909  0480  318A  222B         	fcall	_I2C1_Stop
 11910                           
 11911                           ;i2c1.c: 440: }
 11912  0482  0008               	return
 11913  0483                     i1l3428:	
 11914                           
 11915                           ;i2c1.c: 441: else
 11916                           ;i2c1.c: 442: {
 11917                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 11918  0483  3001               	movlw	1
 11919  0484  02F0               	subwf	I2C1_ISR@i2c_bytes_left,f
 11920  0485  0A70               	incf	I2C1_ISR@i2c_bytes_left,w
 11921  0486  1D03               	btfss	3,2
 11922  0487  2C9C               	goto	i1l3436
 11923                           
 11924                           ;i2c1.c: 445: {
 11925                           ;i2c1.c: 449: p_i2c1_trb_current++;
 11926  0488  3004               	movlw	4
 11927  0489  00F9               	movwf	??_I2C1_ISR
 11928  048A  0879               	movf	??_I2C1_ISR,w
 11929  048B  07F3               	addwf	_p_i2c1_trb_current,f
 11930                           
 11931                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 11932  048C  3001               	movlw	1
 11933  048D  02F4               	subwf	_i2c1_trb_count,f
 11934  048E  1D03               	btfss	3,2
 11935  048F  2C94               	goto	i1l318
 11936                           
 11937                           ;i2c1.c: 453: {
 11938                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 11939  0490  3000               	movlw	0
 11940  0491  318A  222B         	fcall	_I2C1_Stop
 11941                           
 11942                           ;i2c1.c: 455: }
 11943  0493  0008               	return
 11944  0494                     i1l318:	
 11945                           
 11946                           ;i2c1.c: 456: else
 11947                           ;i2c1.c: 457: {
 11948                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 11949  0494  0023               	movlb	3	; select bank3
 11950  0495  1491               	bsf	17,1	;volatile
 11951                           
 11952                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 11953  0496  3002               	movlw	2
 11954  0497  00F9               	movwf	??_I2C1_ISR
 11955  0498  0879               	movf	??_I2C1_ISR,w
 11956  0499  0020               	movlb	0	; select bank0
 11957  049A  00EF               	movwf	_i2c1_state
 11958                           
 11959                           ;i2c1.c: 469: }
 11960                           ;i2c1.c: 470: }
 11961  049B  0008               	return
 11962  049C                     i1l3436:	
 11963                           
 11964                           ;i2c1.c: 471: else
 11965                           ;i2c1.c: 472: {
 11966                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 11967  049C  0871               	movf	I2C1_ISR@pi2c_buf_ptr,w
 11968  049D  0086               	movwf	6
 11969  049E  0187               	clrf	7
 11970  049F  0801               	movf	1,w
 11971  04A0  0023               	movlb	3	; select bank3
 11972  04A1  008C               	movwf	12	;volatile
 11973  04A2  3001               	movlw	1
 11974  04A3  00F9               	movwf	??_I2C1_ISR
 11975  04A4  0879               	movf	??_I2C1_ISR,w
 11976  04A5  07F1               	addwf	I2C1_ISR@pi2c_buf_ptr,f
 11977                           
 11978                           ;i2c1.c: 475: }
 11979                           ;i2c1.c: 476: }
 11980                           ;i2c1.c: 477: break;
 11981  04A6  0008               	return
 11982  04A7                     i1l321:	
 11983                           ;i2c1.c: 479: case S_MASTER_ACK_ADDR:
 11984                           
 11985                           
 11986                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 11987  04A7  0023               	movlb	3	; select bank3
 11988  04A8  1F11               	btfss	17,6	;volatile
 11989  04A9  2CB5               	goto	i1l322
 11990                           
 11991                           ;i2c1.c: 483: {
 11992                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 11993  04AA  3001               	movlw	1
 11994  04AB  00F9               	movwf	??_I2C1_ISR
 11995  04AC  0879               	movf	??_I2C1_ISR,w
 11996  04AD  0020               	movlb	0	; select bank0
 11997  04AE  07EB               	addwf	_i2c1_object+4,f
 11998                           
 11999                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12000  04AF  3004               	movlw	4
 12001  04B0  318A  222B         	fcall	_I2C1_Stop
 12002                           
 12003                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 12004  04B2  0023               	movlb	3	; select bank3
 12005  04B3  1311               	bcf	17,6	;volatile
 12006                           
 12007                           ;i2c1.c: 493: }
 12008  04B4  0008               	return
 12009  04B5                     i1l322:	
 12010                           
 12011                           ;i2c1.c: 494: else
 12012                           ;i2c1.c: 495: {
 12013                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 12014  04B5  1591               	bsf	17,3	;volatile
 12015                           
 12016                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 12017  04B6  3008               	movlw	8
 12018  04B7  00F9               	movwf	??_I2C1_ISR
 12019  04B8  0879               	movf	??_I2C1_ISR,w
 12020  04B9  0020               	movlb	0	; select bank0
 12021  04BA  00EF               	movwf	_i2c1_state
 12022                           
 12023                           ;i2c1.c: 498: }
 12024                           ;i2c1.c: 499: break;
 12025  04BB  0008               	return
 12026  04BC                     i1l3448:	
 12027                           ;i2c1.c: 501: case S_MASTER_RCV_DATA:
 12028                           
 12029                           
 12030                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 12031  04BC  3008               	movlw	8
 12032  04BD  00F9               	movwf	??_I2C1_ISR
 12033  04BE  0879               	movf	??_I2C1_ISR,w
 12034  04BF  00EF               	movwf	_i2c1_state
 12035                           
 12036                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 12037  04C0  0023               	movlb	3	; select bank3
 12038  04C1  1591               	bsf	17,3	;volatile
 12039                           
 12040                           ;i2c1.c: 511: break;
 12041  04C2  0008               	return
 12042  04C3                     i1l3452:	
 12043                           ;i2c1.c: 513: case S_MASTER_ACK_RCV_DATA:
 12044                           
 12045                           
 12046                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 12047  04C3  0023               	movlb	3	; select bank3
 12048  04C4  080C               	movf	12,w	;volatile
 12049  04C5  00F9               	movwf	??_I2C1_ISR
 12050  04C6  0871               	movf	I2C1_ISR@pi2c_buf_ptr,w
 12051  04C7  0086               	movwf	6
 12052  04C8  0187               	clrf	7
 12053  04C9  0879               	movf	??_I2C1_ISR,w
 12054  04CA  0081               	movwf	1
 12055  04CB  3001               	movlw	1
 12056  04CC  00F9               	movwf	??_I2C1_ISR
 12057  04CD  0879               	movf	??_I2C1_ISR,w
 12058  04CE  07F1               	addwf	I2C1_ISR@pi2c_buf_ptr,f
 12059                           
 12060                           ;i2c1.c: 519: if(--i2c_bytes_left)
 12061  04CF  3001               	movlw	1
 12062  04D0  02F0               	subwf	I2C1_ISR@i2c_bytes_left,f
 12063  04D1  1903               	btfsc	3,2
 12064  04D2  2CDA               	goto	i1l326
 12065                           
 12066                           ;i2c1.c: 520: {
 12067                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 12068  04D3  1291               	bcf	17,5	;volatile
 12069                           
 12070                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 12071  04D4  3006               	movlw	6
 12072  04D5  00F9               	movwf	??_I2C1_ISR
 12073  04D6  0879               	movf	??_I2C1_ISR,w
 12074  04D7  0020               	movlb	0	; select bank0
 12075  04D8  00EF               	movwf	_i2c1_state
 12076                           
 12077                           ;i2c1.c: 530: }
 12078  04D9  2CDD               	goto	i1l3464
 12079  04DA                     i1l326:	
 12080                           
 12081                           ;i2c1.c: 531: else
 12082                           ;i2c1.c: 532: {
 12083                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 12084  04DA  1691               	bsf	17,5	;volatile
 12085                           
 12086                           ;i2c1.c: 538: I2C1_FunctionComplete();
 12087  04DB  3189  21C4         	fcall	_I2C1_FunctionComplete
 12088  04DD                     i1l3464:	
 12089                           
 12090                           ;i2c1.c: 539: }
 12091                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 12092  04DD  0023               	movlb	3	; select bank3
 12093  04DE  1611               	bsf	17,4	;volatile
 12094                           
 12095                           ;i2c1.c: 543: break;
 12096  04DF  0008               	return
 12097  04E0                     i1l3466:	
 12098                           ;i2c1.c: 545: case S_MASTER_RCV_STOP:
 12099                           
 12100                           
 12101                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 12102                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 12103  04E0  3000               	movlw	0
 12104  04E1  318A  222B         	fcall	_I2C1_Stop
 12105                           
 12106                           ;i2c1.c: 550: break;
 12107  04E3  0008               	return
 12108  04E4                     i1l3468:	
 12109                           ;i2c1.c: 552: default:
 12110                           
 12111                           
 12112                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 12113  04E4  3001               	movlw	1
 12114  04E5  00F9               	movwf	??_I2C1_ISR
 12115  04E6  0879               	movf	??_I2C1_ISR,w
 12116  04E7  0020               	movlb	0	; select bank0
 12117  04E8  07EB               	addwf	_i2c1_object+4,f
 12118                           
 12119                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 12120  04E9  3006               	movlw	6
 12121  04EA  318A  222B         	fcall	_I2C1_Stop
 12122                           
 12123                           ;i2c1.c: 560: }
 12124                           
 12125                           ;i2c1.c: 558: break;
 12126  04EC  0008               	return
 12127  04ED                     i1l3474:	
 12128  04ED  0020               	movlb	0	; select bank0
 12129  04EE  086F               	movf	_i2c1_state,w
 12130                           
 12131                           ; Switch size 1, requested type "space"
 12132                           ; Number of cases is 11, Range of values is 0 to 11
 12133                           ; switch strategies available:
 12134                           ; Name         Instructions Cycles
 12135                           ; direct_byte           30     6 (fixed)
 12136                           ; simple_byte           34    18 (average)
 12137                           ; jumptable            260     6 (fixed)
 12138                           ;	Chosen strategy is direct_byte
 12139  04EF  0084               	movwf	4
 12140  04F0  300C               	movlw	12
 12141  04F1  0204               	subwf	4,w
 12142  04F2  1803               	skipnc
 12143  04F3  2CE4               	goto	i1l3468
 12144  04F4  3188               	movlp	high i1S4636
 12145  04F5  3504               	lslf	4,w
 12146  04F6  3E00               	addlw	low i1S4636
 12147  04F7  0082               	movwf	2
 12148  04F8  0008               	return
 12149  04F9                     __end_of_I2C1_ISR:	
 12150                           
 12151                           	psect	swtext1
 12152  0800                     __pswtext1:	
 12153  0800                     i1S4636:	
 12154  0800  3183  2BD1         	ljmp	i1l292
 12155  0802  3183  2BFC         	ljmp	i1l297
 12156  0804  3184  2C50         	ljmp	i1l3394
 12157  0806  3184  2C75         	ljmp	i1l314
 12158  0808  3184  2CE0         	ljmp	i1l3466
 12159  080A  3184  2CA7         	ljmp	i1l321
 12160  080C  3184  2CBC         	ljmp	i1l3448
 12161  080E  3184  2CE0         	ljmp	i1l3466
 12162  0810  3184  2CC3         	ljmp	i1l3452
 12163  0812  3184  2CE4         	ljmp	i1l3468
 12164  0814  3184  2C04         	ljmp	i1l298
 12165  0816  3184  2C27         	ljmp	i1l303
 12166                           
 12167                           	psect	text36
 12168  0A2B                     __ptext36:	
 12169 ;; *************** function _I2C1_Stop *****************
 12170 ;; Defined at:
 12171 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;  completion_c    1    wreg     enum E14260
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;  completion_c    1    1[COMMON] enum E14260
 12176 ;; Return value:  Size  Location     Type
 12177 ;;                  1    wreg      void 
 12178 ;; Registers used:
 12179 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12180 ;; Tracked objects:
 12181 ;;		On entry : 0/0
 12182 ;;		On exit  : 0/0
 12183 ;;		Unchanged: 0/0
 12184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12189 ;;Total ram usage:        2 bytes
 12190 ;; Hardware stack levels used:    1
 12191 ;; This function calls:
 12192 ;;		Nothing
 12193 ;; This function is called by:
 12194 ;;		_I2C1_ISR
 12195 ;; This function uses a non-reentrant model
 12196 ;;
 12197                           
 12198                           
 12199                           ;psect for function _I2C1_Stop
 12200  0A2B                     _I2C1_Stop:	
 12201                           
 12202                           ;incstack = 0
 12203                           ; Regs used in _I2C1_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 12204                           ;I2C1_Stop@completion_code stored from wreg
 12205  0A2B  00F8               	movwf	I2C1_Stop@completion_code
 12206                           
 12207                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 12208  0A2C  0023               	movlb	3	; select bank3
 12209  0A2D  1511               	bsf	17,2	;volatile
 12210                           
 12211                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
 12212  0A2E  0872               	movf	_p_i2c1_current,w
 12213  0A2F  3E02               	addlw	2
 12214  0A30  0086               	movwf	6
 12215  0A31  0187               	clrf	7
 12216  0A32  0801               	movf	1,w
 12217  0A33  1903               	btfsc	3,2
 12218  0A34  2A40               	goto	i1l3102
 12219                           
 12220                           ;i2c1.c: 588: {
 12221                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
 12222  0A35  0878               	movf	I2C1_Stop@completion_code,w
 12223  0A36  00F7               	movwf	??_I2C1_Stop
 12224  0A37  0872               	movf	_p_i2c1_current,w
 12225  0A38  3E02               	addlw	2
 12226  0A39  0086               	movwf	6
 12227  0A3A  0187               	clrf	7
 12228  0A3B  0801               	movf	1,w
 12229  0A3C  0086               	movwf	6
 12230  0A3D  0187               	clrf	7
 12231  0A3E  0877               	movf	??_I2C1_Stop,w
 12232  0A3F  0081               	movwf	1
 12233  0A40                     i1l3102:	
 12234                           
 12235                           ;i2c1.c: 591: }
 12236                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 12237  0A40  0020               	movlb	0	; select bank0
 12238  0A41  01EF               	clrf	_i2c1_state
 12239  0A42  0008               	return
 12240  0A43                     __end_of_I2C1_Stop:	
 12241                           
 12242                           	psect	text37
 12243  09C4                     __ptext37:	
 12244 ;; *************** function _I2C1_FunctionComplete *****************
 12245 ;; Defined at:
 12246 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 12247 ;; Parameters:    Size  Location     Type
 12248 ;;		None
 12249 ;; Auto vars:     Size  Location     Type
 12250 ;;		None
 12251 ;; Return value:  Size  Location     Type
 12252 ;;                  1    wreg      void 
 12253 ;; Registers used:
 12254 ;;		wreg, status,2, status,0
 12255 ;; Tracked objects:
 12256 ;;		On entry : 0/0
 12257 ;;		On exit  : 0/0
 12258 ;;		Unchanged: 0/0
 12259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;Total ram usage:        1 bytes
 12265 ;; Hardware stack levels used:    1
 12266 ;; This function calls:
 12267 ;;		Nothing
 12268 ;; This function is called by:
 12269 ;;		_I2C1_ISR
 12270 ;; This function uses a non-reentrant model
 12271 ;;
 12272                           
 12273                           
 12274                           ;psect for function _I2C1_FunctionComplete
 12275  09C4                     _I2C1_FunctionComplete:	
 12276                           
 12277                           ;i2c1.c: 567: p_i2c1_trb_current++;
 12278                           
 12279                           ;incstack = 0
 12280                           ; Regs used in _I2C1_FunctionComplete: [wreg+status,2+status,0]
 12281  09C4  3004               	movlw	4
 12282  09C5  00F7               	movwf	??_I2C1_FunctionComplete
 12283  09C6  0877               	movf	??_I2C1_FunctionComplete,w
 12284  09C7  07F3               	addwf	_p_i2c1_trb_current,f
 12285                           
 12286                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 12287  09C8  3001               	movlw	1
 12288  09C9  02F4               	subwf	_i2c1_trb_count,f
 12289  09CA  1D03               	btfss	3,2
 12290  09CB  29D2               	goto	i1l333
 12291                           
 12292                           ;i2c1.c: 571: {
 12293                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 12294  09CC  3004               	movlw	4
 12295  09CD  00F7               	movwf	??_I2C1_FunctionComplete
 12296  09CE  0877               	movf	??_I2C1_FunctionComplete,w
 12297  09CF  0020               	movlb	0	; select bank0
 12298  09D0  00EF               	movwf	_i2c1_state
 12299                           
 12300                           ;i2c1.c: 573: }
 12301  09D1  0008               	return
 12302  09D2                     i1l333:	
 12303                           
 12304                           ;i2c1.c: 574: else
 12305                           ;i2c1.c: 575: {
 12306                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 12307  09D2  0020               	movlb	0	; select bank0
 12308  09D3  01EF               	clrf	_i2c1_state
 12309  09D4  0AEF               	incf	_i2c1_state,f
 12310  09D5  0008               	return
 12311  09D6                     __end_of_I2C1_FunctionComplete:	
 12312                           
 12313                           	psect	text38
 12314  07FF                     __ptext38:	
 12315 ;; *************** function _I2C1_BusCollisionISR *****************
 12316 ;; Defined at:
 12317 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 12318 ;; Parameters:    Size  Location     Type
 12319 ;;		None
 12320 ;; Auto vars:     Size  Location     Type
 12321 ;;		None
 12322 ;; Return value:  Size  Location     Type
 12323 ;;                  1    wreg      void 
 12324 ;; Registers used:
 12325 ;;		None
 12326 ;; Tracked objects:
 12327 ;;		On entry : 0/0
 12328 ;;		On exit  : 0/0
 12329 ;;		Unchanged: 0/0
 12330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;Total ram usage:        0 bytes
 12336 ;; Hardware stack levels used:    1
 12337 ;; This function calls:
 12338 ;;		Nothing
 12339 ;; This function is called by:
 12340 ;;		_INTERRUPT_InterruptManager
 12341 ;; This function uses a non-reentrant model
 12342 ;;
 12343                           
 12344                           
 12345                           ;psect for function _I2C1_BusCollisionISR
 12346  07FF                     _I2C1_BusCollisionISR:	
 12347                           
 12348                           ;incstack = 0
 12349                           ; Regs used in _I2C1_BusCollisionISR: []
 12350  07FF  0008               	return
 12351  0800                     __end_of_I2C1_BusCollisionISR:	
 12352  007E                     btemp	set	126	;btemp
 12353  007E                     int$flags	set	126
 12354  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    49
    Data        20
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     71      80
    BANK1            80     20      76
    BANK2            80      0      36
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    MYI2C_ReadFaders@readTRB.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    MYI2C_ReadPatch@readTRB.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    MYI2C_Write16EEPROMBytes@pData	PTR unsigned char  size(2) Largest target is 128
		 -> aPatchMemory(BIGRAM[128]), 

    updateModelFromPatchMemory@dualADSRdata1	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata1(BANK2[8]), 

    updateModelFromPatchMemory@dualADSRdata0	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata0(BANK2[8]), 

    updateModelFromPatchMemory@mvcChannels	PTR unsigned char  size(1) Largest target is 4
		 -> mvcChannels(BANK1[4]), 

    marshallPatchMemory@dualADSRdata1	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata1(BANK2[8]), 

    marshallPatchMemory@dualADSRdata0	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata0(BANK2[8]), 

    marshallPatchMemory@mvcChannels	PTR unsigned char  size(1) Largest target is 4
		 -> mvcChannels(BANK1[4]), 

    savePatch@pData	PTR unsigned char  size(2) Largest target is 128
		 -> aPatchMemory(BIGRAM[128]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), 
		 -> MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E14260 size(1) Largest target is 1
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> MYI2C_ReadFaders@status(COMMON[1]), 

    F14372.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWrite@pflag	PTR enum E14260 size(1) Largest target is 1
		 -> MYI2C_Write16EEPROMBytes@status(BANK0[1]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@status(COMMON[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), 

    F14367.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_trb_current	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 
		 -> NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    S374$pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_current.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    S386$pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_current.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    S386$ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    p_i2c1_current.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    p_i2c1_current	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S397$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    i2c1_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    S397$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    i2c1_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_savePatch
    _savePatch->_MYI2C_Write16EEPROMBytes
    _MYI2C_Write16EEPROMBytes->_I2C1_MasterWrite
    _loadPatch->_writeDAC528
    _writeDAC528->_putByte
    _initDAC528->_putByte
    _putByte->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _blinkyLoop->_MYI2C_Write2LEDBytes
    _MYI2C_Write2LEDBytes->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_I2C1_Initialize
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _LED7SegDisplayValueByDigit->_LED7SegShiftOutPulseClock
    _LED7SegPulseClock->_delay
    _delay->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   35374
                                             67 BANK0      4     4      0
                                              0 BANK1     20    20      0
           _ADCC_GetSingleConversion
                _InitPanelInChannels
                    _InitmvcChannels
         _LED7SegDisplayValueByDigit
                       _LED7SegSetup
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                             ___wmul
                         _blinkyLoop
                              _delay
                         _initDAC528
                          _loadPatch
                          _savePatch
                        _writeDAC528
 ---------------------------------------------------------------------------------
 (1) _savePatch                                           15    13      2    3617
                                             52 BANK0     15    13      2
           _MYI2C_Write16EEPROMBytes
                _marshallPatchMemory
 ---------------------------------------------------------------------------------
 (2) _marshallPatchMemory                                 17    15      2     540
                                              0 BANK0     17    15      2
 ---------------------------------------------------------------------------------
 (2) _MYI2C_Write16EEPROMBytes                            38    34      4    2840
                                             14 BANK0     38    34      4
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (1) _loadPatch                                           12    10      2    6209
                                             58 BANK0      8     6      2
         _updateModelFromPatchMemory
                        _writeDAC528
 ---------------------------------------------------------------------------------
 (1) _writeDAC528                                          5     2      3    5548
                                             53 BANK0      5     2      3
                            _putByte
 ---------------------------------------------------------------------------------
 (2) _updateModelFromPatchMemory                          15    13      2     495
                                              0 BANK0     15    13      2
 ---------------------------------------------------------------------------------
 (1) _initDAC528                                           1     1      0    5268
                                             53 BANK0      1     1      0
                            _putByte
 ---------------------------------------------------------------------------------
 (2) _putByte                                              9     7      2    5268
                                             44 BANK0      9     7      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     623
                                             30 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2027
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _blinkyLoop                                           8     6      2    4718
                                             32 BANK0      8     6      2
               _MYI2C_Write2LEDBytes
                             ___wmul
                              _delay
 ---------------------------------------------------------------------------------
 (2) _MYI2C_Write2LEDBytes                                20    18      2    2781
                                             14 BANK0     18    16      2
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterWrite                                     7     3      4    2100
                                              7 BANK0      7     3      4
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterWriteTRBBuild                             7     3      4     690
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterTRBInsert                                 4     2      2     556
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2163
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1671
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      34
                    _ADCC_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED7SegSetup                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED7SegDisplayValueByDigit                           6     2      4    1807
                                             20 BANK0      6     2      4
          _LED7SegShiftOutPulseClock
 ---------------------------------------------------------------------------------
 (2) _LED7SegShiftOutPulseClock                            3     3      0    1343
                                             17 BANK0      3     3      0
                    _LED7SegPinWrite
                  _LED7SegPulseClock
 ---------------------------------------------------------------------------------
 (3) _LED7SegPulseClock                                    0     0      0    1182
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                               11     9      2    1182
                                              6 BANK0     11     9      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     526
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _LED7SegPinWrite                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitmvcChannels                                      3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitPanelInChannels                                  3     3      0      90
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADCC_GetSingleConversion                             4     1      3      31
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      22
                                              6 COMMON     1     1      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (7) _I2C1_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C1_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _I2C1_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCC_GetSingleConversion
   _InitPanelInChannels
   _InitmvcChannels
   _LED7SegDisplayValueByDigit
     _LED7SegShiftOutPulseClock
       _LED7SegPinWrite
       _LED7SegPulseClock
         _delay
           ___wmul
   _LED7SegSetup
   _SYSTEM_Initialize
     _ADCC_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___wmul
   _blinkyLoop
     _MYI2C_Write2LEDBytes
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     ___wmul
     _delay
       ___wmul
   _delay
     ___wmul
   _initDAC528
     _putByte
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _loadPatch
     _updateModelFromPatchMemory
     _writeDAC528
       _putByte
         ___awtoft
           ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _savePatch
     _MYI2C_Write16EEPROMBytes
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     _marshallPatchMemory
   _writeDAC528
     _putByte
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     14      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      24       9       45.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      CE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      CE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Aug 29 07:34:07 2018

                                         _b 00AF                                           _c 00B7  
                                         _d 00AC                                           _e 00B5  
                                         pc 0002                                 __CFG_CP$OFF 0000  
              __end_of_cPointerByteWriteLED 102F                  __size_of_LED7SegPulseClock 000B  
                       ___wmul@multiplicand 0022                                         l163 09DF  
                                       l504 0C68                                         l523 0110  
                                       l621 0C99                                         l526 01A7  
                                       l711 097D                                         l833 0EDF  
                                       l950 0A80                                         l775 05CB  
                                       _GIE 005F                                __CFG_CPD$OFF 0000  
                       _marshallPatchMemory 04F9                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_LVP$OFF 0000  
                          ?_InitmvcChannels 0077                                __CFG_ZCD$OFF 0000  
                              ___ftdiv@cntr 0038                            __end_of_I2C1_ISR 04F9  
                              ___ftdiv@sign 003D                                        l1111 0D12  
                                      l1202 0EAD                                        l1118 0D25  
                                      l1119 0D2D                                        l3122 0CC5  
                                      l3230 0F07                                        l3136 0CAF  
                                      l3138 0CD7                                        l3226 0EF8  
                                      l3170 0536                                        l3162 050A  
                                      l3244 0F33                                        l3260 0F2A  
                                      l3262 0F59                                        l3246 0F47  
                                      l3238 0F27                                        l3190 057C  
                                      l3280 0F9F                                        l3184 056F  
                                      l3176 0543                                        l2810 0CFE  
                                      l2802 0CE8                                        l3274 0F72  
                                      l2900 06E2                                        l3612 0D69  
                                      l2806 0CEF                                        l3294 0FD4  
                                      l3286 0FAC                                        l3198 05A8  
                                      l2816 0D17                                        l2808 0CF9  
                                      l2912 06FE                                        l2904 06EA  
                                      l4194 0A7A                                        l2818 0D1F  
                                      l2842 0C19                                        l4354 0DCD  
                                      l3716 07B5                                        l3708 079C  
                                      l2852 0C2C                                        l4356 0E23  
                                      l2916 0706                                        l2932 0E59  
                                      l4374 0B40                                        l2846 0C20  
                                      l2950 0E89                                        l4542 035F  
                                      l4526 02F4                                        l4518 02D4  
                                      l4438 0090                                        l4384 0B5C  
                                      l2848 0C25                                        l2872 0AF8  
                                      l2960 0EB0                                        l2952 0E97  
                                      l4560 03AA                                        l4448 00D9  
                                      l4378 0B4B                                        l2882 0691  
                                      l4490 01D1                                        l4458 00F5  
                                      l2972 07F8                                        l2964 0EBE  
                                      l4548 0372                                        l4468 011F  
                                      l3694 075B                                        l2958 0EA4  
                                      l2990 0614                                        l3688 0745  
                                      l2888 06A7                                        l2992 0618  
                                      l4498 01FC               __size_of_MYI2C_Write2LEDBytes 005A  
                                      u2015 0D0D                                        u2035 0D1A  
                                      u3005 0A4F                                        u2205 06C3  
                                      _LATA 0016                                        _LATB 0017  
                                      _LATC 0018                                        u2225 06EB  
                                      u2305 0E60                                        u3105 0D7F  
                                      u2075 0D34                                        u2235 06F1  
                                      u4005 0A86                                        u2414 05D5  
                                      u2335 0E8A                                        u2415 05D4  
                                      u4033 0C7A                                        u4025 0C5D  
                                      u3225 076D                                        u2265 0707  
                                      u3065 0BB2                                        u4050 0BAA  
                                      u3235 077D                                        u4115 0DD7  
                                      u2275 070D                                        u2195 06B3  
                                      u3075 0BD2                                        u3245 079D  
                                      u2365 0EA5                                        u2605 05B2  
                                      u4205 0180                                        u3255 07AC  
                                      u2535 0C9F                                        u3095 0D4A  
                                      u4215 019C                                        u3265 07B6  
                                      u2545 0508                                        u4305 0385  
                                      u2715 0EE5                                        u2635 0F05  
                                      u2555 0534                                        u4315 03B6  
                                      u4235 01FA                                        u4084 0A9F  
                                      u4085 0A9E                                        u2725 0F70  
                                      u2645 0F25                                        u4165 008E  
                                      u2735 0F9D                                        u4407 0130  
                                      u4175 00D7                                        u4417 01E5  
                                      u4185 010C                                        u4275 033A  
                                      u4427 0200                                        u4195 011D  
                                      u4285 036B                                        u4437 0215  
                                      u4447 0267                                        u4457 027C  
                                      u1995 0CF4                                        u4467 0357  
                                      u4477 03A2                                        u4487 0DB2  
                                      u2985 0ABB                                        u3995 0A81  
                                      _WPUA 0F39                                        _WPUB 0F44  
                                      _WPUC 0F4F                                        _WPUE 0F65  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      _main 0064                                ___ftpack@arg 0020  
                              ___ftpack@exp 0023                  MYI2C_Write2LEDBytes@nCount 0034  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      _twoK 101E                      ??_I2C1_MasterTRBInsert 0022  
                                      btemp 007E                                main@iCounter 00D9  
      LED7SegDisplayValueByDigit@iTensDigit 0034                               __CFG_BOREN$ON 0000  
                   __end_of_LED7SegPinWrite 097F                                        start 0020  
                      ?_marshallPatchMemory 0020                                 _writeDAC528 0B0F  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                              ___ftmul@cntr 003C                  MYI2C_Write2LEDBytes@status 003F  
                              ___ftmul@sign 003D              I2C1_MasterWriteTRBBuild@length 0021  
                              ___fttol@exp1 004B                                ___fttol@lval 0047  
        __end_of_updateModelFromPatchMemory 1000                  _updateModelFromPatchMemory 0F61  
    MYI2C_Write2LEDBytes@slaveDeviceAddress 0036                                  _i2c1_state 006F  
            __size_of_OSCILLATOR_Initialize 0009                   I2C1_MasterTRBInsert@count 0023  
             __end_of_OSCILLATOR_Initialize 0988                   I2C1_MasterTRBInsert@pflag 0021  
                                     _ADACQ 009D                                       _ADACT 0099  
                                     _ADCAP 009B                                       ?_main 0077  
                                     _ADCLK 0098                                       _ADCNT 010C  
                                     _ADPCH 009E                                       _ADREF 009A  
                         __end_of_I2C1_Stop 0A43                                       _ADPRE 009C  
                             __CFG_WDTE$OFF 0000                                       _ADRPT 010D  
                           __end_of___ftdiv 07D7                             __end_of___ftmul 072E  
                           __end_of___fttol 0EC7                              __CFG_DEBUG$OFF 0000  
                                     i1l303 0427                                       i1l304 0433  
                                     i1l321 04A7                                       i1l322 04B5  
                                     i1l314 0475                                       i1l333 09D2  
                                     i1l326 04DA                                       i1l318 0494  
                                     i1l292 03D1                                       i1l297 03FC  
                                     i1l298 0404                                       i1l394 0013  
                                     i1l398 001B                                       _OSCEN 0891  
                                     _PORTB 000D                                       _PORTC 000E  
                                     _TRISA 0011                                       _TRISB 0012  
                                     _TRISC 0013                             __end_of_datapin 1024  
              __end_of_I2C1_BusCollisionISR 0800                           ??_I2C1_Initialize 0020  
           __end_of_cPointerByteWriteFaders 1031                               ___awtoft@sign 002D  
                                     _delay 0C32                               ___ftpack@sign 0024  
                                     _speed 1020                           savePatch@batchNum 005F  
                           __end_of_putByte 067A                                       status 0003  
                                     wtemp0 007E                 MYI2C_Write2LEDBytes@counter 0037  
                     ??_marshallPatchMemory 0022             I2C1_MasterWriteTRBBuild@address 0022  
               MYI2C_Write2LEDBytes@timeOut 0039                                  _iLEDs0_LSB 00C0  
                                _iLEDs0_MSB 006C                                  _iLEDs1_LSB 00BE  
                                _iLEDs1_MSB 00BF                        __end_of_LED7SegSetup 09C4  
                           __initialization 0022                       I2C1_MasterWrite@pdata 002D  
                     I2C1_MasterWrite@pflag 002A                                __end_of_main 03BE  
                              __end_of_twoK 1020            __end_of_MYI2C_Write16EEPROMBytes 0F61  
               ?_INTERRUPT_InterruptManager 0077                         _lineSettleMicroTime 101A  
                            _iI2CFaderValue 00C1                                 _i2c1_object 0067  
                                    ??_main 0063                               ___fttol@sign1 0046  
               ??_LED7SegShiftOutPulseClock 0031                             putByte@clockPin 004C  
     LED7SegDisplayValueByDigit@iUnitsDigit 0036                   savePatch@iPatchAddressLow 005A  
                                    ?_delay 0026                                      _ADACCH 0091  
                                    _ADACCL 0090                                      _ADCON0 0093  
                                    _ADCON1 0094                                      _ADCON2 0095  
                                    _ADCON3 0096                                      _ADERRH 0117  
                                    _ADERRL 0116                                      i1S4636 0800  
                                    _ADLTHH 010F                                      _ADLTHL 010E  
                                    _ADRESH 008D                                      _ADRESL 008C  
                                    _ADSTAT 0097                                      _ADUTHH 0111  
                                    _ADUTHL 0110                            __end_of___awtoft 0B0F  
                                    _ANSELA 0F38                                      _ANSELB 0F43  
                                    _ANSELC 0F4E                            __end_of___ftpack 0D44  
                        __CFG_RSTOSC$HFINT1 0000                                      _RC3PPS 0F23  
                                    _RC4PPS 0F24                                      i1l3102 0A40  
                                    _ODCONA 0F3A                                      _ODCONB 0F45  
                                    _ODCONC 0F50                                      i1l3420 046F  
                                    i1l3414 0464                                      i1l3362 03EF  
                                    i1l3452 04C3                                      i1l3436 049C  
                                    i1l3428 0483                                      i1l3380 0421  
                                    i1l3374 0410                                      i1l3464 04DD  
                                    i1l3448 04BC                                      i1l3466 04E0  
                                    i1l3394 0450                                      i1l3474 04ED  
                                    i1l3468 04E4                              __CFG_WDTCCS$SC 0000  
       MYI2C_Write16EEPROMBytes@pointerByte 004C                        _cPointerByteWriteLED 102E  
                                    _OSCFRQ 0893                           ?_I2C1_MasterWrite 0027  
                     main@SaveDebounceCount 00E3                            ?_LED7SegPinWrite 0077  
                            __CFG_PWRTE$OFF 0000        MYI2C_Write16EEPROMBytes@writeAddress 002E  
                       __end_of_MvcMaxValue 1016                            __end_of_clockpin 1026  
                        ??_I2C1_MasterWrite 002B                         __end_of_MvcMinValue 1018  
                            _p_i2c1_current 0072                            __end_of_maxBanks 1012  
                                    ___wmul 0A77                              __CFG_STVREN$ON 0000  
                                 ??___ftdiv 0034                                   ??___ftmul 0034  
                                 ??___fttol 0042                            __end_of_latchpin 1028  
                ??_I2C1_MasterWriteTRBBuild 0024                                   ?_I2C1_ISR 0077  
                                    _wkByte 00BB                                      main@fx 00E6  
                     ___ftmul@f3_as_product 0039                             _ADCC_Initialize 0A5C  
                                 ??_putByte 004E           __size_of_ADCC_GetSingleConversion 0014  
                 ?_ADCC_GetSingleConversion 0020               I2C1_MasterWriteTRBBuild@pdata 0020  
                         _SYSTEM_Initialize 0993                   _LED7SegShiftOutPulseClock 0A93  
                   __end_of__initialization 0060                          ?_SYSTEM_Initialize 0077  
                                ___ftdiv@f1 0031                                  ___ftdiv@f2 002E  
                                ___ftdiv@f3 0039                              _i2c1_trb_count 0074  
                                ___awtoft@c 0028                                  ___ftmul@f1 002E  
                                ___ftmul@f2 0031                       _I2C1_FunctionComplete 09C4  
                      _I2C1_BusCollisionISR 07FF                                  ___fttol@f1 003E  
                            __pcstackCOMMON 0077                      I2C1_MasterWrite@length 0027  
                              __pidataBANK2 09EA                         ??_SYSTEM_Initialize 0021  
                             __end_of_delay 0C85                              main@faderValue 00E8  
                             __end_of_speed 1022                                  ??_I2C1_ISR 0079  
     updateModelFromPatchMemory@mvcChannels 0026                    _MYI2C_Write16EEPROMBytes 0EC7  
                        main@fader8bitValue 00E5                                     ??_delay 0028  
                 __end_of_SYSTEM_Initialize 099F         MYI2C_Write16EEPROMBytes@writeBuffer 0036  
                          InitmvcChannels@i 0021                  __end_of_i2c_addr_dualADSR0 102E  
                __end_of_i2c_addr_dualADSR1 102D                                  __pbssBANK0 0067  
                                __pbssBANK1 00A0                                  __pbssBANK2 0134  
                               _MvcMaxValue 1014                          __size_of_loadPatch 0040  
                               _MvcMinValue 1016                       __size_of_LED7SegSetup 000D  
                    savePatch@iPatchAddress 0061                  LED7SegShiftOutPulseClock@i 0033  
                              ?_writeDAC528 0055                       ?_I2C1_BusCollisionISR 0077  
                            _SSP1DATPPSbits 0EC6                                  __pmaintext 0064  
              __size_of_InitPanelInChannels 001E                                     ?___wmul 0020  
              __end_of_MYI2C_Write2LEDBytes 0CDF                             __CFG_PPS1WAY$ON 0000  
                   __end_of_ADCC_Initialize 0A77                          __size_of_savePatch 0079  
                                __pintentry 0004                             _I2C1_Initialize 0A14  
                                   _ADFLTRH 0115                 ?_updateModelFromPatchMemory 0020  
                                   _ADFLTRL 0114                                  _blinkyLoop 0DBD  
                                   _ADPREVH 008F                                     _ADPREVL 008E  
                                 ?___awtoft 0028                                   ?___ftpack 0020  
                                   _ADSTPTH 0113                                     _ADSTPTL 0112  
                            _SSP1CLKPPSbits 0EC5                                     _OSCCON1 088D  
                                   _OSCCON3 088F                                   _I2C1_Stop 0A2B  
                                   _OSCTUNE 0892                                _LED7SegSetup 09B7  
                     main@LoadDebounceCount 00E1                                     _SSP1ADD 018D  
                                   _PPSLOCK 0E8F                                     _SSP1BUF 018C  
            marshallPatchMemory@mvcChannels 0028             MYI2C_Write2LEDBytes@pointerByte 003B  
                                _initDAC528 09FE                              main@readStatus 00D8  
             I2C1_MasterTRBInsert@ptrb_list 0020                         __end_of_cPowerOfTwo 1010  
                                _maxPatches 1012                    __size_of_InitmvcChannels 0019  
                    ?_I2C1_FunctionComplete 0077               __size_of_I2C1_MasterTRBInsert 0046  
                        _p_i2c1_trb_current 0073                             _PanelInChannels 00A4  
                      __CFG_SCANE$available 0000                                     ___ftdiv 072E  
                           __size_of___wmul 001C                                     ___ftmul 067A  
                                   ___fttol 0E40                          writeDAC528@dacData 0057  
        marshallPatchMemory@iPatchMemoryNDX 002F                                  ??___awtoft 002B  
                                ??___ftpack 0025                                     _datapin 1022  
                                   __ptext1 0D44                                     __ptext2 04F9  
                                   __ptext3 0EC7                                     __ptext4 0BAC  
                                   __ptext5 0B0F                                     __ptext6 0F61  
                                   __ptext7 09FE                                     __ptext8 05C5  
                                   __ptext9 0E40                           __end_of_loadPatch 0BEC  
                     _OSCILLATOR_Initialize 097F                                     _wkFloat 00B2  
                                   _segdisp 0120                    ??_PIN_MANAGER_Initialize 0020  
                      loadPatch@PatchNumber 005A                                  ?_I2C1_Stop 0077  
                                   _putByte 05C5                  __size_of_SYSTEM_Initialize 000C  
                      I2C1_ISR@pi2c_buf_ptr 0071                                     clrloop0 09A0  
                         __end_of_savePatch 0DBD                 __end_of_marshallPatchMemory 05C5  
                      end_of_initialization 0060                ??_LED7SegDisplayValueByDigit 0038  
                                   init_ram 09AB                                     initloop 09AC  
 updateModelFromPatchMemory@iPatchMemoryNDX 002B                      ??_I2C1_BusCollisionISR 0077  
                   __end_of_I2C1_Initialize 0A2B                           __end_of_toggleDly 101E  
                   _cPointerByteWriteFaders 1030            marshallPatchMemory@dualADSRdata0 0020  
          marshallPatchMemory@dualADSRdata1 0021                            ?_ADCC_Initialize 0077  
          __end_of_ADCC_GetSingleConversion 09EA   MYI2C_Write16EEPROMBytes@iPatchAddressHigh 004E  
                               ?_blinkyLoop 0040                       __CFG_WDTCPS$WDTCPS_31 0000  
                                 _PORTBbits 000D                   __size_of_I2C1_MasterWrite 0028  
                         __size_of_I2C1_ISR 013B         __size_of_LED7SegDisplayValueByDigit 0039  
                                 _MY_CONSTS 006D                                   _TRISCbits 0013  
           MYI2C_Write2LEDBytes@writeBuffer 003C                                 _cPowerOfTwo 1000  
                          __CFG_FEXTOSC$OFF 0000                                 putByte@data 0052  
                           main@iResetValue 1028                                 ?_initDAC528 0077  
                               putByte@mask 0053                        _MYI2C_Write2LEDBytes 0C85  
         I2C1_ISR@i2c_10bit_address_restart 006E                   marshallPatchMemory@i_1221 002B  
                 marshallPatchMemory@i_1222 002D                                  main@fx_978 00EA  
                               ___ftdiv@exp 003C                     I2C1_MasterWrite@address 0028  
                               ___ftmul@exp 0038                  ??_MYI2C_Write16EEPROMBytes 0032  
                      __size_of_writeDAC528 0025     updateModelFromPatchMemory@dualADSRdata0 0020  
   updateModelFromPatchMemory@dualADSRdata1 0021                      delay@adjustedDelaytime 0029  
                         ??_InitmvcChannels 0020                    __size_of_LED7SegPinWrite 0009  
                            __end_of___wmul 0A93                     I2C1_MasterWrite@trBlock 00D1  
                  I2C1_Stop@completion_code 0078                      ?_OSCILLATOR_Initialize 0077  
                            _clockMicroTime 1018                 __end_of_lineSettleMicroTime 101C  
                       start_initialization 0022                                 ??_I2C1_Stop 0077  
           __size_of_PIN_MANAGER_Initialize 003F                         _InitPanelInChannels 0AAF  
                     ?_MYI2C_Write2LEDBytes 002E           __size_of_I2C1_MasterWriteTRBBuild 0020  
                 ?_I2C1_MasterWriteTRBBuild 0020                                  loadPatch@i 0060  
                       __size_of_blinkyLoop 0083                      _cPointerByteReadFaders 102F  
                          ?_I2C1_Initialize 0077                            __CFG_LPBOREN$OFF 0000  
                      savePatch@PatchNumber 0054                        ?_InitPanelInChannels 0077  
                        _i2c_addr_dualADSR0 102D                          _i2c_addr_dualADSR1 102C  
                                  ??___wmul 0024                                 __pdataBANK2 0120  
                    __end_of_clockMicroTime 101A                         __size_of_initDAC528 0016  
              I2C1_MasterWriteTRBBuild@ptrb 0026                           __size_of___awtoft 0022  
                  _ADCC_GetSingleConversion 09D6                           __size_of___ftpack 0065  
                               __pbssBIGRAM 2370                     __end_ofmain@iResetValue 102A  
                               __pbssCOMMON 0070                                   ___latbits 0002  
                             __pcstackBANK0 0020                               __pcstackBANK1 00D8  
          MYI2C_Write2LEDBytes@LSBWriteByte 002F                               _i2c1_tr_queue 00D5  
                       blinkyLoop@delayTime 0044          __end_of_LED7SegDisplayValueByDigit 0B6D  
                _LED7SegDisplayValueByDigit 0B34                      loadPatch@iPatchAddress 005E  
                      writeDAC528@dacNumber 0055                     ??_I2C1_FunctionComplete 0077  
             MYI2C_Write16EEPROMBytes@pData 0030                      _PIN_MANAGER_Initialize 0B6D  
          MYI2C_Write2LEDBytes@MSBWriteByte 002E                       ??_InitPanelInChannels 0020  
           ADCC_GetSingleConversion@channel 0023                                    ?___ftdiv 002E  
                                  ?___ftmul 002E                                    ?___fttol 003E  
                                  _I2C1_ISR 03BE                ??_INTERRUPT_InterruptManager 007D  
                      marshallPatchMemory@i 0029                                   __pswtext1 0800  
                          _I2C1_MasterWrite 07D7                          LED7SegPinWrite@val 0020  
                              savePatch@idx 005D                __end_of_I2C1_MasterTRBInsert 0C32  
                    main@prevFader8bitValue 00DC                           ??_LED7SegPinWrite 0020  
                       blinkyLoop@loopCount 0046                                   _loadPatch 0BAC  
                                  ?_putByte 004C                      ??_MYI2C_Write2LEDBytes 0030  
                              _wkFaderValue 00BD                              __size_of_delay 0053  
                              delay@counter 002D                      I2C1_MasterRead@trBlock 00CD  
                            ___wmul@product 0024                            main@iChangeCount 00DB  
                                  _LATCbits 0018                                   _savePatch 0D44  
                                 clear_ram0 099F                                    _PIE3bits 0719  
       __size_of_INTERRUPT_InterruptManager 001C                                    _PIR3bits 070F  
       LED7SegDisplayValueByDigit@iTensCode 0038                                    _SSP1CON1 0190  
                                  _SSP1CON3 0192    MYI2C_Write16EEPROMBytes@iPatchAddressLow 0047  
                                  _SSP1STAT 018F                                ??_blinkyLoop 0042  
                                 _toggleDly 101C                                  _ADCON0bits 0093  
                                _ADCON1bits 0094                                  _ADCON2bits 0095  
                                _ADCON3bits 0096                           ___wmul@multiplier 0020  
                             _dualADSRdata0 013C                               _dualADSRdata1 0134  
                            savePatch@pData 005B                                  ?_loadPatch 005A  
               updateModelFromPatchMemory@i 002D                                ??_initDAC528 0055  
                           _faderActiveFlag 00A8  MYI2C_Write16EEPROMBytes@slaveDeviceAddress 004D  
                        __end_of_blinkyLoop 0E40                             _InitmvcChannels 0A43  
                                ?_savePatch 0054                                  _ADSTATbits 0097  
              __size_of_marshallPatchMemory 00CC                                _aPatchMemory 2370  
             __size_of_I2C1_BusCollisionISR 0001                      I2C1_ISR@i2c_bytes_left 0070  
                   ??_OSCILLATOR_Initialize 0020                              delay@delaytime 0026  
                          __size_of___ftdiv 00A9                            __size_of___ftmul 00B4  
                          __size_of___fttol 0087                                    ___awtoft 0AED  
                                  ___ftpack 0CDF            __end_of_I2C1_MasterWriteTRBBuild 0AED  
                        __end_of_initDAC528 0A14                           _LED7SegPulseClock 0988  
                                _ANSELCbits 0F4E                          ?_LED7SegPulseClock 0077  
                  __size_of_ADCC_Initialize 001B                          __end_of_maxPatches 1014  
                       I2C1_ISR@i2c_address 0075                                    __ptext10 067A  
                                  __ptext11 0AED                                    __ptext20 0B6D  
                                  __ptext12 0DBD                                    __ptext21 097F  
                                  __ptext13 0C85                                    __ptext30 0976  
                                  __ptext22 0A14                                    __ptext14 07D7  
                                  __ptext31 0A43                                    __ptext23 0A5C  
                                  __ptext15 0ACD                                    __ptext32 0AAF  
                                  __ptext24 09B7                                    __ptext16 0BEC  
                                  __ptext33 09D6                                    __ptext25 0B34  
                                  __ptext17 072E                                    __ptext26 0A93  
                                  __ptext18 0CDF                                    __ptext35 03BE  
                                  __ptext27 0988                                    __ptext19 0993  
                                  __ptext36 0A2B                                    __ptext28 0C32  
                                  __ptext37 09C4                                    __ptext29 0A77  
                                  __ptext38 07FF                          blinkyLoop@maxLoops 0040  
                              _SSP1CON1bits 0190                                _SSP1CON2bits 0191  
           MYI2C_Write16EEPROMBytes@counter 004F                                    _clockpin 1024  
                               _mvcChannels 00C9                            __size_of_putByte 00B5  
                                  _maxBanks 1010                         ??_LED7SegPulseClock 0031  
                                  _wkMIDICC 00BC             MYI2C_Write16EEPROMBytes@timeOut 004A  
                                  _latchpin 1026                               __size_of_main 035A  
                      InitPanelInChannels@i 0021                               ??_writeDAC528 0058  
                      __CFG_WDTCWS$WDTCWS_7 0000                        _I2C1_MasterTRBInsert 0BEC  
                    writeDAC528@wkDacNumber 0059                  ??_ADCC_GetSingleConversion 0023  
                                  int$flags 007E          __end_of_INTERRUPT_InterruptManager 0020  
                _INTERRUPT_InterruptManager 0004                   __end_of_LED7SegPulseClock 0993  
        __size_of_LED7SegShiftOutPulseClock 001C                ??_updateModelFromPatchMemory 0022  
                ?_LED7SegShiftOutPulseClock 0077                 PIN_MANAGER_Initialize@state 0020  
              LED7SegShiftOutPulseClock@val 0032                              _cMstrClkAdjust 102A  
                                _INTCONbits 000B           __size_of_MYI2C_Write16EEPROMBytes 009A  
                               ??_loadPatch 005C                   ?_MYI2C_Write16EEPROMBytes 002E  
                             ?_LED7SegSetup 0077                              __pstringtext10 1020  
                            __pstringtext11 1022                              __pstringtext20 1030  
                            __pstringtext12 1024                              __pstringtext13 1026  
                            __pstringtext14 1028                              __pstringtext15 102A  
                            __pstringtext16 102C                              __pstringtext17 102D  
                            __pstringtext18 102E                              __pstringtext19 102F  
                   __end_of_InitmvcChannels 0A5C              __end_of_cPointerByteReadFaders 1030  
                                  intlevel1 0000                 ?_LED7SegDisplayValueByDigit 0034  
            MYI2C_Write16EEPROMBytes@nCount 0048                              _mvcPatchNumber 00B9  
                   ?_PIN_MANAGER_Initialize 0077                    __end_of_I2C1_MasterWrite 07FF  
                               ??_savePatch 0056                           __CFG_CLKOUTEN$OFF 0000  
            __size_of_I2C1_FunctionComplete 0012               __end_of_I2C1_FunctionComplete 09D6  
          updateModelFromPatchMemory@i_1230 0029            updateModelFromPatchMemory@i_1229 0027  
                               _PPSLOCKbits 0E8F              MYI2C_Write16EEPROMBytes@status 0053  
                     ?_I2C1_MasterTRBInsert 0020                  savePatch@iPatchAddressHigh 0059  
       __size_of_updateModelFromPatchMemory 009F                                    putByte@i 0054  
                           _LED7SegPinWrite 0976                         __end_of_writeDAC528 0B34  
                    __end_of_cMstrClkAdjust 102C                    __size_of_I2C1_Initialize 0017  
                             __pstringtext1 1000                               __pstringtext2 1010  
                             __pstringtext3 1012                               __pstringtext4 1014  
                             __pstringtext5 1016                               __pstringtext6 1018  
                             __pstringtext7 101A                               __pstringtext8 101C  
                             __pstringtext9 101E           __end_of_LED7SegShiftOutPulseClock 0AAF  
                             main@POT0Value 00DF                               main@POT1Value 00E0  
                            ??_LED7SegSetup 0020                    _I2C1_MasterWriteTRBBuild 0ACD  
                          main@iLoopCounter 00DD              __end_of_PIN_MANAGER_Initialize 0BAC  
                         ??_ADCC_Initialize 0020                          __size_of_I2C1_Stop 0018  
               __end_of_InitPanelInChannels 0ACD                   MYI2C_Write16EEPROMBytes@i 0051  
                       _prevPanelInChannels 00A0  
