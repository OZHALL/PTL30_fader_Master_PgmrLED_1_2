

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Aug 29 20:22:08 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	cinit,global,class=CODE,merge=1,delta=2
    26                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    30                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    31                           	psect	inittext,global,class=CODE,delta=2
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,merge=1,delta=2
    38                           	psect	text2,local,class=CODE,merge=1,delta=2
    39                           	psect	text3,local,class=CODE,merge=1,delta=2
    40                           	psect	text4,local,class=CODE,merge=1,delta=2
    41                           	psect	text5,local,class=CODE,merge=1,delta=2
    42                           	psect	text6,local,class=CODE,merge=1,delta=2
    43                           	psect	text7,local,class=CODE,merge=1,delta=2
    44                           	psect	text8,local,class=CODE,merge=1,delta=2
    45                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text12,local,class=CODE,merge=1,delta=2
    49                           	psect	text13,local,class=CODE,merge=1,delta=2
    50                           	psect	text14,local,class=CODE,merge=1,delta=2
    51                           	psect	text15,local,class=CODE,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,merge=1,delta=2
    53                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text19,local,class=CODE,merge=1,delta=2
    56                           	psect	text20,local,class=CODE,merge=1,delta=2
    57                           	psect	text21,local,class=CODE,merge=1,delta=2
    58                           	psect	text22,local,class=CODE,merge=1,delta=2
    59                           	psect	text23,local,class=CODE,merge=1,delta=2
    60                           	psect	text24,local,class=CODE,merge=1,delta=2
    61                           	psect	text25,local,class=CODE,merge=1,delta=2
    62                           	psect	text26,local,class=CODE,merge=1,delta=2
    63                           	psect	text27,local,class=CODE,merge=1,delta=2
    64                           	psect	text28,local,class=CODE,merge=1,delta=2
    65                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text30,local,class=CODE,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,merge=1,delta=2
    69                           	psect	text33,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text35,local,class=CODE,merge=1,delta=2
    72                           	psect	swtext1,local,class=CONST,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	dabs	1,0x620,48
    77                           	dabs	1,0x5A0,80
    78                           	dabs	1,0x2370,0,_aPatchMemory
    79                           	dabs	1,0x7E,2
    80  0000                     
    81                           ; Version 1.45
    82                           ; Generated 16/11/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC16F18855 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  001C                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  008C                     	;# 
   144  008C                     	;# 
   145  008D                     	;# 
   146  008E                     	;# 
   147  008E                     	;# 
   148  008F                     	;# 
   149  0090                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  0110                     	;# 
   170  0110                     	;# 
   171  0111                     	;# 
   172  0112                     	;# 
   173  0112                     	;# 
   174  0113                     	;# 
   175  0114                     	;# 
   176  0114                     	;# 
   177  0115                     	;# 
   178  0116                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0119                     	;# 
   182  0119                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011A                     	;# 
   186  011A                     	;# 
   187  011B                     	;# 
   188  011B                     	;# 
   189  011B                     	;# 
   190  011B                     	;# 
   191  011B                     	;# 
   192  011C                     	;# 
   193  011C                     	;# 
   194  011C                     	;# 
   195  011D                     	;# 
   196  011D                     	;# 
   197  011D                     	;# 
   198  011E                     	;# 
   199  011E                     	;# 
   200  011E                     	;# 
   201  011F                     	;# 
   202  011F                     	;# 
   203  011F                     	;# 
   204  011F                     	;# 
   205  011F                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  018F                     	;# 
   210  0190                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0196                     	;# 
   214  0197                     	;# 
   215  0198                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  020C                     	;# 
   221  020C                     	;# 
   222  020D                     	;# 
   223  020E                     	;# 
   224  020F                     	;# 
   225  020F                     	;# 
   226  0210                     	;# 
   227  0210                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0216                     	;# 
   237  0216                     	;# 
   238  0217                     	;# 
   239  0217                     	;# 
   240  0218                     	;# 
   241  0218                     	;# 
   242  0219                     	;# 
   243  021A                     	;# 
   244  021B                     	;# 
   245  021B                     	;# 
   246  021C                     	;# 
   247  021C                     	;# 
   248  021D                     	;# 
   249  021D                     	;# 
   250  021E                     	;# 
   251  021F                     	;# 
   252  028C                     	;# 
   253  028C                     	;# 
   254  028D                     	;# 
   255  028D                     	;# 
   256  028E                     	;# 
   257  028F                     	;# 
   258  0290                     	;# 
   259  0290                     	;# 
   260  0291                     	;# 
   261  0292                     	;# 
   262  0292                     	;# 
   263  0293                     	;# 
   264  0293                     	;# 
   265  0294                     	;# 
   266  0295                     	;# 
   267  0296                     	;# 
   268  0296                     	;# 
   269  0297                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  0299                     	;# 
   274  029A                     	;# 
   275  029B                     	;# 
   276  029C                     	;# 
   277  029C                     	;# 
   278  029D                     	;# 
   279  030C                     	;# 
   280  030C                     	;# 
   281  030D                     	;# 
   282  030E                     	;# 
   283  030F                     	;# 
   284  0310                     	;# 
   285  0310                     	;# 
   286  0311                     	;# 
   287  0312                     	;# 
   288  0313                     	;# 
   289  0314                     	;# 
   290  0314                     	;# 
   291  0315                     	;# 
   292  0316                     	;# 
   293  0317                     	;# 
   294  0318                     	;# 
   295  0318                     	;# 
   296  0319                     	;# 
   297  031A                     	;# 
   298  031B                     	;# 
   299  031C                     	;# 
   300  031C                     	;# 
   301  031D                     	;# 
   302  031E                     	;# 
   303  031F                     	;# 
   304  038C                     	;# 
   305  038D                     	;# 
   306  038E                     	;# 
   307  0390                     	;# 
   308  0391                     	;# 
   309  0392                     	;# 
   310  040C                     	;# 
   311  040D                     	;# 
   312  040E                     	;# 
   313  040F                     	;# 
   314  0410                     	;# 
   315  0411                     	;# 
   316  0416                     	;# 
   317  0416                     	;# 
   318  0417                     	;# 
   319  0418                     	;# 
   320  0418                     	;# 
   321  0419                     	;# 
   322  041A                     	;# 
   323  041A                     	;# 
   324  041B                     	;# 
   325  041C                     	;# 
   326  041C                     	;# 
   327  041D                     	;# 
   328  041E                     	;# 
   329  041F                     	;# 
   330  048C                     	;# 
   331  048C                     	;# 
   332  048D                     	;# 
   333  048E                     	;# 
   334  048F                     	;# 
   335  048F                     	;# 
   336  0490                     	;# 
   337  0491                     	;# 
   338  0492                     	;# 
   339  0492                     	;# 
   340  0493                     	;# 
   341  0494                     	;# 
   342  0495                     	;# 
   343  0495                     	;# 
   344  0496                     	;# 
   345  0497                     	;# 
   346  0498                     	;# 
   347  0499                     	;# 
   348  049A                     	;# 
   349  049B                     	;# 
   350  049C                     	;# 
   351  049D                     	;# 
   352  050C                     	;# 
   353  050C                     	;# 
   354  050D                     	;# 
   355  050E                     	;# 
   356  050F                     	;# 
   357  050F                     	;# 
   358  0510                     	;# 
   359  0511                     	;# 
   360  0512                     	;# 
   361  0512                     	;# 
   362  0513                     	;# 
   363  0514                     	;# 
   364  0515                     	;# 
   365  0515                     	;# 
   366  0516                     	;# 
   367  0517                     	;# 
   368  0518                     	;# 
   369  0519                     	;# 
   370  051A                     	;# 
   371  051B                     	;# 
   372  051C                     	;# 
   373  051D                     	;# 
   374  058C                     	;# 
   375  058C                     	;# 
   376  058D                     	;# 
   377  058E                     	;# 
   378  058F                     	;# 
   379  058F                     	;# 
   380  0590                     	;# 
   381  0591                     	;# 
   382  0592                     	;# 
   383  0593                     	;# 
   384  060C                     	;# 
   385  060D                     	;# 
   386  060E                     	;# 
   387  060F                     	;# 
   388  0610                     	;# 
   389  0611                     	;# 
   390  0612                     	;# 
   391  0613                     	;# 
   392  0614                     	;# 
   393  0616                     	;# 
   394  0617                     	;# 
   395  0618                     	;# 
   396  0619                     	;# 
   397  061A                     	;# 
   398  061B                     	;# 
   399  061C                     	;# 
   400  061D                     	;# 
   401  061E                     	;# 
   402  068C                     	;# 
   403  068D                     	;# 
   404  068E                     	;# 
   405  068F                     	;# 
   406  0690                     	;# 
   407  0691                     	;# 
   408  0692                     	;# 
   409  0693                     	;# 
   410  0694                     	;# 
   411  070C                     	;# 
   412  070D                     	;# 
   413  070E                     	;# 
   414  070F                     	;# 
   415  0710                     	;# 
   416  0711                     	;# 
   417  0712                     	;# 
   418  0713                     	;# 
   419  0714                     	;# 
   420  0716                     	;# 
   421  0717                     	;# 
   422  0718                     	;# 
   423  0719                     	;# 
   424  071A                     	;# 
   425  071B                     	;# 
   426  071C                     	;# 
   427  071D                     	;# 
   428  071E                     	;# 
   429  0796                     	;# 
   430  0797                     	;# 
   431  0798                     	;# 
   432  0799                     	;# 
   433  079A                     	;# 
   434  079B                     	;# 
   435  080C                     	;# 
   436  080D                     	;# 
   437  080E                     	;# 
   438  080F                     	;# 
   439  0810                     	;# 
   440  0811                     	;# 
   441  0812                     	;# 
   442  0813                     	;# 
   443  0814                     	;# 
   444  081A                     	;# 
   445  081B                     	;# 
   446  081C                     	;# 
   447  081D                     	;# 
   448  081E                     	;# 
   449  081F                     	;# 
   450  088C                     	;# 
   451  088D                     	;# 
   452  088E                     	;# 
   453  088F                     	;# 
   454  0890                     	;# 
   455  0891                     	;# 
   456  0892                     	;# 
   457  0893                     	;# 
   458  0895                     	;# 
   459  0896                     	;# 
   460  0897                     	;# 
   461  0898                     	;# 
   462  0899                     	;# 
   463  089A                     	;# 
   464  089B                     	;# 
   465  090C                     	;# 
   466  090E                     	;# 
   467  090F                     	;# 
   468  091F                     	;# 
   469  091F                     	;# 
   470  098F                     	;# 
   471  098F                     	;# 
   472  0990                     	;# 
   473  0991                     	;# 
   474  0992                     	;# 
   475  0993                     	;# 
   476  0994                     	;# 
   477  0995                     	;# 
   478  0996                     	;# 
   479  0997                     	;# 
   480  0E0F                     	;# 
   481  0E10                     	;# 
   482  0E11                     	;# 
   483  0E12                     	;# 
   484  0E13                     	;# 
   485  0E14                     	;# 
   486  0E15                     	;# 
   487  0E16                     	;# 
   488  0E17                     	;# 
   489  0E18                     	;# 
   490  0E19                     	;# 
   491  0E1A                     	;# 
   492  0E1B                     	;# 
   493  0E1C                     	;# 
   494  0E1D                     	;# 
   495  0E1E                     	;# 
   496  0E1F                     	;# 
   497  0E20                     	;# 
   498  0E21                     	;# 
   499  0E22                     	;# 
   500  0E23                     	;# 
   501  0E24                     	;# 
   502  0E25                     	;# 
   503  0E26                     	;# 
   504  0E27                     	;# 
   505  0E28                     	;# 
   506  0E29                     	;# 
   507  0E2A                     	;# 
   508  0E2B                     	;# 
   509  0E2C                     	;# 
   510  0E2D                     	;# 
   511  0E2E                     	;# 
   512  0E2F                     	;# 
   513  0E30                     	;# 
   514  0E31                     	;# 
   515  0E32                     	;# 
   516  0E33                     	;# 
   517  0E34                     	;# 
   518  0E35                     	;# 
   519  0E36                     	;# 
   520  0E37                     	;# 
   521  0E8F                     	;# 
   522  0E90                     	;# 
   523  0E91                     	;# 
   524  0E92                     	;# 
   525  0E93                     	;# 
   526  0E94                     	;# 
   527  0E95                     	;# 
   528  0E96                     	;# 
   529  0E97                     	;# 
   530  0E9C                     	;# 
   531  0E9D                     	;# 
   532  0E9E                     	;# 
   533  0EA1                     	;# 
   534  0EA2                     	;# 
   535  0EA3                     	;# 
   536  0EA4                     	;# 
   537  0EA5                     	;# 
   538  0EA9                     	;# 
   539  0EAA                     	;# 
   540  0EAB                     	;# 
   541  0EAC                     	;# 
   542  0EB1                     	;# 
   543  0EB2                     	;# 
   544  0EB3                     	;# 
   545  0EB8                     	;# 
   546  0EB9                     	;# 
   547  0EBA                     	;# 
   548  0EBB                     	;# 
   549  0EBC                     	;# 
   550  0EBD                     	;# 
   551  0EBE                     	;# 
   552  0EC3                     	;# 
   553  0EC5                     	;# 
   554  0EC6                     	;# 
   555  0EC7                     	;# 
   556  0EC8                     	;# 
   557  0EC9                     	;# 
   558  0ECA                     	;# 
   559  0ECB                     	;# 
   560  0ECC                     	;# 
   561  0F10                     	;# 
   562  0F11                     	;# 
   563  0F12                     	;# 
   564  0F13                     	;# 
   565  0F14                     	;# 
   566  0F15                     	;# 
   567  0F16                     	;# 
   568  0F17                     	;# 
   569  0F18                     	;# 
   570  0F19                     	;# 
   571  0F1A                     	;# 
   572  0F1B                     	;# 
   573  0F1C                     	;# 
   574  0F1D                     	;# 
   575  0F1E                     	;# 
   576  0F1F                     	;# 
   577  0F20                     	;# 
   578  0F21                     	;# 
   579  0F22                     	;# 
   580  0F23                     	;# 
   581  0F24                     	;# 
   582  0F25                     	;# 
   583  0F26                     	;# 
   584  0F27                     	;# 
   585  0F38                     	;# 
   586  0F39                     	;# 
   587  0F3A                     	;# 
   588  0F3B                     	;# 
   589  0F3C                     	;# 
   590  0F3D                     	;# 
   591  0F3E                     	;# 
   592  0F3F                     	;# 
   593  0F40                     	;# 
   594  0F41                     	;# 
   595  0F43                     	;# 
   596  0F44                     	;# 
   597  0F45                     	;# 
   598  0F46                     	;# 
   599  0F47                     	;# 
   600  0F48                     	;# 
   601  0F49                     	;# 
   602  0F4A                     	;# 
   603  0F4B                     	;# 
   604  0F4C                     	;# 
   605  0F4E                     	;# 
   606  0F4F                     	;# 
   607  0F50                     	;# 
   608  0F51                     	;# 
   609  0F52                     	;# 
   610  0F53                     	;# 
   611  0F54                     	;# 
   612  0F55                     	;# 
   613  0F56                     	;# 
   614  0F57                     	;# 
   615  0F65                     	;# 
   616  0F68                     	;# 
   617  0F69                     	;# 
   618  0F6A                     	;# 
   619  0F6B                     	;# 
   620  0FE4                     	;# 
   621  0FE5                     	;# 
   622  0FE6                     	;# 
   623  0FE7                     	;# 
   624  0FE8                     	;# 
   625  0FE9                     	;# 
   626  0FEA                     	;# 
   627  0FEB                     	;# 
   628  0FED                     	;# 
   629  0FEE                     	;# 
   630  0FEF                     	;# 
   631  0000                     	;# 
   632  0001                     	;# 
   633  0002                     	;# 
   634  0003                     	;# 
   635  0004                     	;# 
   636  0005                     	;# 
   637  0006                     	;# 
   638  0007                     	;# 
   639  0008                     	;# 
   640  0009                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0016                     	;# 
   651  0017                     	;# 
   652  0018                     	;# 
   653  001C                     	;# 
   654  001C                     	;# 
   655  001D                     	;# 
   656  001D                     	;# 
   657  001E                     	;# 
   658  001F                     	;# 
   659  008C                     	;# 
   660  008C                     	;# 
   661  008D                     	;# 
   662  008E                     	;# 
   663  008E                     	;# 
   664  008F                     	;# 
   665  0090                     	;# 
   666  0090                     	;# 
   667  0091                     	;# 
   668  0093                     	;# 
   669  0094                     	;# 
   670  0095                     	;# 
   671  0096                     	;# 
   672  0097                     	;# 
   673  0098                     	;# 
   674  0099                     	;# 
   675  009A                     	;# 
   676  009B                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009E                     	;# 
   680  010C                     	;# 
   681  010D                     	;# 
   682  010E                     	;# 
   683  010E                     	;# 
   684  010F                     	;# 
   685  0110                     	;# 
   686  0110                     	;# 
   687  0111                     	;# 
   688  0112                     	;# 
   689  0112                     	;# 
   690  0113                     	;# 
   691  0114                     	;# 
   692  0114                     	;# 
   693  0115                     	;# 
   694  0116                     	;# 
   695  0116                     	;# 
   696  0117                     	;# 
   697  0119                     	;# 
   698  0119                     	;# 
   699  0119                     	;# 
   700  011A                     	;# 
   701  011A                     	;# 
   702  011A                     	;# 
   703  011B                     	;# 
   704  011B                     	;# 
   705  011B                     	;# 
   706  011B                     	;# 
   707  011B                     	;# 
   708  011C                     	;# 
   709  011C                     	;# 
   710  011C                     	;# 
   711  011D                     	;# 
   712  011D                     	;# 
   713  011D                     	;# 
   714  011E                     	;# 
   715  011E                     	;# 
   716  011E                     	;# 
   717  011F                     	;# 
   718  011F                     	;# 
   719  011F                     	;# 
   720  011F                     	;# 
   721  011F                     	;# 
   722  018C                     	;# 
   723  018D                     	;# 
   724  018E                     	;# 
   725  018F                     	;# 
   726  0190                     	;# 
   727  0191                     	;# 
   728  0192                     	;# 
   729  0196                     	;# 
   730  0197                     	;# 
   731  0198                     	;# 
   732  0199                     	;# 
   733  019A                     	;# 
   734  019B                     	;# 
   735  019C                     	;# 
   736  020C                     	;# 
   737  020C                     	;# 
   738  020D                     	;# 
   739  020E                     	;# 
   740  020F                     	;# 
   741  020F                     	;# 
   742  0210                     	;# 
   743  0210                     	;# 
   744  0211                     	;# 
   745  0211                     	;# 
   746  0212                     	;# 
   747  0212                     	;# 
   748  0213                     	;# 
   749  0214                     	;# 
   750  0215                     	;# 
   751  0215                     	;# 
   752  0216                     	;# 
   753  0216                     	;# 
   754  0217                     	;# 
   755  0217                     	;# 
   756  0218                     	;# 
   757  0218                     	;# 
   758  0219                     	;# 
   759  021A                     	;# 
   760  021B                     	;# 
   761  021B                     	;# 
   762  021C                     	;# 
   763  021C                     	;# 
   764  021D                     	;# 
   765  021D                     	;# 
   766  021E                     	;# 
   767  021F                     	;# 
   768  028C                     	;# 
   769  028C                     	;# 
   770  028D                     	;# 
   771  028D                     	;# 
   772  028E                     	;# 
   773  028F                     	;# 
   774  0290                     	;# 
   775  0290                     	;# 
   776  0291                     	;# 
   777  0292                     	;# 
   778  0292                     	;# 
   779  0293                     	;# 
   780  0293                     	;# 
   781  0294                     	;# 
   782  0295                     	;# 
   783  0296                     	;# 
   784  0296                     	;# 
   785  0297                     	;# 
   786  0298                     	;# 
   787  0298                     	;# 
   788  0299                     	;# 
   789  0299                     	;# 
   790  029A                     	;# 
   791  029B                     	;# 
   792  029C                     	;# 
   793  029C                     	;# 
   794  029D                     	;# 
   795  030C                     	;# 
   796  030C                     	;# 
   797  030D                     	;# 
   798  030E                     	;# 
   799  030F                     	;# 
   800  0310                     	;# 
   801  0310                     	;# 
   802  0311                     	;# 
   803  0312                     	;# 
   804  0313                     	;# 
   805  0314                     	;# 
   806  0314                     	;# 
   807  0315                     	;# 
   808  0316                     	;# 
   809  0317                     	;# 
   810  0318                     	;# 
   811  0318                     	;# 
   812  0319                     	;# 
   813  031A                     	;# 
   814  031B                     	;# 
   815  031C                     	;# 
   816  031C                     	;# 
   817  031D                     	;# 
   818  031E                     	;# 
   819  031F                     	;# 
   820  038C                     	;# 
   821  038D                     	;# 
   822  038E                     	;# 
   823  0390                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  040C                     	;# 
   827  040D                     	;# 
   828  040E                     	;# 
   829  040F                     	;# 
   830  0410                     	;# 
   831  0411                     	;# 
   832  0416                     	;# 
   833  0416                     	;# 
   834  0417                     	;# 
   835  0418                     	;# 
   836  0418                     	;# 
   837  0419                     	;# 
   838  041A                     	;# 
   839  041A                     	;# 
   840  041B                     	;# 
   841  041C                     	;# 
   842  041C                     	;# 
   843  041D                     	;# 
   844  041E                     	;# 
   845  041F                     	;# 
   846  048C                     	;# 
   847  048C                     	;# 
   848  048D                     	;# 
   849  048E                     	;# 
   850  048F                     	;# 
   851  048F                     	;# 
   852  0490                     	;# 
   853  0491                     	;# 
   854  0492                     	;# 
   855  0492                     	;# 
   856  0493                     	;# 
   857  0494                     	;# 
   858  0495                     	;# 
   859  0495                     	;# 
   860  0496                     	;# 
   861  0497                     	;# 
   862  0498                     	;# 
   863  0499                     	;# 
   864  049A                     	;# 
   865  049B                     	;# 
   866  049C                     	;# 
   867  049D                     	;# 
   868  050C                     	;# 
   869  050C                     	;# 
   870  050D                     	;# 
   871  050E                     	;# 
   872  050F                     	;# 
   873  050F                     	;# 
   874  0510                     	;# 
   875  0511                     	;# 
   876  0512                     	;# 
   877  0512                     	;# 
   878  0513                     	;# 
   879  0514                     	;# 
   880  0515                     	;# 
   881  0515                     	;# 
   882  0516                     	;# 
   883  0517                     	;# 
   884  0518                     	;# 
   885  0519                     	;# 
   886  051A                     	;# 
   887  051B                     	;# 
   888  051C                     	;# 
   889  051D                     	;# 
   890  058C                     	;# 
   891  058C                     	;# 
   892  058D                     	;# 
   893  058E                     	;# 
   894  058F                     	;# 
   895  058F                     	;# 
   896  0590                     	;# 
   897  0591                     	;# 
   898  0592                     	;# 
   899  0593                     	;# 
   900  060C                     	;# 
   901  060D                     	;# 
   902  060E                     	;# 
   903  060F                     	;# 
   904  0610                     	;# 
   905  0611                     	;# 
   906  0612                     	;# 
   907  0613                     	;# 
   908  0614                     	;# 
   909  0616                     	;# 
   910  0617                     	;# 
   911  0618                     	;# 
   912  0619                     	;# 
   913  061A                     	;# 
   914  061B                     	;# 
   915  061C                     	;# 
   916  061D                     	;# 
   917  061E                     	;# 
   918  068C                     	;# 
   919  068D                     	;# 
   920  068E                     	;# 
   921  068F                     	;# 
   922  0690                     	;# 
   923  0691                     	;# 
   924  0692                     	;# 
   925  0693                     	;# 
   926  0694                     	;# 
   927  070C                     	;# 
   928  070D                     	;# 
   929  070E                     	;# 
   930  070F                     	;# 
   931  0710                     	;# 
   932  0711                     	;# 
   933  0712                     	;# 
   934  0713                     	;# 
   935  0714                     	;# 
   936  0716                     	;# 
   937  0717                     	;# 
   938  0718                     	;# 
   939  0719                     	;# 
   940  071A                     	;# 
   941  071B                     	;# 
   942  071C                     	;# 
   943  071D                     	;# 
   944  071E                     	;# 
   945  0796                     	;# 
   946  0797                     	;# 
   947  0798                     	;# 
   948  0799                     	;# 
   949  079A                     	;# 
   950  079B                     	;# 
   951  080C                     	;# 
   952  080D                     	;# 
   953  080E                     	;# 
   954  080F                     	;# 
   955  0810                     	;# 
   956  0811                     	;# 
   957  0812                     	;# 
   958  0813                     	;# 
   959  0814                     	;# 
   960  081A                     	;# 
   961  081B                     	;# 
   962  081C                     	;# 
   963  081D                     	;# 
   964  081E                     	;# 
   965  081F                     	;# 
   966  088C                     	;# 
   967  088D                     	;# 
   968  088E                     	;# 
   969  088F                     	;# 
   970  0890                     	;# 
   971  0891                     	;# 
   972  0892                     	;# 
   973  0893                     	;# 
   974  0895                     	;# 
   975  0896                     	;# 
   976  0897                     	;# 
   977  0898                     	;# 
   978  0899                     	;# 
   979  089A                     	;# 
   980  089B                     	;# 
   981  090C                     	;# 
   982  090E                     	;# 
   983  090F                     	;# 
   984  091F                     	;# 
   985  091F                     	;# 
   986  098F                     	;# 
   987  098F                     	;# 
   988  0990                     	;# 
   989  0991                     	;# 
   990  0992                     	;# 
   991  0993                     	;# 
   992  0994                     	;# 
   993  0995                     	;# 
   994  0996                     	;# 
   995  0997                     	;# 
   996  0E0F                     	;# 
   997  0E10                     	;# 
   998  0E11                     	;# 
   999  0E12                     	;# 
  1000  0E13                     	;# 
  1001  0E14                     	;# 
  1002  0E15                     	;# 
  1003  0E16                     	;# 
  1004  0E17                     	;# 
  1005  0E18                     	;# 
  1006  0E19                     	;# 
  1007  0E1A                     	;# 
  1008  0E1B                     	;# 
  1009  0E1C                     	;# 
  1010  0E1D                     	;# 
  1011  0E1E                     	;# 
  1012  0E1F                     	;# 
  1013  0E20                     	;# 
  1014  0E21                     	;# 
  1015  0E22                     	;# 
  1016  0E23                     	;# 
  1017  0E24                     	;# 
  1018  0E25                     	;# 
  1019  0E26                     	;# 
  1020  0E27                     	;# 
  1021  0E28                     	;# 
  1022  0E29                     	;# 
  1023  0E2A                     	;# 
  1024  0E2B                     	;# 
  1025  0E2C                     	;# 
  1026  0E2D                     	;# 
  1027  0E2E                     	;# 
  1028  0E2F                     	;# 
  1029  0E30                     	;# 
  1030  0E31                     	;# 
  1031  0E32                     	;# 
  1032  0E33                     	;# 
  1033  0E34                     	;# 
  1034  0E35                     	;# 
  1035  0E36                     	;# 
  1036  0E37                     	;# 
  1037  0E8F                     	;# 
  1038  0E90                     	;# 
  1039  0E91                     	;# 
  1040  0E92                     	;# 
  1041  0E93                     	;# 
  1042  0E94                     	;# 
  1043  0E95                     	;# 
  1044  0E96                     	;# 
  1045  0E97                     	;# 
  1046  0E9C                     	;# 
  1047  0E9D                     	;# 
  1048  0E9E                     	;# 
  1049  0EA1                     	;# 
  1050  0EA2                     	;# 
  1051  0EA3                     	;# 
  1052  0EA4                     	;# 
  1053  0EA5                     	;# 
  1054  0EA9                     	;# 
  1055  0EAA                     	;# 
  1056  0EAB                     	;# 
  1057  0EAC                     	;# 
  1058  0EB1                     	;# 
  1059  0EB2                     	;# 
  1060  0EB3                     	;# 
  1061  0EB8                     	;# 
  1062  0EB9                     	;# 
  1063  0EBA                     	;# 
  1064  0EBB                     	;# 
  1065  0EBC                     	;# 
  1066  0EBD                     	;# 
  1067  0EBE                     	;# 
  1068  0EC3                     	;# 
  1069  0EC5                     	;# 
  1070  0EC6                     	;# 
  1071  0EC7                     	;# 
  1072  0EC8                     	;# 
  1073  0EC9                     	;# 
  1074  0ECA                     	;# 
  1075  0ECB                     	;# 
  1076  0ECC                     	;# 
  1077  0F10                     	;# 
  1078  0F11                     	;# 
  1079  0F12                     	;# 
  1080  0F13                     	;# 
  1081  0F14                     	;# 
  1082  0F15                     	;# 
  1083  0F16                     	;# 
  1084  0F17                     	;# 
  1085  0F18                     	;# 
  1086  0F19                     	;# 
  1087  0F1A                     	;# 
  1088  0F1B                     	;# 
  1089  0F1C                     	;# 
  1090  0F1D                     	;# 
  1091  0F1E                     	;# 
  1092  0F1F                     	;# 
  1093  0F20                     	;# 
  1094  0F21                     	;# 
  1095  0F22                     	;# 
  1096  0F23                     	;# 
  1097  0F24                     	;# 
  1098  0F25                     	;# 
  1099  0F26                     	;# 
  1100  0F27                     	;# 
  1101  0F38                     	;# 
  1102  0F39                     	;# 
  1103  0F3A                     	;# 
  1104  0F3B                     	;# 
  1105  0F3C                     	;# 
  1106  0F3D                     	;# 
  1107  0F3E                     	;# 
  1108  0F3F                     	;# 
  1109  0F40                     	;# 
  1110  0F41                     	;# 
  1111  0F43                     	;# 
  1112  0F44                     	;# 
  1113  0F45                     	;# 
  1114  0F46                     	;# 
  1115  0F47                     	;# 
  1116  0F48                     	;# 
  1117  0F49                     	;# 
  1118  0F4A                     	;# 
  1119  0F4B                     	;# 
  1120  0F4C                     	;# 
  1121  0F4E                     	;# 
  1122  0F4F                     	;# 
  1123  0F50                     	;# 
  1124  0F51                     	;# 
  1125  0F52                     	;# 
  1126  0F53                     	;# 
  1127  0F54                     	;# 
  1128  0F55                     	;# 
  1129  0F56                     	;# 
  1130  0F57                     	;# 
  1131  0F65                     	;# 
  1132  0F68                     	;# 
  1133  0F69                     	;# 
  1134  0F6A                     	;# 
  1135  0F6B                     	;# 
  1136  0FE4                     	;# 
  1137  0FE5                     	;# 
  1138  0FE6                     	;# 
  1139  0FE7                     	;# 
  1140  0FE8                     	;# 
  1141  0FE9                     	;# 
  1142  0FEA                     	;# 
  1143  0FEB                     	;# 
  1144  0FED                     	;# 
  1145  0FEE                     	;# 
  1146  0FEF                     	;# 
  1147  0000                     	;# 
  1148  0001                     	;# 
  1149  0002                     	;# 
  1150  0003                     	;# 
  1151  0004                     	;# 
  1152  0005                     	;# 
  1153  0006                     	;# 
  1154  0007                     	;# 
  1155  0008                     	;# 
  1156  0009                     	;# 
  1157  000A                     	;# 
  1158  000B                     	;# 
  1159  000C                     	;# 
  1160  000D                     	;# 
  1161  000E                     	;# 
  1162  0010                     	;# 
  1163  0011                     	;# 
  1164  0012                     	;# 
  1165  0013                     	;# 
  1166  0016                     	;# 
  1167  0017                     	;# 
  1168  0018                     	;# 
  1169  001C                     	;# 
  1170  001C                     	;# 
  1171  001D                     	;# 
  1172  001D                     	;# 
  1173  001E                     	;# 
  1174  001F                     	;# 
  1175  008C                     	;# 
  1176  008C                     	;# 
  1177  008D                     	;# 
  1178  008E                     	;# 
  1179  008E                     	;# 
  1180  008F                     	;# 
  1181  0090                     	;# 
  1182  0090                     	;# 
  1183  0091                     	;# 
  1184  0093                     	;# 
  1185  0094                     	;# 
  1186  0095                     	;# 
  1187  0096                     	;# 
  1188  0097                     	;# 
  1189  0098                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010D                     	;# 
  1198  010E                     	;# 
  1199  010E                     	;# 
  1200  010F                     	;# 
  1201  0110                     	;# 
  1202  0110                     	;# 
  1203  0111                     	;# 
  1204  0112                     	;# 
  1205  0112                     	;# 
  1206  0113                     	;# 
  1207  0114                     	;# 
  1208  0114                     	;# 
  1209  0115                     	;# 
  1210  0116                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  0119                     	;# 
  1214  0119                     	;# 
  1215  0119                     	;# 
  1216  011A                     	;# 
  1217  011A                     	;# 
  1218  011A                     	;# 
  1219  011B                     	;# 
  1220  011B                     	;# 
  1221  011B                     	;# 
  1222  011B                     	;# 
  1223  011B                     	;# 
  1224  011C                     	;# 
  1225  011C                     	;# 
  1226  011C                     	;# 
  1227  011D                     	;# 
  1228  011D                     	;# 
  1229  011D                     	;# 
  1230  011E                     	;# 
  1231  011E                     	;# 
  1232  011E                     	;# 
  1233  011F                     	;# 
  1234  011F                     	;# 
  1235  011F                     	;# 
  1236  011F                     	;# 
  1237  011F                     	;# 
  1238  018C                     	;# 
  1239  018D                     	;# 
  1240  018E                     	;# 
  1241  018F                     	;# 
  1242  0190                     	;# 
  1243  0191                     	;# 
  1244  0192                     	;# 
  1245  0196                     	;# 
  1246  0197                     	;# 
  1247  0198                     	;# 
  1248  0199                     	;# 
  1249  019A                     	;# 
  1250  019B                     	;# 
  1251  019C                     	;# 
  1252  020C                     	;# 
  1253  020C                     	;# 
  1254  020D                     	;# 
  1255  020E                     	;# 
  1256  020F                     	;# 
  1257  020F                     	;# 
  1258  0210                     	;# 
  1259  0210                     	;# 
  1260  0211                     	;# 
  1261  0211                     	;# 
  1262  0212                     	;# 
  1263  0212                     	;# 
  1264  0213                     	;# 
  1265  0214                     	;# 
  1266  0215                     	;# 
  1267  0215                     	;# 
  1268  0216                     	;# 
  1269  0216                     	;# 
  1270  0217                     	;# 
  1271  0217                     	;# 
  1272  0218                     	;# 
  1273  0218                     	;# 
  1274  0219                     	;# 
  1275  021A                     	;# 
  1276  021B                     	;# 
  1277  021B                     	;# 
  1278  021C                     	;# 
  1279  021C                     	;# 
  1280  021D                     	;# 
  1281  021D                     	;# 
  1282  021E                     	;# 
  1283  021F                     	;# 
  1284  028C                     	;# 
  1285  028C                     	;# 
  1286  028D                     	;# 
  1287  028D                     	;# 
  1288  028E                     	;# 
  1289  028F                     	;# 
  1290  0290                     	;# 
  1291  0290                     	;# 
  1292  0291                     	;# 
  1293  0292                     	;# 
  1294  0292                     	;# 
  1295  0293                     	;# 
  1296  0293                     	;# 
  1297  0294                     	;# 
  1298  0295                     	;# 
  1299  0296                     	;# 
  1300  0296                     	;# 
  1301  0297                     	;# 
  1302  0298                     	;# 
  1303  0298                     	;# 
  1304  0299                     	;# 
  1305  0299                     	;# 
  1306  029A                     	;# 
  1307  029B                     	;# 
  1308  029C                     	;# 
  1309  029C                     	;# 
  1310  029D                     	;# 
  1311  030C                     	;# 
  1312  030C                     	;# 
  1313  030D                     	;# 
  1314  030E                     	;# 
  1315  030F                     	;# 
  1316  0310                     	;# 
  1317  0310                     	;# 
  1318  0311                     	;# 
  1319  0312                     	;# 
  1320  0313                     	;# 
  1321  0314                     	;# 
  1322  0314                     	;# 
  1323  0315                     	;# 
  1324  0316                     	;# 
  1325  0317                     	;# 
  1326  0318                     	;# 
  1327  0318                     	;# 
  1328  0319                     	;# 
  1329  031A                     	;# 
  1330  031B                     	;# 
  1331  031C                     	;# 
  1332  031C                     	;# 
  1333  031D                     	;# 
  1334  031E                     	;# 
  1335  031F                     	;# 
  1336  038C                     	;# 
  1337  038D                     	;# 
  1338  038E                     	;# 
  1339  0390                     	;# 
  1340  0391                     	;# 
  1341  0392                     	;# 
  1342  040C                     	;# 
  1343  040D                     	;# 
  1344  040E                     	;# 
  1345  040F                     	;# 
  1346  0410                     	;# 
  1347  0411                     	;# 
  1348  0416                     	;# 
  1349  0416                     	;# 
  1350  0417                     	;# 
  1351  0418                     	;# 
  1352  0418                     	;# 
  1353  0419                     	;# 
  1354  041A                     	;# 
  1355  041A                     	;# 
  1356  041B                     	;# 
  1357  041C                     	;# 
  1358  041C                     	;# 
  1359  041D                     	;# 
  1360  041E                     	;# 
  1361  041F                     	;# 
  1362  048C                     	;# 
  1363  048C                     	;# 
  1364  048D                     	;# 
  1365  048E                     	;# 
  1366  048F                     	;# 
  1367  048F                     	;# 
  1368  0490                     	;# 
  1369  0491                     	;# 
  1370  0492                     	;# 
  1371  0492                     	;# 
  1372  0493                     	;# 
  1373  0494                     	;# 
  1374  0495                     	;# 
  1375  0495                     	;# 
  1376  0496                     	;# 
  1377  0497                     	;# 
  1378  0498                     	;# 
  1379  0499                     	;# 
  1380  049A                     	;# 
  1381  049B                     	;# 
  1382  049C                     	;# 
  1383  049D                     	;# 
  1384  050C                     	;# 
  1385  050C                     	;# 
  1386  050D                     	;# 
  1387  050E                     	;# 
  1388  050F                     	;# 
  1389  050F                     	;# 
  1390  0510                     	;# 
  1391  0511                     	;# 
  1392  0512                     	;# 
  1393  0512                     	;# 
  1394  0513                     	;# 
  1395  0514                     	;# 
  1396  0515                     	;# 
  1397  0515                     	;# 
  1398  0516                     	;# 
  1399  0517                     	;# 
  1400  0518                     	;# 
  1401  0519                     	;# 
  1402  051A                     	;# 
  1403  051B                     	;# 
  1404  051C                     	;# 
  1405  051D                     	;# 
  1406  058C                     	;# 
  1407  058C                     	;# 
  1408  058D                     	;# 
  1409  058E                     	;# 
  1410  058F                     	;# 
  1411  058F                     	;# 
  1412  0590                     	;# 
  1413  0591                     	;# 
  1414  0592                     	;# 
  1415  0593                     	;# 
  1416  060C                     	;# 
  1417  060D                     	;# 
  1418  060E                     	;# 
  1419  060F                     	;# 
  1420  0610                     	;# 
  1421  0611                     	;# 
  1422  0612                     	;# 
  1423  0613                     	;# 
  1424  0614                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061D                     	;# 
  1433  061E                     	;# 
  1434  068C                     	;# 
  1435  068D                     	;# 
  1436  068E                     	;# 
  1437  068F                     	;# 
  1438  0690                     	;# 
  1439  0691                     	;# 
  1440  0692                     	;# 
  1441  0693                     	;# 
  1442  0694                     	;# 
  1443  070C                     	;# 
  1444  070D                     	;# 
  1445  070E                     	;# 
  1446  070F                     	;# 
  1447  0710                     	;# 
  1448  0711                     	;# 
  1449  0712                     	;# 
  1450  0713                     	;# 
  1451  0714                     	;# 
  1452  0716                     	;# 
  1453  0717                     	;# 
  1454  0718                     	;# 
  1455  0719                     	;# 
  1456  071A                     	;# 
  1457  071B                     	;# 
  1458  071C                     	;# 
  1459  071D                     	;# 
  1460  071E                     	;# 
  1461  0796                     	;# 
  1462  0797                     	;# 
  1463  0798                     	;# 
  1464  0799                     	;# 
  1465  079A                     	;# 
  1466  079B                     	;# 
  1467  080C                     	;# 
  1468  080D                     	;# 
  1469  080E                     	;# 
  1470  080F                     	;# 
  1471  0810                     	;# 
  1472  0811                     	;# 
  1473  0812                     	;# 
  1474  0813                     	;# 
  1475  0814                     	;# 
  1476  081A                     	;# 
  1477  081B                     	;# 
  1478  081C                     	;# 
  1479  081D                     	;# 
  1480  081E                     	;# 
  1481  081F                     	;# 
  1482  088C                     	;# 
  1483  088D                     	;# 
  1484  088E                     	;# 
  1485  088F                     	;# 
  1486  0890                     	;# 
  1487  0891                     	;# 
  1488  0892                     	;# 
  1489  0893                     	;# 
  1490  0895                     	;# 
  1491  0896                     	;# 
  1492  0897                     	;# 
  1493  0898                     	;# 
  1494  0899                     	;# 
  1495  089A                     	;# 
  1496  089B                     	;# 
  1497  090C                     	;# 
  1498  090E                     	;# 
  1499  090F                     	;# 
  1500  091F                     	;# 
  1501  091F                     	;# 
  1502  098F                     	;# 
  1503  098F                     	;# 
  1504  0990                     	;# 
  1505  0991                     	;# 
  1506  0992                     	;# 
  1507  0993                     	;# 
  1508  0994                     	;# 
  1509  0995                     	;# 
  1510  0996                     	;# 
  1511  0997                     	;# 
  1512  0E0F                     	;# 
  1513  0E10                     	;# 
  1514  0E11                     	;# 
  1515  0E12                     	;# 
  1516  0E13                     	;# 
  1517  0E14                     	;# 
  1518  0E15                     	;# 
  1519  0E16                     	;# 
  1520  0E17                     	;# 
  1521  0E18                     	;# 
  1522  0E19                     	;# 
  1523  0E1A                     	;# 
  1524  0E1B                     	;# 
  1525  0E1C                     	;# 
  1526  0E1D                     	;# 
  1527  0E1E                     	;# 
  1528  0E1F                     	;# 
  1529  0E20                     	;# 
  1530  0E21                     	;# 
  1531  0E22                     	;# 
  1532  0E23                     	;# 
  1533  0E24                     	;# 
  1534  0E25                     	;# 
  1535  0E26                     	;# 
  1536  0E27                     	;# 
  1537  0E28                     	;# 
  1538  0E29                     	;# 
  1539  0E2A                     	;# 
  1540  0E2B                     	;# 
  1541  0E2C                     	;# 
  1542  0E2D                     	;# 
  1543  0E2E                     	;# 
  1544  0E2F                     	;# 
  1545  0E30                     	;# 
  1546  0E31                     	;# 
  1547  0E32                     	;# 
  1548  0E33                     	;# 
  1549  0E34                     	;# 
  1550  0E35                     	;# 
  1551  0E36                     	;# 
  1552  0E37                     	;# 
  1553  0E8F                     	;# 
  1554  0E90                     	;# 
  1555  0E91                     	;# 
  1556  0E92                     	;# 
  1557  0E93                     	;# 
  1558  0E94                     	;# 
  1559  0E95                     	;# 
  1560  0E96                     	;# 
  1561  0E97                     	;# 
  1562  0E9C                     	;# 
  1563  0E9D                     	;# 
  1564  0E9E                     	;# 
  1565  0EA1                     	;# 
  1566  0EA2                     	;# 
  1567  0EA3                     	;# 
  1568  0EA4                     	;# 
  1569  0EA5                     	;# 
  1570  0EA9                     	;# 
  1571  0EAA                     	;# 
  1572  0EAB                     	;# 
  1573  0EAC                     	;# 
  1574  0EB1                     	;# 
  1575  0EB2                     	;# 
  1576  0EB3                     	;# 
  1577  0EB8                     	;# 
  1578  0EB9                     	;# 
  1579  0EBA                     	;# 
  1580  0EBB                     	;# 
  1581  0EBC                     	;# 
  1582  0EBD                     	;# 
  1583  0EBE                     	;# 
  1584  0EC3                     	;# 
  1585  0EC5                     	;# 
  1586  0EC6                     	;# 
  1587  0EC7                     	;# 
  1588  0EC8                     	;# 
  1589  0EC9                     	;# 
  1590  0ECA                     	;# 
  1591  0ECB                     	;# 
  1592  0ECC                     	;# 
  1593  0F10                     	;# 
  1594  0F11                     	;# 
  1595  0F12                     	;# 
  1596  0F13                     	;# 
  1597  0F14                     	;# 
  1598  0F15                     	;# 
  1599  0F16                     	;# 
  1600  0F17                     	;# 
  1601  0F18                     	;# 
  1602  0F19                     	;# 
  1603  0F1A                     	;# 
  1604  0F1B                     	;# 
  1605  0F1C                     	;# 
  1606  0F1D                     	;# 
  1607  0F1E                     	;# 
  1608  0F1F                     	;# 
  1609  0F20                     	;# 
  1610  0F21                     	;# 
  1611  0F22                     	;# 
  1612  0F23                     	;# 
  1613  0F24                     	;# 
  1614  0F25                     	;# 
  1615  0F26                     	;# 
  1616  0F27                     	;# 
  1617  0F38                     	;# 
  1618  0F39                     	;# 
  1619  0F3A                     	;# 
  1620  0F3B                     	;# 
  1621  0F3C                     	;# 
  1622  0F3D                     	;# 
  1623  0F3E                     	;# 
  1624  0F3F                     	;# 
  1625  0F40                     	;# 
  1626  0F41                     	;# 
  1627  0F43                     	;# 
  1628  0F44                     	;# 
  1629  0F45                     	;# 
  1630  0F46                     	;# 
  1631  0F47                     	;# 
  1632  0F48                     	;# 
  1633  0F49                     	;# 
  1634  0F4A                     	;# 
  1635  0F4B                     	;# 
  1636  0F4C                     	;# 
  1637  0F4E                     	;# 
  1638  0F4F                     	;# 
  1639  0F50                     	;# 
  1640  0F51                     	;# 
  1641  0F52                     	;# 
  1642  0F53                     	;# 
  1643  0F54                     	;# 
  1644  0F55                     	;# 
  1645  0F56                     	;# 
  1646  0F57                     	;# 
  1647  0F65                     	;# 
  1648  0F68                     	;# 
  1649  0F69                     	;# 
  1650  0F6A                     	;# 
  1651  0F6B                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE9                     	;# 
  1658  0FEA                     	;# 
  1659  0FEB                     	;# 
  1660  0FED                     	;# 
  1661  0FEE                     	;# 
  1662  0FEF                     	;# 
  1663  0000                     	;# 
  1664  0001                     	;# 
  1665  0002                     	;# 
  1666  0003                     	;# 
  1667  0004                     	;# 
  1668  0005                     	;# 
  1669  0006                     	;# 
  1670  0007                     	;# 
  1671  0008                     	;# 
  1672  0009                     	;# 
  1673  000A                     	;# 
  1674  000B                     	;# 
  1675  000C                     	;# 
  1676  000D                     	;# 
  1677  000E                     	;# 
  1678  0010                     	;# 
  1679  0011                     	;# 
  1680  0012                     	;# 
  1681  0013                     	;# 
  1682  0016                     	;# 
  1683  0017                     	;# 
  1684  0018                     	;# 
  1685  001C                     	;# 
  1686  001C                     	;# 
  1687  001D                     	;# 
  1688  001D                     	;# 
  1689  001E                     	;# 
  1690  001F                     	;# 
  1691  008C                     	;# 
  1692  008C                     	;# 
  1693  008D                     	;# 
  1694  008E                     	;# 
  1695  008E                     	;# 
  1696  008F                     	;# 
  1697  0090                     	;# 
  1698  0090                     	;# 
  1699  0091                     	;# 
  1700  0093                     	;# 
  1701  0094                     	;# 
  1702  0095                     	;# 
  1703  0096                     	;# 
  1704  0097                     	;# 
  1705  0098                     	;# 
  1706  0099                     	;# 
  1707  009A                     	;# 
  1708  009B                     	;# 
  1709  009C                     	;# 
  1710  009D                     	;# 
  1711  009E                     	;# 
  1712  010C                     	;# 
  1713  010D                     	;# 
  1714  010E                     	;# 
  1715  010E                     	;# 
  1716  010F                     	;# 
  1717  0110                     	;# 
  1718  0110                     	;# 
  1719  0111                     	;# 
  1720  0112                     	;# 
  1721  0112                     	;# 
  1722  0113                     	;# 
  1723  0114                     	;# 
  1724  0114                     	;# 
  1725  0115                     	;# 
  1726  0116                     	;# 
  1727  0116                     	;# 
  1728  0117                     	;# 
  1729  0119                     	;# 
  1730  0119                     	;# 
  1731  0119                     	;# 
  1732  011A                     	;# 
  1733  011A                     	;# 
  1734  011A                     	;# 
  1735  011B                     	;# 
  1736  011B                     	;# 
  1737  011B                     	;# 
  1738  011B                     	;# 
  1739  011B                     	;# 
  1740  011C                     	;# 
  1741  011C                     	;# 
  1742  011C                     	;# 
  1743  011D                     	;# 
  1744  011D                     	;# 
  1745  011D                     	;# 
  1746  011E                     	;# 
  1747  011E                     	;# 
  1748  011E                     	;# 
  1749  011F                     	;# 
  1750  011F                     	;# 
  1751  011F                     	;# 
  1752  011F                     	;# 
  1753  011F                     	;# 
  1754  018C                     	;# 
  1755  018D                     	;# 
  1756  018E                     	;# 
  1757  018F                     	;# 
  1758  0190                     	;# 
  1759  0191                     	;# 
  1760  0192                     	;# 
  1761  0196                     	;# 
  1762  0197                     	;# 
  1763  0198                     	;# 
  1764  0199                     	;# 
  1765  019A                     	;# 
  1766  019B                     	;# 
  1767  019C                     	;# 
  1768  020C                     	;# 
  1769  020C                     	;# 
  1770  020D                     	;# 
  1771  020E                     	;# 
  1772  020F                     	;# 
  1773  020F                     	;# 
  1774  0210                     	;# 
  1775  0210                     	;# 
  1776  0211                     	;# 
  1777  0211                     	;# 
  1778  0212                     	;# 
  1779  0212                     	;# 
  1780  0213                     	;# 
  1781  0214                     	;# 
  1782  0215                     	;# 
  1783  0215                     	;# 
  1784  0216                     	;# 
  1785  0216                     	;# 
  1786  0217                     	;# 
  1787  0217                     	;# 
  1788  0218                     	;# 
  1789  0218                     	;# 
  1790  0219                     	;# 
  1791  021A                     	;# 
  1792  021B                     	;# 
  1793  021B                     	;# 
  1794  021C                     	;# 
  1795  021C                     	;# 
  1796  021D                     	;# 
  1797  021D                     	;# 
  1798  021E                     	;# 
  1799  021F                     	;# 
  1800  028C                     	;# 
  1801  028C                     	;# 
  1802  028D                     	;# 
  1803  028D                     	;# 
  1804  028E                     	;# 
  1805  028F                     	;# 
  1806  0290                     	;# 
  1807  0290                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0293                     	;# 
  1813  0294                     	;# 
  1814  0295                     	;# 
  1815  0296                     	;# 
  1816  0296                     	;# 
  1817  0297                     	;# 
  1818  0298                     	;# 
  1819  0298                     	;# 
  1820  0299                     	;# 
  1821  0299                     	;# 
  1822  029A                     	;# 
  1823  029B                     	;# 
  1824  029C                     	;# 
  1825  029C                     	;# 
  1826  029D                     	;# 
  1827  030C                     	;# 
  1828  030C                     	;# 
  1829  030D                     	;# 
  1830  030E                     	;# 
  1831  030F                     	;# 
  1832  0310                     	;# 
  1833  0310                     	;# 
  1834  0311                     	;# 
  1835  0312                     	;# 
  1836  0313                     	;# 
  1837  0314                     	;# 
  1838  0314                     	;# 
  1839  0315                     	;# 
  1840  0316                     	;# 
  1841  0317                     	;# 
  1842  0318                     	;# 
  1843  0318                     	;# 
  1844  0319                     	;# 
  1845  031A                     	;# 
  1846  031B                     	;# 
  1847  031C                     	;# 
  1848  031C                     	;# 
  1849  031D                     	;# 
  1850  031E                     	;# 
  1851  031F                     	;# 
  1852  038C                     	;# 
  1853  038D                     	;# 
  1854  038E                     	;# 
  1855  0390                     	;# 
  1856  0391                     	;# 
  1857  0392                     	;# 
  1858  040C                     	;# 
  1859  040D                     	;# 
  1860  040E                     	;# 
  1861  040F                     	;# 
  1862  0410                     	;# 
  1863  0411                     	;# 
  1864  0416                     	;# 
  1865  0416                     	;# 
  1866  0417                     	;# 
  1867  0418                     	;# 
  1868  0418                     	;# 
  1869  0419                     	;# 
  1870  041A                     	;# 
  1871  041A                     	;# 
  1872  041B                     	;# 
  1873  041C                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  041F                     	;# 
  1878  048C                     	;# 
  1879  048C                     	;# 
  1880  048D                     	;# 
  1881  048E                     	;# 
  1882  048F                     	;# 
  1883  048F                     	;# 
  1884  0490                     	;# 
  1885  0491                     	;# 
  1886  0492                     	;# 
  1887  0492                     	;# 
  1888  0493                     	;# 
  1889  0494                     	;# 
  1890  0495                     	;# 
  1891  0495                     	;# 
  1892  0496                     	;# 
  1893  0497                     	;# 
  1894  0498                     	;# 
  1895  0499                     	;# 
  1896  049A                     	;# 
  1897  049B                     	;# 
  1898  049C                     	;# 
  1899  049D                     	;# 
  1900  050C                     	;# 
  1901  050C                     	;# 
  1902  050D                     	;# 
  1903  050E                     	;# 
  1904  050F                     	;# 
  1905  050F                     	;# 
  1906  0510                     	;# 
  1907  0511                     	;# 
  1908  0512                     	;# 
  1909  0512                     	;# 
  1910  0513                     	;# 
  1911  0514                     	;# 
  1912  0515                     	;# 
  1913  0515                     	;# 
  1914  0516                     	;# 
  1915  0517                     	;# 
  1916  0518                     	;# 
  1917  0519                     	;# 
  1918  051A                     	;# 
  1919  051B                     	;# 
  1920  051C                     	;# 
  1921  051D                     	;# 
  1922  058C                     	;# 
  1923  058C                     	;# 
  1924  058D                     	;# 
  1925  058E                     	;# 
  1926  058F                     	;# 
  1927  058F                     	;# 
  1928  0590                     	;# 
  1929  0591                     	;# 
  1930  0592                     	;# 
  1931  0593                     	;# 
  1932  060C                     	;# 
  1933  060D                     	;# 
  1934  060E                     	;# 
  1935  060F                     	;# 
  1936  0610                     	;# 
  1937  0611                     	;# 
  1938  0612                     	;# 
  1939  0613                     	;# 
  1940  0614                     	;# 
  1941  0616                     	;# 
  1942  0617                     	;# 
  1943  0618                     	;# 
  1944  0619                     	;# 
  1945  061A                     	;# 
  1946  061B                     	;# 
  1947  061C                     	;# 
  1948  061D                     	;# 
  1949  061E                     	;# 
  1950  068C                     	;# 
  1951  068D                     	;# 
  1952  068E                     	;# 
  1953  068F                     	;# 
  1954  0690                     	;# 
  1955  0691                     	;# 
  1956  0692                     	;# 
  1957  0693                     	;# 
  1958  0694                     	;# 
  1959  070C                     	;# 
  1960  070D                     	;# 
  1961  070E                     	;# 
  1962  070F                     	;# 
  1963  0710                     	;# 
  1964  0711                     	;# 
  1965  0712                     	;# 
  1966  0713                     	;# 
  1967  0714                     	;# 
  1968  0716                     	;# 
  1969  0717                     	;# 
  1970  0718                     	;# 
  1971  0719                     	;# 
  1972  071A                     	;# 
  1973  071B                     	;# 
  1974  071C                     	;# 
  1975  071D                     	;# 
  1976  071E                     	;# 
  1977  0796                     	;# 
  1978  0797                     	;# 
  1979  0798                     	;# 
  1980  0799                     	;# 
  1981  079A                     	;# 
  1982  079B                     	;# 
  1983  080C                     	;# 
  1984  080D                     	;# 
  1985  080E                     	;# 
  1986  080F                     	;# 
  1987  0810                     	;# 
  1988  0811                     	;# 
  1989  0812                     	;# 
  1990  0813                     	;# 
  1991  0814                     	;# 
  1992  081A                     	;# 
  1993  081B                     	;# 
  1994  081C                     	;# 
  1995  081D                     	;# 
  1996  081E                     	;# 
  1997  081F                     	;# 
  1998  088C                     	;# 
  1999  088D                     	;# 
  2000  088E                     	;# 
  2001  088F                     	;# 
  2002  0890                     	;# 
  2003  0891                     	;# 
  2004  0892                     	;# 
  2005  0893                     	;# 
  2006  0895                     	;# 
  2007  0896                     	;# 
  2008  0897                     	;# 
  2009  0898                     	;# 
  2010  0899                     	;# 
  2011  089A                     	;# 
  2012  089B                     	;# 
  2013  090C                     	;# 
  2014  090E                     	;# 
  2015  090F                     	;# 
  2016  091F                     	;# 
  2017  091F                     	;# 
  2018  098F                     	;# 
  2019  098F                     	;# 
  2020  0990                     	;# 
  2021  0991                     	;# 
  2022  0992                     	;# 
  2023  0993                     	;# 
  2024  0994                     	;# 
  2025  0995                     	;# 
  2026  0996                     	;# 
  2027  0997                     	;# 
  2028  0E0F                     	;# 
  2029  0E10                     	;# 
  2030  0E11                     	;# 
  2031  0E12                     	;# 
  2032  0E13                     	;# 
  2033  0E14                     	;# 
  2034  0E15                     	;# 
  2035  0E16                     	;# 
  2036  0E17                     	;# 
  2037  0E18                     	;# 
  2038  0E19                     	;# 
  2039  0E1A                     	;# 
  2040  0E1B                     	;# 
  2041  0E1C                     	;# 
  2042  0E1D                     	;# 
  2043  0E1E                     	;# 
  2044  0E1F                     	;# 
  2045  0E20                     	;# 
  2046  0E21                     	;# 
  2047  0E22                     	;# 
  2048  0E23                     	;# 
  2049  0E24                     	;# 
  2050  0E25                     	;# 
  2051  0E26                     	;# 
  2052  0E27                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E30                     	;# 
  2062  0E31                     	;# 
  2063  0E32                     	;# 
  2064  0E33                     	;# 
  2065  0E34                     	;# 
  2066  0E35                     	;# 
  2067  0E36                     	;# 
  2068  0E37                     	;# 
  2069  0E8F                     	;# 
  2070  0E90                     	;# 
  2071  0E91                     	;# 
  2072  0E92                     	;# 
  2073  0E93                     	;# 
  2074  0E94                     	;# 
  2075  0E95                     	;# 
  2076  0E96                     	;# 
  2077  0E97                     	;# 
  2078  0E9C                     	;# 
  2079  0E9D                     	;# 
  2080  0E9E                     	;# 
  2081  0EA1                     	;# 
  2082  0EA2                     	;# 
  2083  0EA3                     	;# 
  2084  0EA4                     	;# 
  2085  0EA5                     	;# 
  2086  0EA9                     	;# 
  2087  0EAA                     	;# 
  2088  0EAB                     	;# 
  2089  0EAC                     	;# 
  2090  0EB1                     	;# 
  2091  0EB2                     	;# 
  2092  0EB3                     	;# 
  2093  0EB8                     	;# 
  2094  0EB9                     	;# 
  2095  0EBA                     	;# 
  2096  0EBB                     	;# 
  2097  0EBC                     	;# 
  2098  0EBD                     	;# 
  2099  0EBE                     	;# 
  2100  0EC3                     	;# 
  2101  0EC5                     	;# 
  2102  0EC6                     	;# 
  2103  0EC7                     	;# 
  2104  0EC8                     	;# 
  2105  0EC9                     	;# 
  2106  0ECA                     	;# 
  2107  0ECB                     	;# 
  2108  0ECC                     	;# 
  2109  0F10                     	;# 
  2110  0F11                     	;# 
  2111  0F12                     	;# 
  2112  0F13                     	;# 
  2113  0F14                     	;# 
  2114  0F15                     	;# 
  2115  0F16                     	;# 
  2116  0F17                     	;# 
  2117  0F18                     	;# 
  2118  0F19                     	;# 
  2119  0F1A                     	;# 
  2120  0F1B                     	;# 
  2121  0F1C                     	;# 
  2122  0F1D                     	;# 
  2123  0F1E                     	;# 
  2124  0F1F                     	;# 
  2125  0F20                     	;# 
  2126  0F21                     	;# 
  2127  0F22                     	;# 
  2128  0F23                     	;# 
  2129  0F24                     	;# 
  2130  0F25                     	;# 
  2131  0F26                     	;# 
  2132  0F27                     	;# 
  2133  0F38                     	;# 
  2134  0F39                     	;# 
  2135  0F3A                     	;# 
  2136  0F3B                     	;# 
  2137  0F3C                     	;# 
  2138  0F3D                     	;# 
  2139  0F3E                     	;# 
  2140  0F3F                     	;# 
  2141  0F40                     	;# 
  2142  0F41                     	;# 
  2143  0F43                     	;# 
  2144  0F44                     	;# 
  2145  0F45                     	;# 
  2146  0F46                     	;# 
  2147  0F47                     	;# 
  2148  0F48                     	;# 
  2149  0F49                     	;# 
  2150  0F4A                     	;# 
  2151  0F4B                     	;# 
  2152  0F4C                     	;# 
  2153  0F4E                     	;# 
  2154  0F4F                     	;# 
  2155  0F50                     	;# 
  2156  0F51                     	;# 
  2157  0F52                     	;# 
  2158  0F53                     	;# 
  2159  0F54                     	;# 
  2160  0F55                     	;# 
  2161  0F56                     	;# 
  2162  0F57                     	;# 
  2163  0F65                     	;# 
  2164  0F68                     	;# 
  2165  0F69                     	;# 
  2166  0F6A                     	;# 
  2167  0F6B                     	;# 
  2168  0FE4                     	;# 
  2169  0FE5                     	;# 
  2170  0FE6                     	;# 
  2171  0FE7                     	;# 
  2172  0FE8                     	;# 
  2173  0FE9                     	;# 
  2174  0FEA                     	;# 
  2175  0FEB                     	;# 
  2176  0FED                     	;# 
  2177  0FEE                     	;# 
  2178  0FEF                     	;# 
  2179  0000                     	;# 
  2180  0001                     	;# 
  2181  0002                     	;# 
  2182  0003                     	;# 
  2183  0004                     	;# 
  2184  0005                     	;# 
  2185  0006                     	;# 
  2186  0007                     	;# 
  2187  0008                     	;# 
  2188  0009                     	;# 
  2189  000A                     	;# 
  2190  000B                     	;# 
  2191  000C                     	;# 
  2192  000D                     	;# 
  2193  000E                     	;# 
  2194  0010                     	;# 
  2195  0011                     	;# 
  2196  0012                     	;# 
  2197  0013                     	;# 
  2198  0016                     	;# 
  2199  0017                     	;# 
  2200  0018                     	;# 
  2201  001C                     	;# 
  2202  001C                     	;# 
  2203  001D                     	;# 
  2204  001D                     	;# 
  2205  001E                     	;# 
  2206  001F                     	;# 
  2207  008C                     	;# 
  2208  008C                     	;# 
  2209  008D                     	;# 
  2210  008E                     	;# 
  2211  008E                     	;# 
  2212  008F                     	;# 
  2213  0090                     	;# 
  2214  0090                     	;# 
  2215  0091                     	;# 
  2216  0093                     	;# 
  2217  0094                     	;# 
  2218  0095                     	;# 
  2219  0096                     	;# 
  2220  0097                     	;# 
  2221  0098                     	;# 
  2222  0099                     	;# 
  2223  009A                     	;# 
  2224  009B                     	;# 
  2225  009C                     	;# 
  2226  009D                     	;# 
  2227  009E                     	;# 
  2228  010C                     	;# 
  2229  010D                     	;# 
  2230  010E                     	;# 
  2231  010E                     	;# 
  2232  010F                     	;# 
  2233  0110                     	;# 
  2234  0110                     	;# 
  2235  0111                     	;# 
  2236  0112                     	;# 
  2237  0112                     	;# 
  2238  0113                     	;# 
  2239  0114                     	;# 
  2240  0114                     	;# 
  2241  0115                     	;# 
  2242  0116                     	;# 
  2243  0116                     	;# 
  2244  0117                     	;# 
  2245  0119                     	;# 
  2246  0119                     	;# 
  2247  0119                     	;# 
  2248  011A                     	;# 
  2249  011A                     	;# 
  2250  011A                     	;# 
  2251  011B                     	;# 
  2252  011B                     	;# 
  2253  011B                     	;# 
  2254  011B                     	;# 
  2255  011B                     	;# 
  2256  011C                     	;# 
  2257  011C                     	;# 
  2258  011C                     	;# 
  2259  011D                     	;# 
  2260  011D                     	;# 
  2261  011D                     	;# 
  2262  011E                     	;# 
  2263  011E                     	;# 
  2264  011E                     	;# 
  2265  011F                     	;# 
  2266  011F                     	;# 
  2267  011F                     	;# 
  2268  011F                     	;# 
  2269  011F                     	;# 
  2270  018C                     	;# 
  2271  018D                     	;# 
  2272  018E                     	;# 
  2273  018F                     	;# 
  2274  0190                     	;# 
  2275  0191                     	;# 
  2276  0192                     	;# 
  2277  0196                     	;# 
  2278  0197                     	;# 
  2279  0198                     	;# 
  2280  0199                     	;# 
  2281  019A                     	;# 
  2282  019B                     	;# 
  2283  019C                     	;# 
  2284  020C                     	;# 
  2285  020C                     	;# 
  2286  020D                     	;# 
  2287  020E                     	;# 
  2288  020F                     	;# 
  2289  020F                     	;# 
  2290  0210                     	;# 
  2291  0210                     	;# 
  2292  0211                     	;# 
  2293  0211                     	;# 
  2294  0212                     	;# 
  2295  0212                     	;# 
  2296  0213                     	;# 
  2297  0214                     	;# 
  2298  0215                     	;# 
  2299  0215                     	;# 
  2300  0216                     	;# 
  2301  0216                     	;# 
  2302  0217                     	;# 
  2303  0217                     	;# 
  2304  0218                     	;# 
  2305  0218                     	;# 
  2306  0219                     	;# 
  2307  021A                     	;# 
  2308  021B                     	;# 
  2309  021B                     	;# 
  2310  021C                     	;# 
  2311  021C                     	;# 
  2312  021D                     	;# 
  2313  021D                     	;# 
  2314  021E                     	;# 
  2315  021F                     	;# 
  2316  028C                     	;# 
  2317  028C                     	;# 
  2318  028D                     	;# 
  2319  028D                     	;# 
  2320  028E                     	;# 
  2321  028F                     	;# 
  2322  0290                     	;# 
  2323  0290                     	;# 
  2324  0291                     	;# 
  2325  0292                     	;# 
  2326  0292                     	;# 
  2327  0293                     	;# 
  2328  0293                     	;# 
  2329  0294                     	;# 
  2330  0295                     	;# 
  2331  0296                     	;# 
  2332  0296                     	;# 
  2333  0297                     	;# 
  2334  0298                     	;# 
  2335  0298                     	;# 
  2336  0299                     	;# 
  2337  0299                     	;# 
  2338  029A                     	;# 
  2339  029B                     	;# 
  2340  029C                     	;# 
  2341  029C                     	;# 
  2342  029D                     	;# 
  2343  030C                     	;# 
  2344  030C                     	;# 
  2345  030D                     	;# 
  2346  030E                     	;# 
  2347  030F                     	;# 
  2348  0310                     	;# 
  2349  0310                     	;# 
  2350  0311                     	;# 
  2351  0312                     	;# 
  2352  0313                     	;# 
  2353  0314                     	;# 
  2354  0314                     	;# 
  2355  0315                     	;# 
  2356  0316                     	;# 
  2357  0317                     	;# 
  2358  0318                     	;# 
  2359  0318                     	;# 
  2360  0319                     	;# 
  2361  031A                     	;# 
  2362  031B                     	;# 
  2363  031C                     	;# 
  2364  031C                     	;# 
  2365  031D                     	;# 
  2366  031E                     	;# 
  2367  031F                     	;# 
  2368  038C                     	;# 
  2369  038D                     	;# 
  2370  038E                     	;# 
  2371  0390                     	;# 
  2372  0391                     	;# 
  2373  0392                     	;# 
  2374  040C                     	;# 
  2375  040D                     	;# 
  2376  040E                     	;# 
  2377  040F                     	;# 
  2378  0410                     	;# 
  2379  0411                     	;# 
  2380  0416                     	;# 
  2381  0416                     	;# 
  2382  0417                     	;# 
  2383  0418                     	;# 
  2384  0418                     	;# 
  2385  0419                     	;# 
  2386  041A                     	;# 
  2387  041A                     	;# 
  2388  041B                     	;# 
  2389  041C                     	;# 
  2390  041C                     	;# 
  2391  041D                     	;# 
  2392  041E                     	;# 
  2393  041F                     	;# 
  2394  048C                     	;# 
  2395  048C                     	;# 
  2396  048D                     	;# 
  2397  048E                     	;# 
  2398  048F                     	;# 
  2399  048F                     	;# 
  2400  0490                     	;# 
  2401  0491                     	;# 
  2402  0492                     	;# 
  2403  0492                     	;# 
  2404  0493                     	;# 
  2405  0494                     	;# 
  2406  0495                     	;# 
  2407  0495                     	;# 
  2408  0496                     	;# 
  2409  0497                     	;# 
  2410  0498                     	;# 
  2411  0499                     	;# 
  2412  049A                     	;# 
  2413  049B                     	;# 
  2414  049C                     	;# 
  2415  049D                     	;# 
  2416  050C                     	;# 
  2417  050C                     	;# 
  2418  050D                     	;# 
  2419  050E                     	;# 
  2420  050F                     	;# 
  2421  050F                     	;# 
  2422  0510                     	;# 
  2423  0511                     	;# 
  2424  0512                     	;# 
  2425  0512                     	;# 
  2426  0513                     	;# 
  2427  0514                     	;# 
  2428  0515                     	;# 
  2429  0515                     	;# 
  2430  0516                     	;# 
  2431  0517                     	;# 
  2432  0518                     	;# 
  2433  0519                     	;# 
  2434  051A                     	;# 
  2435  051B                     	;# 
  2436  051C                     	;# 
  2437  051D                     	;# 
  2438  058C                     	;# 
  2439  058C                     	;# 
  2440  058D                     	;# 
  2441  058E                     	;# 
  2442  058F                     	;# 
  2443  058F                     	;# 
  2444  0590                     	;# 
  2445  0591                     	;# 
  2446  0592                     	;# 
  2447  0593                     	;# 
  2448  060C                     	;# 
  2449  060D                     	;# 
  2450  060E                     	;# 
  2451  060F                     	;# 
  2452  0610                     	;# 
  2453  0611                     	;# 
  2454  0612                     	;# 
  2455  0613                     	;# 
  2456  0614                     	;# 
  2457  0616                     	;# 
  2458  0617                     	;# 
  2459  0618                     	;# 
  2460  0619                     	;# 
  2461  061A                     	;# 
  2462  061B                     	;# 
  2463  061C                     	;# 
  2464  061D                     	;# 
  2465  061E                     	;# 
  2466  068C                     	;# 
  2467  068D                     	;# 
  2468  068E                     	;# 
  2469  068F                     	;# 
  2470  0690                     	;# 
  2471  0691                     	;# 
  2472  0692                     	;# 
  2473  0693                     	;# 
  2474  0694                     	;# 
  2475  070C                     	;# 
  2476  070D                     	;# 
  2477  070E                     	;# 
  2478  070F                     	;# 
  2479  0710                     	;# 
  2480  0711                     	;# 
  2481  0712                     	;# 
  2482  0713                     	;# 
  2483  0714                     	;# 
  2484  0716                     	;# 
  2485  0717                     	;# 
  2486  0718                     	;# 
  2487  0719                     	;# 
  2488  071A                     	;# 
  2489  071B                     	;# 
  2490  071C                     	;# 
  2491  071D                     	;# 
  2492  071E                     	;# 
  2493  0796                     	;# 
  2494  0797                     	;# 
  2495  0798                     	;# 
  2496  0799                     	;# 
  2497  079A                     	;# 
  2498  079B                     	;# 
  2499  080C                     	;# 
  2500  080D                     	;# 
  2501  080E                     	;# 
  2502  080F                     	;# 
  2503  0810                     	;# 
  2504  0811                     	;# 
  2505  0812                     	;# 
  2506  0813                     	;# 
  2507  0814                     	;# 
  2508  081A                     	;# 
  2509  081B                     	;# 
  2510  081C                     	;# 
  2511  081D                     	;# 
  2512  081E                     	;# 
  2513  081F                     	;# 
  2514  088C                     	;# 
  2515  088D                     	;# 
  2516  088E                     	;# 
  2517  088F                     	;# 
  2518  0890                     	;# 
  2519  0891                     	;# 
  2520  0892                     	;# 
  2521  0893                     	;# 
  2522  0895                     	;# 
  2523  0896                     	;# 
  2524  0897                     	;# 
  2525  0898                     	;# 
  2526  0899                     	;# 
  2527  089A                     	;# 
  2528  089B                     	;# 
  2529  090C                     	;# 
  2530  090E                     	;# 
  2531  090F                     	;# 
  2532  091F                     	;# 
  2533  091F                     	;# 
  2534  098F                     	;# 
  2535  098F                     	;# 
  2536  0990                     	;# 
  2537  0991                     	;# 
  2538  0992                     	;# 
  2539  0993                     	;# 
  2540  0994                     	;# 
  2541  0995                     	;# 
  2542  0996                     	;# 
  2543  0997                     	;# 
  2544  0E0F                     	;# 
  2545  0E10                     	;# 
  2546  0E11                     	;# 
  2547  0E12                     	;# 
  2548  0E13                     	;# 
  2549  0E14                     	;# 
  2550  0E15                     	;# 
  2551  0E16                     	;# 
  2552  0E17                     	;# 
  2553  0E18                     	;# 
  2554  0E19                     	;# 
  2555  0E1A                     	;# 
  2556  0E1B                     	;# 
  2557  0E1C                     	;# 
  2558  0E1D                     	;# 
  2559  0E1E                     	;# 
  2560  0E1F                     	;# 
  2561  0E20                     	;# 
  2562  0E21                     	;# 
  2563  0E22                     	;# 
  2564  0E23                     	;# 
  2565  0E24                     	;# 
  2566  0E25                     	;# 
  2567  0E26                     	;# 
  2568  0E27                     	;# 
  2569  0E28                     	;# 
  2570  0E29                     	;# 
  2571  0E2A                     	;# 
  2572  0E2B                     	;# 
  2573  0E2C                     	;# 
  2574  0E2D                     	;# 
  2575  0E2E                     	;# 
  2576  0E2F                     	;# 
  2577  0E30                     	;# 
  2578  0E31                     	;# 
  2579  0E32                     	;# 
  2580  0E33                     	;# 
  2581  0E34                     	;# 
  2582  0E35                     	;# 
  2583  0E36                     	;# 
  2584  0E37                     	;# 
  2585  0E8F                     	;# 
  2586  0E90                     	;# 
  2587  0E91                     	;# 
  2588  0E92                     	;# 
  2589  0E93                     	;# 
  2590  0E94                     	;# 
  2591  0E95                     	;# 
  2592  0E96                     	;# 
  2593  0E97                     	;# 
  2594  0E9C                     	;# 
  2595  0E9D                     	;# 
  2596  0E9E                     	;# 
  2597  0EA1                     	;# 
  2598  0EA2                     	;# 
  2599  0EA3                     	;# 
  2600  0EA4                     	;# 
  2601  0EA5                     	;# 
  2602  0EA9                     	;# 
  2603  0EAA                     	;# 
  2604  0EAB                     	;# 
  2605  0EAC                     	;# 
  2606  0EB1                     	;# 
  2607  0EB2                     	;# 
  2608  0EB3                     	;# 
  2609  0EB8                     	;# 
  2610  0EB9                     	;# 
  2611  0EBA                     	;# 
  2612  0EBB                     	;# 
  2613  0EBC                     	;# 
  2614  0EBD                     	;# 
  2615  0EBE                     	;# 
  2616  0EC3                     	;# 
  2617  0EC5                     	;# 
  2618  0EC6                     	;# 
  2619  0EC7                     	;# 
  2620  0EC8                     	;# 
  2621  0EC9                     	;# 
  2622  0ECA                     	;# 
  2623  0ECB                     	;# 
  2624  0ECC                     	;# 
  2625  0F10                     	;# 
  2626  0F11                     	;# 
  2627  0F12                     	;# 
  2628  0F13                     	;# 
  2629  0F14                     	;# 
  2630  0F15                     	;# 
  2631  0F16                     	;# 
  2632  0F17                     	;# 
  2633  0F18                     	;# 
  2634  0F19                     	;# 
  2635  0F1A                     	;# 
  2636  0F1B                     	;# 
  2637  0F1C                     	;# 
  2638  0F1D                     	;# 
  2639  0F1E                     	;# 
  2640  0F1F                     	;# 
  2641  0F20                     	;# 
  2642  0F21                     	;# 
  2643  0F22                     	;# 
  2644  0F23                     	;# 
  2645  0F24                     	;# 
  2646  0F25                     	;# 
  2647  0F26                     	;# 
  2648  0F27                     	;# 
  2649  0F38                     	;# 
  2650  0F39                     	;# 
  2651  0F3A                     	;# 
  2652  0F3B                     	;# 
  2653  0F3C                     	;# 
  2654  0F3D                     	;# 
  2655  0F3E                     	;# 
  2656  0F3F                     	;# 
  2657  0F40                     	;# 
  2658  0F41                     	;# 
  2659  0F43                     	;# 
  2660  0F44                     	;# 
  2661  0F45                     	;# 
  2662  0F46                     	;# 
  2663  0F47                     	;# 
  2664  0F48                     	;# 
  2665  0F49                     	;# 
  2666  0F4A                     	;# 
  2667  0F4B                     	;# 
  2668  0F4C                     	;# 
  2669  0F4E                     	;# 
  2670  0F4F                     	;# 
  2671  0F50                     	;# 
  2672  0F51                     	;# 
  2673  0F52                     	;# 
  2674  0F53                     	;# 
  2675  0F54                     	;# 
  2676  0F55                     	;# 
  2677  0F56                     	;# 
  2678  0F57                     	;# 
  2679  0F65                     	;# 
  2680  0F68                     	;# 
  2681  0F69                     	;# 
  2682  0F6A                     	;# 
  2683  0F6B                     	;# 
  2684  0FE4                     	;# 
  2685  0FE5                     	;# 
  2686  0FE6                     	;# 
  2687  0FE7                     	;# 
  2688  0FE8                     	;# 
  2689  0FE9                     	;# 
  2690  0FEA                     	;# 
  2691  0FEB                     	;# 
  2692  0FED                     	;# 
  2693  0FEE                     	;# 
  2694  0FEF                     	;# 
  2695  0000                     	;# 
  2696  0001                     	;# 
  2697  0002                     	;# 
  2698  0003                     	;# 
  2699  0004                     	;# 
  2700  0005                     	;# 
  2701  0006                     	;# 
  2702  0007                     	;# 
  2703  0008                     	;# 
  2704  0009                     	;# 
  2705  000A                     	;# 
  2706  000B                     	;# 
  2707  000C                     	;# 
  2708  000D                     	;# 
  2709  000E                     	;# 
  2710  0010                     	;# 
  2711  0011                     	;# 
  2712  0012                     	;# 
  2713  0013                     	;# 
  2714  0016                     	;# 
  2715  0017                     	;# 
  2716  0018                     	;# 
  2717  001C                     	;# 
  2718  001C                     	;# 
  2719  001D                     	;# 
  2720  001D                     	;# 
  2721  001E                     	;# 
  2722  001F                     	;# 
  2723  008C                     	;# 
  2724  008C                     	;# 
  2725  008D                     	;# 
  2726  008E                     	;# 
  2727  008E                     	;# 
  2728  008F                     	;# 
  2729  0090                     	;# 
  2730  0090                     	;# 
  2731  0091                     	;# 
  2732  0093                     	;# 
  2733  0094                     	;# 
  2734  0095                     	;# 
  2735  0096                     	;# 
  2736  0097                     	;# 
  2737  0098                     	;# 
  2738  0099                     	;# 
  2739  009A                     	;# 
  2740  009B                     	;# 
  2741  009C                     	;# 
  2742  009D                     	;# 
  2743  009E                     	;# 
  2744  010C                     	;# 
  2745  010D                     	;# 
  2746  010E                     	;# 
  2747  010E                     	;# 
  2748  010F                     	;# 
  2749  0110                     	;# 
  2750  0110                     	;# 
  2751  0111                     	;# 
  2752  0112                     	;# 
  2753  0112                     	;# 
  2754  0113                     	;# 
  2755  0114                     	;# 
  2756  0114                     	;# 
  2757  0115                     	;# 
  2758  0116                     	;# 
  2759  0116                     	;# 
  2760  0117                     	;# 
  2761  0119                     	;# 
  2762  0119                     	;# 
  2763  0119                     	;# 
  2764  011A                     	;# 
  2765  011A                     	;# 
  2766  011A                     	;# 
  2767  011B                     	;# 
  2768  011B                     	;# 
  2769  011B                     	;# 
  2770  011B                     	;# 
  2771  011B                     	;# 
  2772  011C                     	;# 
  2773  011C                     	;# 
  2774  011C                     	;# 
  2775  011D                     	;# 
  2776  011D                     	;# 
  2777  011D                     	;# 
  2778  011E                     	;# 
  2779  011E                     	;# 
  2780  011E                     	;# 
  2781  011F                     	;# 
  2782  011F                     	;# 
  2783  011F                     	;# 
  2784  011F                     	;# 
  2785  011F                     	;# 
  2786  018C                     	;# 
  2787  018D                     	;# 
  2788  018E                     	;# 
  2789  018F                     	;# 
  2790  0190                     	;# 
  2791  0191                     	;# 
  2792  0192                     	;# 
  2793  0196                     	;# 
  2794  0197                     	;# 
  2795  0198                     	;# 
  2796  0199                     	;# 
  2797  019A                     	;# 
  2798  019B                     	;# 
  2799  019C                     	;# 
  2800  020C                     	;# 
  2801  020C                     	;# 
  2802  020D                     	;# 
  2803  020E                     	;# 
  2804  020F                     	;# 
  2805  020F                     	;# 
  2806  0210                     	;# 
  2807  0210                     	;# 
  2808  0211                     	;# 
  2809  0211                     	;# 
  2810  0212                     	;# 
  2811  0212                     	;# 
  2812  0213                     	;# 
  2813  0214                     	;# 
  2814  0215                     	;# 
  2815  0215                     	;# 
  2816  0216                     	;# 
  2817  0216                     	;# 
  2818  0217                     	;# 
  2819  0217                     	;# 
  2820  0218                     	;# 
  2821  0218                     	;# 
  2822  0219                     	;# 
  2823  021A                     	;# 
  2824  021B                     	;# 
  2825  021B                     	;# 
  2826  021C                     	;# 
  2827  021C                     	;# 
  2828  021D                     	;# 
  2829  021D                     	;# 
  2830  021E                     	;# 
  2831  021F                     	;# 
  2832  028C                     	;# 
  2833  028C                     	;# 
  2834  028D                     	;# 
  2835  028D                     	;# 
  2836  028E                     	;# 
  2837  028F                     	;# 
  2838  0290                     	;# 
  2839  0290                     	;# 
  2840  0291                     	;# 
  2841  0292                     	;# 
  2842  0292                     	;# 
  2843  0293                     	;# 
  2844  0293                     	;# 
  2845  0294                     	;# 
  2846  0295                     	;# 
  2847  0296                     	;# 
  2848  0296                     	;# 
  2849  0297                     	;# 
  2850  0298                     	;# 
  2851  0298                     	;# 
  2852  0299                     	;# 
  2853  0299                     	;# 
  2854  029A                     	;# 
  2855  029B                     	;# 
  2856  029C                     	;# 
  2857  029C                     	;# 
  2858  029D                     	;# 
  2859  030C                     	;# 
  2860  030C                     	;# 
  2861  030D                     	;# 
  2862  030E                     	;# 
  2863  030F                     	;# 
  2864  0310                     	;# 
  2865  0310                     	;# 
  2866  0311                     	;# 
  2867  0312                     	;# 
  2868  0313                     	;# 
  2869  0314                     	;# 
  2870  0314                     	;# 
  2871  0315                     	;# 
  2872  0316                     	;# 
  2873  0317                     	;# 
  2874  0318                     	;# 
  2875  0318                     	;# 
  2876  0319                     	;# 
  2877  031A                     	;# 
  2878  031B                     	;# 
  2879  031C                     	;# 
  2880  031C                     	;# 
  2881  031D                     	;# 
  2882  031E                     	;# 
  2883  031F                     	;# 
  2884  038C                     	;# 
  2885  038D                     	;# 
  2886  038E                     	;# 
  2887  0390                     	;# 
  2888  0391                     	;# 
  2889  0392                     	;# 
  2890  040C                     	;# 
  2891  040D                     	;# 
  2892  040E                     	;# 
  2893  040F                     	;# 
  2894  0410                     	;# 
  2895  0411                     	;# 
  2896  0416                     	;# 
  2897  0416                     	;# 
  2898  0417                     	;# 
  2899  0418                     	;# 
  2900  0418                     	;# 
  2901  0419                     	;# 
  2902  041A                     	;# 
  2903  041A                     	;# 
  2904  041B                     	;# 
  2905  041C                     	;# 
  2906  041C                     	;# 
  2907  041D                     	;# 
  2908  041E                     	;# 
  2909  041F                     	;# 
  2910  048C                     	;# 
  2911  048C                     	;# 
  2912  048D                     	;# 
  2913  048E                     	;# 
  2914  048F                     	;# 
  2915  048F                     	;# 
  2916  0490                     	;# 
  2917  0491                     	;# 
  2918  0492                     	;# 
  2919  0492                     	;# 
  2920  0493                     	;# 
  2921  0494                     	;# 
  2922  0495                     	;# 
  2923  0495                     	;# 
  2924  0496                     	;# 
  2925  0497                     	;# 
  2926  0498                     	;# 
  2927  0499                     	;# 
  2928  049A                     	;# 
  2929  049B                     	;# 
  2930  049C                     	;# 
  2931  049D                     	;# 
  2932  050C                     	;# 
  2933  050C                     	;# 
  2934  050D                     	;# 
  2935  050E                     	;# 
  2936  050F                     	;# 
  2937  050F                     	;# 
  2938  0510                     	;# 
  2939  0511                     	;# 
  2940  0512                     	;# 
  2941  0512                     	;# 
  2942  0513                     	;# 
  2943  0514                     	;# 
  2944  0515                     	;# 
  2945  0515                     	;# 
  2946  0516                     	;# 
  2947  0517                     	;# 
  2948  0518                     	;# 
  2949  0519                     	;# 
  2950  051A                     	;# 
  2951  051B                     	;# 
  2952  051C                     	;# 
  2953  051D                     	;# 
  2954  058C                     	;# 
  2955  058C                     	;# 
  2956  058D                     	;# 
  2957  058E                     	;# 
  2958  058F                     	;# 
  2959  058F                     	;# 
  2960  0590                     	;# 
  2961  0591                     	;# 
  2962  0592                     	;# 
  2963  0593                     	;# 
  2964  060C                     	;# 
  2965  060D                     	;# 
  2966  060E                     	;# 
  2967  060F                     	;# 
  2968  0610                     	;# 
  2969  0611                     	;# 
  2970  0612                     	;# 
  2971  0613                     	;# 
  2972  0614                     	;# 
  2973  0616                     	;# 
  2974  0617                     	;# 
  2975  0618                     	;# 
  2976  0619                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061D                     	;# 
  2981  061E                     	;# 
  2982  068C                     	;# 
  2983  068D                     	;# 
  2984  068E                     	;# 
  2985  068F                     	;# 
  2986  0690                     	;# 
  2987  0691                     	;# 
  2988  0692                     	;# 
  2989  0693                     	;# 
  2990  0694                     	;# 
  2991  070C                     	;# 
  2992  070D                     	;# 
  2993  070E                     	;# 
  2994  070F                     	;# 
  2995  0710                     	;# 
  2996  0711                     	;# 
  2997  0712                     	;# 
  2998  0713                     	;# 
  2999  0714                     	;# 
  3000  0716                     	;# 
  3001  0717                     	;# 
  3002  0718                     	;# 
  3003  0719                     	;# 
  3004  071A                     	;# 
  3005  071B                     	;# 
  3006  071C                     	;# 
  3007  071D                     	;# 
  3008  071E                     	;# 
  3009  0796                     	;# 
  3010  0797                     	;# 
  3011  0798                     	;# 
  3012  0799                     	;# 
  3013  079A                     	;# 
  3014  079B                     	;# 
  3015  080C                     	;# 
  3016  080D                     	;# 
  3017  080E                     	;# 
  3018  080F                     	;# 
  3019  0810                     	;# 
  3020  0811                     	;# 
  3021  0812                     	;# 
  3022  0813                     	;# 
  3023  0814                     	;# 
  3024  081A                     	;# 
  3025  081B                     	;# 
  3026  081C                     	;# 
  3027  081D                     	;# 
  3028  081E                     	;# 
  3029  081F                     	;# 
  3030  088C                     	;# 
  3031  088D                     	;# 
  3032  088E                     	;# 
  3033  088F                     	;# 
  3034  0890                     	;# 
  3035  0891                     	;# 
  3036  0892                     	;# 
  3037  0893                     	;# 
  3038  0895                     	;# 
  3039  0896                     	;# 
  3040  0897                     	;# 
  3041  0898                     	;# 
  3042  0899                     	;# 
  3043  089A                     	;# 
  3044  089B                     	;# 
  3045  090C                     	;# 
  3046  090E                     	;# 
  3047  090F                     	;# 
  3048  091F                     	;# 
  3049  091F                     	;# 
  3050  098F                     	;# 
  3051  098F                     	;# 
  3052  0990                     	;# 
  3053  0991                     	;# 
  3054  0992                     	;# 
  3055  0993                     	;# 
  3056  0994                     	;# 
  3057  0995                     	;# 
  3058  0996                     	;# 
  3059  0997                     	;# 
  3060  0E0F                     	;# 
  3061  0E10                     	;# 
  3062  0E11                     	;# 
  3063  0E12                     	;# 
  3064  0E13                     	;# 
  3065  0E14                     	;# 
  3066  0E15                     	;# 
  3067  0E16                     	;# 
  3068  0E17                     	;# 
  3069  0E18                     	;# 
  3070  0E19                     	;# 
  3071  0E1A                     	;# 
  3072  0E1B                     	;# 
  3073  0E1C                     	;# 
  3074  0E1D                     	;# 
  3075  0E1E                     	;# 
  3076  0E1F                     	;# 
  3077  0E20                     	;# 
  3078  0E21                     	;# 
  3079  0E22                     	;# 
  3080  0E23                     	;# 
  3081  0E24                     	;# 
  3082  0E25                     	;# 
  3083  0E26                     	;# 
  3084  0E27                     	;# 
  3085  0E28                     	;# 
  3086  0E29                     	;# 
  3087  0E2A                     	;# 
  3088  0E2B                     	;# 
  3089  0E2C                     	;# 
  3090  0E2D                     	;# 
  3091  0E2E                     	;# 
  3092  0E2F                     	;# 
  3093  0E30                     	;# 
  3094  0E31                     	;# 
  3095  0E32                     	;# 
  3096  0E33                     	;# 
  3097  0E34                     	;# 
  3098  0E35                     	;# 
  3099  0E36                     	;# 
  3100  0E37                     	;# 
  3101  0E8F                     	;# 
  3102  0E90                     	;# 
  3103  0E91                     	;# 
  3104  0E92                     	;# 
  3105  0E93                     	;# 
  3106  0E94                     	;# 
  3107  0E95                     	;# 
  3108  0E96                     	;# 
  3109  0E97                     	;# 
  3110  0E9C                     	;# 
  3111  0E9D                     	;# 
  3112  0E9E                     	;# 
  3113  0EA1                     	;# 
  3114  0EA2                     	;# 
  3115  0EA3                     	;# 
  3116  0EA4                     	;# 
  3117  0EA5                     	;# 
  3118  0EA9                     	;# 
  3119  0EAA                     	;# 
  3120  0EAB                     	;# 
  3121  0EAC                     	;# 
  3122  0EB1                     	;# 
  3123  0EB2                     	;# 
  3124  0EB3                     	;# 
  3125  0EB8                     	;# 
  3126  0EB9                     	;# 
  3127  0EBA                     	;# 
  3128  0EBB                     	;# 
  3129  0EBC                     	;# 
  3130  0EBD                     	;# 
  3131  0EBE                     	;# 
  3132  0EC3                     	;# 
  3133  0EC5                     	;# 
  3134  0EC6                     	;# 
  3135  0EC7                     	;# 
  3136  0EC8                     	;# 
  3137  0EC9                     	;# 
  3138  0ECA                     	;# 
  3139  0ECB                     	;# 
  3140  0ECC                     	;# 
  3141  0F10                     	;# 
  3142  0F11                     	;# 
  3143  0F12                     	;# 
  3144  0F13                     	;# 
  3145  0F14                     	;# 
  3146  0F15                     	;# 
  3147  0F16                     	;# 
  3148  0F17                     	;# 
  3149  0F18                     	;# 
  3150  0F19                     	;# 
  3151  0F1A                     	;# 
  3152  0F1B                     	;# 
  3153  0F1C                     	;# 
  3154  0F1D                     	;# 
  3155  0F1E                     	;# 
  3156  0F1F                     	;# 
  3157  0F20                     	;# 
  3158  0F21                     	;# 
  3159  0F22                     	;# 
  3160  0F23                     	;# 
  3161  0F24                     	;# 
  3162  0F25                     	;# 
  3163  0F26                     	;# 
  3164  0F27                     	;# 
  3165  0F38                     	;# 
  3166  0F39                     	;# 
  3167  0F3A                     	;# 
  3168  0F3B                     	;# 
  3169  0F3C                     	;# 
  3170  0F3D                     	;# 
  3171  0F3E                     	;# 
  3172  0F3F                     	;# 
  3173  0F40                     	;# 
  3174  0F41                     	;# 
  3175  0F43                     	;# 
  3176  0F44                     	;# 
  3177  0F45                     	;# 
  3178  0F46                     	;# 
  3179  0F47                     	;# 
  3180  0F48                     	;# 
  3181  0F49                     	;# 
  3182  0F4A                     	;# 
  3183  0F4B                     	;# 
  3184  0F4C                     	;# 
  3185  0F4E                     	;# 
  3186  0F4F                     	;# 
  3187  0F50                     	;# 
  3188  0F51                     	;# 
  3189  0F52                     	;# 
  3190  0F53                     	;# 
  3191  0F54                     	;# 
  3192  0F55                     	;# 
  3193  0F56                     	;# 
  3194  0F57                     	;# 
  3195  0F65                     	;# 
  3196  0F68                     	;# 
  3197  0F69                     	;# 
  3198  0F6A                     	;# 
  3199  0F6B                     	;# 
  3200  0FE4                     	;# 
  3201  0FE5                     	;# 
  3202  0FE6                     	;# 
  3203  0FE7                     	;# 
  3204  0FE8                     	;# 
  3205  0FE9                     	;# 
  3206  0FEA                     	;# 
  3207  0FEB                     	;# 
  3208  0FED                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0000                     	;# 
  3212  0001                     	;# 
  3213  0002                     	;# 
  3214  0003                     	;# 
  3215  0004                     	;# 
  3216  0005                     	;# 
  3217  0006                     	;# 
  3218  0007                     	;# 
  3219  0008                     	;# 
  3220  0009                     	;# 
  3221  000A                     	;# 
  3222  000B                     	;# 
  3223  000C                     	;# 
  3224  000D                     	;# 
  3225  000E                     	;# 
  3226  0010                     	;# 
  3227  0011                     	;# 
  3228  0012                     	;# 
  3229  0013                     	;# 
  3230  0016                     	;# 
  3231  0017                     	;# 
  3232  0018                     	;# 
  3233  001C                     	;# 
  3234  001C                     	;# 
  3235  001D                     	;# 
  3236  001D                     	;# 
  3237  001E                     	;# 
  3238  001F                     	;# 
  3239  008C                     	;# 
  3240  008C                     	;# 
  3241  008D                     	;# 
  3242  008E                     	;# 
  3243  008E                     	;# 
  3244  008F                     	;# 
  3245  0090                     	;# 
  3246  0090                     	;# 
  3247  0091                     	;# 
  3248  0093                     	;# 
  3249  0094                     	;# 
  3250  0095                     	;# 
  3251  0096                     	;# 
  3252  0097                     	;# 
  3253  0098                     	;# 
  3254  0099                     	;# 
  3255  009A                     	;# 
  3256  009B                     	;# 
  3257  009C                     	;# 
  3258  009D                     	;# 
  3259  009E                     	;# 
  3260  010C                     	;# 
  3261  010D                     	;# 
  3262  010E                     	;# 
  3263  010E                     	;# 
  3264  010F                     	;# 
  3265  0110                     	;# 
  3266  0110                     	;# 
  3267  0111                     	;# 
  3268  0112                     	;# 
  3269  0112                     	;# 
  3270  0113                     	;# 
  3271  0114                     	;# 
  3272  0114                     	;# 
  3273  0115                     	;# 
  3274  0116                     	;# 
  3275  0116                     	;# 
  3276  0117                     	;# 
  3277  0119                     	;# 
  3278  0119                     	;# 
  3279  0119                     	;# 
  3280  011A                     	;# 
  3281  011A                     	;# 
  3282  011A                     	;# 
  3283  011B                     	;# 
  3284  011B                     	;# 
  3285  011B                     	;# 
  3286  011B                     	;# 
  3287  011B                     	;# 
  3288  011C                     	;# 
  3289  011C                     	;# 
  3290  011C                     	;# 
  3291  011D                     	;# 
  3292  011D                     	;# 
  3293  011D                     	;# 
  3294  011E                     	;# 
  3295  011E                     	;# 
  3296  011E                     	;# 
  3297  011F                     	;# 
  3298  011F                     	;# 
  3299  011F                     	;# 
  3300  011F                     	;# 
  3301  011F                     	;# 
  3302  018C                     	;# 
  3303  018D                     	;# 
  3304  018E                     	;# 
  3305  018F                     	;# 
  3306  0190                     	;# 
  3307  0191                     	;# 
  3308  0192                     	;# 
  3309  0196                     	;# 
  3310  0197                     	;# 
  3311  0198                     	;# 
  3312  0199                     	;# 
  3313  019A                     	;# 
  3314  019B                     	;# 
  3315  019C                     	;# 
  3316  020C                     	;# 
  3317  020C                     	;# 
  3318  020D                     	;# 
  3319  020E                     	;# 
  3320  020F                     	;# 
  3321  020F                     	;# 
  3322  0210                     	;# 
  3323  0210                     	;# 
  3324  0211                     	;# 
  3325  0211                     	;# 
  3326  0212                     	;# 
  3327  0212                     	;# 
  3328  0213                     	;# 
  3329  0214                     	;# 
  3330  0215                     	;# 
  3331  0215                     	;# 
  3332  0216                     	;# 
  3333  0216                     	;# 
  3334  0217                     	;# 
  3335  0217                     	;# 
  3336  0218                     	;# 
  3337  0218                     	;# 
  3338  0219                     	;# 
  3339  021A                     	;# 
  3340  021B                     	;# 
  3341  021B                     	;# 
  3342  021C                     	;# 
  3343  021C                     	;# 
  3344  021D                     	;# 
  3345  021D                     	;# 
  3346  021E                     	;# 
  3347  021F                     	;# 
  3348  028C                     	;# 
  3349  028C                     	;# 
  3350  028D                     	;# 
  3351  028D                     	;# 
  3352  028E                     	;# 
  3353  028F                     	;# 
  3354  0290                     	;# 
  3355  0290                     	;# 
  3356  0291                     	;# 
  3357  0292                     	;# 
  3358  0292                     	;# 
  3359  0293                     	;# 
  3360  0293                     	;# 
  3361  0294                     	;# 
  3362  0295                     	;# 
  3363  0296                     	;# 
  3364  0296                     	;# 
  3365  0297                     	;# 
  3366  0298                     	;# 
  3367  0298                     	;# 
  3368  0299                     	;# 
  3369  0299                     	;# 
  3370  029A                     	;# 
  3371  029B                     	;# 
  3372  029C                     	;# 
  3373  029C                     	;# 
  3374  029D                     	;# 
  3375  030C                     	;# 
  3376  030C                     	;# 
  3377  030D                     	;# 
  3378  030E                     	;# 
  3379  030F                     	;# 
  3380  0310                     	;# 
  3381  0310                     	;# 
  3382  0311                     	;# 
  3383  0312                     	;# 
  3384  0313                     	;# 
  3385  0314                     	;# 
  3386  0314                     	;# 
  3387  0315                     	;# 
  3388  0316                     	;# 
  3389  0317                     	;# 
  3390  0318                     	;# 
  3391  0318                     	;# 
  3392  0319                     	;# 
  3393  031A                     	;# 
  3394  031B                     	;# 
  3395  031C                     	;# 
  3396  031C                     	;# 
  3397  031D                     	;# 
  3398  031E                     	;# 
  3399  031F                     	;# 
  3400  038C                     	;# 
  3401  038D                     	;# 
  3402  038E                     	;# 
  3403  0390                     	;# 
  3404  0391                     	;# 
  3405  0392                     	;# 
  3406  040C                     	;# 
  3407  040D                     	;# 
  3408  040E                     	;# 
  3409  040F                     	;# 
  3410  0410                     	;# 
  3411  0411                     	;# 
  3412  0416                     	;# 
  3413  0416                     	;# 
  3414  0417                     	;# 
  3415  0418                     	;# 
  3416  0418                     	;# 
  3417  0419                     	;# 
  3418  041A                     	;# 
  3419  041A                     	;# 
  3420  041B                     	;# 
  3421  041C                     	;# 
  3422  041C                     	;# 
  3423  041D                     	;# 
  3424  041E                     	;# 
  3425  041F                     	;# 
  3426  048C                     	;# 
  3427  048C                     	;# 
  3428  048D                     	;# 
  3429  048E                     	;# 
  3430  048F                     	;# 
  3431  048F                     	;# 
  3432  0490                     	;# 
  3433  0491                     	;# 
  3434  0492                     	;# 
  3435  0492                     	;# 
  3436  0493                     	;# 
  3437  0494                     	;# 
  3438  0495                     	;# 
  3439  0495                     	;# 
  3440  0496                     	;# 
  3441  0497                     	;# 
  3442  0498                     	;# 
  3443  0499                     	;# 
  3444  049A                     	;# 
  3445  049B                     	;# 
  3446  049C                     	;# 
  3447  049D                     	;# 
  3448  050C                     	;# 
  3449  050C                     	;# 
  3450  050D                     	;# 
  3451  050E                     	;# 
  3452  050F                     	;# 
  3453  050F                     	;# 
  3454  0510                     	;# 
  3455  0511                     	;# 
  3456  0512                     	;# 
  3457  0512                     	;# 
  3458  0513                     	;# 
  3459  0514                     	;# 
  3460  0515                     	;# 
  3461  0515                     	;# 
  3462  0516                     	;# 
  3463  0517                     	;# 
  3464  0518                     	;# 
  3465  0519                     	;# 
  3466  051A                     	;# 
  3467  051B                     	;# 
  3468  051C                     	;# 
  3469  051D                     	;# 
  3470  058C                     	;# 
  3471  058C                     	;# 
  3472  058D                     	;# 
  3473  058E                     	;# 
  3474  058F                     	;# 
  3475  058F                     	;# 
  3476  0590                     	;# 
  3477  0591                     	;# 
  3478  0592                     	;# 
  3479  0593                     	;# 
  3480  060C                     	;# 
  3481  060D                     	;# 
  3482  060E                     	;# 
  3483  060F                     	;# 
  3484  0610                     	;# 
  3485  0611                     	;# 
  3486  0612                     	;# 
  3487  0613                     	;# 
  3488  0614                     	;# 
  3489  0616                     	;# 
  3490  0617                     	;# 
  3491  0618                     	;# 
  3492  0619                     	;# 
  3493  061A                     	;# 
  3494  061B                     	;# 
  3495  061C                     	;# 
  3496  061D                     	;# 
  3497  061E                     	;# 
  3498  068C                     	;# 
  3499  068D                     	;# 
  3500  068E                     	;# 
  3501  068F                     	;# 
  3502  0690                     	;# 
  3503  0691                     	;# 
  3504  0692                     	;# 
  3505  0693                     	;# 
  3506  0694                     	;# 
  3507  070C                     	;# 
  3508  070D                     	;# 
  3509  070E                     	;# 
  3510  070F                     	;# 
  3511  0710                     	;# 
  3512  0711                     	;# 
  3513  0712                     	;# 
  3514  0713                     	;# 
  3515  0714                     	;# 
  3516  0716                     	;# 
  3517  0717                     	;# 
  3518  0718                     	;# 
  3519  0719                     	;# 
  3520  071A                     	;# 
  3521  071B                     	;# 
  3522  071C                     	;# 
  3523  071D                     	;# 
  3524  071E                     	;# 
  3525  0796                     	;# 
  3526  0797                     	;# 
  3527  0798                     	;# 
  3528  0799                     	;# 
  3529  079A                     	;# 
  3530  079B                     	;# 
  3531  080C                     	;# 
  3532  080D                     	;# 
  3533  080E                     	;# 
  3534  080F                     	;# 
  3535  0810                     	;# 
  3536  0811                     	;# 
  3537  0812                     	;# 
  3538  0813                     	;# 
  3539  0814                     	;# 
  3540  081A                     	;# 
  3541  081B                     	;# 
  3542  081C                     	;# 
  3543  081D                     	;# 
  3544  081E                     	;# 
  3545  081F                     	;# 
  3546  088C                     	;# 
  3547  088D                     	;# 
  3548  088E                     	;# 
  3549  088F                     	;# 
  3550  0890                     	;# 
  3551  0891                     	;# 
  3552  0892                     	;# 
  3553  0893                     	;# 
  3554  0895                     	;# 
  3555  0896                     	;# 
  3556  0897                     	;# 
  3557  0898                     	;# 
  3558  0899                     	;# 
  3559  089A                     	;# 
  3560  089B                     	;# 
  3561  090C                     	;# 
  3562  090E                     	;# 
  3563  090F                     	;# 
  3564  091F                     	;# 
  3565  091F                     	;# 
  3566  098F                     	;# 
  3567  098F                     	;# 
  3568  0990                     	;# 
  3569  0991                     	;# 
  3570  0992                     	;# 
  3571  0993                     	;# 
  3572  0994                     	;# 
  3573  0995                     	;# 
  3574  0996                     	;# 
  3575  0997                     	;# 
  3576  0E0F                     	;# 
  3577  0E10                     	;# 
  3578  0E11                     	;# 
  3579  0E12                     	;# 
  3580  0E13                     	;# 
  3581  0E14                     	;# 
  3582  0E15                     	;# 
  3583  0E16                     	;# 
  3584  0E17                     	;# 
  3585  0E18                     	;# 
  3586  0E19                     	;# 
  3587  0E1A                     	;# 
  3588  0E1B                     	;# 
  3589  0E1C                     	;# 
  3590  0E1D                     	;# 
  3591  0E1E                     	;# 
  3592  0E1F                     	;# 
  3593  0E20                     	;# 
  3594  0E21                     	;# 
  3595  0E22                     	;# 
  3596  0E23                     	;# 
  3597  0E24                     	;# 
  3598  0E25                     	;# 
  3599  0E26                     	;# 
  3600  0E27                     	;# 
  3601  0E28                     	;# 
  3602  0E29                     	;# 
  3603  0E2A                     	;# 
  3604  0E2B                     	;# 
  3605  0E2C                     	;# 
  3606  0E2D                     	;# 
  3607  0E2E                     	;# 
  3608  0E2F                     	;# 
  3609  0E30                     	;# 
  3610  0E31                     	;# 
  3611  0E32                     	;# 
  3612  0E33                     	;# 
  3613  0E34                     	;# 
  3614  0E35                     	;# 
  3615  0E36                     	;# 
  3616  0E37                     	;# 
  3617  0E8F                     	;# 
  3618  0E90                     	;# 
  3619  0E91                     	;# 
  3620  0E92                     	;# 
  3621  0E93                     	;# 
  3622  0E94                     	;# 
  3623  0E95                     	;# 
  3624  0E96                     	;# 
  3625  0E97                     	;# 
  3626  0E9C                     	;# 
  3627  0E9D                     	;# 
  3628  0E9E                     	;# 
  3629  0EA1                     	;# 
  3630  0EA2                     	;# 
  3631  0EA3                     	;# 
  3632  0EA4                     	;# 
  3633  0EA5                     	;# 
  3634  0EA9                     	;# 
  3635  0EAA                     	;# 
  3636  0EAB                     	;# 
  3637  0EAC                     	;# 
  3638  0EB1                     	;# 
  3639  0EB2                     	;# 
  3640  0EB3                     	;# 
  3641  0EB8                     	;# 
  3642  0EB9                     	;# 
  3643  0EBA                     	;# 
  3644  0EBB                     	;# 
  3645  0EBC                     	;# 
  3646  0EBD                     	;# 
  3647  0EBE                     	;# 
  3648  0EC3                     	;# 
  3649  0EC5                     	;# 
  3650  0EC6                     	;# 
  3651  0EC7                     	;# 
  3652  0EC8                     	;# 
  3653  0EC9                     	;# 
  3654  0ECA                     	;# 
  3655  0ECB                     	;# 
  3656  0ECC                     	;# 
  3657  0F10                     	;# 
  3658  0F11                     	;# 
  3659  0F12                     	;# 
  3660  0F13                     	;# 
  3661  0F14                     	;# 
  3662  0F15                     	;# 
  3663  0F16                     	;# 
  3664  0F17                     	;# 
  3665  0F18                     	;# 
  3666  0F19                     	;# 
  3667  0F1A                     	;# 
  3668  0F1B                     	;# 
  3669  0F1C                     	;# 
  3670  0F1D                     	;# 
  3671  0F1E                     	;# 
  3672  0F1F                     	;# 
  3673  0F20                     	;# 
  3674  0F21                     	;# 
  3675  0F22                     	;# 
  3676  0F23                     	;# 
  3677  0F24                     	;# 
  3678  0F25                     	;# 
  3679  0F26                     	;# 
  3680  0F27                     	;# 
  3681  0F38                     	;# 
  3682  0F39                     	;# 
  3683  0F3A                     	;# 
  3684  0F3B                     	;# 
  3685  0F3C                     	;# 
  3686  0F3D                     	;# 
  3687  0F3E                     	;# 
  3688  0F3F                     	;# 
  3689  0F40                     	;# 
  3690  0F41                     	;# 
  3691  0F43                     	;# 
  3692  0F44                     	;# 
  3693  0F45                     	;# 
  3694  0F46                     	;# 
  3695  0F47                     	;# 
  3696  0F48                     	;# 
  3697  0F49                     	;# 
  3698  0F4A                     	;# 
  3699  0F4B                     	;# 
  3700  0F4C                     	;# 
  3701  0F4E                     	;# 
  3702  0F4F                     	;# 
  3703  0F50                     	;# 
  3704  0F51                     	;# 
  3705  0F52                     	;# 
  3706  0F53                     	;# 
  3707  0F54                     	;# 
  3708  0F55                     	;# 
  3709  0F56                     	;# 
  3710  0F57                     	;# 
  3711  0F65                     	;# 
  3712  0F68                     	;# 
  3713  0F69                     	;# 
  3714  0F6A                     	;# 
  3715  0F6B                     	;# 
  3716  0FE4                     	;# 
  3717  0FE5                     	;# 
  3718  0FE6                     	;# 
  3719  0FE7                     	;# 
  3720  0FE8                     	;# 
  3721  0FE9                     	;# 
  3722  0FEA                     	;# 
  3723  0FEB                     	;# 
  3724  0FED                     	;# 
  3725  0FEE                     	;# 
  3726  0FEF                     	;# 
  3727  0000                     	;# 
  3728  0001                     	;# 
  3729  0002                     	;# 
  3730  0003                     	;# 
  3731  0004                     	;# 
  3732  0005                     	;# 
  3733  0006                     	;# 
  3734  0007                     	;# 
  3735  0008                     	;# 
  3736  0009                     	;# 
  3737  000A                     	;# 
  3738  000B                     	;# 
  3739  000C                     	;# 
  3740  000D                     	;# 
  3741  000E                     	;# 
  3742  0010                     	;# 
  3743  0011                     	;# 
  3744  0012                     	;# 
  3745  0013                     	;# 
  3746  0016                     	;# 
  3747  0017                     	;# 
  3748  0018                     	;# 
  3749  001C                     	;# 
  3750  001C                     	;# 
  3751  001D                     	;# 
  3752  001D                     	;# 
  3753  001E                     	;# 
  3754  001F                     	;# 
  3755  008C                     	;# 
  3756  008C                     	;# 
  3757  008D                     	;# 
  3758  008E                     	;# 
  3759  008E                     	;# 
  3760  008F                     	;# 
  3761  0090                     	;# 
  3762  0090                     	;# 
  3763  0091                     	;# 
  3764  0093                     	;# 
  3765  0094                     	;# 
  3766  0095                     	;# 
  3767  0096                     	;# 
  3768  0097                     	;# 
  3769  0098                     	;# 
  3770  0099                     	;# 
  3771  009A                     	;# 
  3772  009B                     	;# 
  3773  009C                     	;# 
  3774  009D                     	;# 
  3775  009E                     	;# 
  3776  010C                     	;# 
  3777  010D                     	;# 
  3778  010E                     	;# 
  3779  010E                     	;# 
  3780  010F                     	;# 
  3781  0110                     	;# 
  3782  0110                     	;# 
  3783  0111                     	;# 
  3784  0112                     	;# 
  3785  0112                     	;# 
  3786  0113                     	;# 
  3787  0114                     	;# 
  3788  0114                     	;# 
  3789  0115                     	;# 
  3790  0116                     	;# 
  3791  0116                     	;# 
  3792  0117                     	;# 
  3793  0119                     	;# 
  3794  0119                     	;# 
  3795  0119                     	;# 
  3796  011A                     	;# 
  3797  011A                     	;# 
  3798  011A                     	;# 
  3799  011B                     	;# 
  3800  011B                     	;# 
  3801  011B                     	;# 
  3802  011B                     	;# 
  3803  011B                     	;# 
  3804  011C                     	;# 
  3805  011C                     	;# 
  3806  011C                     	;# 
  3807  011D                     	;# 
  3808  011D                     	;# 
  3809  011D                     	;# 
  3810  011E                     	;# 
  3811  011E                     	;# 
  3812  011E                     	;# 
  3813  011F                     	;# 
  3814  011F                     	;# 
  3815  011F                     	;# 
  3816  011F                     	;# 
  3817  011F                     	;# 
  3818  018C                     	;# 
  3819  018D                     	;# 
  3820  018E                     	;# 
  3821  018F                     	;# 
  3822  0190                     	;# 
  3823  0191                     	;# 
  3824  0192                     	;# 
  3825  0196                     	;# 
  3826  0197                     	;# 
  3827  0198                     	;# 
  3828  0199                     	;# 
  3829  019A                     	;# 
  3830  019B                     	;# 
  3831  019C                     	;# 
  3832  020C                     	;# 
  3833  020C                     	;# 
  3834  020D                     	;# 
  3835  020E                     	;# 
  3836  020F                     	;# 
  3837  020F                     	;# 
  3838  0210                     	;# 
  3839  0210                     	;# 
  3840  0211                     	;# 
  3841  0211                     	;# 
  3842  0212                     	;# 
  3843  0212                     	;# 
  3844  0213                     	;# 
  3845  0214                     	;# 
  3846  0215                     	;# 
  3847  0215                     	;# 
  3848  0216                     	;# 
  3849  0216                     	;# 
  3850  0217                     	;# 
  3851  0217                     	;# 
  3852  0218                     	;# 
  3853  0218                     	;# 
  3854  0219                     	;# 
  3855  021A                     	;# 
  3856  021B                     	;# 
  3857  021B                     	;# 
  3858  021C                     	;# 
  3859  021C                     	;# 
  3860  021D                     	;# 
  3861  021D                     	;# 
  3862  021E                     	;# 
  3863  021F                     	;# 
  3864  028C                     	;# 
  3865  028C                     	;# 
  3866  028D                     	;# 
  3867  028D                     	;# 
  3868  028E                     	;# 
  3869  028F                     	;# 
  3870  0290                     	;# 
  3871  0290                     	;# 
  3872  0291                     	;# 
  3873  0292                     	;# 
  3874  0292                     	;# 
  3875  0293                     	;# 
  3876  0293                     	;# 
  3877  0294                     	;# 
  3878  0295                     	;# 
  3879  0296                     	;# 
  3880  0296                     	;# 
  3881  0297                     	;# 
  3882  0298                     	;# 
  3883  0298                     	;# 
  3884  0299                     	;# 
  3885  0299                     	;# 
  3886  029A                     	;# 
  3887  029B                     	;# 
  3888  029C                     	;# 
  3889  029C                     	;# 
  3890  029D                     	;# 
  3891  030C                     	;# 
  3892  030C                     	;# 
  3893  030D                     	;# 
  3894  030E                     	;# 
  3895  030F                     	;# 
  3896  0310                     	;# 
  3897  0310                     	;# 
  3898  0311                     	;# 
  3899  0312                     	;# 
  3900  0313                     	;# 
  3901  0314                     	;# 
  3902  0314                     	;# 
  3903  0315                     	;# 
  3904  0316                     	;# 
  3905  0317                     	;# 
  3906  0318                     	;# 
  3907  0318                     	;# 
  3908  0319                     	;# 
  3909  031A                     	;# 
  3910  031B                     	;# 
  3911  031C                     	;# 
  3912  031C                     	;# 
  3913  031D                     	;# 
  3914  031E                     	;# 
  3915  031F                     	;# 
  3916  038C                     	;# 
  3917  038D                     	;# 
  3918  038E                     	;# 
  3919  0390                     	;# 
  3920  0391                     	;# 
  3921  0392                     	;# 
  3922  040C                     	;# 
  3923  040D                     	;# 
  3924  040E                     	;# 
  3925  040F                     	;# 
  3926  0410                     	;# 
  3927  0411                     	;# 
  3928  0416                     	;# 
  3929  0416                     	;# 
  3930  0417                     	;# 
  3931  0418                     	;# 
  3932  0418                     	;# 
  3933  0419                     	;# 
  3934  041A                     	;# 
  3935  041A                     	;# 
  3936  041B                     	;# 
  3937  041C                     	;# 
  3938  041C                     	;# 
  3939  041D                     	;# 
  3940  041E                     	;# 
  3941  041F                     	;# 
  3942  048C                     	;# 
  3943  048C                     	;# 
  3944  048D                     	;# 
  3945  048E                     	;# 
  3946  048F                     	;# 
  3947  048F                     	;# 
  3948  0490                     	;# 
  3949  0491                     	;# 
  3950  0492                     	;# 
  3951  0492                     	;# 
  3952  0493                     	;# 
  3953  0494                     	;# 
  3954  0495                     	;# 
  3955  0495                     	;# 
  3956  0496                     	;# 
  3957  0497                     	;# 
  3958  0498                     	;# 
  3959  0499                     	;# 
  3960  049A                     	;# 
  3961  049B                     	;# 
  3962  049C                     	;# 
  3963  049D                     	;# 
  3964  050C                     	;# 
  3965  050C                     	;# 
  3966  050D                     	;# 
  3967  050E                     	;# 
  3968  050F                     	;# 
  3969  050F                     	;# 
  3970  0510                     	;# 
  3971  0511                     	;# 
  3972  0512                     	;# 
  3973  0512                     	;# 
  3974  0513                     	;# 
  3975  0514                     	;# 
  3976  0515                     	;# 
  3977  0515                     	;# 
  3978  0516                     	;# 
  3979  0517                     	;# 
  3980  0518                     	;# 
  3981  0519                     	;# 
  3982  051A                     	;# 
  3983  051B                     	;# 
  3984  051C                     	;# 
  3985  051D                     	;# 
  3986  058C                     	;# 
  3987  058C                     	;# 
  3988  058D                     	;# 
  3989  058E                     	;# 
  3990  058F                     	;# 
  3991  058F                     	;# 
  3992  0590                     	;# 
  3993  0591                     	;# 
  3994  0592                     	;# 
  3995  0593                     	;# 
  3996  060C                     	;# 
  3997  060D                     	;# 
  3998  060E                     	;# 
  3999  060F                     	;# 
  4000  0610                     	;# 
  4001  0611                     	;# 
  4002  0612                     	;# 
  4003  0613                     	;# 
  4004  0614                     	;# 
  4005  0616                     	;# 
  4006  0617                     	;# 
  4007  0618                     	;# 
  4008  0619                     	;# 
  4009  061A                     	;# 
  4010  061B                     	;# 
  4011  061C                     	;# 
  4012  061D                     	;# 
  4013  061E                     	;# 
  4014  068C                     	;# 
  4015  068D                     	;# 
  4016  068E                     	;# 
  4017  068F                     	;# 
  4018  0690                     	;# 
  4019  0691                     	;# 
  4020  0692                     	;# 
  4021  0693                     	;# 
  4022  0694                     	;# 
  4023  070C                     	;# 
  4024  070D                     	;# 
  4025  070E                     	;# 
  4026  070F                     	;# 
  4027  0710                     	;# 
  4028  0711                     	;# 
  4029  0712                     	;# 
  4030  0713                     	;# 
  4031  0714                     	;# 
  4032  0716                     	;# 
  4033  0717                     	;# 
  4034  0718                     	;# 
  4035  0719                     	;# 
  4036  071A                     	;# 
  4037  071B                     	;# 
  4038  071C                     	;# 
  4039  071D                     	;# 
  4040  071E                     	;# 
  4041  0796                     	;# 
  4042  0797                     	;# 
  4043  0798                     	;# 
  4044  0799                     	;# 
  4045  079A                     	;# 
  4046  079B                     	;# 
  4047  080C                     	;# 
  4048  080D                     	;# 
  4049  080E                     	;# 
  4050  080F                     	;# 
  4051  0810                     	;# 
  4052  0811                     	;# 
  4053  0812                     	;# 
  4054  0813                     	;# 
  4055  0814                     	;# 
  4056  081A                     	;# 
  4057  081B                     	;# 
  4058  081C                     	;# 
  4059  081D                     	;# 
  4060  081E                     	;# 
  4061  081F                     	;# 
  4062  088C                     	;# 
  4063  088D                     	;# 
  4064  088E                     	;# 
  4065  088F                     	;# 
  4066  0890                     	;# 
  4067  0891                     	;# 
  4068  0892                     	;# 
  4069  0893                     	;# 
  4070  0895                     	;# 
  4071  0896                     	;# 
  4072  0897                     	;# 
  4073  0898                     	;# 
  4074  0899                     	;# 
  4075  089A                     	;# 
  4076  089B                     	;# 
  4077  090C                     	;# 
  4078  090E                     	;# 
  4079  090F                     	;# 
  4080  091F                     	;# 
  4081  091F                     	;# 
  4082  098F                     	;# 
  4083  098F                     	;# 
  4084  0990                     	;# 
  4085  0991                     	;# 
  4086  0992                     	;# 
  4087  0993                     	;# 
  4088  0994                     	;# 
  4089  0995                     	;# 
  4090  0996                     	;# 
  4091  0997                     	;# 
  4092  0E0F                     	;# 
  4093  0E10                     	;# 
  4094  0E11                     	;# 
  4095  0E12                     	;# 
  4096  0E13                     	;# 
  4097  0E14                     	;# 
  4098  0E15                     	;# 
  4099  0E16                     	;# 
  4100  0E17                     	;# 
  4101  0E18                     	;# 
  4102  0E19                     	;# 
  4103  0E1A                     	;# 
  4104  0E1B                     	;# 
  4105  0E1C                     	;# 
  4106  0E1D                     	;# 
  4107  0E1E                     	;# 
  4108  0E1F                     	;# 
  4109  0E20                     	;# 
  4110  0E21                     	;# 
  4111  0E22                     	;# 
  4112  0E23                     	;# 
  4113  0E24                     	;# 
  4114  0E25                     	;# 
  4115  0E26                     	;# 
  4116  0E27                     	;# 
  4117  0E28                     	;# 
  4118  0E29                     	;# 
  4119  0E2A                     	;# 
  4120  0E2B                     	;# 
  4121  0E2C                     	;# 
  4122  0E2D                     	;# 
  4123  0E2E                     	;# 
  4124  0E2F                     	;# 
  4125  0E30                     	;# 
  4126  0E31                     	;# 
  4127  0E32                     	;# 
  4128  0E33                     	;# 
  4129  0E34                     	;# 
  4130  0E35                     	;# 
  4131  0E36                     	;# 
  4132  0E37                     	;# 
  4133  0E8F                     	;# 
  4134  0E90                     	;# 
  4135  0E91                     	;# 
  4136  0E92                     	;# 
  4137  0E93                     	;# 
  4138  0E94                     	;# 
  4139  0E95                     	;# 
  4140  0E96                     	;# 
  4141  0E97                     	;# 
  4142  0E9C                     	;# 
  4143  0E9D                     	;# 
  4144  0E9E                     	;# 
  4145  0EA1                     	;# 
  4146  0EA2                     	;# 
  4147  0EA3                     	;# 
  4148  0EA4                     	;# 
  4149  0EA5                     	;# 
  4150  0EA9                     	;# 
  4151  0EAA                     	;# 
  4152  0EAB                     	;# 
  4153  0EAC                     	;# 
  4154  0EB1                     	;# 
  4155  0EB2                     	;# 
  4156  0EB3                     	;# 
  4157  0EB8                     	;# 
  4158  0EB9                     	;# 
  4159  0EBA                     	;# 
  4160  0EBB                     	;# 
  4161  0EBC                     	;# 
  4162  0EBD                     	;# 
  4163  0EBE                     	;# 
  4164  0EC3                     	;# 
  4165  0EC5                     	;# 
  4166  0EC6                     	;# 
  4167  0EC7                     	;# 
  4168  0EC8                     	;# 
  4169  0EC9                     	;# 
  4170  0ECA                     	;# 
  4171  0ECB                     	;# 
  4172  0ECC                     	;# 
  4173  0F10                     	;# 
  4174  0F11                     	;# 
  4175  0F12                     	;# 
  4176  0F13                     	;# 
  4177  0F14                     	;# 
  4178  0F15                     	;# 
  4179  0F16                     	;# 
  4180  0F17                     	;# 
  4181  0F18                     	;# 
  4182  0F19                     	;# 
  4183  0F1A                     	;# 
  4184  0F1B                     	;# 
  4185  0F1C                     	;# 
  4186  0F1D                     	;# 
  4187  0F1E                     	;# 
  4188  0F1F                     	;# 
  4189  0F20                     	;# 
  4190  0F21                     	;# 
  4191  0F22                     	;# 
  4192  0F23                     	;# 
  4193  0F24                     	;# 
  4194  0F25                     	;# 
  4195  0F26                     	;# 
  4196  0F27                     	;# 
  4197  0F38                     	;# 
  4198  0F39                     	;# 
  4199  0F3A                     	;# 
  4200  0F3B                     	;# 
  4201  0F3C                     	;# 
  4202  0F3D                     	;# 
  4203  0F3E                     	;# 
  4204  0F3F                     	;# 
  4205  0F40                     	;# 
  4206  0F41                     	;# 
  4207  0F43                     	;# 
  4208  0F44                     	;# 
  4209  0F45                     	;# 
  4210  0F46                     	;# 
  4211  0F47                     	;# 
  4212  0F48                     	;# 
  4213  0F49                     	;# 
  4214  0F4A                     	;# 
  4215  0F4B                     	;# 
  4216  0F4C                     	;# 
  4217  0F4E                     	;# 
  4218  0F4F                     	;# 
  4219  0F50                     	;# 
  4220  0F51                     	;# 
  4221  0F52                     	;# 
  4222  0F53                     	;# 
  4223  0F54                     	;# 
  4224  0F55                     	;# 
  4225  0F56                     	;# 
  4226  0F57                     	;# 
  4227  0F65                     	;# 
  4228  0F68                     	;# 
  4229  0F69                     	;# 
  4230  0F6A                     	;# 
  4231  0F6B                     	;# 
  4232  0FE4                     	;# 
  4233  0FE5                     	;# 
  4234  0FE6                     	;# 
  4235  0FE7                     	;# 
  4236  0FE8                     	;# 
  4237  0FE9                     	;# 
  4238  0FEA                     	;# 
  4239  0FEB                     	;# 
  4240  0FED                     	;# 
  4241  0FEE                     	;# 
  4242  0FEF                     	;# 
  4243  0000                     	;# 
  4244  0001                     	;# 
  4245  0002                     	;# 
  4246  0003                     	;# 
  4247  0004                     	;# 
  4248  0005                     	;# 
  4249  0006                     	;# 
  4250  0007                     	;# 
  4251  0008                     	;# 
  4252  0009                     	;# 
  4253  000A                     	;# 
  4254  000B                     	;# 
  4255  000C                     	;# 
  4256  000D                     	;# 
  4257  000E                     	;# 
  4258  0010                     	;# 
  4259  0011                     	;# 
  4260  0012                     	;# 
  4261  0013                     	;# 
  4262  0016                     	;# 
  4263  0017                     	;# 
  4264  0018                     	;# 
  4265  001C                     	;# 
  4266  001C                     	;# 
  4267  001D                     	;# 
  4268  001D                     	;# 
  4269  001E                     	;# 
  4270  001F                     	;# 
  4271  008C                     	;# 
  4272  008C                     	;# 
  4273  008D                     	;# 
  4274  008E                     	;# 
  4275  008E                     	;# 
  4276  008F                     	;# 
  4277  0090                     	;# 
  4278  0090                     	;# 
  4279  0091                     	;# 
  4280  0093                     	;# 
  4281  0094                     	;# 
  4282  0095                     	;# 
  4283  0096                     	;# 
  4284  0097                     	;# 
  4285  0098                     	;# 
  4286  0099                     	;# 
  4287  009A                     	;# 
  4288  009B                     	;# 
  4289  009C                     	;# 
  4290  009D                     	;# 
  4291  009E                     	;# 
  4292  010C                     	;# 
  4293  010D                     	;# 
  4294  010E                     	;# 
  4295  010E                     	;# 
  4296  010F                     	;# 
  4297  0110                     	;# 
  4298  0110                     	;# 
  4299  0111                     	;# 
  4300  0112                     	;# 
  4301  0112                     	;# 
  4302  0113                     	;# 
  4303  0114                     	;# 
  4304  0114                     	;# 
  4305  0115                     	;# 
  4306  0116                     	;# 
  4307  0116                     	;# 
  4308  0117                     	;# 
  4309  0119                     	;# 
  4310  0119                     	;# 
  4311  0119                     	;# 
  4312  011A                     	;# 
  4313  011A                     	;# 
  4314  011A                     	;# 
  4315  011B                     	;# 
  4316  011B                     	;# 
  4317  011B                     	;# 
  4318  011B                     	;# 
  4319  011B                     	;# 
  4320  011C                     	;# 
  4321  011C                     	;# 
  4322  011C                     	;# 
  4323  011D                     	;# 
  4324  011D                     	;# 
  4325  011D                     	;# 
  4326  011E                     	;# 
  4327  011E                     	;# 
  4328  011E                     	;# 
  4329  011F                     	;# 
  4330  011F                     	;# 
  4331  011F                     	;# 
  4332  011F                     	;# 
  4333  011F                     	;# 
  4334  018C                     	;# 
  4335  018D                     	;# 
  4336  018E                     	;# 
  4337  018F                     	;# 
  4338  0190                     	;# 
  4339  0191                     	;# 
  4340  0192                     	;# 
  4341  0196                     	;# 
  4342  0197                     	;# 
  4343  0198                     	;# 
  4344  0199                     	;# 
  4345  019A                     	;# 
  4346  019B                     	;# 
  4347  019C                     	;# 
  4348  020C                     	;# 
  4349  020C                     	;# 
  4350  020D                     	;# 
  4351  020E                     	;# 
  4352  020F                     	;# 
  4353  020F                     	;# 
  4354  0210                     	;# 
  4355  0210                     	;# 
  4356  0211                     	;# 
  4357  0211                     	;# 
  4358  0212                     	;# 
  4359  0212                     	;# 
  4360  0213                     	;# 
  4361  0214                     	;# 
  4362  0215                     	;# 
  4363  0215                     	;# 
  4364  0216                     	;# 
  4365  0216                     	;# 
  4366  0217                     	;# 
  4367  0217                     	;# 
  4368  0218                     	;# 
  4369  0218                     	;# 
  4370  0219                     	;# 
  4371  021A                     	;# 
  4372  021B                     	;# 
  4373  021B                     	;# 
  4374  021C                     	;# 
  4375  021C                     	;# 
  4376  021D                     	;# 
  4377  021D                     	;# 
  4378  021E                     	;# 
  4379  021F                     	;# 
  4380  028C                     	;# 
  4381  028C                     	;# 
  4382  028D                     	;# 
  4383  028D                     	;# 
  4384  028E                     	;# 
  4385  028F                     	;# 
  4386  0290                     	;# 
  4387  0290                     	;# 
  4388  0291                     	;# 
  4389  0292                     	;# 
  4390  0292                     	;# 
  4391  0293                     	;# 
  4392  0293                     	;# 
  4393  0294                     	;# 
  4394  0295                     	;# 
  4395  0296                     	;# 
  4396  0296                     	;# 
  4397  0297                     	;# 
  4398  0298                     	;# 
  4399  0298                     	;# 
  4400  0299                     	;# 
  4401  0299                     	;# 
  4402  029A                     	;# 
  4403  029B                     	;# 
  4404  029C                     	;# 
  4405  029C                     	;# 
  4406  029D                     	;# 
  4407  030C                     	;# 
  4408  030C                     	;# 
  4409  030D                     	;# 
  4410  030E                     	;# 
  4411  030F                     	;# 
  4412  0310                     	;# 
  4413  0310                     	;# 
  4414  0311                     	;# 
  4415  0312                     	;# 
  4416  0313                     	;# 
  4417  0314                     	;# 
  4418  0314                     	;# 
  4419  0315                     	;# 
  4420  0316                     	;# 
  4421  0317                     	;# 
  4422  0318                     	;# 
  4423  0318                     	;# 
  4424  0319                     	;# 
  4425  031A                     	;# 
  4426  031B                     	;# 
  4427  031C                     	;# 
  4428  031C                     	;# 
  4429  031D                     	;# 
  4430  031E                     	;# 
  4431  031F                     	;# 
  4432  038C                     	;# 
  4433  038D                     	;# 
  4434  038E                     	;# 
  4435  0390                     	;# 
  4436  0391                     	;# 
  4437  0392                     	;# 
  4438  040C                     	;# 
  4439  040D                     	;# 
  4440  040E                     	;# 
  4441  040F                     	;# 
  4442  0410                     	;# 
  4443  0411                     	;# 
  4444  0416                     	;# 
  4445  0416                     	;# 
  4446  0417                     	;# 
  4447  0418                     	;# 
  4448  0418                     	;# 
  4449  0419                     	;# 
  4450  041A                     	;# 
  4451  041A                     	;# 
  4452  041B                     	;# 
  4453  041C                     	;# 
  4454  041C                     	;# 
  4455  041D                     	;# 
  4456  041E                     	;# 
  4457  041F                     	;# 
  4458  048C                     	;# 
  4459  048C                     	;# 
  4460  048D                     	;# 
  4461  048E                     	;# 
  4462  048F                     	;# 
  4463  048F                     	;# 
  4464  0490                     	;# 
  4465  0491                     	;# 
  4466  0492                     	;# 
  4467  0492                     	;# 
  4468  0493                     	;# 
  4469  0494                     	;# 
  4470  0495                     	;# 
  4471  0495                     	;# 
  4472  0496                     	;# 
  4473  0497                     	;# 
  4474  0498                     	;# 
  4475  0499                     	;# 
  4476  049A                     	;# 
  4477  049B                     	;# 
  4478  049C                     	;# 
  4479  049D                     	;# 
  4480  050C                     	;# 
  4481  050C                     	;# 
  4482  050D                     	;# 
  4483  050E                     	;# 
  4484  050F                     	;# 
  4485  050F                     	;# 
  4486  0510                     	;# 
  4487  0511                     	;# 
  4488  0512                     	;# 
  4489  0512                     	;# 
  4490  0513                     	;# 
  4491  0514                     	;# 
  4492  0515                     	;# 
  4493  0515                     	;# 
  4494  0516                     	;# 
  4495  0517                     	;# 
  4496  0518                     	;# 
  4497  0519                     	;# 
  4498  051A                     	;# 
  4499  051B                     	;# 
  4500  051C                     	;# 
  4501  051D                     	;# 
  4502  058C                     	;# 
  4503  058C                     	;# 
  4504  058D                     	;# 
  4505  058E                     	;# 
  4506  058F                     	;# 
  4507  058F                     	;# 
  4508  0590                     	;# 
  4509  0591                     	;# 
  4510  0592                     	;# 
  4511  0593                     	;# 
  4512  060C                     	;# 
  4513  060D                     	;# 
  4514  060E                     	;# 
  4515  060F                     	;# 
  4516  0610                     	;# 
  4517  0611                     	;# 
  4518  0612                     	;# 
  4519  0613                     	;# 
  4520  0614                     	;# 
  4521  0616                     	;# 
  4522  0617                     	;# 
  4523  0618                     	;# 
  4524  0619                     	;# 
  4525  061A                     	;# 
  4526  061B                     	;# 
  4527  061C                     	;# 
  4528  061D                     	;# 
  4529  061E                     	;# 
  4530  068C                     	;# 
  4531  068D                     	;# 
  4532  068E                     	;# 
  4533  068F                     	;# 
  4534  0690                     	;# 
  4535  0691                     	;# 
  4536  0692                     	;# 
  4537  0693                     	;# 
  4538  0694                     	;# 
  4539  070C                     	;# 
  4540  070D                     	;# 
  4541  070E                     	;# 
  4542  070F                     	;# 
  4543  0710                     	;# 
  4544  0711                     	;# 
  4545  0712                     	;# 
  4546  0713                     	;# 
  4547  0714                     	;# 
  4548  0716                     	;# 
  4549  0717                     	;# 
  4550  0718                     	;# 
  4551  0719                     	;# 
  4552  071A                     	;# 
  4553  071B                     	;# 
  4554  071C                     	;# 
  4555  071D                     	;# 
  4556  071E                     	;# 
  4557  0796                     	;# 
  4558  0797                     	;# 
  4559  0798                     	;# 
  4560  0799                     	;# 
  4561  079A                     	;# 
  4562  079B                     	;# 
  4563  080C                     	;# 
  4564  080D                     	;# 
  4565  080E                     	;# 
  4566  080F                     	;# 
  4567  0810                     	;# 
  4568  0811                     	;# 
  4569  0812                     	;# 
  4570  0813                     	;# 
  4571  0814                     	;# 
  4572  081A                     	;# 
  4573  081B                     	;# 
  4574  081C                     	;# 
  4575  081D                     	;# 
  4576  081E                     	;# 
  4577  081F                     	;# 
  4578  088C                     	;# 
  4579  088D                     	;# 
  4580  088E                     	;# 
  4581  088F                     	;# 
  4582  0890                     	;# 
  4583  0891                     	;# 
  4584  0892                     	;# 
  4585  0893                     	;# 
  4586  0895                     	;# 
  4587  0896                     	;# 
  4588  0897                     	;# 
  4589  0898                     	;# 
  4590  0899                     	;# 
  4591  089A                     	;# 
  4592  089B                     	;# 
  4593  090C                     	;# 
  4594  090E                     	;# 
  4595  090F                     	;# 
  4596  091F                     	;# 
  4597  091F                     	;# 
  4598  098F                     	;# 
  4599  098F                     	;# 
  4600  0990                     	;# 
  4601  0991                     	;# 
  4602  0992                     	;# 
  4603  0993                     	;# 
  4604  0994                     	;# 
  4605  0995                     	;# 
  4606  0996                     	;# 
  4607  0997                     	;# 
  4608  0E0F                     	;# 
  4609  0E10                     	;# 
  4610  0E11                     	;# 
  4611  0E12                     	;# 
  4612  0E13                     	;# 
  4613  0E14                     	;# 
  4614  0E15                     	;# 
  4615  0E16                     	;# 
  4616  0E17                     	;# 
  4617  0E18                     	;# 
  4618  0E19                     	;# 
  4619  0E1A                     	;# 
  4620  0E1B                     	;# 
  4621  0E1C                     	;# 
  4622  0E1D                     	;# 
  4623  0E1E                     	;# 
  4624  0E1F                     	;# 
  4625  0E20                     	;# 
  4626  0E21                     	;# 
  4627  0E22                     	;# 
  4628  0E23                     	;# 
  4629  0E24                     	;# 
  4630  0E25                     	;# 
  4631  0E26                     	;# 
  4632  0E27                     	;# 
  4633  0E28                     	;# 
  4634  0E29                     	;# 
  4635  0E2A                     	;# 
  4636  0E2B                     	;# 
  4637  0E2C                     	;# 
  4638  0E2D                     	;# 
  4639  0E2E                     	;# 
  4640  0E2F                     	;# 
  4641  0E30                     	;# 
  4642  0E31                     	;# 
  4643  0E32                     	;# 
  4644  0E33                     	;# 
  4645  0E34                     	;# 
  4646  0E35                     	;# 
  4647  0E36                     	;# 
  4648  0E37                     	;# 
  4649  0E8F                     	;# 
  4650  0E90                     	;# 
  4651  0E91                     	;# 
  4652  0E92                     	;# 
  4653  0E93                     	;# 
  4654  0E94                     	;# 
  4655  0E95                     	;# 
  4656  0E96                     	;# 
  4657  0E97                     	;# 
  4658  0E9C                     	;# 
  4659  0E9D                     	;# 
  4660  0E9E                     	;# 
  4661  0EA1                     	;# 
  4662  0EA2                     	;# 
  4663  0EA3                     	;# 
  4664  0EA4                     	;# 
  4665  0EA5                     	;# 
  4666  0EA9                     	;# 
  4667  0EAA                     	;# 
  4668  0EAB                     	;# 
  4669  0EAC                     	;# 
  4670  0EB1                     	;# 
  4671  0EB2                     	;# 
  4672  0EB3                     	;# 
  4673  0EB8                     	;# 
  4674  0EB9                     	;# 
  4675  0EBA                     	;# 
  4676  0EBB                     	;# 
  4677  0EBC                     	;# 
  4678  0EBD                     	;# 
  4679  0EBE                     	;# 
  4680  0EC3                     	;# 
  4681  0EC5                     	;# 
  4682  0EC6                     	;# 
  4683  0EC7                     	;# 
  4684  0EC8                     	;# 
  4685  0EC9                     	;# 
  4686  0ECA                     	;# 
  4687  0ECB                     	;# 
  4688  0ECC                     	;# 
  4689  0F10                     	;# 
  4690  0F11                     	;# 
  4691  0F12                     	;# 
  4692  0F13                     	;# 
  4693  0F14                     	;# 
  4694  0F15                     	;# 
  4695  0F16                     	;# 
  4696  0F17                     	;# 
  4697  0F18                     	;# 
  4698  0F19                     	;# 
  4699  0F1A                     	;# 
  4700  0F1B                     	;# 
  4701  0F1C                     	;# 
  4702  0F1D                     	;# 
  4703  0F1E                     	;# 
  4704  0F1F                     	;# 
  4705  0F20                     	;# 
  4706  0F21                     	;# 
  4707  0F22                     	;# 
  4708  0F23                     	;# 
  4709  0F24                     	;# 
  4710  0F25                     	;# 
  4711  0F26                     	;# 
  4712  0F27                     	;# 
  4713  0F38                     	;# 
  4714  0F39                     	;# 
  4715  0F3A                     	;# 
  4716  0F3B                     	;# 
  4717  0F3C                     	;# 
  4718  0F3D                     	;# 
  4719  0F3E                     	;# 
  4720  0F3F                     	;# 
  4721  0F40                     	;# 
  4722  0F41                     	;# 
  4723  0F43                     	;# 
  4724  0F44                     	;# 
  4725  0F45                     	;# 
  4726  0F46                     	;# 
  4727  0F47                     	;# 
  4728  0F48                     	;# 
  4729  0F49                     	;# 
  4730  0F4A                     	;# 
  4731  0F4B                     	;# 
  4732  0F4C                     	;# 
  4733  0F4E                     	;# 
  4734  0F4F                     	;# 
  4735  0F50                     	;# 
  4736  0F51                     	;# 
  4737  0F52                     	;# 
  4738  0F53                     	;# 
  4739  0F54                     	;# 
  4740  0F55                     	;# 
  4741  0F56                     	;# 
  4742  0F57                     	;# 
  4743  0F65                     	;# 
  4744  0F68                     	;# 
  4745  0F69                     	;# 
  4746  0F6A                     	;# 
  4747  0F6B                     	;# 
  4748  0FE4                     	;# 
  4749  0FE5                     	;# 
  4750  0FE6                     	;# 
  4751  0FE7                     	;# 
  4752  0FE8                     	;# 
  4753  0FE9                     	;# 
  4754  0FEA                     	;# 
  4755  0FEB                     	;# 
  4756  0FED                     	;# 
  4757  0FEE                     	;# 
  4758  0FEF                     	;_aPatchMemory
  4759                           
  4760                           	psect	idataBANK2
  4761  0A46                     __pidataBANK2:	
  4762                           
  4763                           ;initializer for _segdisp
  4764  0A46  3403               	retlw	3
  4765  0A47  3400               	retlw	0
  4766  0A48  349F               	retlw	159
  4767  0A49  3400               	retlw	0
  4768  0A4A  3425               	retlw	37
  4769  0A4B  3400               	retlw	0
  4770  0A4C  340D               	retlw	13
  4771  0A4D  3400               	retlw	0
  4772  0A4E  3499               	retlw	153
  4773  0A4F  3400               	retlw	0
  4774  0A50  3449               	retlw	73
  4775  0A51  3400               	retlw	0
  4776  0A52  3441               	retlw	65
  4777  0A53  3400               	retlw	0
  4778  0A54  341B               	retlw	27
  4779  0A55  3400               	retlw	0
  4780  0A56  3401               	retlw	1
  4781  0A57  3400               	retlw	0
  4782  0A58  3409               	retlw	9
  4783  0A59  3400               	retlw	0
  4784                           
  4785                           	psect	stringtext1
  4786  1000                     __pstringtext1:	
  4787  1000                     _cPowerOfTwo:	
  4788  1000  3401               	retlw	1
  4789  1001  3400               	retlw	0
  4790  1002  3402               	retlw	2
  4791  1003  3400               	retlw	0
  4792  1004  3404               	retlw	4
  4793  1005  3400               	retlw	0
  4794  1006  3408               	retlw	8
  4795  1007  3400               	retlw	0
  4796  1008  3410               	retlw	16
  4797  1009  3400               	retlw	0
  4798  100A  3420               	retlw	32
  4799  100B  3400               	retlw	0
  4800  100C  3440               	retlw	64
  4801  100D  3400               	retlw	0
  4802  100E  3480               	retlw	128
  4803  100F  3400               	retlw	0
  4804  1010                     __end_of_cPowerOfTwo:	
  4805                           
  4806                           	psect	stringtext2
  4807  1010                     __pstringtext2:	
  4808  1010                     _maxBanks:	
  4809  1010  3401               	retlw	1
  4810  1011  3400               	retlw	0
  4811  1012                     __end_of_maxBanks:	
  4812                           
  4813                           	psect	stringtext3
  4814  1012                     __pstringtext3:	
  4815  1012                     _maxPatches:	
  4816  1012  3464               	retlw	100
  4817  1013  3400               	retlw	0
  4818  1014                     __end_of_maxPatches:	
  4819                           
  4820                           	psect	stringtext4
  4821  1014                     __pstringtext4:	
  4822  1014                     _MvcMaxValue:	
  4823  1014  34FF               	retlw	255
  4824  1015  3403               	retlw	3
  4825  1016                     __end_of_MvcMaxValue:	
  4826                           
  4827                           	psect	stringtext5
  4828  1016                     __pstringtext5:	
  4829  1016                     _MvcMinValue:	
  4830  1016  3400               	retlw	0
  4831  1017  3400               	retlw	0
  4832  1018                     __end_of_MvcMinValue:	
  4833                           
  4834                           	psect	stringtext6
  4835  1018                     __pstringtext6:	
  4836  1018                     _clockMicroTime:	
  4837  1018  34C8               	retlw	200
  4838  1019  3400               	retlw	0
  4839  101A                     __end_of_clockMicroTime:	
  4840                           
  4841                           	psect	stringtext7
  4842  101A                     __pstringtext7:	
  4843  101A                     _lineSettleMicroTime:	
  4844  101A  3490               	retlw	144
  4845  101B  3401               	retlw	1
  4846  101C                     __end_of_lineSettleMicroTime:	
  4847                           
  4848                           	psect	stringtext8
  4849  101C                     __pstringtext8:	
  4850  101C                     _toggleDly:	
  4851  101C  340A               	retlw	10
  4852  101D  3400               	retlw	0
  4853  101E                     __end_of_toggleDly:	
  4854                           
  4855                           	psect	stringtext9
  4856  101E                     __pstringtext9:	
  4857  101E                     _twoK:	
  4858  101E  3410               	retlw	16
  4859  101F  3427               	retlw	39
  4860  1020                     __end_of_twoK:	
  4861                           
  4862                           	psect	stringtext10
  4863  1020                     __pstringtext10:	
  4864  1020                     _speed:	
  4865  1020  3432               	retlw	50
  4866  1021  3400               	retlw	0
  4867  1022                     __end_of_speed:	
  4868                           
  4869                           	psect	stringtext11
  4870  1022                     __pstringtext11:	
  4871  1022                     _datapin:	
  4872  1022  3412               	retlw	18
  4873  1023  3400               	retlw	0
  4874  1024                     __end_of_datapin:	
  4875                           
  4876                           	psect	stringtext12
  4877  1024                     __pstringtext12:	
  4878  1024                     _clockpin:	
  4879  1024  3411               	retlw	17
  4880  1025  3400               	retlw	0
  4881  1026                     __end_of_clockpin:	
  4882                           
  4883                           	psect	stringtext13
  4884  1026                     __pstringtext13:	
  4885  1026                     _latchpin:	
  4886  1026  3410               	retlw	16
  4887  1027  3400               	retlw	0
  4888  1028                     __end_of_latchpin:	
  4889                           
  4890                           	psect	stringtext14
  4891  1028                     __pstringtext14:	
  4892  1028                     main@iResetValue:	
  4893  1028  3464               	retlw	100
  4894  1029  3400               	retlw	0
  4895  102A                     __end_ofmain@iResetValue:	
  4896                           
  4897                           	psect	stringtext15
  4898  102A                     __pstringtext15:	
  4899  102A                     _cMstrClkAdjust:	
  4900  102A  3420               	retlw	32
  4901  102B  3400               	retlw	0
  4902  102C                     __end_of_cMstrClkAdjust:	
  4903                           
  4904                           	psect	stringtext16
  4905  102C                     __pstringtext16:	
  4906  102C                     _i2c_addr_dualADSR1:	
  4907  102C  3469               	retlw	105
  4908  102D                     __end_of_i2c_addr_dualADSR1:	
  4909                           
  4910                           	psect	stringtext17
  4911  102D                     __pstringtext17:	
  4912  102D                     _i2c_addr_dualADSR0:	
  4913  102D  3468               	retlw	104
  4914  102E                     __end_of_i2c_addr_dualADSR0:	
  4915                           
  4916                           	psect	stringtext18
  4917  102E                     __pstringtext18:	
  4918  102E                     _cPointerByteWriteLED:	
  4919  102E  3410               	retlw	16
  4920  102F                     __end_of_cPointerByteWriteLED:	
  4921                           
  4922                           	psect	stringtext19
  4923  102F                     __pstringtext19:	
  4924  102F                     _cPointerByteReadFaders:	
  4925  102F  3420               	retlw	32
  4926  1030                     __end_of_cPointerByteReadFaders:	
  4927                           
  4928                           	psect	stringtext20
  4929  1030                     __pstringtext20:	
  4930  1030                     _cPointerByteWriteFaders:	
  4931  1030  3430               	retlw	48
  4932  1031                     __end_of_cPointerByteWriteFaders:	
  4933  0018                     _LATCbits	set	24
  4934  0013                     _TRISCbits	set	19
  4935  000D                     _PORTBbits	set	13
  4936  000E                     _PORTC	set	14
  4937  000D                     _PORTB	set	13
  4938  000B                     _INTCONbits	set	11
  4939  0013                     _TRISC	set	19
  4940  0012                     _TRISB	set	18
  4941  0011                     _TRISA	set	17
  4942  0018                     _LATC	set	24
  4943  0017                     _LATB	set	23
  4944  0016                     _LATA	set	22
  4945  005F                     _GIE	set	95
  4946  0094                     _ADCON1bits	set	148
  4947  008E                     _ADPREVL	set	142
  4948  008F                     _ADPREVH	set	143
  4949  0097                     _ADSTATbits	set	151
  4950  0090                     _ADACCL	set	144
  4951  0091                     _ADACCH	set	145
  4952  0095                     _ADCON2bits	set	149
  4953  0096                     _ADCON3bits	set	150
  4954  008C                     _ADRESL	set	140
  4955  008D                     _ADRESH	set	141
  4956  0093                     _ADCON0bits	set	147
  4957  0093                     _ADCON0	set	147
  4958  009E                     _ADPCH	set	158
  4959  009D                     _ADACQ	set	157
  4960  009C                     _ADPRE	set	156
  4961  009B                     _ADCAP	set	155
  4962  009A                     _ADREF	set	154
  4963  0098                     _ADCLK	set	152
  4964  0097                     _ADSTAT	set	151
  4965  0099                     _ADACT	set	153
  4966  0096                     _ADCON3	set	150
  4967  0095                     _ADCON2	set	149
  4968  0094                     _ADCON1	set	148
  4969  0116                     _ADERRL	set	278
  4970  0117                     _ADERRH	set	279
  4971  0114                     _ADFLTRL	set	276
  4972  0115                     _ADFLTRH	set	277
  4973  010C                     _ADCNT	set	268
  4974  0113                     _ADSTPTH	set	275
  4975  0112                     _ADSTPTL	set	274
  4976  0111                     _ADUTHH	set	273
  4977  0110                     _ADUTHL	set	272
  4978  010F                     _ADLTHH	set	271
  4979  010E                     _ADLTHL	set	270
  4980  010D                     _ADRPT	set	269
  4981  018C                     _SSP1BUF	set	396
  4982  0191                     _SSP1CON2bits	set	401
  4983  0190                     _SSP1CON1bits	set	400
  4984  018D                     _SSP1ADD	set	397
  4985  0192                     _SSP1CON3	set	402
  4986  0190                     _SSP1CON1	set	400
  4987  018F                     _SSP1STAT	set	399
  4988  0719                     _PIE3bits	set	1817
  4989  070F                     _PIR3bits	set	1807
  4990  0892                     _OSCTUNE	set	2194
  4991  0893                     _OSCFRQ	set	2195
  4992  0891                     _OSCEN	set	2193
  4993  088F                     _OSCCON3	set	2191
  4994  088D                     _OSCCON1	set	2189
  4995  0EC5                     _SSP1CLKPPSbits	set	3781
  4996  0EC6                     _SSP1DATPPSbits	set	3782
  4997  0E8F                     _PPSLOCKbits	set	3727
  4998  0E8F                     _PPSLOCK	set	3727
  4999  0F4E                     _ANSELCbits	set	3918
  5000  0F24                     _RC4PPS	set	3876
  5001  0F23                     _RC3PPS	set	3875
  5002  0F50                     _ODCONC	set	3920
  5003  0F45                     _ODCONB	set	3909
  5004  0F3A                     _ODCONA	set	3898
  5005  0F4F                     _WPUC	set	3919
  5006  0F39                     _WPUA	set	3897
  5007  0F44                     _WPUB	set	3908
  5008  0F65                     _WPUE	set	3941
  5009  0F38                     _ANSELA	set	3896
  5010  0F43                     _ANSELB	set	3907
  5011  0F4E                     _ANSELC	set	3918
  5012                           
  5013                           ; #config settings
  5014  0000                     
  5015                           	psect	cinit
  5016  0022                     start_initialization:	
  5017  0022                     __initialization:		;BIGRAM
  5018                           
  5019                           ; Initialize objects allocated to BANK2
  5020  0022  3046               	movlw	low __pidataBANK2
  5021  0023  0084               	movwf	4
  5022  0024  308A               	movlw	(high __pidataBANK2)| (0+128)
  5023  0025  0085               	movwf	5
  5024  0026  3020               	movlw	low __pdataBANK2
  5025  0027  0086               	movwf	6
  5026  0028  3001               	movlw	high __pdataBANK2
  5027  0029  0087               	movwf	7
  5028  002A  3000               	movlw	0
  5029  002B  00FF               	movwf	btemp+1
  5030  002C  3014               	movlw	20
  5031  002D  318A  2207  3180   	fcall	init_ram
  5032                           
  5033                           ; Clear objects allocated to BIGRAM
  5034  0030  3070               	movlw	low (0+9072)
  5035  0031  0084               	movwf	4
  5036  0032  3023               	movlw	high (0+9072)
  5037  0033  0085               	movwf	5
  5038  0034  3080               	movlw	128
  5039  0035  00FE               	movwf	btemp
  5040  0036  3000               	movlw	0
  5041  0037  00FF               	movwf	btemp+1
  5042  0038  3189  21FB  3180   	fcall	clear_ram0
  5043                           
  5044                           ; Clear objects allocated to COMMON
  5045  003B  01F0               	clrf	__pbssCOMMON& (0+127)
  5046  003C  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5047  003D  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5048  003E  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5049  003F  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5050  0040  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5051  0041  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  5052                           
  5053                           ; Clear objects allocated to BANK0
  5054  0042  01E7               	clrf	__pbssBANK0& (0+127)
  5055  0043  01E8               	clrf	(__pbssBANK0+1)& (0+127)
  5056  0044  01E9               	clrf	(__pbssBANK0+2)& (0+127)
  5057  0045  01EA               	clrf	(__pbssBANK0+3)& (0+127)
  5058  0046  01EB               	clrf	(__pbssBANK0+4)& (0+127)
  5059  0047  01EC               	clrf	(__pbssBANK0+5)& (0+127)
  5060  0048  01ED               	clrf	(__pbssBANK0+6)& (0+127)
  5061  0049  01EE               	clrf	(__pbssBANK0+7)& (0+127)
  5062  004A  01EF               	clrf	(__pbssBANK0+8)& (0+127)
  5063                           
  5064                           ; Clear objects allocated to BANK1
  5065  004B  30A0               	movlw	low __pbssBANK1
  5066  004C  0084               	movwf	4
  5067  004D  3000               	movlw	high __pbssBANK1
  5068  004E  0085               	movwf	5
  5069  004F  3038               	movlw	56
  5070  0050  00FE               	movwf	btemp
  5071  0051  3000               	movlw	0
  5072  0052  00FF               	movwf	btemp+1
  5073  0053  3189  21FB  3180   	fcall	clear_ram0
  5074                           
  5075                           ; Clear objects allocated to BANK2
  5076  0056  3034               	movlw	low __pbssBANK2
  5077  0057  0084               	movwf	4
  5078  0058  3001               	movlw	high __pbssBANK2
  5079  0059  0085               	movwf	5
  5080  005A  3010               	movlw	16
  5081  005B  00FE               	movwf	btemp
  5082  005C  3000               	movlw	0
  5083  005D  00FF               	movwf	btemp+1
  5084  005E  3189  21FB         	fcall	clear_ram0
  5085  0060                     end_of_initialization:	
  5086                           ;End of C runtime variable initialization code
  5087                           
  5088  0060                     __end_of__initialization:	
  5089  0060  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5090  0061  0020               	movlb	0
  5091  0062  3180  2864         	ljmp	_main	;jump to C main() function
  5092                           
  5093                           	psect	bssCOMMON
  5094  0070                     __pbssCOMMON:	
  5095  0070                     I2C1_ISR@i2c_bytes_left:	
  5096  0070                     	ds	1
  5097  0071                     I2C1_ISR@pi2c_buf_ptr:	
  5098  0071                     	ds	1
  5099  0072                     _p_i2c1_current:	
  5100  0072                     	ds	1
  5101  0073                     _p_i2c1_trb_current:	
  5102  0073                     	ds	1
  5103  0074                     _i2c1_trb_count:	
  5104  0074                     	ds	1
  5105  0075                     I2C1_ISR@i2c_address:	
  5106  0075                     	ds	2
  5107                           
  5108                           	psect	bssBANK0
  5109  0067                     __pbssBANK0:	
  5110  0067                     _i2c1_object:	
  5111  0067                     	ds	5
  5112  006C                     _iLEDs0_MSB:	
  5113  006C                     	ds	1
  5114  006D                     _MY_CONSTS:	
  5115  006D                     	ds	1
  5116  006E                     I2C1_ISR@i2c_10bit_address_restart:	
  5117  006E                     	ds	1
  5118  006F                     _i2c1_state:	
  5119  006F                     	ds	1
  5120                           
  5121                           	psect	bssBANK1
  5122  00A0                     __pbssBANK1:	
  5123  00A0                     _prevPanelInChannels:	
  5124  00A0                     	ds	4
  5125  00A4                     _PanelInChannels:	
  5126  00A4                     	ds	4
  5127  00A8                     _faderActiveFlag:	
  5128  00A8                     	ds	4
  5129  00AC                     _d:	
  5130  00AC                     	ds	3
  5131  00AF                     _b:	
  5132  00AF                     	ds	3
  5133  00B2                     _wkFloat:	
  5134  00B2                     	ds	3
  5135  00B5                     _e:	
  5136  00B5                     	ds	2
  5137  00B7                     _c:	
  5138  00B7                     	ds	2
  5139  00B9                     _mvcPatchNumber:	
  5140  00B9                     	ds	2
  5141  00BB                     _wkByte:	
  5142  00BB                     	ds	1
  5143  00BC                     _wkMIDICC:	
  5144  00BC                     	ds	1
  5145  00BD                     _wkFaderValue:	
  5146  00BD                     	ds	1
  5147  00BE                     _iLEDs1_LSB:	
  5148  00BE                     	ds	1
  5149  00BF                     _iLEDs1_MSB:	
  5150  00BF                     	ds	1
  5151  00C0                     _iLEDs0_LSB:	
  5152  00C0                     	ds	1
  5153  00C1                     _iI2CFaderValue:	
  5154  00C1                     	ds	8
  5155  00C9                     _mvcChannels:	
  5156  00C9                     	ds	4
  5157  00CD                     I2C1_MasterRead@trBlock:	
  5158  00CD                     	ds	4
  5159  00D1                     I2C1_MasterWrite@trBlock:	
  5160  00D1                     	ds	4
  5161  00D5                     _i2c1_tr_queue:	
  5162  00D5                     	ds	3
  5163                           
  5164                           	psect	bssBANK2
  5165  0134                     __pbssBANK2:	
  5166  0134                     _dualADSRdata1:	
  5167  0134                     	ds	8
  5168  013C                     _dualADSRdata0:	
  5169  013C                     	ds	8
  5170                           
  5171                           	psect	dataBANK2
  5172  0120                     __pdataBANK2:	
  5173  0120                     _segdisp:	
  5174  0120                     	ds	20
  5175                           
  5176                           	psect	inittext
  5177  0A07                     init_ram:	
  5178  0A07  00FE               	movwf	126
  5179  0A08                     initloop:	
  5180  0A08  0012               	moviw fsr0++
  5181  0A09  001E               	movwi fsr1++
  5182  0A0A  3001               	movlw	1
  5183  0A0B  02FE               	subwf	126,f
  5184  0A0C  3000               	movlw	0
  5185  0A0D  3BFF               	subwfb	127,f
  5186  0A0E  087F               	movf	127,w
  5187  0A0F  047E               	iorwf	126,w
  5188  0A10  1903               	btfsc	3,2
  5189  0A11  3400               	retlw	0
  5190  0A12  2A08               	goto	initloop
  5191                           
  5192                           	psect	clrtext
  5193  09FB                     clear_ram0:	
  5194                           ;	Called with FSR0 containing the base address, and
  5195                           ;	btemp/btemp+1 has the size to clear
  5196                           
  5197  09FB  0064               	clrwdt	;clear the watchdog before getting into this loop
  5198  09FC                     clrloop0:	
  5199  09FC  0180               	clrf	0	;clear RAM location pointed to by FSR
  5200  09FD  3101               	addfsr 0,1
  5201  09FE  3001               	movlw	1
  5202  09FF  02FE               	subwf	126,f
  5203  0A00  3000               	movlw	0
  5204  0A01  3BFF               	subwfb	127,f
  5205  0A02  087F               	movf	127,w
  5206  0A03  047E               	iorwf	126,w
  5207  0A04  1903               	btfsc	3,2
  5208  0A05  3400               	retlw	0	;all done for this memory range, return
  5209  0A06  29FC               	goto	clrloop0	;have we reached the end yet?
  5210                           
  5211                           	psect	cstackBANK1
  5212  00D8                     __pcstackBANK1:	
  5213  00D8                     main@readStatus:	
  5214                           
  5215                           ; 1 bytes @ 0x0
  5216  00D8                     	ds	1
  5217  00D9                     main@iCounter:	
  5218                           
  5219                           ; 2 bytes @ 0x1
  5220  00D9                     	ds	2
  5221  00DB                     main@iChangeCount:	
  5222                           
  5223                           ; 1 bytes @ 0x3
  5224  00DB                     	ds	1
  5225  00DC                     main@prevFader8bitValue:	
  5226                           
  5227                           ; 1 bytes @ 0x4
  5228  00DC                     	ds	1
  5229  00DD                     main@iLoopCounter:	
  5230                           
  5231                           ; 2 bytes @ 0x5
  5232  00DD                     	ds	2
  5233  00DF                     main@POT0Value:	
  5234                           
  5235                           ; 1 bytes @ 0x7
  5236  00DF                     	ds	1
  5237  00E0                     main@POT1Value:	
  5238                           
  5239                           ; 1 bytes @ 0x8
  5240  00E0                     	ds	1
  5241  00E1                     main@LoadDebounceCount:	
  5242                           
  5243                           ; 2 bytes @ 0x9
  5244  00E1                     	ds	2
  5245  00E3                     main@SaveDebounceCount:	
  5246                           
  5247                           ; 2 bytes @ 0xB
  5248  00E3                     	ds	2
  5249  00E5                     main@fader8bitValue:	
  5250                           
  5251                           ; 1 bytes @ 0xD
  5252  00E5                     	ds	1
  5253  00E6                     main@fx:	
  5254                           
  5255                           ; 2 bytes @ 0xE
  5256  00E6                     	ds	2
  5257  00E8                     main@faderValue:	
  5258                           
  5259                           ; 2 bytes @ 0x10
  5260  00E8                     	ds	2
  5261  00EA                     main@fx_978:	
  5262                           
  5263                           ; 2 bytes @ 0x12
  5264  00EA                     	ds	2
  5265                           
  5266                           	psect	cstackCOMMON
  5267  0077                     __pcstackCOMMON:	
  5268  0077                     ?_OSCILLATOR_Initialize:	
  5269  0077                     ?_I2C1_Initialize:	
  5270                           ; 1 bytes @ 0x0
  5271                           
  5272  0077                     ?_ADCC_Initialize:	
  5273                           ; 1 bytes @ 0x0
  5274                           
  5275  0077                     ?_I2C1_Stop:	
  5276                           ; 1 bytes @ 0x0
  5277                           
  5278  0077                     ??_I2C1_Stop:	
  5279                           ; 1 bytes @ 0x0
  5280                           
  5281  0077                     ?_I2C1_FunctionComplete:	
  5282                           ; 1 bytes @ 0x0
  5283                           
  5284  0077                     ??_I2C1_FunctionComplete:	
  5285                           ; 1 bytes @ 0x0
  5286                           
  5287  0077                     ?_initDAC528:	
  5288                           ; 1 bytes @ 0x0
  5289                           
  5290  0077                     ?_LED7SegSetup:	
  5291                           ; 1 bytes @ 0x0
  5292                           
  5293  0077                     ?_PIN_MANAGER_Initialize:	
  5294                           ; 1 bytes @ 0x0
  5295                           
  5296  0077                     ?_SYSTEM_Initialize:	
  5297                           ; 1 bytes @ 0x0
  5298                           
  5299  0077                     ?_I2C1_ISR:	
  5300                           ; 1 bytes @ 0x0
  5301                           
  5302  0077                     ?_I2C1_BusCollisionISR:	
  5303                           ; 1 bytes @ 0x0
  5304                           
  5305  0077                     ??_I2C1_BusCollisionISR:	
  5306                           ; 1 bytes @ 0x0
  5307                           
  5308  0077                     ?_INTERRUPT_InterruptManager:	
  5309                           ; 1 bytes @ 0x0
  5310                           
  5311  0077                     ?_InitPanelInChannels:	
  5312                           ; 1 bytes @ 0x0
  5313                           
  5314  0077                     ?_InitmvcChannels:	
  5315                           ; 1 bytes @ 0x0
  5316                           
  5317  0077                     ?_main:	
  5318                           ; 1 bytes @ 0x0
  5319                           
  5320  0077                     ?_LED7SegPinWrite:	
  5321                           ; 1 bytes @ 0x0
  5322                           
  5323  0077                     ?_LED7SegPulseClock:	
  5324                           ; 1 bytes @ 0x0
  5325                           
  5326  0077                     ?_LED7SegShiftOutPulseClock:	
  5327                           ; 1 bytes @ 0x0
  5328                           
  5329                           
  5330                           ; 1 bytes @ 0x0
  5331  0077                     	ds	1
  5332  0078                     I2C1_Stop@completion_code:	
  5333                           
  5334                           ; 1 bytes @ 0x1
  5335  0078                     	ds	1
  5336  0079                     ??_I2C1_ISR:	
  5337                           
  5338                           ; 1 bytes @ 0x2
  5339  0079                     	ds	4
  5340  007D                     ??_INTERRUPT_InterruptManager:	
  5341                           
  5342                           ; 1 bytes @ 0x6
  5343  007D                     	ds	1
  5344                           
  5345                           	psect	cstackBANK0
  5346  0020                     __pcstackBANK0:	
  5347  0020                     ??_OSCILLATOR_Initialize:	
  5348  0020                     ??_I2C1_Initialize:	
  5349                           ; 1 bytes @ 0x0
  5350                           
  5351  0020                     ??_ADCC_Initialize:	
  5352                           ; 1 bytes @ 0x0
  5353                           
  5354  0020                     ?_I2C1_MasterWriteTRBBuild:	
  5355                           ; 1 bytes @ 0x0
  5356                           
  5357  0020                     ?_I2C1_MasterTRBInsert:	
  5358                           ; 1 bytes @ 0x0
  5359                           
  5360  0020                     ??_LED7SegSetup:	
  5361                           ; 1 bytes @ 0x0
  5362                           
  5363  0020                     ?_marshallPatchMemory:	
  5364                           ; 1 bytes @ 0x0
  5365                           
  5366  0020                     ?_updateModelFromPatchMemory:	
  5367                           ; 1 bytes @ 0x0
  5368                           
  5369  0020                     ??_PIN_MANAGER_Initialize:	
  5370                           ; 1 bytes @ 0x0
  5371                           
  5372  0020                     ??_InitPanelInChannels:	
  5373                           ; 1 bytes @ 0x0
  5374                           
  5375  0020                     ??_InitmvcChannels:	
  5376                           ; 1 bytes @ 0x0
  5377                           
  5378  0020                     ??_LED7SegPinWrite:	
  5379                           ; 1 bytes @ 0x0
  5380                           
  5381  0020                     ?_ADCC_GetSingleConversion:	
  5382                           ; 1 bytes @ 0x0
  5383                           
  5384  0020                     ?___wmul:	
  5385                           ; 2 bytes @ 0x0
  5386                           
  5387  0020                     ?___ftpack:	
  5388                           ; 2 bytes @ 0x0
  5389                           
  5390  0020                     PIN_MANAGER_Initialize@state:	
  5391                           ; 3 bytes @ 0x0
  5392                           
  5393  0020                     I2C1_MasterTRBInsert@ptrb_list:	
  5394                           ; 1 bytes @ 0x0
  5395                           
  5396  0020                     I2C1_MasterWriteTRBBuild@pdata:	
  5397                           ; 1 bytes @ 0x0
  5398                           
  5399  0020                     LED7SegPinWrite@val:	
  5400                           ; 1 bytes @ 0x0
  5401                           
  5402  0020                     marshallPatchMemory@dualADSRdata0:	
  5403                           ; 1 bytes @ 0x0
  5404                           
  5405  0020                     updateModelFromPatchMemory@dualADSRdata0:	
  5406                           ; 1 bytes @ 0x0
  5407                           
  5408  0020                     ___wmul@multiplier:	
  5409                           ; 1 bytes @ 0x0
  5410                           
  5411  0020                     ___ftpack@arg:	
  5412                           ; 2 bytes @ 0x0
  5413                           
  5414                           
  5415                           ; 3 bytes @ 0x0
  5416  0020                     	ds	1
  5417  0021                     ??_SYSTEM_Initialize:	
  5418  0021                     I2C1_MasterTRBInsert@pflag:	
  5419                           ; 1 bytes @ 0x1
  5420                           
  5421  0021                     I2C1_MasterWriteTRBBuild@length:	
  5422                           ; 1 bytes @ 0x1
  5423                           
  5424  0021                     marshallPatchMemory@dualADSRdata1:	
  5425                           ; 1 bytes @ 0x1
  5426                           
  5427  0021                     updateModelFromPatchMemory@dualADSRdata1:	
  5428                           ; 1 bytes @ 0x1
  5429                           
  5430  0021                     InitPanelInChannels@i:	
  5431                           ; 1 bytes @ 0x1
  5432                           
  5433  0021                     InitmvcChannels@i:	
  5434                           ; 2 bytes @ 0x1
  5435                           
  5436                           
  5437                           ; 2 bytes @ 0x1
  5438  0021                     	ds	1
  5439  0022                     ??_I2C1_MasterTRBInsert:	
  5440  0022                     ??_marshallPatchMemory:	
  5441                           ; 1 bytes @ 0x2
  5442                           
  5443  0022                     ??_updateModelFromPatchMemory:	
  5444                           ; 1 bytes @ 0x2
  5445                           
  5446  0022                     I2C1_MasterWriteTRBBuild@address:	
  5447                           ; 1 bytes @ 0x2
  5448                           
  5449  0022                     ___wmul@multiplicand:	
  5450                           ; 2 bytes @ 0x2
  5451                           
  5452                           
  5453                           ; 2 bytes @ 0x2
  5454  0022                     	ds	1
  5455  0023                     ??_ADCC_GetSingleConversion:	
  5456  0023                     ADCC_GetSingleConversion@channel:	
  5457                           ; 1 bytes @ 0x3
  5458                           
  5459  0023                     I2C1_MasterTRBInsert@count:	
  5460                           ; 1 bytes @ 0x3
  5461                           
  5462  0023                     ___ftpack@exp:	
  5463                           ; 1 bytes @ 0x3
  5464                           
  5465                           
  5466                           ; 1 bytes @ 0x3
  5467  0023                     	ds	1
  5468  0024                     ??_I2C1_MasterWriteTRBBuild:	
  5469  0024                     ??___wmul:	
  5470                           ; 1 bytes @ 0x4
  5471                           
  5472  0024                     ___ftpack@sign:	
  5473                           ; 1 bytes @ 0x4
  5474                           
  5475  0024                     ___wmul@product:	
  5476                           ; 1 bytes @ 0x4
  5477                           
  5478                           
  5479                           ; 2 bytes @ 0x4
  5480  0024                     	ds	1
  5481  0025                     ??___ftpack:	
  5482                           
  5483                           ; 1 bytes @ 0x5
  5484  0025                     	ds	1
  5485  0026                     ?_delay:	
  5486  0026                     I2C1_MasterWriteTRBBuild@ptrb:	
  5487                           ; 1 bytes @ 0x6
  5488                           
  5489  0026                     updateModelFromPatchMemory@mvcChannels:	
  5490                           ; 1 bytes @ 0x6
  5491                           
  5492  0026                     delay@delaytime:	
  5493                           ; 1 bytes @ 0x6
  5494                           
  5495                           
  5496                           ; 2 bytes @ 0x6
  5497  0026                     	ds	1
  5498  0027                     ?_I2C1_MasterWrite:	
  5499  0027                     I2C1_MasterWrite@length:	
  5500                           ; 1 bytes @ 0x7
  5501                           
  5502  0027                     updateModelFromPatchMemory@i_1229:	
  5503                           ; 1 bytes @ 0x7
  5504                           
  5505                           
  5506                           ; 2 bytes @ 0x7
  5507  0027                     	ds	1
  5508  0028                     ??_delay:	
  5509  0028                     ?___awtoft:	
  5510                           ; 1 bytes @ 0x8
  5511                           
  5512  0028                     marshallPatchMemory@mvcChannels:	
  5513                           ; 3 bytes @ 0x8
  5514                           
  5515  0028                     I2C1_MasterWrite@address:	
  5516                           ; 1 bytes @ 0x8
  5517                           
  5518  0028                     ___awtoft@c:	
  5519                           ; 2 bytes @ 0x8
  5520                           
  5521                           
  5522                           ; 2 bytes @ 0x8
  5523  0028                     	ds	1
  5524  0029                     marshallPatchMemory@i:	
  5525  0029                     updateModelFromPatchMemory@i_1230:	
  5526                           ; 2 bytes @ 0x9
  5527                           
  5528  0029                     delay@adjustedDelaytime:	
  5529                           ; 2 bytes @ 0x9
  5530                           
  5531                           
  5532                           ; 4 bytes @ 0x9
  5533  0029                     	ds	1
  5534  002A                     I2C1_MasterWrite@pflag:	
  5535                           
  5536                           ; 1 bytes @ 0xA
  5537  002A                     	ds	1
  5538  002B                     ??_I2C1_MasterWrite:	
  5539  002B                     ??___awtoft:	
  5540                           ; 1 bytes @ 0xB
  5541                           
  5542  002B                     marshallPatchMemory@i_1221:	
  5543                           ; 1 bytes @ 0xB
  5544                           
  5545  002B                     updateModelFromPatchMemory@iPatchMemoryNDX:	
  5546                           ; 2 bytes @ 0xB
  5547                           
  5548                           
  5549                           ; 2 bytes @ 0xB
  5550  002B                     	ds	2
  5551  002D                     I2C1_MasterWrite@pdata:	
  5552  002D                     ___awtoft@sign:	
  5553                           ; 1 bytes @ 0xD
  5554                           
  5555  002D                     marshallPatchMemory@i_1222:	
  5556                           ; 1 bytes @ 0xD
  5557                           
  5558  002D                     updateModelFromPatchMemory@i:	
  5559                           ; 2 bytes @ 0xD
  5560                           
  5561  002D                     delay@counter:	
  5562                           ; 2 bytes @ 0xD
  5563                           
  5564                           
  5565                           ; 4 bytes @ 0xD
  5566  002D                     	ds	1
  5567  002E                     ?_MYI2C_Write2LEDBytes:	
  5568  002E                     ?_MYI2C_Write16EEPROMBytes:	
  5569                           ; 1 bytes @ 0xE
  5570                           
  5571  002E                     ?___ftdiv:	
  5572                           ; 1 bytes @ 0xE
  5573                           
  5574  002E                     ?___ftmul:	
  5575                           ; 3 bytes @ 0xE
  5576                           
  5577  002E                     MYI2C_Write2LEDBytes@MSBWriteByte:	
  5578                           ; 3 bytes @ 0xE
  5579                           
  5580  002E                     MYI2C_Write16EEPROMBytes@writeAddress:	
  5581                           ; 1 bytes @ 0xE
  5582                           
  5583  002E                     ___ftdiv@f2:	
  5584                           ; 2 bytes @ 0xE
  5585                           
  5586  002E                     ___ftmul@f1:	
  5587                           ; 3 bytes @ 0xE
  5588                           
  5589                           
  5590                           ; 3 bytes @ 0xE
  5591  002E                     	ds	1
  5592  002F                     MYI2C_Write2LEDBytes@LSBWriteByte:	
  5593  002F                     marshallPatchMemory@iPatchMemoryNDX:	
  5594                           ; 1 bytes @ 0xF
  5595                           
  5596                           
  5597                           ; 2 bytes @ 0xF
  5598  002F                     	ds	1
  5599  0030                     ??_MYI2C_Write2LEDBytes:	
  5600  0030                     MYI2C_Write16EEPROMBytes@pData:	
  5601                           ; 1 bytes @ 0x10
  5602                           
  5603                           
  5604                           ; 2 bytes @ 0x10
  5605  0030                     	ds	1
  5606  0031                     ??_LED7SegPulseClock:	
  5607  0031                     ??_LED7SegShiftOutPulseClock:	
  5608                           ; 1 bytes @ 0x11
  5609                           
  5610  0031                     ___ftdiv@f1:	
  5611                           ; 1 bytes @ 0x11
  5612                           
  5613  0031                     ___ftmul@f2:	
  5614                           ; 3 bytes @ 0x11
  5615                           
  5616                           
  5617                           ; 3 bytes @ 0x11
  5618  0031                     	ds	1
  5619  0032                     ??_MYI2C_Write16EEPROMBytes:	
  5620  0032                     LED7SegShiftOutPulseClock@val:	
  5621                           ; 1 bytes @ 0x12
  5622                           
  5623                           
  5624                           ; 1 bytes @ 0x12
  5625  0032                     	ds	1
  5626  0033                     LED7SegShiftOutPulseClock@i:	
  5627                           
  5628                           ; 1 bytes @ 0x13
  5629  0033                     	ds	1
  5630  0034                     ?_LED7SegDisplayValueByDigit:	
  5631  0034                     ??___ftdiv:	
  5632                           ; 1 bytes @ 0x14
  5633                           
  5634  0034                     ??___ftmul:	
  5635                           ; 1 bytes @ 0x14
  5636                           
  5637  0034                     MYI2C_Write2LEDBytes@nCount:	
  5638                           ; 1 bytes @ 0x14
  5639                           
  5640  0034                     LED7SegDisplayValueByDigit@iTensDigit:	
  5641                           ; 2 bytes @ 0x14
  5642                           
  5643                           
  5644                           ; 2 bytes @ 0x14
  5645  0034                     	ds	2
  5646  0036                     MYI2C_Write2LEDBytes@slaveDeviceAddress:	
  5647  0036                     LED7SegDisplayValueByDigit@iUnitsDigit:	
  5648                           ; 1 bytes @ 0x16
  5649                           
  5650  0036                     MYI2C_Write16EEPROMBytes@writeBuffer:	
  5651                           ; 2 bytes @ 0x16
  5652                           
  5653                           
  5654                           ; 17 bytes @ 0x16
  5655  0036                     	ds	1
  5656  0037                     MYI2C_Write2LEDBytes@counter:	
  5657                           
  5658                           ; 2 bytes @ 0x17
  5659  0037                     	ds	1
  5660  0038                     ??_LED7SegDisplayValueByDigit:	
  5661  0038                     ___ftdiv@cntr:	
  5662                           ; 1 bytes @ 0x18
  5663                           
  5664  0038                     ___ftmul@exp:	
  5665                           ; 1 bytes @ 0x18
  5666                           
  5667  0038                     LED7SegDisplayValueByDigit@iTensCode:	
  5668                           ; 1 bytes @ 0x18
  5669                           
  5670                           
  5671                           ; 2 bytes @ 0x18
  5672  0038                     	ds	1
  5673  0039                     MYI2C_Write2LEDBytes@timeOut:	
  5674  0039                     ___ftdiv@f3:	
  5675                           ; 2 bytes @ 0x19
  5676                           
  5677  0039                     ___ftmul@f3_as_product:	
  5678                           ; 3 bytes @ 0x19
  5679                           
  5680                           
  5681                           ; 3 bytes @ 0x19
  5682  0039                     	ds	2
  5683  003B                     MYI2C_Write2LEDBytes@pointerByte:	
  5684                           
  5685                           ; 1 bytes @ 0x1B
  5686  003B                     	ds	1
  5687  003C                     ___ftdiv@exp:	
  5688  003C                     ___ftmul@cntr:	
  5689                           ; 1 bytes @ 0x1C
  5690                           
  5691  003C                     MYI2C_Write2LEDBytes@writeBuffer:	
  5692                           ; 1 bytes @ 0x1C
  5693                           
  5694                           
  5695                           ; 3 bytes @ 0x1C
  5696  003C                     	ds	1
  5697  003D                     ___ftdiv@sign:	
  5698  003D                     ___ftmul@sign:	
  5699                           ; 1 bytes @ 0x1D
  5700                           
  5701                           
  5702                           ; 1 bytes @ 0x1D
  5703  003D                     	ds	1
  5704  003E                     ?___fttol:	
  5705  003E                     ___fttol@f1:	
  5706                           ; 4 bytes @ 0x1E
  5707                           
  5708                           
  5709                           ; 3 bytes @ 0x1E
  5710  003E                     	ds	1
  5711  003F                     MYI2C_Write2LEDBytes@status:	
  5712                           
  5713                           ; 1 bytes @ 0x1F
  5714  003F                     	ds	1
  5715  0040                     ?_blinkyLoop:	
  5716  0040                     blinkyLoop@maxLoops:	
  5717                           ; 1 bytes @ 0x20
  5718                           
  5719                           
  5720                           ; 2 bytes @ 0x20
  5721  0040                     	ds	2
  5722  0042                     ??_blinkyLoop:	
  5723  0042                     ??___fttol:	
  5724                           ; 1 bytes @ 0x22
  5725                           
  5726                           
  5727                           ; 1 bytes @ 0x22
  5728  0042                     	ds	2
  5729  0044                     blinkyLoop@delayTime:	
  5730                           
  5731                           ; 2 bytes @ 0x24
  5732  0044                     	ds	2
  5733  0046                     ___fttol@sign1:	
  5734  0046                     blinkyLoop@loopCount:	
  5735                           ; 1 bytes @ 0x26
  5736                           
  5737                           
  5738                           ; 2 bytes @ 0x26
  5739  0046                     	ds	1
  5740  0047                     MYI2C_Write16EEPROMBytes@iPatchAddressLow:	
  5741  0047                     ___fttol@lval:	
  5742                           ; 1 bytes @ 0x27
  5743                           
  5744                           
  5745                           ; 4 bytes @ 0x27
  5746  0047                     	ds	1
  5747  0048                     MYI2C_Write16EEPROMBytes@nCount:	
  5748                           
  5749                           ; 2 bytes @ 0x28
  5750  0048                     	ds	2
  5751  004A                     MYI2C_Write16EEPROMBytes@timeOut:	
  5752                           
  5753                           ; 2 bytes @ 0x2A
  5754  004A                     	ds	1
  5755  004B                     ___fttol@exp1:	
  5756                           
  5757                           ; 1 bytes @ 0x2B
  5758  004B                     	ds	1
  5759  004C                     ?_putByte:	
  5760  004C                     MYI2C_Write16EEPROMBytes@pointerByte:	
  5761                           ; 1 bytes @ 0x2C
  5762                           
  5763  004C                     putByte@clockPin:	
  5764                           ; 1 bytes @ 0x2C
  5765                           
  5766                           
  5767                           ; 2 bytes @ 0x2C
  5768  004C                     	ds	1
  5769  004D                     MYI2C_Write16EEPROMBytes@slaveDeviceAddress:	
  5770                           
  5771                           ; 1 bytes @ 0x2D
  5772  004D                     	ds	1
  5773  004E                     ??_putByte:	
  5774  004E                     MYI2C_Write16EEPROMBytes@iPatchAddressHigh:	
  5775                           ; 1 bytes @ 0x2E
  5776                           
  5777                           
  5778                           ; 1 bytes @ 0x2E
  5779  004E                     	ds	1
  5780  004F                     MYI2C_Write16EEPROMBytes@counter:	
  5781                           
  5782                           ; 2 bytes @ 0x2F
  5783  004F                     	ds	2
  5784  0051                     MYI2C_Write16EEPROMBytes@i:	
  5785                           
  5786                           ; 2 bytes @ 0x31
  5787  0051                     	ds	1
  5788  0052                     putByte@data:	
  5789                           
  5790                           ; 1 bytes @ 0x32
  5791  0052                     	ds	1
  5792  0053                     putByte@mask:	
  5793  0053                     MYI2C_Write16EEPROMBytes@status:	
  5794                           ; 1 bytes @ 0x33
  5795                           
  5796                           
  5797                           ; 1 bytes @ 0x33
  5798  0053                     	ds	1
  5799  0054                     ?_savePatch:	
  5800  0054                     putByte@i:	
  5801                           ; 1 bytes @ 0x34
  5802                           
  5803  0054                     savePatch@PatchNumber:	
  5804                           ; 1 bytes @ 0x34
  5805                           
  5806                           
  5807                           ; 2 bytes @ 0x34
  5808  0054                     	ds	1
  5809  0055                     ??_initDAC528:	
  5810  0055                     ?_writeDAC528:	
  5811                           ; 1 bytes @ 0x35
  5812                           
  5813  0055                     writeDAC528@dacNumber:	
  5814                           ; 1 bytes @ 0x35
  5815                           
  5816                           
  5817                           ; 2 bytes @ 0x35
  5818  0055                     	ds	1
  5819  0056                     ??_savePatch:	
  5820                           
  5821                           ; 1 bytes @ 0x36
  5822  0056                     	ds	1
  5823  0057                     writeDAC528@dacData:	
  5824                           
  5825                           ; 1 bytes @ 0x37
  5826  0057                     	ds	1
  5827  0058                     ??_writeDAC528:	
  5828                           
  5829                           ; 1 bytes @ 0x38
  5830  0058                     	ds	1
  5831  0059                     savePatch@iPatchAddressHigh:	
  5832  0059                     writeDAC528@wkDacNumber:	
  5833                           ; 1 bytes @ 0x39
  5834                           
  5835                           
  5836                           ; 1 bytes @ 0x39
  5837  0059                     	ds	1
  5838  005A                     ?_loadPatch:	
  5839  005A                     savePatch@iPatchAddressLow:	
  5840                           ; 1 bytes @ 0x3A
  5841                           
  5842  005A                     loadPatch@PatchNumber:	
  5843                           ; 1 bytes @ 0x3A
  5844                           
  5845                           
  5846                           ; 2 bytes @ 0x3A
  5847  005A                     	ds	1
  5848  005B                     savePatch@pData:	
  5849                           
  5850                           ; 2 bytes @ 0x3B
  5851  005B                     	ds	1
  5852  005C                     ??_loadPatch:	
  5853                           
  5854                           ; 1 bytes @ 0x3C
  5855  005C                     	ds	1
  5856  005D                     savePatch@idx:	
  5857                           
  5858                           ; 2 bytes @ 0x3D
  5859  005D                     	ds	1
  5860  005E                     loadPatch@iPatchAddress:	
  5861                           
  5862                           ; 2 bytes @ 0x3E
  5863  005E                     	ds	1
  5864  005F                     savePatch@batchNum:	
  5865                           
  5866                           ; 2 bytes @ 0x3F
  5867  005F                     	ds	1
  5868  0060                     loadPatch@i:	
  5869                           
  5870                           ; 2 bytes @ 0x40
  5871  0060                     	ds	1
  5872  0061                     savePatch@iPatchAddress:	
  5873                           
  5874                           ; 2 bytes @ 0x41
  5875  0061                     	ds	2
  5876  0063                     ??_main:	
  5877                           
  5878                           ; 1 bytes @ 0x43
  5879  0063                     	ds	4
  5880                           
  5881                           	psect	maintext
  5882  0064                     __pmaintext:	
  5883 ;;
  5884 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  5885 ;;
  5886 ;; *************** function _main *****************
  5887 ;; Defined at:
  5888 ;;		line 250 in file "main.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;		None
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  fx              2   18[BANK1 ] int 
  5893 ;;  fx              2   14[BANK1 ] int 
  5894 ;;  dFader8bitVa    3    0        int 
  5895 ;;  faderValue      2   16[BANK1 ] int 
  5896 ;;  SaveDebounce    2   11[BANK1 ] int 
  5897 ;;  LoadDebounce    2    9[BANK1 ] int 
  5898 ;;  iLoopCounter    2    5[BANK1 ] unsigned int 
  5899 ;;  iCounter        2    1[BANK1 ] unsigned int 
  5900 ;;  iLSByte         2    0        unsigned int 
  5901 ;;  iMSByte         2    0        unsigned int 
  5902 ;;  fader8bitVal    1   13[BANK1 ] unsigned char 
  5903 ;;  POT1Value       1    8[BANK1 ] unsigned char 
  5904 ;;  POT0Value       1    7[BANK1 ] unsigned char 
  5905 ;;  prevFader8bi    1    4[BANK1 ] unsigned char 
  5906 ;;  iChangeCount    1    3[BANK1 ] unsigned char 
  5907 ;;  readStatus      1    0[BANK1 ] enum E14335
  5908 ;;  DACDataValue    1    0        unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : B1F/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;      Totals:         0       4      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;Total ram usage:       24 bytes
  5923 ;; Hardware stack levels required when called:    8
  5924 ;; This function calls:
  5925 ;;		_ADCC_GetSingleConversion
  5926 ;;		_InitPanelInChannels
  5927 ;;		_InitmvcChannels
  5928 ;;		_LED7SegDisplayValueByDigit
  5929 ;;		_LED7SegSetup
  5930 ;;		_SYSTEM_Initialize
  5931 ;;		___awtoft
  5932 ;;		___ftdiv
  5933 ;;		___fttol
  5934 ;;		___wmul
  5935 ;;		_blinkyLoop
  5936 ;;		_delay
  5937 ;;		_initDAC528
  5938 ;;		_loadPatch
  5939 ;;		_savePatch
  5940 ;;		_writeDAC528
  5941 ;; This function is called by:
  5942 ;;		Startup code after reset
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           
  5947                           ;psect for function _main
  5948  0064                     _main:	
  5949                           
  5950                           ;main.c: 252: uint16_t iCounter=0;
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5954  0064  0021               	movlb	1	; select bank1
  5955  0065  01D9               	clrf	main@iCounter^(0+128)
  5956  0066  01DA               	clrf	(main@iCounter+1)^(0+128)
  5957                           
  5958                           ;main.c: 253: uint16_t iMSByte;
  5959                           ;main.c: 254: uint16_t iLSByte;
  5960                           ;main.c: 255: const uint16_t iResetValue=100;
  5961                           ;main.c: 256: uint16_t iLoopCounter=0;
  5962  0067  01DD               	clrf	main@iLoopCounter^(0+128)
  5963  0068  01DE               	clrf	(main@iLoopCounter+1)^(0+128)
  5964                           
  5965                           ;main.c: 257: uint8_t iChangeCount=0;
  5966  0069  01DB               	clrf	main@iChangeCount^(0+128)
  5967                           
  5968                           ;main.c: 258: int faderValue;
  5969                           ;main.c: 259: uint8_t fader8bitValue;
  5970                           ;main.c: 260: uint8_t prevFader8bitValue;
  5971                           ;main.c: 261: uint8_t POT0Value;
  5972                           ;main.c: 262: uint8_t POT1Value;
  5973                           ;main.c: 263: uint8_t DACDataValue;
  5974                           ;main.c: 264: double dFader8bitValue;
  5975                           ;main.c: 265: int LoadDebounceCount=0;
  5976  006A  01E1               	clrf	main@LoadDebounceCount^(0+128)
  5977  006B  01E2               	clrf	(main@LoadDebounceCount+1)^(0+128)
  5978                           
  5979                           ;main.c: 266: int SaveDebounceCount=0;
  5980  006C  01E3               	clrf	main@SaveDebounceCount^(0+128)
  5981  006D  01E4               	clrf	(main@SaveDebounceCount+1)^(0+128)
  5982                           
  5983                           ;main.c: 268: I2C1_MESSAGE_STATUS readStatus=0;
  5984  006E  01D8               	clrf	main@readStatus^(0+128)
  5985                           
  5986                           ;main.c: 271: SYSTEM_Initialize();
  5987  006F  3189  21EF  3180   	fcall	_SYSTEM_Initialize
  5988                           
  5989                           ;main.c: 272: initDAC528();
  5990  0072  318A  225A  3180   	fcall	_initDAC528
  5991                           
  5992                           ;main.c: 273: LED7SegSetup();
  5993  0075  318A  2213  3180   	fcall	_LED7SegSetup
  5994                           
  5995                           ;main.c: 275: InitPanelInChannels();
  5996  0078  318B  230A  3180   	fcall	_InitPanelInChannels
  5997                           
  5998                           ;main.c: 276: InitmvcChannels();
  5999  007B  318A  229F  3180   	fcall	_InitmvcChannels
  6000                           
  6001                           ;main.c: 281: (INTCONbits.GIE = 1);
  6002  007E  178B               	bsf	11,7	;volatile
  6003                           
  6004                           ;main.c: 284: (INTCONbits.PEIE = 1);
  6005  007F  170B               	bsf	11,6	;volatile
  6006                           
  6007                           ;main.c: 295: for(int fx=0;fx<4;fx++){
  6008  0080  0021               	movlb	1	; select bank1
  6009  0081  01E6               	clrf	main@fx^(0+128)
  6010  0082  01E7               	clrf	(main@fx+1)^(0+128)
  6011  0083  0867               	movf	(main@fx+1)^(0+128),w
  6012  0084  3A80               	xorlw	128
  6013  0085  0020               	movlb	0	; select bank0
  6014  0086  00E3               	movwf	??_main
  6015  0087  3080               	movlw	128
  6016  0088  0263               	subwf	??_main,w
  6017  0089  1D03               	skipz
  6018  008A  288E               	goto	u4165
  6019  008B  3004               	movlw	4
  6020  008C  0021               	movlb	1	; select bank1
  6021  008D  0266               	subwf	main@fx^(0+128),w
  6022  008E                     u4165:	
  6023  008E  1803               	btfsc	3,0
  6024  008F  28D9               	goto	l4442
  6025  0090                     l4432:	
  6026                           
  6027                           ;main.c: 296: faderValue=ADCC_GetSingleConversion(fx);
  6028  0090  0021               	movlb	1	; select bank1
  6029  0091  0866               	movf	main@fx^(0+128),w
  6030  0092  318A  2232  3180   	fcall	_ADCC_GetSingleConversion
  6031  0095  0020               	movlb	0	; select bank0
  6032  0096  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6033  0097  0021               	movlb	1	; select bank1
  6034  0098  00E9               	movwf	(main@faderValue+1)^(0+128)
  6035  0099  0020               	movlb	0	; select bank0
  6036  009A  0820               	movf	?_ADCC_GetSingleConversion,w
  6037  009B  0021               	movlb	1	; select bank1
  6038  009C  00E8               	movwf	main@faderValue^(0+128)
  6039                           
  6040                           ;main.c: 297: PanelInChannels[fx]=255-(faderValue>>2);
  6041  009D  0869               	movf	(main@faderValue+1)^(0+128),w
  6042  009E  0020               	movlb	0	; select bank0
  6043  009F  00E4               	movwf	??_main+1
  6044  00A0  0021               	movlb	1	; select bank1
  6045  00A1  0868               	movf	main@faderValue^(0+128),w
  6046  00A2  0020               	movlb	0	; select bank0
  6047  00A3  00E3               	movwf	??_main
  6048  00A4  0D64               	rlf	??_main+1,w
  6049  00A5  0CE4               	rrf	??_main+1,f
  6050  00A6  0CE3               	rrf	??_main,f
  6051  00A7  0D64               	rlf	??_main+1,w
  6052  00A8  0CE4               	rrf	??_main+1,f
  6053  00A9  0CE3               	rrf	??_main,f
  6054  00AA  0863               	movf	??_main,w
  6055  00AB  3AFF               	xorlw	255
  6056  00AC  3E01               	addlw	1
  6057  00AD  3EFF               	addlw	255
  6058  00AE  00E5               	movwf	??_main+2
  6059  00AF  0021               	movlb	1	; select bank1
  6060  00B0  0866               	movf	main@fx^(0+128),w
  6061  00B1  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6062  00B2  0086               	movwf	6
  6063  00B3  0187               	clrf	7
  6064  00B4  0020               	movlb	0	; select bank0
  6065  00B5  0865               	movf	??_main+2,w
  6066  00B6  0081               	movwf	1
  6067                           
  6068                           ;main.c: 298: prevPanelInChannels[fx]= PanelInChannels[fx];
  6069  00B7  0021               	movlb	1	; select bank1
  6070  00B8  0866               	movf	main@fx^(0+128),w
  6071  00B9  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6072  00BA  0086               	movwf	6
  6073  00BB  0187               	clrf	7
  6074  00BC  0801               	movf	1,w
  6075  00BD  0020               	movlb	0	; select bank0
  6076  00BE  00E3               	movwf	??_main
  6077  00BF  0021               	movlb	1	; select bank1
  6078  00C0  0866               	movf	main@fx^(0+128),w
  6079  00C1  3EA0               	addlw	(low (_prevPanelInChannels| 0))& (0+255)
  6080  00C2  0086               	movwf	6
  6081  00C3  0187               	clrf	7
  6082  00C4  0020               	movlb	0	; select bank0
  6083  00C5  0863               	movf	??_main,w
  6084  00C6  0081               	movwf	1
  6085  00C7  3001               	movlw	1
  6086  00C8  0021               	movlb	1	; select bank1
  6087  00C9  07E6               	addwf	main@fx^(0+128),f
  6088  00CA  3000               	movlw	0
  6089  00CB  3DE7               	addwfc	(main@fx+1)^(0+128),f
  6090  00CC  0867               	movf	(main@fx+1)^(0+128),w
  6091  00CD  3A80               	xorlw	128
  6092  00CE  0020               	movlb	0	; select bank0
  6093  00CF  00E3               	movwf	??_main
  6094  00D0  3080               	movlw	128
  6095  00D1  0263               	subwf	??_main,w
  6096  00D2  1D03               	skipz
  6097  00D3  28D7               	goto	u4175
  6098  00D4  3004               	movlw	4
  6099  00D5  0021               	movlb	1	; select bank1
  6100  00D6  0266               	subwf	main@fx^(0+128),w
  6101  00D7                     u4175:	
  6102  00D7  1C03               	skipc
  6103  00D8  2890               	goto	l4432
  6104  00D9                     l4442:	
  6105                           
  6106                           ;main.c: 299: }
  6107                           ;main.c: 301: blinkyLoop(10);
  6108  00D9  300A               	movlw	10
  6109  00DA  0020               	movlb	0	; select bank0
  6110  00DB  00C0               	movwf	blinkyLoop@maxLoops
  6111  00DC  3000               	movlw	0
  6112  00DD  00C1               	movwf	blinkyLoop@maxLoops+1
  6113  00DE  3187  277C  3180   	fcall	_blinkyLoop
  6114                           
  6115                           ;main.c: 306: PORTB |= 0x0F;
  6116  00E1  300F               	movlw	15
  6117  00E2  0020               	movlb	0	; select bank0
  6118  00E3  00E3               	movwf	??_main
  6119  00E4  0863               	movf	??_main,w
  6120  00E5  048D               	iorwf	13,f	;volatile
  6121                           
  6122                           ;main.c: 307: PORTC |= 0xE0;
  6123  00E6  30E0               	movlw	224
  6124  00E7  00E3               	movwf	??_main
  6125  00E8  0863               	movf	??_main,w
  6126  00E9  048E               	iorwf	14,f	;volatile
  6127                           
  6128                           ;main.c: 308: ODCONB &= 0xF0;
  6129  00EA  30F0               	movlw	240
  6130  00EB  00E3               	movwf	??_main
  6131  00EC  0863               	movf	??_main,w
  6132  00ED  003E               	movlb	30	; select bank30
  6133  00EE  05C5               	andwf	69,f	;volatile
  6134                           
  6135                           ;main.c: 309: ODCONC &= 0x1F;
  6136  00EF  301F               	movlw	31
  6137  00F0  0020               	movlb	0	; select bank0
  6138  00F1  00E3               	movwf	??_main
  6139  00F2  0863               	movf	??_main,w
  6140  00F3  003E               	movlb	30	; select bank30
  6141  00F4  05D0               	andwf	80,f	;volatile
  6142  00F5                     l4452:	
  6143                           ;main.c: 311: while (1) {
  6144                           
  6145                           
  6146                           ;main.c: 312: iLoopCounter++;
  6147  00F5  3001               	movlw	1
  6148  00F6  0021               	movlb	1	; select bank1
  6149  00F7  07DD               	addwf	main@iLoopCounter^(0+128),f
  6150  00F8  3000               	movlw	0
  6151  00F9  3DDE               	addwfc	(main@iLoopCounter+1)^(0+128),f
  6152                           
  6153                           ;main.c: 313: if (iResetValue<=iLoopCounter) iLoopCounter=0;
  6154  00FA  3028               	movlw	low (main@iResetValue| (0+32768))
  6155  00FB  0084               	movwf	4
  6156  00FC  3090               	movlw	high (main@iResetValue| (0+32768))
  6157  00FD  0085               	movwf	5
  6158  00FE  3F00               	moviw [0]fsr0
  6159  00FF  0020               	movlb	0	; select bank0
  6160  0100  00E3               	movwf	??_main
  6161  0101  3F01               	moviw [1]fsr0
  6162  0102  00E4               	movwf	??_main+1
  6163  0103  0864               	movf	??_main+1,w
  6164  0104  0021               	movlb	1	; select bank1
  6165  0105  025E               	subwf	(main@iLoopCounter+1)^(0+128),w
  6166  0106  1D03               	skipz
  6167  0107  290C               	goto	u4185
  6168  0108  0020               	movlb	0	; select bank0
  6169  0109  0863               	movf	??_main,w
  6170  010A  0021               	movlb	1	; select bank1
  6171  010B  025D               	subwf	main@iLoopCounter^(0+128),w
  6172  010C                     u4185:	
  6173  010C  1C03               	skipc
  6174  010D  2910               	goto	l523
  6175  010E  01DD               	clrf	main@iLoopCounter^(0+128)
  6176  010F  01DE               	clrf	(main@iLoopCounter+1)^(0+128)
  6177  0110                     l523:	
  6178                           
  6179                           ;main.c: 316: {
  6180                           ;main.c: 318: for(int fx=0;fx<cMixFaderCount;fx++){
  6181  0110  01EA               	clrf	main@fx_978^(0+128)
  6182  0111  01EB               	clrf	(main@fx_978+1)^(0+128)
  6183  0112  086B               	movf	(main@fx_978+1)^(0+128),w
  6184  0113  3A80               	xorlw	128
  6185  0114  0020               	movlb	0	; select bank0
  6186  0115  00E3               	movwf	??_main
  6187  0116  3080               	movlw	128
  6188  0117  0263               	subwf	??_main,w
  6189  0118  1D03               	skipz
  6190  0119  291D               	goto	u4195
  6191  011A  3004               	movlw	4
  6192  011B  0021               	movlb	1	; select bank1
  6193  011C  026A               	subwf	main@fx_978^(0+128),w
  6194  011D                     u4195:	
  6195  011D  1803               	btfsc	3,0
  6196  011E  29DD               	goto	l4486
  6197  011F                     l4462:	
  6198                           
  6199                           ;main.c: 319: faderValue=ADCC_GetSingleConversion(fx);
  6200  011F  0021               	movlb	1	; select bank1
  6201  0120  086A               	movf	main@fx_978^(0+128),w
  6202  0121  318A  2232  3180   	fcall	_ADCC_GetSingleConversion
  6203  0124  0020               	movlb	0	; select bank0
  6204  0125  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6205  0126  0021               	movlb	1	; select bank1
  6206  0127  00E9               	movwf	(main@faderValue+1)^(0+128)
  6207  0128  0020               	movlb	0	; select bank0
  6208  0129  0820               	movf	?_ADCC_GetSingleConversion,w
  6209  012A  0021               	movlb	1	; select bank1
  6210  012B  00E8               	movwf	main@faderValue^(0+128)
  6211                           
  6212                           ;main.c: 320: PanelInChannels[fx]=255-(faderValue>>2);
  6213  012C  0869               	movf	(main@faderValue+1)^(0+128),w
  6214  012D  0020               	movlb	0	; select bank0
  6215  012E  00E4               	movwf	??_main+1
  6216  012F  0021               	movlb	1	; select bank1
  6217  0130  0868               	movf	main@faderValue^(0+128),w
  6218  0131  0020               	movlb	0	; select bank0
  6219  0132  00E3               	movwf	??_main
  6220  0133  0D64               	rlf	??_main+1,w
  6221  0134  0CE4               	rrf	??_main+1,f
  6222  0135  0CE3               	rrf	??_main,f
  6223  0136  0D64               	rlf	??_main+1,w
  6224  0137  0CE4               	rrf	??_main+1,f
  6225  0138  0CE3               	rrf	??_main,f
  6226  0139  0863               	movf	??_main,w
  6227  013A  3AFF               	xorlw	255
  6228  013B  3E01               	addlw	1
  6229  013C  3EFF               	addlw	255
  6230  013D  00E5               	movwf	??_main+2
  6231  013E  0021               	movlb	1	; select bank1
  6232  013F  086A               	movf	main@fx_978^(0+128),w
  6233  0140  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6234  0141  0086               	movwf	6
  6235  0142  0187               	clrf	7
  6236  0143  0020               	movlb	0	; select bank0
  6237  0144  0865               	movf	??_main+2,w
  6238  0145  0081               	movwf	1
  6239                           
  6240                           ;main.c: 322: fader8bitValue=PanelInChannels[fx];
  6241  0146  0021               	movlb	1	; select bank1
  6242  0147  086A               	movf	main@fx_978^(0+128),w
  6243  0148  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6244  0149  0086               	movwf	6
  6245  014A  0187               	clrf	7
  6246  014B  0801               	movf	1,w
  6247  014C  0020               	movlb	0	; select bank0
  6248  014D  00E3               	movwf	??_main
  6249  014E  0863               	movf	??_main,w
  6250  014F  0021               	movlb	1	; select bank1
  6251  0150  00E5               	movwf	main@fader8bitValue^(0+128)
  6252                           
  6253                           ;main.c: 323: if( (PanelInChannels[fx]<(mvcChannels[fx]+4))
  6254                           ;main.c: 324: && (PanelInChannels[fx]>(mvcChannels[fx]-4)) ) {
  6255  0151  086A               	movf	main@fx_978^(0+128),w
  6256  0152  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6257  0153  0086               	movwf	6
  6258  0154  0187               	clrf	7
  6259  0155  0801               	movf	1,w
  6260  0156  3E04               	addlw	4
  6261  0157  0020               	movlb	0	; select bank0
  6262  0158  00E3               	movwf	??_main
  6263  0159  3000               	movlw	0
  6264  015A  1803               	skipnc
  6265  015B  3001               	movlw	1
  6266  015C  00E4               	movwf	??_main+1
  6267  015D  0021               	movlb	1	; select bank1
  6268  015E  086A               	movf	main@fx_978^(0+128),w
  6269  015F  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6270  0160  0086               	movwf	6
  6271  0161  0187               	clrf	7
  6272  0162  0020               	movlb	0	; select bank0
  6273  0163  0864               	movf	??_main+1,w
  6274  0164  3A80               	xorlw	128
  6275  0165  3C80               	sublw	128
  6276  0166  1D03               	skipz
  6277  0167  296A               	goto	u4205
  6278  0168  0863               	movf	??_main,w
  6279  0169  0201               	subwf	1,w
  6280  016A                     u4205:	
  6281  016A  1803               	skipnc
  6282  016B  2991               	goto	l526
  6283  016C  0021               	movlb	1	; select bank1
  6284  016D  086A               	movf	main@fx_978^(0+128),w
  6285  016E  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6286  016F  0086               	movwf	6
  6287  0170  0187               	clrf	7
  6288  0171  086A               	movf	main@fx_978^(0+128),w
  6289  0172  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6290  0173  0084               	movwf	4
  6291  0174  0185               	clrf	5
  6292  0175  0800               	movf	0,w
  6293  0176  3EFC               	addlw	252
  6294  0177  0020               	movlb	0	; select bank0
  6295  0178  00E3               	movwf	??_main
  6296  0179  30FF               	movlw	255
  6297  017A  1803               	skipnc
  6298  017B  3000               	movlw	0
  6299  017C  00E4               	movwf	??_main+1
  6300  017D  0864               	movf	??_main+1,w
  6301  017E  3A80               	xorlw	128
  6302  017F  00E5               	movwf	??_main+2
  6303  0180  3080               	movlw	128
  6304  0181  0265               	subwf	??_main+2,w
  6305  0182  1D03               	skipz
  6306  0183  2986               	goto	u4215
  6307  0184  0801               	movf	1,w
  6308  0185  0263               	subwf	??_main,w
  6309  0186                     u4215:	
  6310  0186  1803               	skipnc
  6311  0187  2991               	goto	l526
  6312                           
  6313                           ;main.c: 325: faderActiveFlag[fx]=1;
  6314  0188  0021               	movlb	1	; select bank1
  6315  0189  086A               	movf	main@fx_978^(0+128),w
  6316  018A  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  6317  018B  0086               	movwf	6
  6318  018C  0187               	clrf	7
  6319  018D  0181               	clrf	1
  6320  018E  0A81               	incf	1,f
  6321                           
  6322                           ;main.c: 326: LATB |= 0b00000010 ;
  6323  018F  0020               	movlb	0	; select bank0
  6324  0190  1497               	bsf	23,1	;volatile
  6325  0191                     l526:	
  6326                           
  6327                           ;main.c: 327: }
  6328                           ;main.c: 328: if(faderActiveFlag[fx]>0){
  6329  0191  0021               	movlb	1	; select bank1
  6330  0192  086A               	movf	main@fx_978^(0+128),w
  6331  0193  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  6332  0194  0086               	movwf	6
  6333  0195  0187               	clrf	7
  6334  0196  0801               	movf	1,w
  6335  0197  1903               	btfsc	3,2
  6336  0198  29BB               	goto	l4480
  6337                           
  6338                           ;main.c: 329: mvcChannels[fx]=PanelInChannels[fx];
  6339  0199  086A               	movf	main@fx_978^(0+128),w
  6340  019A  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6341  019B  0086               	movwf	6
  6342  019C  0187               	clrf	7
  6343  019D  0801               	movf	1,w
  6344  019E  0020               	movlb	0	; select bank0
  6345  019F  00E3               	movwf	??_main
  6346  01A0  0021               	movlb	1	; select bank1
  6347  01A1  086A               	movf	main@fx_978^(0+128),w
  6348  01A2  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  6349  01A3  0086               	movwf	6
  6350  01A4  0187               	clrf	7
  6351  01A5  0020               	movlb	0	; select bank0
  6352  01A6  0863               	movf	??_main,w
  6353  01A7  0081               	movwf	1
  6354                           
  6355                           ;main.c: 330: writeDAC528(fx+4,fader8bitValue);
  6356  01A8  0021               	movlb	1	; select bank1
  6357  01A9  086A               	movf	main@fx_978^(0+128),w
  6358  01AA  3E04               	addlw	4
  6359  01AB  0020               	movlb	0	; select bank0
  6360  01AC  00D5               	movwf	writeDAC528@dacNumber
  6361  01AD  3000               	movlw	0
  6362  01AE  0021               	movlb	1	; select bank1
  6363  01AF  3D6B               	addwfc	(main@fx_978+1)^(0+128),w
  6364  01B0  0020               	movlb	0	; select bank0
  6365  01B1  00D6               	movwf	writeDAC528@dacNumber+1
  6366  01B2  0021               	movlb	1	; select bank1
  6367  01B3  0865               	movf	main@fader8bitValue^(0+128),w
  6368  01B4  0020               	movlb	0	; select bank0
  6369  01B5  00E3               	movwf	??_main
  6370  01B6  0863               	movf	??_main,w
  6371  01B7  00D7               	movwf	writeDAC528@dacData
  6372  01B8  318B  236A  3180   	fcall	_writeDAC528
  6373  01BB                     l4480:	
  6374                           
  6375                           ;main.c: 331: }
  6376                           ;main.c: 332: prevPanelInChannels[fx]=PanelInChannels[fx];
  6377  01BB  0021               	movlb	1	; select bank1
  6378  01BC  086A               	movf	main@fx_978^(0+128),w
  6379  01BD  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
  6380  01BE  0086               	movwf	6
  6381  01BF  0187               	clrf	7
  6382  01C0  0801               	movf	1,w
  6383  01C1  0020               	movlb	0	; select bank0
  6384  01C2  00E3               	movwf	??_main
  6385  01C3  0021               	movlb	1	; select bank1
  6386  01C4  086A               	movf	main@fx_978^(0+128),w
  6387  01C5  3EA0               	addlw	(low (_prevPanelInChannels| 0))& (0+255)
  6388  01C6  0086               	movwf	6
  6389  01C7  0187               	clrf	7
  6390  01C8  0020               	movlb	0	; select bank0
  6391  01C9  0863               	movf	??_main,w
  6392  01CA  0081               	movwf	1
  6393  01CB  3001               	movlw	1
  6394  01CC  0021               	movlb	1	; select bank1
  6395  01CD  07EA               	addwf	main@fx_978^(0+128),f
  6396  01CE  3000               	movlw	0
  6397  01CF  3DEB               	addwfc	(main@fx_978+1)^(0+128),f
  6398  01D0  086B               	movf	(main@fx_978+1)^(0+128),w
  6399  01D1  3A80               	xorlw	128
  6400  01D2  0020               	movlb	0	; select bank0
  6401  01D3  00E3               	movwf	??_main
  6402  01D4  3080               	movlw	128
  6403  01D5  0263               	subwf	??_main,w
  6404  01D6  1D03               	skipz
  6405  01D7  29DB               	goto	u4235
  6406  01D8  3004               	movlw	4
  6407  01D9  0021               	movlb	1	; select bank1
  6408  01DA  026A               	subwf	main@fx_978^(0+128),w
  6409  01DB                     u4235:	
  6410  01DB  1C03               	skipc
  6411  01DC  291F               	goto	l4462
  6412  01DD                     l4486:	
  6413                           
  6414                           ;main.c: 333: }
  6415                           ;main.c: 336: faderValue=ADCC_GetSingleConversion(POT0);
  6416  01DD  3004               	movlw	4
  6417  01DE  318A  2232  3180   	fcall	_ADCC_GetSingleConversion
  6418  01E1  0020               	movlb	0	; select bank0
  6419  01E2  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6420  01E3  0021               	movlb	1	; select bank1
  6421  01E4  00E9               	movwf	(main@faderValue+1)^(0+128)
  6422  01E5  0020               	movlb	0	; select bank0
  6423  01E6  0820               	movf	?_ADCC_GetSingleConversion,w
  6424  01E7  0021               	movlb	1	; select bank1
  6425  01E8  00E8               	movwf	main@faderValue^(0+128)
  6426                           
  6427                           ;main.c: 337: faderValue=1023-faderValue;
  6428  01E9  0968               	comf	main@faderValue^(0+128),w
  6429  01EA  0020               	movlb	0	; select bank0
  6430  01EB  00E3               	movwf	??_main
  6431  01EC  0021               	movlb	1	; select bank1
  6432  01ED  0969               	comf	(main@faderValue+1)^(0+128),w
  6433  01EE  0020               	movlb	0	; select bank0
  6434  01EF  00E4               	movwf	??_main+1
  6435  01F0  0AE3               	incf	??_main,f
  6436  01F1  1903               	skipnz
  6437  01F2  0AE4               	incf	??_main+1,f
  6438  01F3  0863               	movf	??_main,w
  6439  01F4  3EFF               	addlw	255
  6440  01F5  0021               	movlb	1	; select bank1
  6441  01F6  00E8               	movwf	main@faderValue^(0+128)
  6442  01F7  3003               	movlw	3
  6443  01F8  0020               	movlb	0	; select bank0
  6444  01F9  3D64               	addwfc	??_main+1,w
  6445  01FA  0021               	movlb	1	; select bank1
  6446  01FB  00E9               	movwf	(main@faderValue+1)^(0+128)
  6447                           
  6448                           ;main.c: 339: POT0Value=faderValue/102.3;
  6449  01FC  0869               	movf	(main@faderValue+1)^(0+128),w
  6450  01FD  0020               	movlb	0	; select bank0
  6451  01FE  00A9               	movwf	___awtoft@c+1
  6452  01FF  0021               	movlb	1	; select bank1
  6453  0200  0868               	movf	main@faderValue^(0+128),w
  6454  0201  0020               	movlb	0	; select bank0
  6455  0202  00A8               	movwf	___awtoft@c
  6456  0203  318B  2348  3180   	fcall	___awtoft
  6457  0206  0020               	movlb	0	; select bank0
  6458  0207  0828               	movf	?___awtoft,w
  6459  0208  00B1               	movwf	___ftdiv@f1
  6460  0209  0829               	movf	?___awtoft+1,w
  6461  020A  00B2               	movwf	___ftdiv@f1+1
  6462  020B  082A               	movf	?___awtoft+2,w
  6463  020C  00B3               	movwf	___ftdiv@f1+2
  6464  020D  309A               	movlw	154
  6465  020E  00AE               	movwf	___ftdiv@f2
  6466  020F  30CC               	movlw	204
  6467  0210  00AF               	movwf	___ftdiv@f2+1
  6468  0211  3042               	movlw	66
  6469  0212  00B0               	movwf	___ftdiv@f2+2
  6470  0213  3186  26D3  3180   	fcall	___ftdiv
  6471  0216  0020               	movlb	0	; select bank0
  6472  0217  082E               	movf	?___ftdiv,w
  6473  0218  00BE               	movwf	___fttol@f1
  6474  0219  082F               	movf	?___ftdiv+1,w
  6475  021A  00BF               	movwf	___fttol@f1+1
  6476  021B  0830               	movf	?___ftdiv+2,w
  6477  021C  00C0               	movwf	___fttol@f1+2
  6478  021D  318E  2640  3180   	fcall	___fttol
  6479  0220  0020               	movlb	0	; select bank0
  6480  0221  083E               	movf	?___fttol,w
  6481  0222  00E3               	movwf	??_main
  6482  0223  0863               	movf	??_main,w
  6483  0224  0021               	movlb	1	; select bank1
  6484  0225  00DF               	movwf	main@POT0Value^(0+128)
  6485                           
  6486                           ;main.c: 340: faderValue=ADCC_GetSingleConversion(POT1);
  6487  0226  3005               	movlw	5
  6488  0227  318A  2232  3180   	fcall	_ADCC_GetSingleConversion
  6489  022A  0020               	movlb	0	; select bank0
  6490  022B  0821               	movf	?_ADCC_GetSingleConversion+1,w
  6491  022C  0021               	movlb	1	; select bank1
  6492  022D  00E9               	movwf	(main@faderValue+1)^(0+128)
  6493  022E  0020               	movlb	0	; select bank0
  6494  022F  0820               	movf	?_ADCC_GetSingleConversion,w
  6495  0230  0021               	movlb	1	; select bank1
  6496  0231  00E8               	movwf	main@faderValue^(0+128)
  6497                           
  6498                           ;main.c: 341: faderValue=1023-faderValue;
  6499  0232  0968               	comf	main@faderValue^(0+128),w
  6500  0233  0020               	movlb	0	; select bank0
  6501  0234  00E3               	movwf	??_main
  6502  0235  0021               	movlb	1	; select bank1
  6503  0236  0969               	comf	(main@faderValue+1)^(0+128),w
  6504  0237  0020               	movlb	0	; select bank0
  6505  0238  00E4               	movwf	??_main+1
  6506  0239  0AE3               	incf	??_main,f
  6507  023A  1903               	skipnz
  6508  023B  0AE4               	incf	??_main+1,f
  6509  023C  0863               	movf	??_main,w
  6510  023D  3EFF               	addlw	255
  6511  023E  0021               	movlb	1	; select bank1
  6512  023F  00E8               	movwf	main@faderValue^(0+128)
  6513  0240  3003               	movlw	3
  6514  0241  0020               	movlb	0	; select bank0
  6515  0242  3D64               	addwfc	??_main+1,w
  6516  0243  0021               	movlb	1	; select bank1
  6517  0244  00E9               	movwf	(main@faderValue+1)^(0+128)
  6518                           
  6519                           ;main.c: 342: POT1Value=faderValue/102.3;
  6520  0245  0869               	movf	(main@faderValue+1)^(0+128),w
  6521  0246  0020               	movlb	0	; select bank0
  6522  0247  00A9               	movwf	___awtoft@c+1
  6523  0248  0021               	movlb	1	; select bank1
  6524  0249  0868               	movf	main@faderValue^(0+128),w
  6525  024A  0020               	movlb	0	; select bank0
  6526  024B  00A8               	movwf	___awtoft@c
  6527  024C  318B  2348  3180   	fcall	___awtoft
  6528  024F  0020               	movlb	0	; select bank0
  6529  0250  0828               	movf	?___awtoft,w
  6530  0251  00B1               	movwf	___ftdiv@f1
  6531  0252  0829               	movf	?___awtoft+1,w
  6532  0253  00B2               	movwf	___ftdiv@f1+1
  6533  0254  082A               	movf	?___awtoft+2,w
  6534  0255  00B3               	movwf	___ftdiv@f1+2
  6535  0256  309A               	movlw	154
  6536  0257  00AE               	movwf	___ftdiv@f2
  6537  0258  30CC               	movlw	204
  6538  0259  00AF               	movwf	___ftdiv@f2+1
  6539  025A  3042               	movlw	66
  6540  025B  00B0               	movwf	___ftdiv@f2+2
  6541  025C  3186  26D3  3180   	fcall	___ftdiv
  6542  025F  0020               	movlb	0	; select bank0
  6543  0260  082E               	movf	?___ftdiv,w
  6544  0261  00BE               	movwf	___fttol@f1
  6545  0262  082F               	movf	?___ftdiv+1,w
  6546  0263  00BF               	movwf	___fttol@f1+1
  6547  0264  0830               	movf	?___ftdiv+2,w
  6548  0265  00C0               	movwf	___fttol@f1+2
  6549  0266  318E  2640  3180   	fcall	___fttol
  6550  0269  0020               	movlb	0	; select bank0
  6551  026A  083E               	movf	?___fttol,w
  6552  026B  00E3               	movwf	??_main
  6553  026C  0863               	movf	??_main,w
  6554  026D  0021               	movlb	1	; select bank1
  6555  026E  00E0               	movwf	main@POT1Value^(0+128)
  6556                           
  6557                           ;main.c: 343: }
  6558                           ;main.c: 406: if (prevFader8bitValue!=fader8bitValue) {
  6559  026F  085C               	movf	main@prevFader8bitValue^(0+128),w
  6560  0270  0665               	xorwf	main@fader8bitValue^(0+128),w
  6561  0271  1903               	skipnz
  6562  0272  2A79               	goto	l4500
  6563                           
  6564                           ;main.c: 407: iChangeCount++;
  6565  0273  3001               	movlw	1
  6566  0274  0020               	movlb	0	; select bank0
  6567  0275  00E3               	movwf	??_main
  6568  0276  0863               	movf	??_main,w
  6569  0277  0021               	movlb	1	; select bank1
  6570  0278  07DB               	addwf	main@iChangeCount^(0+128),f
  6571  0279                     l4500:	
  6572                           
  6573                           ;main.c: 409: }
  6574                           ;main.c: 410: prevFader8bitValue=fader8bitValue;
  6575  0279  0865               	movf	main@fader8bitValue^(0+128),w
  6576  027A  0020               	movlb	0	; select bank0
  6577  027B  00E3               	movwf	??_main
  6578  027C  0863               	movf	??_main,w
  6579  027D  0021               	movlb	1	; select bank1
  6580  027E  00DC               	movwf	main@prevFader8bitValue^(0+128)
  6581                           
  6582                           ;main.c: 413: iCounter++;
  6583  027F  3001               	movlw	1
  6584  0280  07D9               	addwf	main@iCounter^(0+128),f
  6585  0281  3000               	movlw	0
  6586  0282  3DDA               	addwfc	(main@iCounter+1)^(0+128),f
  6587                           
  6588                           ;main.c: 414: if (fader8bitValue<252)
  6589  0283  30FC               	movlw	252
  6590  0284  0265               	subwf	main@fader8bitValue^(0+128),w
  6591  0285  1803               	skipnc
  6592  0286  2A99               	goto	l4508
  6593                           
  6594                           ;main.c: 415: delay(1*(255-fader8bitValue));
  6595  0287  0865               	movf	main@fader8bitValue^(0+128),w
  6596  0288  0020               	movlb	0	; select bank0
  6597  0289  00E3               	movwf	??_main
  6598  028A  01E4               	clrf	??_main+1
  6599  028B  09E3               	comf	??_main,f
  6600  028C  09E4               	comf	??_main+1,f
  6601  028D  0AE3               	incf	??_main,f
  6602  028E  1903               	skipnz
  6603  028F  0AE4               	incf	??_main+1,f
  6604  0290  0863               	movf	??_main,w
  6605  0291  3EFF               	addlw	255
  6606  0292  00A6               	movwf	delay@delaytime
  6607  0293  3000               	movlw	0
  6608  0294  3D64               	addwfc	??_main+1,w
  6609  0295  00A7               	movwf	delay@delaytime+1
  6610  0296  318C  24B5  3180   	fcall	_delay
  6611  0299                     l4508:	
  6612                           
  6613                           ;main.c: 421: mvcPatchNumber=(POT1Value*10)+POT0Value;
  6614  0299  0021               	movlb	1	; select bank1
  6615  029A  085F               	movf	main@POT0Value^(0+128),w
  6616  029B  0020               	movlb	0	; select bank0
  6617  029C  00E3               	movwf	??_main
  6618  029D  01E4               	clrf	??_main+1
  6619  029E  0021               	movlb	1	; select bank1
  6620  029F  0860               	movf	main@POT1Value^(0+128),w
  6621  02A0  0020               	movlb	0	; select bank0
  6622  02A1  00E5               	movwf	??_main+2
  6623  02A2  01E6               	clrf	??_main+3
  6624  02A3  0865               	movf	??_main+2,w
  6625  02A4  00A0               	movwf	___wmul@multiplier
  6626  02A5  0866               	movf	??_main+3,w
  6627  02A6  00A1               	movwf	___wmul@multiplier+1
  6628  02A7  300A               	movlw	10
  6629  02A8  00A2               	movwf	___wmul@multiplicand
  6630  02A9  3000               	movlw	0
  6631  02AA  00A3               	movwf	___wmul@multiplicand+1
  6632  02AB  318A  22D2  3180   	fcall	___wmul
  6633  02AE  0020               	movlb	0	; select bank0
  6634  02AF  0863               	movf	??_main,w
  6635  02B0  0720               	addwf	?___wmul,w
  6636  02B1  0021               	movlb	1	; select bank1
  6637  02B2  00B9               	movwf	_mvcPatchNumber^(0+128)
  6638  02B3  0020               	movlb	0	; select bank0
  6639  02B4  0864               	movf	??_main+1,w
  6640  02B5  3D21               	addwfc	?___wmul+1,w
  6641  02B6  0021               	movlb	1	; select bank1
  6642  02B7  00BA               	movwf	(_mvcPatchNumber+1)^(0+128)
  6643                           
  6644                           ;main.c: 422: LED7SegDisplayValueByDigit(POT1Value,POT0Value);
  6645  02B8  0860               	movf	main@POT1Value^(0+128),w
  6646  02B9  0020               	movlb	0	; select bank0
  6647  02BA  00E3               	movwf	??_main
  6648  02BB  01E4               	clrf	??_main+1
  6649  02BC  0863               	movf	??_main,w
  6650  02BD  00B4               	movwf	LED7SegDisplayValueByDigit@iTensDigit
  6651  02BE  0864               	movf	??_main+1,w
  6652  02BF  00B5               	movwf	LED7SegDisplayValueByDigit@iTensDigit+1
  6653  02C0  0021               	movlb	1	; select bank1
  6654  02C1  085F               	movf	main@POT0Value^(0+128),w
  6655  02C2  0020               	movlb	0	; select bank0
  6656  02C3  00E5               	movwf	??_main+2
  6657  02C4  01E6               	clrf	??_main+3
  6658  02C5  0865               	movf	??_main+2,w
  6659  02C6  00B6               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit
  6660  02C7  0866               	movf	??_main+3,w
  6661  02C8  00B7               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit+1
  6662  02C9  318B  23B7  3180   	fcall	_LED7SegDisplayValueByDigit
  6663                           
  6664                           ;main.c: 427: if (PORTBbits.RB4 == 0){
  6665  02CC  0020               	movlb	0	; select bank0
  6666  02CD  1A0D               	btfsc	13,4	;volatile
  6667  02CE  2B04               	goto	l4524
  6668                           
  6669                           ;main.c: 429: LoadDebounceCount++;
  6670  02CF  3001               	movlw	1
  6671  02D0  0021               	movlb	1	; select bank1
  6672  02D1  07E1               	addwf	main@LoadDebounceCount^(0+128),f
  6673  02D2  3000               	movlw	0
  6674  02D3  3DE2               	addwfc	(main@LoadDebounceCount+1)^(0+128),f
  6675                           
  6676                           ;main.c: 430: if(5<LoadDebounceCount) {
  6677  02D4  0862               	movf	(main@LoadDebounceCount+1)^(0+128),w
  6678  02D5  3A80               	xorlw	128
  6679  02D6  0020               	movlb	0	; select bank0
  6680  02D7  00E3               	movwf	??_main
  6681  02D8  3080               	movlw	128
  6682  02D9  0263               	subwf	??_main,w
  6683  02DA  1D03               	skipz
  6684  02DB  2ADF               	goto	u4275
  6685  02DC  3006               	movlw	6
  6686  02DD  0021               	movlb	1	; select bank1
  6687  02DE  0261               	subwf	main@LoadDebounceCount^(0+128),w
  6688  02DF                     u4275:	
  6689  02DF  1C03               	skipc
  6690  02E0  2B17               	goto	l4530
  6691                           
  6692                           ;main.c: 431: LATB &= 0b10011110 ;
  6693  02E1  309E               	movlw	158
  6694  02E2  0020               	movlb	0	; select bank0
  6695  02E3  00E3               	movwf	??_main
  6696  02E4  0863               	movf	??_main,w
  6697  02E5  0597               	andwf	23,f	;volatile
  6698                           
  6699                           ;main.c: 433: loadPatch(mvcPatchNumber);
  6700  02E6  0021               	movlb	1	; select bank1
  6701  02E7  083A               	movf	(_mvcPatchNumber+1)^(0+128),w
  6702  02E8  0020               	movlb	0	; select bank0
  6703  02E9  00DB               	movwf	loadPatch@PatchNumber+1
  6704  02EA  0021               	movlb	1	; select bank1
  6705  02EB  0839               	movf	_mvcPatchNumber^(0+128),w
  6706  02EC  0020               	movlb	0	; select bank0
  6707  02ED  00DA               	movwf	loadPatch@PatchNumber
  6708  02EE  318C  242F  3180   	fcall	_loadPatch
  6709                           
  6710                           ;main.c: 435: LoadDebounceCount=1;
  6711  02F1  3001               	movlw	1
  6712  02F2  0021               	movlb	1	; select bank1
  6713  02F3  00E1               	movwf	main@LoadDebounceCount^(0+128)
  6714  02F4  3000               	movlw	0
  6715  02F5  00E2               	movwf	(main@LoadDebounceCount^(0+128)+1)
  6716                           
  6717                           ;main.c: 436: _delay((unsigned long)((500)*(32000000/4000.0)));
  6718  02F6  3015               	movlw	21
  6719  02F7  0020               	movlb	0	; select bank0
  6720  02F8  00E4               	movwf	??_main+1
  6721  02F9  304B               	movlw	75
  6722  02FA  00E3               	movwf	??_main
  6723  02FB  30BE               	movlw	190
  6724  02FC                     u4407:	
  6725  02FC  0B89               	decfsz	9,f
  6726  02FD  2AFC               	goto	u4407
  6727  02FE  0BE3               	decfsz	??_main,f
  6728  02FF  2AFC               	goto	u4407
  6729  0300  0BE4               	decfsz	??_main+1,f
  6730  0301  2AFC               	goto	u4407
  6731  0302  0000               	nop
  6732                           
  6733                           ;main.c: 437: }
  6734                           ;main.c: 438: }else{
  6735  0303  2B17               	goto	l4530
  6736  0304                     l4524:	
  6737                           
  6738                           ;main.c: 439: if(0<LoadDebounceCount){
  6739  0304  0021               	movlb	1	; select bank1
  6740  0305  0862               	movf	(main@LoadDebounceCount+1)^(0+128),w
  6741  0306  3A80               	xorlw	128
  6742  0307  0020               	movlb	0	; select bank0
  6743  0308  00E3               	movwf	??_main
  6744  0309  3080               	movlw	128
  6745  030A  0263               	subwf	??_main,w
  6746  030B  1D03               	skipz
  6747  030C  2B10               	goto	u4285
  6748  030D  3001               	movlw	1
  6749  030E  0021               	movlb	1	; select bank1
  6750  030F  0261               	subwf	main@LoadDebounceCount^(0+128),w
  6751  0310                     u4285:	
  6752  0310  1C03               	skipc
  6753  0311  2B17               	goto	l4530
  6754                           
  6755                           ;main.c: 440: LoadDebounceCount=0;
  6756  0312  0021               	movlb	1	; select bank1
  6757  0313  01E1               	clrf	main@LoadDebounceCount^(0+128)
  6758  0314  01E2               	clrf	(main@LoadDebounceCount+1)^(0+128)
  6759                           
  6760                           ;main.c: 441: LATB |= 0b00000001 ;
  6761  0315  0020               	movlb	0	; select bank0
  6762  0316  1417               	bsf	23,0	;volatile
  6763  0317                     l4530:	
  6764                           
  6765                           ;main.c: 442: }
  6766                           ;main.c: 443: }
  6767                           ;main.c: 444: if (PORTBbits.RB5 == 0){
  6768  0317  0020               	movlb	0	; select bank0
  6769  0318  1A8D               	btfsc	13,5	;volatile
  6770  0319  2B4F               	goto	l4542
  6771                           
  6772                           ;main.c: 446: SaveDebounceCount++;
  6773  031A  3001               	movlw	1
  6774  031B  0021               	movlb	1	; select bank1
  6775  031C  07E3               	addwf	main@SaveDebounceCount^(0+128),f
  6776  031D  3000               	movlw	0
  6777  031E  3DE4               	addwfc	(main@SaveDebounceCount+1)^(0+128),f
  6778                           
  6779                           ;main.c: 447: if(5<SaveDebounceCount) {
  6780  031F  0864               	movf	(main@SaveDebounceCount+1)^(0+128),w
  6781  0320  3A80               	xorlw	128
  6782  0321  0020               	movlb	0	; select bank0
  6783  0322  00E3               	movwf	??_main
  6784  0323  3080               	movlw	128
  6785  0324  0263               	subwf	??_main,w
  6786  0325  1D03               	skipz
  6787  0326  2B2A               	goto	u4305
  6788  0327  3006               	movlw	6
  6789  0328  0021               	movlb	1	; select bank1
  6790  0329  0263               	subwf	main@SaveDebounceCount^(0+128),w
  6791  032A                     u4305:	
  6792  032A  1C03               	skipc
  6793  032B  28F5               	goto	l4452
  6794                           
  6795                           ;main.c: 448: LATB &= 0b10011101 ;
  6796  032C  309D               	movlw	157
  6797  032D  0020               	movlb	0	; select bank0
  6798  032E  00E3               	movwf	??_main
  6799  032F  0863               	movf	??_main,w
  6800  0330  0597               	andwf	23,f	;volatile
  6801                           
  6802                           ;main.c: 467: savePatch(mvcPatchNumber);
  6803  0331  0021               	movlb	1	; select bank1
  6804  0332  083A               	movf	(_mvcPatchNumber+1)^(0+128),w
  6805  0333  0020               	movlb	0	; select bank0
  6806  0334  00D5               	movwf	savePatch@PatchNumber+1
  6807  0335  0021               	movlb	1	; select bank1
  6808  0336  0839               	movf	_mvcPatchNumber^(0+128),w
  6809  0337  0020               	movlb	0	; select bank0
  6810  0338  00D4               	movwf	savePatch@PatchNumber
  6811  0339  318D  25C7  3180   	fcall	_savePatch
  6812                           
  6813                           ;main.c: 472: SaveDebounceCount=1;
  6814  033C  3001               	movlw	1
  6815  033D  0021               	movlb	1	; select bank1
  6816  033E  00E3               	movwf	main@SaveDebounceCount^(0+128)
  6817  033F  3000               	movlw	0
  6818  0340  00E4               	movwf	(main@SaveDebounceCount^(0+128)+1)
  6819                           
  6820                           ;main.c: 473: _delay((unsigned long)((500)*(32000000/4000.0)));
  6821  0341  3015               	movlw	21
  6822  0342  0020               	movlb	0	; select bank0
  6823  0343  00E4               	movwf	??_main+1
  6824  0344  304B               	movlw	75
  6825  0345  00E3               	movwf	??_main
  6826  0346  30BE               	movlw	190
  6827  0347                     u4417:	
  6828  0347  0B89               	decfsz	9,f
  6829  0348  2B47               	goto	u4417
  6830  0349  0BE3               	decfsz	??_main,f
  6831  034A  2B47               	goto	u4417
  6832  034B  0BE4               	decfsz	??_main+1,f
  6833  034C  2B47               	goto	u4417
  6834  034D  0000               	nop
  6835                           
  6836                           ;main.c: 474: }
  6837                           ;main.c: 475: }else{
  6838  034E  28F5               	goto	l4452
  6839  034F                     l4542:	
  6840                           
  6841                           ;main.c: 476: if(0<SaveDebounceCount){
  6842  034F  0021               	movlb	1	; select bank1
  6843  0350  0864               	movf	(main@SaveDebounceCount+1)^(0+128),w
  6844  0351  3A80               	xorlw	128
  6845  0352  0020               	movlb	0	; select bank0
  6846  0353  00E3               	movwf	??_main
  6847  0354  3080               	movlw	128
  6848  0355  0263               	subwf	??_main,w
  6849  0356  1D03               	skipz
  6850  0357  2B5B               	goto	u4315
  6851  0358  3001               	movlw	1
  6852  0359  0021               	movlb	1	; select bank1
  6853  035A  0263               	subwf	main@SaveDebounceCount^(0+128),w
  6854  035B                     u4315:	
  6855  035B  1C03               	skipc
  6856  035C  28F5               	goto	l4452
  6857                           
  6858                           ;main.c: 477: SaveDebounceCount=0;
  6859  035D  0021               	movlb	1	; select bank1
  6860  035E  01E3               	clrf	main@SaveDebounceCount^(0+128)
  6861  035F  01E4               	clrf	(main@SaveDebounceCount+1)^(0+128)
  6862                           
  6863                           ;main.c: 478: LATB |= 0b00000010;
  6864  0360  0020               	movlb	0	; select bank0
  6865  0361  1497               	bsf	23,1	;volatile
  6866  0362  28F5               	goto	l4452
  6867  0363                     __end_of_main:	
  6868                           
  6869                           	psect	text1
  6870  0DC7                     __ptext1:	
  6871 ;; *************** function _savePatch *****************
  6872 ;; Defined at:
  6873 ;;		line 812 in file "main.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;  PatchNumber     2   52[BANK0 ] int 
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  batchNum        2   63[BANK0 ] int 
  6878 ;;  iPatchAddres    2   65[BANK0 ] int 
  6879 ;;  idx             2   61[BANK0 ] int 
  6880 ;;  pData           2   59[BANK0 ] PTR unsigned char 
  6881 ;;		 -> aPatchMemory(128), 
  6882 ;;  iPatchAddres    1   58[BANK0 ] unsigned char 
  6883 ;;  iPatchAddres    1   57[BANK0 ] unsigned char 
  6884 ;; Return value:  Size  Location     Type
  6885 ;;                  1    wreg      void 
  6886 ;; Registers used:
  6887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6893 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;Total ram usage:       15 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    6
  6900 ;; This function calls:
  6901 ;;		_MYI2C_Write16EEPROMBytes
  6902 ;;		_marshallPatchMemory
  6903 ;; This function is called by:
  6904 ;;		_main
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           
  6909                           ;psect for function _savePatch
  6910  0DC7                     _savePatch:	
  6911                           
  6912                           ;main.c: 813: int iPatchAddress=PatchNumber*cPatchSize;
  6913                           
  6914                           ;incstack = 0
  6915                           ; Regs used in _savePatch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6916  0DC7  0020               	movlb	0	; select bank0
  6917  0DC8  0855               	movf	savePatch@PatchNumber+1,w
  6918  0DC9  00D7               	movwf	??_savePatch+1
  6919  0DCA  0854               	movf	savePatch@PatchNumber,w
  6920  0DCB  00D6               	movwf	??_savePatch
  6921  0DCC  3007               	movlw	7
  6922  0DCD                     u3095:	
  6923  0DCD  35D6               	lslf	??_savePatch,f
  6924  0DCE  0DD7               	rlf	??_savePatch+1,f
  6925  0DCF  0B89               	decfsz	9,f
  6926  0DD0  2DCD               	goto	u3095
  6927  0DD1  0856               	movf	??_savePatch,w
  6928  0DD2  00E1               	movwf	savePatch@iPatchAddress
  6929  0DD3  0857               	movf	??_savePatch+1,w
  6930  0DD4  00E2               	movwf	savePatch@iPatchAddress+1
  6931                           
  6932                           ;main.c: 814: uint8_t iPatchAddressHigh=iPatchAddress>>8;
  6933  0DD5  0862               	movf	savePatch@iPatchAddress+1,w
  6934  0DD6  00D6               	movwf	??_savePatch
  6935  0DD7  0856               	movf	??_savePatch,w
  6936  0DD8  00D9               	movwf	savePatch@iPatchAddressHigh
  6937                           
  6938                           ;main.c: 815: uint8_t iPatchAddressLow=iPatchAddress&0xFF;
  6939  0DD9  0861               	movf	savePatch@iPatchAddress,w
  6940  0DDA  00D6               	movwf	??_savePatch
  6941  0DDB  0856               	movf	??_savePatch,w
  6942  0DDC  00DA               	movwf	savePatch@iPatchAddressLow
  6943                           
  6944                           ;main.c: 818: marshallPatchMemory(mvcChannels,dualADSRdata0,dualADSRdata1);
  6945  0DDD  303C               	movlw	(low (_dualADSRdata0| (0+256)))& (0+255)
  6946  0DDE  00D6               	movwf	??_savePatch
  6947  0DDF  0856               	movf	??_savePatch,w
  6948  0DE0  00A0               	movwf	marshallPatchMemory@dualADSRdata0
  6949  0DE1  3034               	movlw	(low (_dualADSRdata1| (0+256)))& (0+255)
  6950  0DE2  00D7               	movwf	??_savePatch+1
  6951  0DE3  0857               	movf	??_savePatch+1,w
  6952  0DE4  00A1               	movwf	marshallPatchMemory@dualADSRdata1
  6953  0DE5  30C9               	movlw	(low (_mvcChannels| 0))& (0+255)
  6954  0DE6  3184  249E  318D   	fcall	_marshallPatchMemory
  6955                           
  6956                           ;main.c: 821: uint8_t *pData;
  6957                           ;main.c: 822: int idx;
  6958                           ;main.c: 825: for(int batchNum=0;(batchNum*ciBatchSize)<cPatchSize;batchNum++){
  6959  0DE9  0020               	movlb	0	; select bank0
  6960  0DEA  01DF               	clrf	savePatch@batchNum
  6961  0DEB  01E0               	clrf	savePatch@batchNum+1
  6962  0DEC                     l3612:	
  6963  0DEC  0860               	movf	savePatch@batchNum+1,w
  6964  0DED  00D7               	movwf	??_savePatch+1
  6965  0DEE  085F               	movf	savePatch@batchNum,w
  6966  0DEF  00D6               	movwf	??_savePatch
  6967  0DF0  0ED6               	swapf	??_savePatch,f
  6968  0DF1  0ED7               	swapf	??_savePatch+1,f
  6969  0DF2  30F0               	movlw	240
  6970  0DF3  05D7               	andwf	??_savePatch+1,f
  6971  0DF4  0856               	movf	??_savePatch,w
  6972  0DF5  390F               	andlw	15
  6973  0DF6  04D7               	iorwf	??_savePatch+1,f
  6974  0DF7  30F0               	movlw	240
  6975  0DF8  05D6               	andwf	??_savePatch,f
  6976  0DF9  0857               	movf	??_savePatch+1,w
  6977  0DFA  3A80               	xorlw	128
  6978  0DFB  00D8               	movwf	??_savePatch+2
  6979  0DFC  3080               	movlw	128
  6980  0DFD  0258               	subwf	??_savePatch+2,w
  6981  0DFE  1D03               	skipz
  6982  0DFF  2E02               	goto	u3105
  6983  0E00  3080               	movlw	128
  6984  0E01  0256               	subwf	??_savePatch,w
  6985  0E02                     u3105:	
  6986  0E02  1803               	btfsc	3,0
  6987  0E03  0008               	return
  6988                           
  6989                           ;main.c: 827: idx=batchNum*ciBatchSize;
  6990  0E04  0020               	movlb	0	; select bank0
  6991  0E05  0860               	movf	savePatch@batchNum+1,w
  6992  0E06  00D7               	movwf	??_savePatch+1
  6993  0E07  085F               	movf	savePatch@batchNum,w
  6994  0E08  00D6               	movwf	??_savePatch
  6995  0E09  0ED6               	swapf	??_savePatch,f
  6996  0E0A  0ED7               	swapf	??_savePatch+1,f
  6997  0E0B  30F0               	movlw	240
  6998  0E0C  05D7               	andwf	??_savePatch+1,f
  6999  0E0D  0856               	movf	??_savePatch,w
  7000  0E0E  390F               	andlw	15
  7001  0E0F  04D7               	iorwf	??_savePatch+1,f
  7002  0E10  30F0               	movlw	240
  7003  0E11  05D6               	andwf	??_savePatch,f
  7004  0E12  0856               	movf	??_savePatch,w
  7005  0E13  00DD               	movwf	savePatch@idx
  7006  0E14  0857               	movf	??_savePatch+1,w
  7007  0E15  00DE               	movwf	savePatch@idx+1
  7008                           
  7009                           ;main.c: 828: pData=&aPatchMemory[idx];
  7010  0E16  3070               	movlw	112
  7011  0E17  00D6               	movwf	??_savePatch
  7012  0E18  3023               	movlw	35
  7013  0E19  00D7               	movwf	??_savePatch+1
  7014  0E1A  085D               	movf	savePatch@idx,w
  7015  0E1B  0756               	addwf	??_savePatch,w
  7016  0E1C  00DB               	movwf	savePatch@pData
  7017  0E1D  085E               	movf	savePatch@idx+1,w
  7018  0E1E  3D57               	addwfc	??_savePatch+1,w
  7019  0E1F  00DC               	movwf	savePatch@pData+1
  7020                           
  7021                           ;main.c: 829: MYI2C_Write16EEPROMBytes(ciI2C_EEPROM_DEVICE_ADDRESS,iPatchAddress,pData);
  7022  0E20  0862               	movf	savePatch@iPatchAddress+1,w
  7023  0E21  00AF               	movwf	MYI2C_Write16EEPROMBytes@writeAddress+1
  7024  0E22  0861               	movf	savePatch@iPatchAddress,w
  7025  0E23  00AE               	movwf	MYI2C_Write16EEPROMBytes@writeAddress
  7026  0E24  085C               	movf	savePatch@pData+1,w
  7027  0E25  00B1               	movwf	MYI2C_Write16EEPROMBytes@pData+1
  7028  0E26  085B               	movf	savePatch@pData,w
  7029  0E27  00B0               	movwf	MYI2C_Write16EEPROMBytes@pData
  7030  0E28  3050               	movlw	80
  7031  0E29  318E  26C7  318D   	fcall	_MYI2C_Write16EEPROMBytes
  7032                           
  7033                           ;main.c: 831: iPatchAddress+=ciBatchSize;
  7034  0E2C  3010               	movlw	16
  7035  0E2D  0020               	movlb	0	; select bank0
  7036  0E2E  07E1               	addwf	savePatch@iPatchAddress,f
  7037  0E2F  3000               	movlw	0
  7038  0E30  3DE2               	addwfc	savePatch@iPatchAddress+1,f
  7039                           
  7040                           ;main.c: 833: _delay((unsigned long)((5)*(32000000/4000.0)));
  7041  0E31  3034               	movlw	52
  7042  0E32  0020               	movlb	0	; select bank0
  7043  0E33  00D6               	movwf	??_savePatch
  7044  0E34  30F1               	movlw	241
  7045  0E35                     u4427:	
  7046  0E35  0B89               	decfsz	9,f
  7047  0E36  2E35               	goto	u4427
  7048  0E37  0BD6               	decfsz	??_savePatch,f
  7049  0E38  2E35               	goto	u4427
  7050  0E39  3200               	nop2
  7051  0E3A  3001               	movlw	1
  7052  0E3B  0020               	movlb	0	; select bank0
  7053  0E3C  07DF               	addwf	savePatch@batchNum,f
  7054  0E3D  3000               	movlw	0
  7055  0E3E  3DE0               	addwfc	savePatch@batchNum+1,f
  7056  0E3F  2DEC               	goto	l3612
  7057  0E40                     __end_of_savePatch:	
  7058                           
  7059                           	psect	text2
  7060  049E                     __ptext2:	
  7061 ;; *************** function _marshallPatchMemory *****************
  7062 ;; Defined at:
  7063 ;;		line 22 in file "EEPROM_24LC256.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;  mvcChannels     1    wreg     PTR unsigned char 
  7066 ;;		 -> mvcChannels(4), 
  7067 ;;  dualADSRdata    1    0[BANK0 ] PTR unsigned char 
  7068 ;;		 -> dualADSRdata0(8), 
  7069 ;;  dualADSRdata    1    1[BANK0 ] PTR unsigned char 
  7070 ;;		 -> dualADSRdata1(8), 
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;  mvcChannels     1    8[BANK0 ] PTR unsigned char 
  7073 ;;		 -> mvcChannels(4), 
  7074 ;;  i               2   13[BANK0 ] int 
  7075 ;;  i               2   11[BANK0 ] int 
  7076 ;;  i               2    9[BANK0 ] int 
  7077 ;;  iPatchMemory    2   15[BANK0 ] int 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      void 
  7080 ;; Registers used:
  7081 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7087 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;Total ram usage:       17 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    3
  7094 ;; This function calls:
  7095 ;;		Nothing
  7096 ;; This function is called by:
  7097 ;;		_savePatch
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           
  7102                           ;psect for function _marshallPatchMemory
  7103  049E                     _marshallPatchMemory:	
  7104                           
  7105                           ;incstack = 0
  7106                           ; Regs used in _marshallPatchMemory: [wreg+fsr1l+fsr1h+status,2+status,0]
  7107                           ;marshallPatchMemory@mvcChannels stored from wreg
  7108  049E  0020               	movlb	0	; select bank0
  7109  049F  00A8               	movwf	marshallPatchMemory@mvcChannels
  7110                           
  7111                           ;EEPROM_24LC256.c: 23: int iPatchMemoryNDX=0;
  7112  04A0  01AF               	clrf	marshallPatchMemory@iPatchMemoryNDX
  7113  04A1  01B0               	clrf	marshallPatchMemory@iPatchMemoryNDX+1
  7114                           
  7115                           ;EEPROM_24LC256.c: 24: for(int i=0; i<cMixFaderCount;i++) {
  7116  04A2  01A9               	clrf	marshallPatchMemory@i
  7117  04A3  01AA               	clrf	marshallPatchMemory@i+1
  7118  04A4  082A               	movf	marshallPatchMemory@i+1,w
  7119  04A5  3A80               	xorlw	128
  7120  04A6  00A2               	movwf	??_marshallPatchMemory
  7121  04A7  3080               	movlw	128
  7122  04A8  0222               	subwf	??_marshallPatchMemory,w
  7123  04A9  1D03               	skipz
  7124  04AA  2CAD               	goto	u2545
  7125  04AB  3004               	movlw	4
  7126  04AC  0229               	subwf	marshallPatchMemory@i,w
  7127  04AD                     u2545:	
  7128  04AD  1803               	btfsc	3,0
  7129  04AE  2CDB               	goto	l3170
  7130  04AF                     l3162:	
  7131                           
  7132                           ;EEPROM_24LC256.c: 25: aPatchMemory[iPatchMemoryNDX++]=mvcChannels[i];
  7133  04AF  0020               	movlb	0	; select bank0
  7134  04B0  0829               	movf	marshallPatchMemory@i,w
  7135  04B1  0728               	addwf	marshallPatchMemory@mvcChannels,w
  7136  04B2  00A2               	movwf	??_marshallPatchMemory
  7137  04B3  0822               	movf	??_marshallPatchMemory,w
  7138  04B4  0086               	movwf	6
  7139  04B5  0187               	clrf	7
  7140  04B6  0801               	movf	1,w
  7141  04B7  00A3               	movwf	??_marshallPatchMemory+1
  7142  04B8  3070               	movlw	112
  7143  04B9  00A4               	movwf	??_marshallPatchMemory+2
  7144  04BA  3023               	movlw	35
  7145  04BB  00A5               	movwf	??_marshallPatchMemory+3
  7146  04BC  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7147  04BD  0724               	addwf	??_marshallPatchMemory+2,w
  7148  04BE  00A6               	movwf	??_marshallPatchMemory+4
  7149  04BF  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7150  04C0  3D25               	addwfc	??_marshallPatchMemory+3,w
  7151  04C1  00A7               	movwf	??_marshallPatchMemory+5
  7152  04C2  0826               	movf	??_marshallPatchMemory+4,w
  7153  04C3  0086               	movwf	6
  7154  04C4  0827               	movf	??_marshallPatchMemory+5,w
  7155  04C5  0087               	movwf	7
  7156  04C6  0823               	movf	??_marshallPatchMemory+1,w
  7157  04C7  0081               	movwf	1
  7158  04C8  3001               	movlw	1
  7159  04C9  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7160  04CA  3000               	movlw	0
  7161  04CB  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7162  04CC  3001               	movlw	1
  7163  04CD  07A9               	addwf	marshallPatchMemory@i,f
  7164  04CE  3000               	movlw	0
  7165  04CF  3DAA               	addwfc	marshallPatchMemory@i+1,f
  7166  04D0  082A               	movf	marshallPatchMemory@i+1,w
  7167  04D1  3A80               	xorlw	128
  7168  04D2  00A2               	movwf	??_marshallPatchMemory
  7169  04D3  3080               	movlw	128
  7170  04D4  0222               	subwf	??_marshallPatchMemory,w
  7171  04D5  1D03               	skipz
  7172  04D6  2CD9               	goto	u2555
  7173  04D7  3004               	movlw	4
  7174  04D8  0229               	subwf	marshallPatchMemory@i,w
  7175  04D9                     u2555:	
  7176  04D9  1C03               	skipc
  7177  04DA  2CAF               	goto	l3162
  7178  04DB                     l3170:	
  7179                           
  7180                           ;EEPROM_24LC256.c: 26: }
  7181                           ;EEPROM_24LC256.c: 27: for(int i=0; i<cADSRdataBytes;i++) {
  7182  04DB  0020               	movlb	0	; select bank0
  7183  04DC  01AB               	clrf	marshallPatchMemory@i_1221
  7184  04DD  01AC               	clrf	marshallPatchMemory@i_1221+1
  7185  04DE  082C               	movf	marshallPatchMemory@i_1221+1,w
  7186  04DF  3A80               	xorlw	128
  7187  04E0  00A2               	movwf	??_marshallPatchMemory
  7188  04E1  3080               	movlw	128
  7189  04E2  0222               	subwf	??_marshallPatchMemory,w
  7190  04E3  3008               	movlw	8
  7191  04E4  1903               	btfsc	3,2
  7192  04E5  022B               	subwf	marshallPatchMemory@i_1221,w
  7193  04E6  1803               	btfsc	3,0
  7194  04E7  2D14               	goto	l3184
  7195  04E8                     l3176:	
  7196                           
  7197                           ;EEPROM_24LC256.c: 28: aPatchMemory[iPatchMemoryNDX++]=dualADSRdata0[i];
  7198  04E8  0020               	movlb	0	; select bank0
  7199  04E9  082B               	movf	marshallPatchMemory@i_1221,w
  7200  04EA  0720               	addwf	marshallPatchMemory@dualADSRdata0,w
  7201  04EB  00A2               	movwf	??_marshallPatchMemory
  7202  04EC  0822               	movf	??_marshallPatchMemory,w
  7203  04ED  0086               	movwf	6
  7204  04EE  3001               	movlw	1	; select bank2/3
  7205  04EF  0087               	movwf	7
  7206  04F0  0801               	movf	1,w
  7207  04F1  00A3               	movwf	??_marshallPatchMemory+1
  7208  04F2  3070               	movlw	112
  7209  04F3  00A4               	movwf	??_marshallPatchMemory+2
  7210  04F4  3023               	movlw	35
  7211  04F5  00A5               	movwf	??_marshallPatchMemory+3
  7212  04F6  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7213  04F7  0724               	addwf	??_marshallPatchMemory+2,w
  7214  04F8  00A6               	movwf	??_marshallPatchMemory+4
  7215  04F9  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7216  04FA  3D25               	addwfc	??_marshallPatchMemory+3,w
  7217  04FB  00A7               	movwf	??_marshallPatchMemory+5
  7218  04FC  0826               	movf	??_marshallPatchMemory+4,w
  7219  04FD  0086               	movwf	6
  7220  04FE  0827               	movf	??_marshallPatchMemory+5,w
  7221  04FF  0087               	movwf	7
  7222  0500  0823               	movf	??_marshallPatchMemory+1,w
  7223  0501  0081               	movwf	1
  7224  0502  3001               	movlw	1
  7225  0503  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7226  0504  3000               	movlw	0
  7227  0505  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7228  0506  3001               	movlw	1
  7229  0507  07AB               	addwf	marshallPatchMemory@i_1221,f
  7230  0508  3000               	movlw	0
  7231  0509  3DAC               	addwfc	marshallPatchMemory@i_1221+1,f
  7232  050A  082C               	movf	marshallPatchMemory@i_1221+1,w
  7233  050B  3A80               	xorlw	128
  7234  050C  00A2               	movwf	??_marshallPatchMemory
  7235  050D  3080               	movlw	128
  7236  050E  0222               	subwf	??_marshallPatchMemory,w
  7237  050F  3008               	movlw	8
  7238  0510  1903               	btfsc	3,2
  7239  0511  022B               	subwf	marshallPatchMemory@i_1221,w
  7240  0512  1C03               	skipc
  7241  0513  2CE8               	goto	l3176
  7242  0514                     l3184:	
  7243                           
  7244                           ;EEPROM_24LC256.c: 29: }
  7245                           ;EEPROM_24LC256.c: 30: for(int i=0; i<cADSRdataBytes;i++) {
  7246  0514  0020               	movlb	0	; select bank0
  7247  0515  01AD               	clrf	marshallPatchMemory@i_1222
  7248  0516  01AE               	clrf	marshallPatchMemory@i_1222+1
  7249  0517  082E               	movf	marshallPatchMemory@i_1222+1,w
  7250  0518  3A80               	xorlw	128
  7251  0519  00A2               	movwf	??_marshallPatchMemory
  7252  051A  3080               	movlw	128
  7253  051B  0222               	subwf	??_marshallPatchMemory,w
  7254  051C  3008               	movlw	8
  7255  051D  1903               	btfsc	3,2
  7256  051E  022D               	subwf	marshallPatchMemory@i_1222,w
  7257  051F  1803               	btfsc	3,0
  7258  0520  2D4D               	goto	l3198
  7259  0521                     l3190:	
  7260                           
  7261                           ;EEPROM_24LC256.c: 31: aPatchMemory[iPatchMemoryNDX++]=dualADSRdata1[i];
  7262  0521  0020               	movlb	0	; select bank0
  7263  0522  082D               	movf	marshallPatchMemory@i_1222,w
  7264  0523  0721               	addwf	marshallPatchMemory@dualADSRdata1,w
  7265  0524  00A2               	movwf	??_marshallPatchMemory
  7266  0525  0822               	movf	??_marshallPatchMemory,w
  7267  0526  0086               	movwf	6
  7268  0527  3001               	movlw	1	; select bank2/3
  7269  0528  0087               	movwf	7
  7270  0529  0801               	movf	1,w
  7271  052A  00A3               	movwf	??_marshallPatchMemory+1
  7272  052B  3070               	movlw	112
  7273  052C  00A4               	movwf	??_marshallPatchMemory+2
  7274  052D  3023               	movlw	35
  7275  052E  00A5               	movwf	??_marshallPatchMemory+3
  7276  052F  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7277  0530  0724               	addwf	??_marshallPatchMemory+2,w
  7278  0531  00A6               	movwf	??_marshallPatchMemory+4
  7279  0532  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7280  0533  3D25               	addwfc	??_marshallPatchMemory+3,w
  7281  0534  00A7               	movwf	??_marshallPatchMemory+5
  7282  0535  0826               	movf	??_marshallPatchMemory+4,w
  7283  0536  0086               	movwf	6
  7284  0537  0827               	movf	??_marshallPatchMemory+5,w
  7285  0538  0087               	movwf	7
  7286  0539  0823               	movf	??_marshallPatchMemory+1,w
  7287  053A  0081               	movwf	1
  7288  053B  3001               	movlw	1
  7289  053C  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7290  053D  3000               	movlw	0
  7291  053E  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7292  053F  3001               	movlw	1
  7293  0540  07AD               	addwf	marshallPatchMemory@i_1222,f
  7294  0541  3000               	movlw	0
  7295  0542  3DAE               	addwfc	marshallPatchMemory@i_1222+1,f
  7296  0543  082E               	movf	marshallPatchMemory@i_1222+1,w
  7297  0544  3A80               	xorlw	128
  7298  0545  00A2               	movwf	??_marshallPatchMemory
  7299  0546  3080               	movlw	128
  7300  0547  0222               	subwf	??_marshallPatchMemory,w
  7301  0548  3008               	movlw	8
  7302  0549  1903               	btfsc	3,2
  7303  054A  022D               	subwf	marshallPatchMemory@i_1222,w
  7304  054B  1C03               	skipc
  7305  054C  2D21               	goto	l3190
  7306  054D                     l3198:	
  7307                           
  7308                           ;EEPROM_24LC256.c: 32: }
  7309                           ;EEPROM_24LC256.c: 34: for(;iPatchMemoryNDX<cPatchSize;iPatchMemoryNDX++){
  7310  054D  0020               	movlb	0	; select bank0
  7311  054E                     L1:	
  7312  054E  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7313  054F  3A80               	xorlw	128
  7314  0550  00A2               	movwf	??_marshallPatchMemory
  7315  0551  3080               	movlw	128
  7316  0552  0222               	subwf	??_marshallPatchMemory,w
  7317  0553  1D03               	skipz
  7318  0554  2D57               	goto	u2605
  7319  0555  3080               	movlw	128
  7320  0556  022F               	subwf	marshallPatchMemory@iPatchMemoryNDX,w
  7321  0557                     u2605:	
  7322  0557  1803               	btfsc	3,0
  7323  0558  0008               	return
  7324                           
  7325                           ;EEPROM_24LC256.c: 35: aPatchMemory[iPatchMemoryNDX]=0;
  7326  0559  3070               	movlw	112
  7327  055A  0020               	movlb	0	; select bank0
  7328  055B  00A2               	movwf	??_marshallPatchMemory
  7329  055C  3023               	movlw	35
  7330  055D  00A3               	movwf	??_marshallPatchMemory+1
  7331  055E  082F               	movf	marshallPatchMemory@iPatchMemoryNDX,w
  7332  055F  0722               	addwf	??_marshallPatchMemory,w
  7333  0560  0086               	movwf	6
  7334  0561  0830               	movf	marshallPatchMemory@iPatchMemoryNDX+1,w
  7335  0562  3D23               	addwfc	??_marshallPatchMemory+1,w
  7336  0563  0087               	movwf	7
  7337  0564  0181               	clrf	1
  7338  0565  3001               	movlw	1
  7339  0566  07AF               	addwf	marshallPatchMemory@iPatchMemoryNDX,f
  7340  0567  3000               	movlw	0
  7341  0568  3DB0               	addwfc	marshallPatchMemory@iPatchMemoryNDX+1,f
  7342  0569  2D4E               	goto	L1
  7343  056A                     __end_of_marshallPatchMemory:	
  7344                           
  7345                           	psect	text3
  7346  0EC7                     __ptext3:	
  7347 ;; *************** function _MYI2C_Write16EEPROMBytes *****************
  7348 ;; Defined at:
  7349 ;;		line 73 in file "EEPROM_24LC256.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  slaveDeviceA    1    wreg     unsigned char 
  7352 ;;  writeAddress    2   14[BANK0 ] int 
  7353 ;;  pData           2   16[BANK0 ] PTR unsigned char 
  7354 ;;		 -> aPatchMemory(128), 
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;  slaveDeviceA    1   45[BANK0 ] unsigned char 
  7357 ;;  i               2   49[BANK0 ] int 
  7358 ;;  writeBuffer    17   22[BANK0 ] unsigned char [17]
  7359 ;;  counter         2   47[BANK0 ] unsigned int 
  7360 ;;  timeOut         2   42[BANK0 ] unsigned int 
  7361 ;;  nCount          2   40[BANK0 ] unsigned int 
  7362 ;;  status          1   51[BANK0 ] enum E14260
  7363 ;;  iPatchAddres    1   46[BANK0 ] unsigned char 
  7364 ;;  pointerByte     1   44[BANK0 ] unsigned char 
  7365 ;;  iPatchAddres    1   39[BANK0 ] unsigned char 
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7375 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;Total ram usage:       38 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    5
  7382 ;; This function calls:
  7383 ;;		_I2C1_MasterWrite
  7384 ;; This function is called by:
  7385 ;;		_savePatch
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _MYI2C_Write16EEPROMBytes
  7391  0EC7                     _MYI2C_Write16EEPROMBytes:	
  7392                           
  7393                           ;incstack = 0
  7394                           ; Regs used in _MYI2C_Write16EEPROMBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7395                           ;MYI2C_Write16EEPROMBytes@slaveDeviceAddress stored from wreg
  7396  0EC7  0020               	movlb	0	; select bank0
  7397  0EC8  00CD               	movwf	MYI2C_Write16EEPROMBytes@slaveDeviceAddress
  7398                           
  7399                           ;EEPROM_24LC256.c: 75: uint8_t iPatchAddressHigh=writeAddress>>8;
  7400  0EC9  082F               	movf	MYI2C_Write16EEPROMBytes@writeAddress+1,w
  7401  0ECA  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7402  0ECB  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7403  0ECC  00CE               	movwf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh
  7404                           
  7405                           ;EEPROM_24LC256.c: 76: uint8_t iPatchAddressLow=writeAddress&0xFF;
  7406  0ECD  082E               	movf	MYI2C_Write16EEPROMBytes@writeAddress,w
  7407  0ECE  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7408  0ECF  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7409  0ED0  00C7               	movwf	MYI2C_Write16EEPROMBytes@iPatchAddressLow
  7410                           
  7411                           ;EEPROM_24LC256.c: 82: uint16_t nCount;
  7412                           ;EEPROM_24LC256.c: 83: uint8_t writeBuffer[ciBufferSize];
  7413                           ;EEPROM_24LC256.c: 84: uint16_t counter, timeOut;
  7414                           ;EEPROM_24LC256.c: 86: uint8_t pointerByte = 0b10100000;
  7415  0ED1  30A0               	movlw	160
  7416  0ED2  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7417  0ED3  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7418  0ED4  00CC               	movwf	MYI2C_Write16EEPROMBytes@pointerByte
  7419                           
  7420                           ;EEPROM_24LC256.c: 88: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
  7421  0ED5  3002               	movlw	2
  7422  0ED6  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7423  0ED7  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7424  0ED8  00D3               	movwf	MYI2C_Write16EEPROMBytes@status
  7425                           
  7426                           ;EEPROM_24LC256.c: 92: nCount = 2;
  7427  0ED9  3002               	movlw	2
  7428  0EDA  00C8               	movwf	MYI2C_Write16EEPROMBytes@nCount
  7429  0EDB  3000               	movlw	0
  7430  0EDC  00C9               	movwf	MYI2C_Write16EEPROMBytes@nCount+1
  7431                           
  7432                           ;EEPROM_24LC256.c: 95: for (counter = 0; counter < nCount; counter++)
  7433  0EDD  01CF               	clrf	MYI2C_Write16EEPROMBytes@counter
  7434  0EDE  01D0               	clrf	MYI2C_Write16EEPROMBytes@counter+1
  7435  0EDF                     l833:	
  7436  0EDF  0849               	movf	MYI2C_Write16EEPROMBytes@nCount+1,w
  7437  0EE0  0250               	subwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7438  0EE1  1D03               	skipz
  7439  0EE2  2EE5               	goto	u2715
  7440  0EE3  0848               	movf	MYI2C_Write16EEPROMBytes@nCount,w
  7441  0EE4  024F               	subwf	MYI2C_Write16EEPROMBytes@counter,w
  7442  0EE5                     u2715:	
  7443  0EE5  1803               	btfsc	3,0
  7444  0EE6  0008               	return
  7445                           
  7446                           ;EEPROM_24LC256.c: 96: {
  7447                           ;EEPROM_24LC256.c: 99: writeBuffer[0] = pointerByte;
  7448  0EE7  084C               	movf	MYI2C_Write16EEPROMBytes@pointerByte,w
  7449  0EE8  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7450  0EE9  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7451  0EEA  00B6               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer
  7452                           
  7453                           ;EEPROM_24LC256.c: 101: if(0==counter) {
  7454  0EEB  084F               	movf	MYI2C_Write16EEPROMBytes@counter,w
  7455  0EEC  0450               	iorwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7456  0EED  1D03               	btfss	3,2
  7457  0EEE  2EF8               	goto	l3226
  7458                           
  7459                           ;EEPROM_24LC256.c: 103: writeBuffer[1] = iPatchAddressHigh;
  7460  0EEF  084E               	movf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh,w
  7461  0EF0  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7462  0EF1  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7463  0EF2  00B7               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer+1
  7464                           
  7465                           ;EEPROM_24LC256.c: 104: writeBuffer[2] = iPatchAddressHigh;
  7466  0EF3  084E               	movf	MYI2C_Write16EEPROMBytes@iPatchAddressHigh,w
  7467  0EF4  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7468  0EF5  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7469  0EF6  00B8               	movwf	MYI2C_Write16EEPROMBytes@writeBuffer+2
  7470                           
  7471                           ;EEPROM_24LC256.c: 105: }
  7472  0EF7  2F27               	goto	l3238
  7473  0EF8                     l3226:	
  7474                           
  7475                           ;EEPROM_24LC256.c: 106: else
  7476                           ;EEPROM_24LC256.c: 107: {
  7477                           ;EEPROM_24LC256.c: 109: for(int i=1;i<ciBatchSize;i++){
  7478  0EF8  3001               	movlw	1
  7479  0EF9  00D1               	movwf	MYI2C_Write16EEPROMBytes@i
  7480  0EFA  3000               	movlw	0
  7481  0EFB  00D2               	movwf	MYI2C_Write16EEPROMBytes@i+1
  7482  0EFC  0852               	movf	MYI2C_Write16EEPROMBytes@i+1,w
  7483  0EFD  3A80               	xorlw	128
  7484  0EFE  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7485  0EFF  3080               	movlw	128
  7486  0F00  0232               	subwf	??_MYI2C_Write16EEPROMBytes,w
  7487  0F01  1D03               	skipz
  7488  0F02  2F05               	goto	u2635
  7489  0F03  3010               	movlw	16
  7490  0F04  0251               	subwf	MYI2C_Write16EEPROMBytes@i,w
  7491  0F05                     u2635:	
  7492  0F05  1803               	btfsc	3,0
  7493  0F06  2F27               	goto	l3238
  7494  0F07                     l3230:	
  7495                           
  7496                           ;EEPROM_24LC256.c: 110: writeBuffer[i]=(*pData++);
  7497  0F07  0020               	movlb	0	; select bank0
  7498  0F08  0830               	movf	MYI2C_Write16EEPROMBytes@pData,w
  7499  0F09  0086               	movwf	6
  7500  0F0A  0831               	movf	MYI2C_Write16EEPROMBytes@pData+1,w
  7501  0F0B  0087               	movwf	7
  7502  0F0C  0801               	movf	1,w
  7503  0F0D  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7504  0F0E  0851               	movf	MYI2C_Write16EEPROMBytes@i,w
  7505  0F0F  3E36               	addlw	(low (MYI2C_Write16EEPROMBytes@writeBuffer| 0))& (0+255)
  7506  0F10  0086               	movwf	6
  7507  0F11  0187               	clrf	7
  7508  0F12  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7509  0F13  0081               	movwf	1
  7510  0F14  3001               	movlw	1
  7511  0F15  07B0               	addwf	MYI2C_Write16EEPROMBytes@pData,f
  7512  0F16  3000               	movlw	0
  7513  0F17  3DB1               	addwfc	MYI2C_Write16EEPROMBytes@pData+1,f
  7514  0F18  3001               	movlw	1
  7515  0F19  07D1               	addwf	MYI2C_Write16EEPROMBytes@i,f
  7516  0F1A  3000               	movlw	0
  7517  0F1B  3DD2               	addwfc	MYI2C_Write16EEPROMBytes@i+1,f
  7518  0F1C  0852               	movf	MYI2C_Write16EEPROMBytes@i+1,w
  7519  0F1D  3A80               	xorlw	128
  7520  0F1E  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7521  0F1F  3080               	movlw	128
  7522  0F20  0232               	subwf	??_MYI2C_Write16EEPROMBytes,w
  7523  0F21  1D03               	skipz
  7524  0F22  2F25               	goto	u2645
  7525  0F23  3010               	movlw	16
  7526  0F24  0251               	subwf	MYI2C_Write16EEPROMBytes@i,w
  7527  0F25                     u2645:	
  7528  0F25  1C03               	skipc
  7529  0F26  2F07               	goto	l3230
  7530  0F27                     l3238:	
  7531                           
  7532                           ;EEPROM_24LC256.c: 111: }
  7533                           ;EEPROM_24LC256.c: 112: }
  7534                           ;EEPROM_24LC256.c: 117: timeOut = 0;
  7535  0F27  0020               	movlb	0	; select bank0
  7536  0F28  01CA               	clrf	MYI2C_Write16EEPROMBytes@timeOut
  7537  0F29  01CB               	clrf	MYI2C_Write16EEPROMBytes@timeOut+1
  7538  0F2A                     l3260:	
  7539                           ;EEPROM_24LC256.c: 118: while(status != I2C1_MESSAGE_FAIL)
  7540                           
  7541  0F2A  0353               	decf	MYI2C_Write16EEPROMBytes@status,w
  7542  0F2B  1903               	btfsc	3,2
  7543  0F2C  2F59               	goto	l3262
  7544                           
  7545                           ;EEPROM_24LC256.c: 119: {
  7546                           ;EEPROM_24LC256.c: 120: if(0==counter) {
  7547  0F2D  084F               	movf	MYI2C_Write16EEPROMBytes@counter,w
  7548  0F2E  0450               	iorwf	MYI2C_Write16EEPROMBytes@counter+1,w
  7549  0F2F  1D03               	btfss	3,2
  7550  0F30  2F33               	goto	l3244
  7551                           
  7552                           ;EEPROM_24LC256.c: 122: I2C1_MasterWrite( writeBuffer,
  7553                           ;EEPROM_24LC256.c: 123: 3,
  7554                           ;EEPROM_24LC256.c: 124: slaveDeviceAddress,
  7555                           ;EEPROM_24LC256.c: 125: &status);
  7556  0F31  3003               	movlw	3
  7557  0F32  2F35               	goto	L2
  7558  0F33                     l3244:	
  7559                           ;EEPROM_24LC256.c: 126: } else {
  7560                           
  7561                           
  7562                           ;EEPROM_24LC256.c: 128: I2C1_MasterWrite( writeBuffer,
  7563                           ;EEPROM_24LC256.c: 129: ciBatchSize+1,
  7564                           ;EEPROM_24LC256.c: 130: slaveDeviceAddress,
  7565                           ;EEPROM_24LC256.c: 131: &status);
  7566  0F33  3011               	movlw	17
  7567  0F34  0020               	movlb	0	; select bank0
  7568  0F35                     L2:	
  7569  0F35  00B2               	movwf	??_MYI2C_Write16EEPROMBytes
  7570  0F36  0832               	movf	??_MYI2C_Write16EEPROMBytes,w
  7571  0F37  00A7               	movwf	I2C1_MasterWrite@length
  7572  0F38  084D               	movf	MYI2C_Write16EEPROMBytes@slaveDeviceAddress,w
  7573  0F39  00B3               	movwf	??_MYI2C_Write16EEPROMBytes+1
  7574  0F3A  01B4               	clrf	??_MYI2C_Write16EEPROMBytes+2
  7575  0F3B  0833               	movf	??_MYI2C_Write16EEPROMBytes+1,w
  7576  0F3C  00A8               	movwf	I2C1_MasterWrite@address
  7577  0F3D  0834               	movf	??_MYI2C_Write16EEPROMBytes+2,w
  7578  0F3E  00A9               	movwf	I2C1_MasterWrite@address+1
  7579  0F3F  3053               	movlw	(low (MYI2C_Write16EEPROMBytes@status| 0))& (0+255)
  7580  0F40  00B5               	movwf	??_MYI2C_Write16EEPROMBytes+3
  7581  0F41  0835               	movf	??_MYI2C_Write16EEPROMBytes+3,w
  7582  0F42  00AA               	movwf	I2C1_MasterWrite@pflag
  7583  0F43  3036               	movlw	(low (MYI2C_Write16EEPROMBytes@writeBuffer| 0))& (0+255)
  7584  0F44  318B  238F  318E   	fcall	_I2C1_MasterWrite
  7585  0F47                     l3246:	
  7586                           ;EEPROM_24LC256.c: 132: }
  7587                           ;EEPROM_24LC256.c: 135: while(status == I2C1_MESSAGE_PENDING);
  7588                           
  7589  0F47  3002               	movlw	2
  7590  0F48  0020               	movlb	0	; select bank0
  7591  0F49  0653               	xorwf	MYI2C_Write16EEPROMBytes@status,w
  7592  0F4A  1903               	btfsc	3,2
  7593  0F4B  2F47               	goto	l3246
  7594                           
  7595                           ;EEPROM_24LC256.c: 137: if (status == I2C1_MESSAGE_COMPLETE)
  7596  0F4C  0853               	movf	MYI2C_Write16EEPROMBytes@status,w
  7597  0F4D  1903               	btfsc	3,2
  7598  0F4E  2F59               	goto	l3262
  7599                           
  7600                           ;EEPROM_24LC256.c: 147: if (timeOut == 100)
  7601                           
  7602                           ;EEPROM_24LC256.c: 138: break;
  7603  0F4F  3064               	movlw	100
  7604  0F50  064A               	xorwf	MYI2C_Write16EEPROMBytes@timeOut,w
  7605  0F51  044B               	iorwf	MYI2C_Write16EEPROMBytes@timeOut+1,w
  7606  0F52  1903               	btfsc	3,2
  7607  0F53  2F59               	goto	l3262
  7608                           
  7609                           ;EEPROM_24LC256.c: 149: else
  7610                           ;EEPROM_24LC256.c: 150: timeOut++;
  7611                           
  7612                           ;EEPROM_24LC256.c: 148: break;
  7613  0F54  3001               	movlw	1
  7614  0F55  07CA               	addwf	MYI2C_Write16EEPROMBytes@timeOut,f
  7615  0F56  3000               	movlw	0
  7616  0F57  3DCB               	addwfc	MYI2C_Write16EEPROMBytes@timeOut+1,f
  7617  0F58  2F2A               	goto	l3260
  7618  0F59                     l3262:	
  7619                           
  7620                           ;EEPROM_24LC256.c: 151: }
  7621                           ;EEPROM_24LC256.c: 153: if (status == I2C1_MESSAGE_FAIL) { break; }
  7622  0F59  0353               	decf	MYI2C_Write16EEPROMBytes@status,w
  7623  0F5A  1903               	btfsc	3,2
  7624  0F5B  0008               	return
  7625  0F5C  3001               	movlw	1
  7626  0F5D  07CF               	addwf	MYI2C_Write16EEPROMBytes@counter,f
  7627  0F5E  3000               	movlw	0
  7628  0F5F  3DD0               	addwfc	MYI2C_Write16EEPROMBytes@counter+1,f
  7629  0F60  2EDF               	goto	l833
  7630  0F61                     __end_of_MYI2C_Write16EEPROMBytes:	
  7631                           
  7632                           	psect	text4
  7633  0C2F                     __ptext4:	
  7634 ;; *************** function _loadPatch *****************
  7635 ;; Defined at:
  7636 ;;		line 851 in file "main.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;  PatchNumber     2   58[BANK0 ] int 
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;  i               2   64[BANK0 ] int 
  7641 ;;  iPatchAddres    2   62[BANK0 ] int 
  7642 ;;  idx             2    0        int 
  7643 ;;  pData           2    0        PTR unsigned char 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      void 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7653 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;Total ram usage:        8 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    7
  7660 ;; This function calls:
  7661 ;;		_updateModelFromPatchMemory
  7662 ;;		_writeDAC528
  7663 ;; This function is called by:
  7664 ;;		_main
  7665 ;; This function uses a non-reentrant model
  7666 ;;
  7667                           
  7668                           
  7669                           ;psect for function _loadPatch
  7670  0C2F                     _loadPatch:	
  7671                           
  7672                           ;main.c: 852: int iPatchAddress=PatchNumber*cPatchSize;
  7673                           
  7674                           ;incstack = 0
  7675                           ; Regs used in _loadPatch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7676  0C2F  0020               	movlb	0	; select bank0
  7677  0C30  085B               	movf	loadPatch@PatchNumber+1,w
  7678  0C31  00DD               	movwf	??_loadPatch+1
  7679  0C32  085A               	movf	loadPatch@PatchNumber,w
  7680  0C33  00DC               	movwf	??_loadPatch
  7681  0C34  3007               	movlw	7
  7682  0C35                     u3065:	
  7683  0C35  35DC               	lslf	??_loadPatch,f
  7684  0C36  0DDD               	rlf	??_loadPatch+1,f
  7685  0C37  0B89               	decfsz	9,f
  7686  0C38  2C35               	goto	u3065
  7687  0C39  085C               	movf	??_loadPatch,w
  7688  0C3A  00DE               	movwf	loadPatch@iPatchAddress
  7689  0C3B  085D               	movf	??_loadPatch+1,w
  7690  0C3C  00DF               	movwf	loadPatch@iPatchAddress+1
  7691                           
  7692                           ;main.c: 855: uint8_t *pData;
  7693                           ;main.c: 856: int idx;
  7694                           ;main.c: 869: updateModelFromPatchMemory(mvcChannels,dualADSRdata0,dualADSRdata1);
  7695  0C3D  303C               	movlw	(low (_dualADSRdata0| (0+256)))& (0+255)
  7696  0C3E  00DC               	movwf	??_loadPatch
  7697  0C3F  085C               	movf	??_loadPatch,w
  7698  0C40  00A0               	movwf	updateModelFromPatchMemory@dualADSRdata0
  7699  0C41  3034               	movlw	(low (_dualADSRdata1| (0+256)))& (0+255)
  7700  0C42  00DD               	movwf	??_loadPatch+1
  7701  0C43  085D               	movf	??_loadPatch+1,w
  7702  0C44  00A1               	movwf	updateModelFromPatchMemory@dualADSRdata1
  7703  0C45  30C9               	movlw	(low (_mvcChannels| 0))& (0+255)
  7704  0C46  318F  2761  318C   	fcall	_updateModelFromPatchMemory
  7705                           
  7706                           ;main.c: 872: for(int i=0;i<cMixFaderCount;i++){
  7707  0C49  0020               	movlb	0	; select bank0
  7708  0C4A  01E0               	clrf	loadPatch@i
  7709  0C4B  01E1               	clrf	loadPatch@i+1
  7710  0C4C                     L3:	
  7711  0C4C  0861               	movf	loadPatch@i+1,w
  7712  0C4D  3A80               	xorlw	128
  7713  0C4E  00DC               	movwf	??_loadPatch
  7714  0C4F  3080               	movlw	128
  7715  0C50  025C               	subwf	??_loadPatch,w
  7716  0C51  1D03               	skipz
  7717  0C52  2C55               	goto	u3075
  7718  0C53  3004               	movlw	4
  7719  0C54  0260               	subwf	loadPatch@i,w
  7720  0C55                     u3075:	
  7721  0C55  1803               	btfsc	3,0
  7722  0C56  0008               	return
  7723                           
  7724                           ;main.c: 873: writeDAC528(i+4,mvcChannels[i]);
  7725  0C57  0020               	movlb	0	; select bank0
  7726  0C58  0860               	movf	loadPatch@i,w
  7727  0C59  3E04               	addlw	4
  7728  0C5A  00D5               	movwf	writeDAC528@dacNumber
  7729  0C5B  3000               	movlw	0
  7730  0C5C  3D61               	addwfc	loadPatch@i+1,w
  7731  0C5D  00D6               	movwf	writeDAC528@dacNumber+1
  7732  0C5E  0860               	movf	loadPatch@i,w
  7733  0C5F  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
  7734  0C60  0086               	movwf	6
  7735  0C61  0187               	clrf	7
  7736  0C62  0801               	movf	1,w
  7737  0C63  00DC               	movwf	??_loadPatch
  7738  0C64  085C               	movf	??_loadPatch,w
  7739  0C65  00D7               	movwf	writeDAC528@dacData
  7740  0C66  318B  236A  318C   	fcall	_writeDAC528
  7741  0C69  3001               	movlw	1
  7742  0C6A  0020               	movlb	0	; select bank0
  7743  0C6B  07E0               	addwf	loadPatch@i,f
  7744  0C6C  3000               	movlw	0
  7745  0C6D  3DE1               	addwfc	loadPatch@i+1,f
  7746  0C6E  2C4C               	goto	L3
  7747  0C6F                     __end_of_loadPatch:	
  7748                           
  7749                           	psect	text5
  7750  0B6A                     __ptext5:	
  7751 ;; *************** function _writeDAC528 *****************
  7752 ;; Defined at:
  7753 ;;		line 57 in file "VCAMIX_SPI_Master.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;  dacNumber       2   53[BANK0 ] int 
  7756 ;;  dacData         1   55[BANK0 ] unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  wkDacNumber     1   57[BANK0 ] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      void 
  7761 ;; Registers used:
  7762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:        5 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    6
  7775 ;; This function calls:
  7776 ;;		_putByte
  7777 ;; This function is called by:
  7778 ;;		_main
  7779 ;;		_loadPatch
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           
  7784                           ;psect for function _writeDAC528
  7785  0B6A                     _writeDAC528:	
  7786                           
  7787                           ;VCAMIX_SPI_Master.c: 58: uint8_t wkDacNumber=0;
  7788                           
  7789                           ;incstack = 0
  7790                           ; Regs used in _writeDAC528: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7791  0B6A  0020               	movlb	0	; select bank0
  7792  0B6B  01D9               	clrf	writeDAC528@wkDacNumber
  7793                           
  7794                           ;VCAMIX_SPI_Master.c: 59: wkDacNumber=cPowerOfTwo[dacNumber];
  7795  0B6C  0856               	movf	writeDAC528@dacNumber+1,w
  7796  0B6D  0085               	movwf	5
  7797  0B6E  0855               	movf	writeDAC528@dacNumber,w
  7798  0B6F  0084               	movwf	4
  7799  0B70  3584               	lslf	4,f
  7800  0B71  0D85               	rlf	5,f
  7801  0B72  3000               	movlw	low (_cPowerOfTwo| (0+32768))
  7802  0B73  0784               	addwf	4,f
  7803  0B74  3090               	movlw	high (_cPowerOfTwo| (0+32768))
  7804  0B75  3D85               	addwfc	5,f
  7805  0B76  0800               	movf	0,w	;code access
  7806  0B77  00D8               	movwf	??_writeDAC528
  7807  0B78  0858               	movf	??_writeDAC528,w
  7808  0B79  00D9               	movwf	writeDAC528@wkDacNumber
  7809                           
  7810                           ;VCAMIX_SPI_Master.c: 61: LATA &= 0x7F ;
  7811  0B7A  307F               	movlw	127
  7812  0B7B  00D8               	movwf	??_writeDAC528
  7813  0B7C  0858               	movf	??_writeDAC528,w
  7814  0B7D  0596               	andwf	22,f	;volatile
  7815                           
  7816                           ;VCAMIX_SPI_Master.c: 63: putByte(wkDacNumber,0);
  7817  0B7E  3000               	movlw	0
  7818  0B7F  00CC               	movwf	putByte@clockPin
  7819  0B80  00CD               	movwf	putByte@clockPin+1
  7820  0B81  0859               	movf	writeDAC528@wkDacNumber,w
  7821  0B82  3185  256A  318B   	fcall	_putByte
  7822                           
  7823                           ;VCAMIX_SPI_Master.c: 65: putByte(dacData,0);
  7824  0B85  3000               	movlw	0
  7825  0B86  0020               	movlb	0	; select bank0
  7826  0B87  00CC               	movwf	putByte@clockPin
  7827  0B88  00CD               	movwf	putByte@clockPin+1
  7828  0B89  0857               	movf	writeDAC528@dacData,w
  7829  0B8A  3185  256A         	fcall	_putByte
  7830                           
  7831                           ;VCAMIX_SPI_Master.c: 67: LATA |= 0x80 ;
  7832  0B8C  0020               	movlb	0	; select bank0
  7833  0B8D  1796               	bsf	22,7	;volatile
  7834  0B8E  0008               	return
  7835  0B8F                     __end_of_writeDAC528:	
  7836                           
  7837                           	psect	text6
  7838  0F61                     __ptext6:	
  7839 ;; *************** function _updateModelFromPatchMemory *****************
  7840 ;; Defined at:
  7841 ;;		line 39 in file "EEPROM_24LC256.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  mvcChannels     1    wreg     PTR unsigned char 
  7844 ;;		 -> mvcChannels(4), 
  7845 ;;  dualADSRdata    1    0[BANK0 ] PTR unsigned char 
  7846 ;;		 -> dualADSRdata0(8), 
  7847 ;;  dualADSRdata    1    1[BANK0 ] PTR unsigned char 
  7848 ;;		 -> dualADSRdata1(8), 
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;  mvcChannels     1    6[BANK0 ] PTR unsigned char 
  7851 ;;		 -> mvcChannels(4), 
  7852 ;;  i               2    9[BANK0 ] int 
  7853 ;;  i               2    7[BANK0 ] int 
  7854 ;;  i               2   13[BANK0 ] int 
  7855 ;;  iPatchMemory    2   11[BANK0 ] int 
  7856 ;; Return value:  Size  Location     Type
  7857 ;;                  1    wreg      void 
  7858 ;; Registers used:
  7859 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7860 ;; Tracked objects:
  7861 ;;		On entry : 0/0
  7862 ;;		On exit  : 0/0
  7863 ;;		Unchanged: 0/0
  7864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7865 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;Total ram usage:       15 bytes
  7870 ;; Hardware stack levels used:    1
  7871 ;; Hardware stack levels required when called:    3
  7872 ;; This function calls:
  7873 ;;		Nothing
  7874 ;; This function is called by:
  7875 ;;		_loadPatch
  7876 ;; This function uses a non-reentrant model
  7877 ;;
  7878                           
  7879                           
  7880                           ;psect for function _updateModelFromPatchMemory
  7881  0F61                     _updateModelFromPatchMemory:	
  7882                           
  7883                           ;incstack = 0
  7884                           ; Regs used in _updateModelFromPatchMemory: [wreg+fsr1l+fsr1h+status,2+status,0]
  7885                           ;updateModelFromPatchMemory@mvcChannels stored from wreg
  7886  0F61  0020               	movlb	0	; select bank0
  7887  0F62  00A6               	movwf	updateModelFromPatchMemory@mvcChannels
  7888                           
  7889                           ;EEPROM_24LC256.c: 40: int iPatchMemoryNDX=0;
  7890  0F63  01AB               	clrf	updateModelFromPatchMemory@iPatchMemoryNDX
  7891  0F64  01AC               	clrf	updateModelFromPatchMemory@iPatchMemoryNDX+1
  7892                           
  7893                           ;EEPROM_24LC256.c: 41: for(int i=0; i<cMixFaderCount;i++) {
  7894  0F65  01AD               	clrf	updateModelFromPatchMemory@i
  7895  0F66  01AE               	clrf	updateModelFromPatchMemory@i+1
  7896  0F67  082E               	movf	updateModelFromPatchMemory@i+1,w
  7897  0F68  3A80               	xorlw	128
  7898  0F69  00A2               	movwf	??_updateModelFromPatchMemory
  7899  0F6A  3080               	movlw	128
  7900  0F6B  0222               	subwf	??_updateModelFromPatchMemory,w
  7901  0F6C  1D03               	skipz
  7902  0F6D  2F70               	goto	u2725
  7903  0F6E  3004               	movlw	4
  7904  0F6F  022D               	subwf	updateModelFromPatchMemory@i,w
  7905  0F70                     u2725:	
  7906  0F70  1803               	btfsc	3,0
  7907  0F71  2F9F               	goto	l3280
  7908  0F72                     l3274:	
  7909                           
  7910                           ;EEPROM_24LC256.c: 42: mvcChannels[i]=aPatchMemory[iPatchMemoryNDX++];
  7911  0F72  3070               	movlw	112
  7912  0F73  0020               	movlb	0	; select bank0
  7913  0F74  00A2               	movwf	??_updateModelFromPatchMemory
  7914  0F75  3023               	movlw	35
  7915  0F76  00A3               	movwf	??_updateModelFromPatchMemory+1
  7916  0F77  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  7917  0F78  0722               	addwf	??_updateModelFromPatchMemory,w
  7918  0F79  0086               	movwf	6
  7919  0F7A  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  7920  0F7B  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  7921  0F7C  0087               	movwf	7
  7922  0F7D  0801               	movf	1,w
  7923  0F7E  00A4               	movwf	??_updateModelFromPatchMemory+2
  7924  0F7F  082D               	movf	updateModelFromPatchMemory@i,w
  7925  0F80  0726               	addwf	updateModelFromPatchMemory@mvcChannels,w
  7926  0F81  00A5               	movwf	??_updateModelFromPatchMemory+3
  7927  0F82  0825               	movf	??_updateModelFromPatchMemory+3,w
  7928  0F83  0086               	movwf	6
  7929  0F84  0187               	clrf	7
  7930  0F85  0824               	movf	??_updateModelFromPatchMemory+2,w
  7931  0F86  0081               	movwf	1
  7932  0F87  3001               	movlw	1
  7933  0F88  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  7934  0F89  3000               	movlw	0
  7935  0F8A  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  7936                           
  7937                           ;EEPROM_24LC256.c: 43: faderActiveFlag[i]=0;
  7938  0F8B  082D               	movf	updateModelFromPatchMemory@i,w
  7939  0F8C  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
  7940  0F8D  0086               	movwf	6
  7941  0F8E  0187               	clrf	7
  7942  0F8F  0181               	clrf	1
  7943  0F90  3001               	movlw	1
  7944  0F91  07AD               	addwf	updateModelFromPatchMemory@i,f
  7945  0F92  3000               	movlw	0
  7946  0F93  3DAE               	addwfc	updateModelFromPatchMemory@i+1,f
  7947  0F94  082E               	movf	updateModelFromPatchMemory@i+1,w
  7948  0F95  3A80               	xorlw	128
  7949  0F96  00A2               	movwf	??_updateModelFromPatchMemory
  7950  0F97  3080               	movlw	128
  7951  0F98  0222               	subwf	??_updateModelFromPatchMemory,w
  7952  0F99  1D03               	skipz
  7953  0F9A  2F9D               	goto	u2735
  7954  0F9B  3004               	movlw	4
  7955  0F9C  022D               	subwf	updateModelFromPatchMemory@i,w
  7956  0F9D                     u2735:	
  7957  0F9D  1C03               	skipc
  7958  0F9E  2F72               	goto	l3274
  7959  0F9F                     l3280:	
  7960                           
  7961                           ;EEPROM_24LC256.c: 44: }
  7962                           ;EEPROM_24LC256.c: 45: for(int i=0; i<cADSRdataBytes;i++) {
  7963  0F9F  0020               	movlb	0	; select bank0
  7964  0FA0  01A7               	clrf	updateModelFromPatchMemory@i_1229
  7965  0FA1  01A8               	clrf	updateModelFromPatchMemory@i_1229+1
  7966  0FA2  0828               	movf	updateModelFromPatchMemory@i_1229+1,w
  7967  0FA3  3A80               	xorlw	128
  7968  0FA4  00A2               	movwf	??_updateModelFromPatchMemory
  7969  0FA5  3080               	movlw	128
  7970  0FA6  0222               	subwf	??_updateModelFromPatchMemory,w
  7971  0FA7  3008               	movlw	8
  7972  0FA8  1903               	btfsc	3,2
  7973  0FA9  0227               	subwf	updateModelFromPatchMemory@i_1229,w
  7974  0FAA  1803               	btfsc	3,0
  7975  0FAB  2FD4               	goto	l3294
  7976  0FAC                     l3286:	
  7977                           
  7978                           ;EEPROM_24LC256.c: 46: dualADSRdata0[i]=aPatchMemory[iPatchMemoryNDX++];
  7979  0FAC  3070               	movlw	112
  7980  0FAD  0020               	movlb	0	; select bank0
  7981  0FAE  00A2               	movwf	??_updateModelFromPatchMemory
  7982  0FAF  3023               	movlw	35
  7983  0FB0  00A3               	movwf	??_updateModelFromPatchMemory+1
  7984  0FB1  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  7985  0FB2  0722               	addwf	??_updateModelFromPatchMemory,w
  7986  0FB3  0086               	movwf	6
  7987  0FB4  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  7988  0FB5  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  7989  0FB6  0087               	movwf	7
  7990  0FB7  0801               	movf	1,w
  7991  0FB8  00A4               	movwf	??_updateModelFromPatchMemory+2
  7992  0FB9  0827               	movf	updateModelFromPatchMemory@i_1229,w
  7993  0FBA  0720               	addwf	updateModelFromPatchMemory@dualADSRdata0,w
  7994  0FBB  00A5               	movwf	??_updateModelFromPatchMemory+3
  7995  0FBC  0825               	movf	??_updateModelFromPatchMemory+3,w
  7996  0FBD  0086               	movwf	6
  7997  0FBE  3001               	movlw	1	; select bank2/3
  7998  0FBF  0087               	movwf	7
  7999  0FC0  0824               	movf	??_updateModelFromPatchMemory+2,w
  8000  0FC1  0081               	movwf	1
  8001  0FC2  3001               	movlw	1
  8002  0FC3  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  8003  0FC4  3000               	movlw	0
  8004  0FC5  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  8005  0FC6  3001               	movlw	1
  8006  0FC7  07A7               	addwf	updateModelFromPatchMemory@i_1229,f
  8007  0FC8  3000               	movlw	0
  8008  0FC9  3DA8               	addwfc	updateModelFromPatchMemory@i_1229+1,f
  8009  0FCA  0828               	movf	updateModelFromPatchMemory@i_1229+1,w
  8010  0FCB  3A80               	xorlw	128
  8011  0FCC  00A2               	movwf	??_updateModelFromPatchMemory
  8012  0FCD  3080               	movlw	128
  8013  0FCE  0222               	subwf	??_updateModelFromPatchMemory,w
  8014  0FCF  3008               	movlw	8
  8015  0FD0  1903               	btfsc	3,2
  8016  0FD1  0227               	subwf	updateModelFromPatchMemory@i_1229,w
  8017  0FD2  1C03               	skipc
  8018  0FD3  2FAC               	goto	l3286
  8019  0FD4                     l3294:	
  8020                           
  8021                           ;EEPROM_24LC256.c: 47: }
  8022                           ;EEPROM_24LC256.c: 48: for(int i=0; i<cADSRdataBytes;i++) {
  8023  0FD4  0020               	movlb	0	; select bank0
  8024  0FD5  01A9               	clrf	updateModelFromPatchMemory@i_1230
  8025  0FD6  01AA               	clrf	updateModelFromPatchMemory@i_1230+1
  8026  0FD7                     L4:	
  8027  0FD7  082A               	movf	updateModelFromPatchMemory@i_1230+1,w
  8028  0FD8  3A80               	xorlw	128
  8029  0FD9  00A2               	movwf	??_updateModelFromPatchMemory
  8030  0FDA  3080               	movlw	128
  8031  0FDB  0222               	subwf	??_updateModelFromPatchMemory,w
  8032  0FDC  3008               	movlw	8
  8033  0FDD  1903               	btfsc	3,2
  8034  0FDE  0229               	subwf	updateModelFromPatchMemory@i_1230,w
  8035  0FDF  1803               	btfsc	3,0
  8036  0FE0  0008               	return
  8037                           
  8038                           ;EEPROM_24LC256.c: 49: dualADSRdata1[i]=aPatchMemory[iPatchMemoryNDX++];
  8039  0FE1  3070               	movlw	112
  8040  0FE2  0020               	movlb	0	; select bank0
  8041  0FE3  00A2               	movwf	??_updateModelFromPatchMemory
  8042  0FE4  3023               	movlw	35
  8043  0FE5  00A3               	movwf	??_updateModelFromPatchMemory+1
  8044  0FE6  082B               	movf	updateModelFromPatchMemory@iPatchMemoryNDX,w
  8045  0FE7  0722               	addwf	??_updateModelFromPatchMemory,w
  8046  0FE8  0086               	movwf	6
  8047  0FE9  082C               	movf	updateModelFromPatchMemory@iPatchMemoryNDX+1,w
  8048  0FEA  3D23               	addwfc	??_updateModelFromPatchMemory+1,w
  8049  0FEB  0087               	movwf	7
  8050  0FEC  0801               	movf	1,w
  8051  0FED  00A4               	movwf	??_updateModelFromPatchMemory+2
  8052  0FEE  0829               	movf	updateModelFromPatchMemory@i_1230,w
  8053  0FEF  0721               	addwf	updateModelFromPatchMemory@dualADSRdata1,w
  8054  0FF0  00A5               	movwf	??_updateModelFromPatchMemory+3
  8055  0FF1  0825               	movf	??_updateModelFromPatchMemory+3,w
  8056  0FF2  0086               	movwf	6
  8057  0FF3  3001               	movlw	1	; select bank2/3
  8058  0FF4  0087               	movwf	7
  8059  0FF5  0824               	movf	??_updateModelFromPatchMemory+2,w
  8060  0FF6  0081               	movwf	1
  8061  0FF7  3001               	movlw	1
  8062  0FF8  07AB               	addwf	updateModelFromPatchMemory@iPatchMemoryNDX,f
  8063  0FF9  3000               	movlw	0
  8064  0FFA  3DAC               	addwfc	updateModelFromPatchMemory@iPatchMemoryNDX+1,f
  8065  0FFB  3001               	movlw	1
  8066  0FFC  07A9               	addwf	updateModelFromPatchMemory@i_1230,f
  8067  0FFD  3000               	movlw	0
  8068  0FFE  3DAA               	addwfc	updateModelFromPatchMemory@i_1230+1,f
  8069  0FFF  2FD7               	goto	L4
  8070  1000                     __end_of_updateModelFromPatchMemory:	
  8071                           
  8072                           	psect	text7
  8073  0A5A                     __ptext7:	
  8074 ;; *************** function _initDAC528 *****************
  8075 ;; Defined at:
  8076 ;;		line 44 in file "VCAMIX_SPI_Master.c"
  8077 ;; Parameters:    Size  Location     Type
  8078 ;;		None
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;		None
  8081 ;; Return value:  Size  Location     Type
  8082 ;;                  1    wreg      void 
  8083 ;; Registers used:
  8084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;Total ram usage:        1 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    6
  8097 ;; This function calls:
  8098 ;;		_putByte
  8099 ;; This function is called by:
  8100 ;;		_main
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           
  8105                           ;psect for function _initDAC528
  8106  0A5A                     _initDAC528:	
  8107                           
  8108                           ;VCAMIX_SPI_Master.c: 48: LATA &= 0x7F ;
  8109                           
  8110                           ;incstack = 0
  8111                           ; Regs used in _initDAC528: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8112  0A5A  307F               	movlw	127
  8113  0A5B  0020               	movlb	0	; select bank0
  8114  0A5C  00D5               	movwf	??_initDAC528
  8115  0A5D  0855               	movf	??_initDAC528,w
  8116  0A5E  0596               	andwf	22,f	;volatile
  8117                           
  8118                           ;VCAMIX_SPI_Master.c: 50: putByte(0x00,0);
  8119  0A5F  3000               	movlw	0
  8120  0A60  00CC               	movwf	putByte@clockPin
  8121  0A61  00CD               	movwf	putByte@clockPin+1
  8122  0A62  3000               	movlw	0
  8123  0A63  3185  256A  318A   	fcall	_putByte
  8124                           
  8125                           ;VCAMIX_SPI_Master.c: 52: putByte(0xFF,0);
  8126  0A66  3000               	movlw	0
  8127  0A67  0020               	movlb	0	; select bank0
  8128  0A68  00CC               	movwf	putByte@clockPin
  8129  0A69  00CD               	movwf	putByte@clockPin+1
  8130  0A6A  30FF               	movlw	255
  8131  0A6B  3185  256A         	fcall	_putByte
  8132                           
  8133                           ;VCAMIX_SPI_Master.c: 54: LATA |= 0x80 ;
  8134  0A6D  0020               	movlb	0	; select bank0
  8135  0A6E  1796               	bsf	22,7	;volatile
  8136  0A6F  0008               	return
  8137  0A70                     __end_of_initDAC528:	
  8138                           
  8139                           	psect	text8
  8140  056A                     __ptext8:	
  8141 ;; *************** function _putByte *****************
  8142 ;; Defined at:
  8143 ;;		line 14 in file "VCAMIX_SPI_Master.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  data            1    wreg     unsigned char 
  8146 ;;  clockPin        2   44[BANK0 ] int 
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;  data            1   50[BANK0 ] unsigned char 
  8149 ;;  i               1   52[BANK0 ] unsigned char 
  8150 ;;  mask            1   51[BANK0 ] unsigned char 
  8151 ;; Return value:  Size  Location     Type
  8152 ;;                  1    wreg      void 
  8153 ;; Registers used:
  8154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8160 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;Total ram usage:        9 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:    5
  8167 ;; This function calls:
  8168 ;;		___awtoft
  8169 ;;		___ftmul
  8170 ;;		___fttol
  8171 ;; This function is called by:
  8172 ;;		_initDAC528
  8173 ;;		_writeDAC528
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           
  8178                           ;psect for function _putByte
  8179  056A                     _putByte:	
  8180                           
  8181                           ;incstack = 0
  8182                           ; Regs used in _putByte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8183                           ;putByte@data stored from wreg
  8184  056A  0020               	movlb	0	; select bank0
  8185  056B  00D2               	movwf	putByte@data
  8186                           
  8187                           ;VCAMIX_SPI_Master.c: 15: uint8_t i = 8;
  8188  056C  3008               	movlw	8
  8189  056D  00CE               	movwf	??_putByte
  8190  056E  084E               	movf	??_putByte,w
  8191  056F  00D4               	movwf	putByte@i
  8192  0570                     l775:	
  8193                           ;VCAMIX_SPI_Master.c: 16: uint8_t mask;
  8194                           ;VCAMIX_SPI_Master.c: 17: while(i > 0) {
  8195                           
  8196  0570  0854               	movf	putByte@i,w
  8197  0571  1903               	btfsc	3,2
  8198  0572  0008               	return
  8199                           
  8200                           ;VCAMIX_SPI_Master.c: 18: mask = 0x01 << (i - 1);
  8201  0573  3001               	movlw	1
  8202  0574  00CE               	movwf	??_putByte
  8203  0575  0854               	movf	putByte@i,w
  8204  0576  3EFF               	addlw	-1
  8205  0577  0A89               	incf	9,f
  8206  0578  2D7A               	goto	u2414
  8207  0579                     u2415:	
  8208  0579  35CE               	lslf	??_putByte,f
  8209  057A                     u2414:	
  8210  057A  0B89               	decfsz	9,f
  8211  057B  2D79               	goto	u2415
  8212  057C  084E               	movf	??_putByte,w
  8213  057D  00CF               	movwf	??_putByte+1
  8214  057E  084F               	movf	??_putByte+1,w
  8215  057F  00D3               	movwf	putByte@mask
  8216                           
  8217                           ;VCAMIX_SPI_Master.c: 20: LATB &= 0xBF ;
  8218  0580  30BF               	movlw	191
  8219  0581  00CE               	movwf	??_putByte
  8220  0582  084E               	movf	??_putByte,w
  8221  0583  0597               	andwf	23,f	;volatile
  8222                           
  8223                           ;VCAMIX_SPI_Master.c: 22: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8224  0584  3018               	movlw	low (_clockMicroTime| (0+32768))
  8225  0585  0084               	movwf	4
  8226  0586  3090               	movlw	high (_clockMicroTime| (0+32768))
  8227  0587  0085               	movwf	5
  8228  0588  3F00               	moviw [0]fsr0
  8229  0589  00A8               	movwf	___awtoft@c
  8230  058A  3F01               	moviw [1]fsr0
  8231  058B  00A9               	movwf	___awtoft@c+1
  8232  058C  318B  2348  3185   	fcall	___awtoft
  8233  058F  0020               	movlb	0	; select bank0
  8234  0590  0828               	movf	?___awtoft,w
  8235  0591  00B1               	movwf	___ftmul@f2
  8236  0592  0829               	movf	?___awtoft+1,w
  8237  0593  00B2               	movwf	___ftmul@f2+1
  8238  0594  082A               	movf	?___awtoft+2,w
  8239  0595  00B3               	movwf	___ftmul@f2+2
  8240  0596  3000               	movlw	0
  8241  0597  00AE               	movwf	___ftmul@f1
  8242  0598  3000               	movlw	0
  8243  0599  00AF               	movwf	___ftmul@f1+1
  8244  059A  3041               	movlw	65
  8245  059B  00B0               	movwf	___ftmul@f1+2
  8246  059C  3186  261F  3185   	fcall	___ftmul
  8247  059F  0020               	movlb	0	; select bank0
  8248  05A0  082E               	movf	?___ftmul,w
  8249  05A1  00BE               	movwf	___fttol@f1
  8250  05A2  082F               	movf	?___ftmul+1,w
  8251  05A3  00BF               	movwf	___fttol@f1+1
  8252  05A4  0830               	movf	?___ftmul+2,w
  8253  05A5  00C0               	movwf	___fttol@f1+2
  8254  05A6  318E  2640  3185   	fcall	___fttol
  8255  05A9  0020               	movlb	0	; select bank0
  8256  05AA  083E               	movf	?___fttol,w
  8257  05AB  00CE               	movwf	??_putByte
  8258  05AC  083F               	movf	?___fttol+1,w
  8259  05AD  00CF               	movwf	??_putByte+1
  8260  05AE  0840               	movf	?___fttol+2,w
  8261  05AF  00D0               	movwf	??_putByte+2
  8262  05B0  0841               	movf	?___fttol+3,w
  8263  05B1  00D1               	movwf	??_putByte+3
  8264                           
  8265                           ;VCAMIX_SPI_Master.c: 23: if (data & mask){
  8266  05B2  0020               	movlb	0	; select bank0
  8267  05B3  0852               	movf	putByte@data,w
  8268  05B4  0553               	andwf	putByte@mask,w
  8269  05B5  1903               	btfsc	3,2
  8270  05B6  2DB9               	goto	l2984
  8271                           
  8272                           ;VCAMIX_SPI_Master.c: 25: LATB |= 0x80 ;
  8273  05B7  1797               	bsf	23,7	;volatile
  8274                           
  8275                           ;VCAMIX_SPI_Master.c: 26: }else{
  8276  05B8  2DBD               	goto	l2986
  8277  05B9                     l2984:	
  8278                           
  8279                           ;VCAMIX_SPI_Master.c: 28: LATB &= 0x7F ;
  8280  05B9  307F               	movlw	127
  8281  05BA  00CE               	movwf	??_putByte
  8282  05BB  084E               	movf	??_putByte,w
  8283  05BC  0597               	andwf	23,f	;volatile
  8284  05BD                     l2986:	
  8285                           
  8286                           ;VCAMIX_SPI_Master.c: 29: }
  8287                           ;VCAMIX_SPI_Master.c: 31: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8288  05BD  3018               	movlw	low (_clockMicroTime| (0+32768))
  8289  05BE  0084               	movwf	4
  8290  05BF  3090               	movlw	high (_clockMicroTime| (0+32768))
  8291  05C0  0085               	movwf	5
  8292  05C1  3F00               	moviw [0]fsr0
  8293  05C2  00A8               	movwf	___awtoft@c
  8294  05C3  3F01               	moviw [1]fsr0
  8295  05C4  00A9               	movwf	___awtoft@c+1
  8296  05C5  318B  2348  3185   	fcall	___awtoft
  8297  05C8  0020               	movlb	0	; select bank0
  8298  05C9  0828               	movf	?___awtoft,w
  8299  05CA  00B1               	movwf	___ftmul@f2
  8300  05CB  0829               	movf	?___awtoft+1,w
  8301  05CC  00B2               	movwf	___ftmul@f2+1
  8302  05CD  082A               	movf	?___awtoft+2,w
  8303  05CE  00B3               	movwf	___ftmul@f2+2
  8304  05CF  3000               	movlw	0
  8305  05D0  00AE               	movwf	___ftmul@f1
  8306  05D1  3000               	movlw	0
  8307  05D2  00AF               	movwf	___ftmul@f1+1
  8308  05D3  3041               	movlw	65
  8309  05D4  00B0               	movwf	___ftmul@f1+2
  8310  05D5  3186  261F  3185   	fcall	___ftmul
  8311  05D8  0020               	movlb	0	; select bank0
  8312  05D9  082E               	movf	?___ftmul,w
  8313  05DA  00BE               	movwf	___fttol@f1
  8314  05DB  082F               	movf	?___ftmul+1,w
  8315  05DC  00BF               	movwf	___fttol@f1+1
  8316  05DD  0830               	movf	?___ftmul+2,w
  8317  05DE  00C0               	movwf	___fttol@f1+2
  8318  05DF  318E  2640  3185   	fcall	___fttol
  8319  05E2  0020               	movlb	0	; select bank0
  8320  05E3  083E               	movf	?___fttol,w
  8321  05E4  00CE               	movwf	??_putByte
  8322  05E5  083F               	movf	?___fttol+1,w
  8323  05E6  00CF               	movwf	??_putByte+1
  8324  05E7  0840               	movf	?___fttol+2,w
  8325  05E8  00D0               	movwf	??_putByte+2
  8326  05E9  0841               	movf	?___fttol+3,w
  8327  05EA  00D1               	movwf	??_putByte+3
  8328                           
  8329                           ;VCAMIX_SPI_Master.c: 33: LATB |= 0x40 ;
  8330  05EB  0020               	movlb	0	; select bank0
  8331  05EC  1717               	bsf	23,6	;volatile
  8332                           
  8333                           ;VCAMIX_SPI_Master.c: 35: _delay((unsigned long)((clockMicroTime)*(32000000/4000000.0)))
      +                          ;
  8334  05ED  3018               	movlw	low (_clockMicroTime| (0+32768))
  8335  05EE  0084               	movwf	4
  8336  05EF  3090               	movlw	high (_clockMicroTime| (0+32768))
  8337  05F0  0085               	movwf	5
  8338  05F1  3F00               	moviw [0]fsr0
  8339  05F2  00A8               	movwf	___awtoft@c
  8340  05F3  3F01               	moviw [1]fsr0
  8341  05F4  00A9               	movwf	___awtoft@c+1
  8342  05F5  318B  2348  3185   	fcall	___awtoft
  8343  05F8  0020               	movlb	0	; select bank0
  8344  05F9  0828               	movf	?___awtoft,w
  8345  05FA  00B1               	movwf	___ftmul@f2
  8346  05FB  0829               	movf	?___awtoft+1,w
  8347  05FC  00B2               	movwf	___ftmul@f2+1
  8348  05FD  082A               	movf	?___awtoft+2,w
  8349  05FE  00B3               	movwf	___ftmul@f2+2
  8350  05FF  3000               	movlw	0
  8351  0600  00AE               	movwf	___ftmul@f1
  8352  0601  3000               	movlw	0
  8353  0602  00AF               	movwf	___ftmul@f1+1
  8354  0603  3041               	movlw	65
  8355  0604  00B0               	movwf	___ftmul@f1+2
  8356  0605  3186  261F  3185   	fcall	___ftmul
  8357  0608  0020               	movlb	0	; select bank0
  8358  0609  082E               	movf	?___ftmul,w
  8359  060A  00BE               	movwf	___fttol@f1
  8360  060B  082F               	movf	?___ftmul+1,w
  8361  060C  00BF               	movwf	___fttol@f1+1
  8362  060D  0830               	movf	?___ftmul+2,w
  8363  060E  00C0               	movwf	___fttol@f1+2
  8364  060F  318E  2640  3185   	fcall	___fttol
  8365  0612  0020               	movlb	0	; select bank0
  8366  0613  083E               	movf	?___fttol,w
  8367  0614  00CE               	movwf	??_putByte
  8368  0615  083F               	movf	?___fttol+1,w
  8369  0616  00CF               	movwf	??_putByte+1
  8370  0617  0840               	movf	?___fttol+2,w
  8371  0618  00D0               	movwf	??_putByte+2
  8372  0619  0841               	movf	?___fttol+3,w
  8373  061A  00D1               	movwf	??_putByte+3
  8374                           
  8375                           ;VCAMIX_SPI_Master.c: 36: --i;
  8376  061B  3001               	movlw	1
  8377  061C  0020               	movlb	0	; select bank0
  8378  061D  02D4               	subwf	putByte@i,f
  8379  061E  2D70               	goto	l775
  8380  061F                     __end_of_putByte:	
  8381                           
  8382                           	psect	text9
  8383  0E40                     __ptext9:	
  8384 ;; *************** function ___fttol *****************
  8385 ;; Defined at:
  8386 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;  f1              3   30[BANK0 ] float 
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;  lval            4   39[BANK0 ] unsigned long 
  8391 ;;  exp1            1   43[BANK0 ] unsigned char 
  8392 ;;  sign1           1   38[BANK0 ] unsigned char 
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  4   30[BANK0 ] long 
  8395 ;; Registers used:
  8396 ;;		wreg, status,2, status,0
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8402 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8403 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;Total ram usage:       14 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    3
  8409 ;; This function calls:
  8410 ;;		Nothing
  8411 ;; This function is called by:
  8412 ;;		_main
  8413 ;;		_putByte
  8414 ;;		_LED7SegDisplayValue
  8415 ;; This function uses a non-reentrant model
  8416 ;;
  8417                           
  8418                           
  8419                           ;psect for function ___fttol
  8420  0E40                     ___fttol:	
  8421                           
  8422                           ;incstack = 0
  8423                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8424  0E40  0020               	movlb	0	; select bank0
  8425  0E41  083E               	movf	___fttol@f1,w
  8426  0E42  00C2               	movwf	??___fttol
  8427  0E43  083F               	movf	___fttol@f1+1,w
  8428  0E44  00C3               	movwf	??___fttol+1
  8429  0E45  0840               	movf	___fttol@f1+2,w
  8430  0E46  00C4               	movwf	??___fttol+2
  8431  0E47  1003               	clrc
  8432  0E48  0D43               	rlf	??___fttol+1,w
  8433  0E49  0D44               	rlf	??___fttol+2,w
  8434  0E4A  00C5               	movwf	??___fttol+3
  8435  0E4B  0845               	movf	??___fttol+3,w
  8436  0E4C  00CB               	movwf	___fttol@exp1
  8437  0E4D  084B               	movf	___fttol@exp1,w
  8438  0E4E  1D03               	btfss	3,2
  8439  0E4F  2E59               	goto	l2926
  8440  0E50  3000               	movlw	0
  8441  0E51  00C1               	movwf	?___fttol+3
  8442  0E52  3000               	movlw	0
  8443  0E53  00C0               	movwf	?___fttol+2
  8444  0E54  3000               	movlw	0
  8445  0E55  00BF               	movwf	?___fttol+1
  8446  0E56  3000               	movlw	0
  8447  0E57  00BE               	movwf	?___fttol
  8448  0E58  0008               	return
  8449  0E59                     l2926:	
  8450  0E59  083E               	movf	___fttol@f1,w
  8451  0E5A  00C2               	movwf	??___fttol
  8452  0E5B  083F               	movf	___fttol@f1+1,w
  8453  0E5C  00C3               	movwf	??___fttol+1
  8454  0E5D  0840               	movf	___fttol@f1+2,w
  8455  0E5E  00C4               	movwf	??___fttol+2
  8456  0E5F  3017               	movlw	23
  8457  0E60                     u2305:	
  8458  0E60  36C4               	lsrf	??___fttol+2,f
  8459  0E61  0CC3               	rrf	??___fttol+1,f
  8460  0E62  0CC2               	rrf	??___fttol,f
  8461  0E63  0B89               	decfsz	9,f
  8462  0E64  2E60               	goto	u2305
  8463  0E65  0842               	movf	??___fttol,w
  8464  0E66  00C5               	movwf	??___fttol+3
  8465  0E67  0845               	movf	??___fttol+3,w
  8466  0E68  00C6               	movwf	___fttol@sign1
  8467  0E69  17BF               	bsf	___fttol@f1+1,7
  8468  0E6A  30FF               	movlw	255
  8469  0E6B  05BE               	andwf	___fttol@f1,f
  8470  0E6C  30FF               	movlw	255
  8471  0E6D  05BF               	andwf	___fttol@f1+1,f
  8472  0E6E  3000               	movlw	0
  8473  0E6F  05C0               	andwf	___fttol@f1+2,f
  8474  0E70  083E               	movf	___fttol@f1,w
  8475  0E71  00C7               	movwf	___fttol@lval
  8476  0E72  083F               	movf	___fttol@f1+1,w
  8477  0E73  00C8               	movwf	___fttol@lval+1
  8478  0E74  0840               	movf	___fttol@f1+2,w
  8479  0E75  00C9               	movwf	___fttol@lval+2
  8480  0E76  01CA               	clrf	___fttol@lval+3
  8481  0E77  308E               	movlw	142
  8482  0E78  02CB               	subwf	___fttol@exp1,f
  8483  0E79  1FCB               	btfss	___fttol@exp1,7
  8484  0E7A  2E97               	goto	l2946
  8485  0E7B  084B               	movf	___fttol@exp1,w
  8486  0E7C  3A80               	xorlw	128
  8487  0E7D  3E8F               	addlw	143
  8488  0E7E  1803               	skipnc
  8489  0E7F  2E89               	goto	l2944
  8490  0E80  3000               	movlw	0
  8491  0E81  00C1               	movwf	?___fttol+3
  8492  0E82  3000               	movlw	0
  8493  0E83  00C0               	movwf	?___fttol+2
  8494  0E84  3000               	movlw	0
  8495  0E85  00BF               	movwf	?___fttol+1
  8496  0E86  3000               	movlw	0
  8497  0E87  00BE               	movwf	?___fttol
  8498  0E88  0008               	return
  8499  0E89                     l2944:	
  8500  0E89  3001               	movlw	1
  8501  0E8A                     u2335:	
  8502  0E8A  36CA               	lsrf	___fttol@lval+3,f
  8503  0E8B  0CC9               	rrf	___fttol@lval+2,f
  8504  0E8C  0CC8               	rrf	___fttol@lval+1,f
  8505  0E8D  0CC7               	rrf	___fttol@lval,f
  8506  0E8E  0B89               	decfsz	9,f
  8507  0E8F  2E8A               	goto	u2335
  8508  0E90  3001               	movlw	1
  8509  0E91  00C2               	movwf	??___fttol
  8510  0E92  0842               	movf	??___fttol,w
  8511  0E93  07CB               	addwf	___fttol@exp1,f
  8512  0E94  1903               	btfsc	3,2
  8513  0E95  2EB0               	goto	l2954
  8514  0E96  2E89               	goto	l2944
  8515  0E97                     l2946:	
  8516  0E97  3018               	movlw	24
  8517  0E98  024B               	subwf	___fttol@exp1,w
  8518  0E99  1C03               	skipc
  8519  0E9A  2EAD               	goto	l1202
  8520  0E9B  3000               	movlw	0
  8521  0E9C  00C1               	movwf	?___fttol+3
  8522  0E9D  3000               	movlw	0
  8523  0E9E  00C0               	movwf	?___fttol+2
  8524  0E9F  3000               	movlw	0
  8525  0EA0  00BF               	movwf	?___fttol+1
  8526  0EA1  3000               	movlw	0
  8527  0EA2  00BE               	movwf	?___fttol
  8528  0EA3  0008               	return
  8529  0EA4                     l2952:	
  8530  0EA4  3001               	movlw	1
  8531  0EA5                     u2365:	
  8532  0EA5  35C7               	lslf	___fttol@lval,f
  8533  0EA6  0DC8               	rlf	___fttol@lval+1,f
  8534  0EA7  0DC9               	rlf	___fttol@lval+2,f
  8535  0EA8  0DCA               	rlf	___fttol@lval+3,f
  8536  0EA9  0B89               	decfsz	9,f
  8537  0EAA  2EA5               	goto	u2365
  8538  0EAB  3001               	movlw	1
  8539  0EAC  02CB               	subwf	___fttol@exp1,f
  8540  0EAD                     l1202:	
  8541  0EAD  084B               	movf	___fttol@exp1,w
  8542  0EAE  1D03               	btfss	3,2
  8543  0EAF  2EA4               	goto	l2952
  8544  0EB0                     l2954:	
  8545  0EB0  0846               	movf	___fttol@sign1,w
  8546  0EB1  1903               	btfsc	3,2
  8547  0EB2  2EBE               	goto	l2958
  8548  0EB3  09C7               	comf	___fttol@lval,f
  8549  0EB4  09C8               	comf	___fttol@lval+1,f
  8550  0EB5  09C9               	comf	___fttol@lval+2,f
  8551  0EB6  09CA               	comf	___fttol@lval+3,f
  8552  0EB7  0AC7               	incf	___fttol@lval,f
  8553  0EB8  1903               	skipnz
  8554  0EB9  0AC8               	incf	___fttol@lval+1,f
  8555  0EBA  1903               	skipnz
  8556  0EBB  0AC9               	incf	___fttol@lval+2,f
  8557  0EBC  1903               	skipnz
  8558  0EBD  0ACA               	incf	___fttol@lval+3,f
  8559  0EBE                     l2958:	
  8560  0EBE  084A               	movf	___fttol@lval+3,w
  8561  0EBF  00C1               	movwf	?___fttol+3
  8562  0EC0  0849               	movf	___fttol@lval+2,w
  8563  0EC1  00C0               	movwf	?___fttol+2
  8564  0EC2  0848               	movf	___fttol@lval+1,w
  8565  0EC3  00BF               	movwf	?___fttol+1
  8566  0EC4  0847               	movf	___fttol@lval,w
  8567  0EC5  00BE               	movwf	?___fttol
  8568  0EC6  0008               	return
  8569  0EC7                     __end_of___fttol:	
  8570                           
  8571                           	psect	text10
  8572  061F                     __ptext10:	
  8573 ;; *************** function ___ftmul *****************
  8574 ;; Defined at:
  8575 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8576 ;; Parameters:    Size  Location     Type
  8577 ;;  f1              3   14[BANK0 ] float 
  8578 ;;  f2              3   17[BANK0 ] float 
  8579 ;; Auto vars:     Size  Location     Type
  8580 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8581 ;;  sign            1   29[BANK0 ] unsigned char 
  8582 ;;  cntr            1   28[BANK0 ] unsigned char 
  8583 ;;  exp             1   24[BANK0 ] unsigned char 
  8584 ;; Return value:  Size  Location     Type
  8585 ;;                  3   14[BANK0 ] float 
  8586 ;; Registers used:
  8587 ;;		wreg, status,2, status,0, pclath, cstack
  8588 ;; Tracked objects:
  8589 ;;		On entry : 0/0
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8593 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8594 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;Total ram usage:       16 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; Hardware stack levels required when called:    4
  8600 ;; This function calls:
  8601 ;;		___ftpack
  8602 ;; This function is called by:
  8603 ;;		_putByte
  8604 ;; This function uses a non-reentrant model
  8605 ;;
  8606                           
  8607                           
  8608                           ;psect for function ___ftmul
  8609  061F                     ___ftmul:	
  8610                           
  8611                           ;incstack = 0
  8612                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8613  061F  0020               	movlb	0	; select bank0
  8614  0620  082E               	movf	___ftmul@f1,w
  8615  0621  00B4               	movwf	??___ftmul
  8616  0622  082F               	movf	___ftmul@f1+1,w
  8617  0623  00B5               	movwf	??___ftmul+1
  8618  0624  0830               	movf	___ftmul@f1+2,w
  8619  0625  00B6               	movwf	??___ftmul+2
  8620  0626  1003               	clrc
  8621  0627  0D35               	rlf	??___ftmul+1,w
  8622  0628  0D36               	rlf	??___ftmul+2,w
  8623  0629  00B7               	movwf	??___ftmul+3
  8624  062A  0837               	movf	??___ftmul+3,w
  8625  062B  00B8               	movwf	___ftmul@exp
  8626  062C  0838               	movf	___ftmul@exp,w
  8627  062D  1D03               	btfss	3,2
  8628  062E  2E36               	goto	l2876
  8629  062F  3000               	movlw	0
  8630  0630  00AE               	movwf	?___ftmul
  8631  0631  3000               	movlw	0
  8632  0632  00AF               	movwf	?___ftmul+1
  8633  0633  3000               	movlw	0
  8634  0634  00B0               	movwf	?___ftmul+2
  8635  0635  0008               	return
  8636  0636                     l2876:	
  8637  0636  0831               	movf	___ftmul@f2,w
  8638  0637  00B4               	movwf	??___ftmul
  8639  0638  0832               	movf	___ftmul@f2+1,w
  8640  0639  00B5               	movwf	??___ftmul+1
  8641  063A  0833               	movf	___ftmul@f2+2,w
  8642  063B  00B6               	movwf	??___ftmul+2
  8643  063C  1003               	clrc
  8644  063D  0D35               	rlf	??___ftmul+1,w
  8645  063E  0D36               	rlf	??___ftmul+2,w
  8646  063F  00B7               	movwf	??___ftmul+3
  8647  0640  0837               	movf	??___ftmul+3,w
  8648  0641  00BD               	movwf	___ftmul@sign
  8649  0642  083D               	movf	___ftmul@sign,w
  8650  0643  1D03               	btfss	3,2
  8651  0644  2E4C               	goto	l2882
  8652  0645  3000               	movlw	0
  8653  0646  00AE               	movwf	?___ftmul
  8654  0647  3000               	movlw	0
  8655  0648  00AF               	movwf	?___ftmul+1
  8656  0649  3000               	movlw	0
  8657  064A  00B0               	movwf	?___ftmul+2
  8658  064B  0008               	return
  8659  064C                     l2882:	
  8660  064C  083D               	movf	___ftmul@sign,w
  8661  064D  3E7B               	addlw	123
  8662  064E  00B4               	movwf	??___ftmul
  8663  064F  0834               	movf	??___ftmul,w
  8664  0650  07B8               	addwf	___ftmul@exp,f
  8665  0651  082E               	movf	___ftmul@f1,w
  8666  0652  00B4               	movwf	??___ftmul
  8667  0653  082F               	movf	___ftmul@f1+1,w
  8668  0654  00B5               	movwf	??___ftmul+1
  8669  0655  0830               	movf	___ftmul@f1+2,w
  8670  0656  00B6               	movwf	??___ftmul+2
  8671  0657  3010               	movlw	16
  8672  0658                     u2195:	
  8673  0658  36B6               	lsrf	??___ftmul+2,f
  8674  0659  0CB5               	rrf	??___ftmul+1,f
  8675  065A  0CB4               	rrf	??___ftmul,f
  8676  065B  0B89               	decfsz	9,f
  8677  065C  2E58               	goto	u2195
  8678  065D  0834               	movf	??___ftmul,w
  8679  065E  00B7               	movwf	??___ftmul+3
  8680  065F  0837               	movf	??___ftmul+3,w
  8681  0660  00BD               	movwf	___ftmul@sign
  8682  0661  0831               	movf	___ftmul@f2,w
  8683  0662  00B4               	movwf	??___ftmul
  8684  0663  0832               	movf	___ftmul@f2+1,w
  8685  0664  00B5               	movwf	??___ftmul+1
  8686  0665  0833               	movf	___ftmul@f2+2,w
  8687  0666  00B6               	movwf	??___ftmul+2
  8688  0667  3010               	movlw	16
  8689  0668                     u2205:	
  8690  0668  36B6               	lsrf	??___ftmul+2,f
  8691  0669  0CB5               	rrf	??___ftmul+1,f
  8692  066A  0CB4               	rrf	??___ftmul,f
  8693  066B  0B89               	decfsz	9,f
  8694  066C  2E68               	goto	u2205
  8695  066D  0834               	movf	??___ftmul,w
  8696  066E  00B7               	movwf	??___ftmul+3
  8697  066F  0837               	movf	??___ftmul+3,w
  8698  0670  06BD               	xorwf	___ftmul@sign,f
  8699  0671  3080               	movlw	128
  8700  0672  00B4               	movwf	??___ftmul
  8701  0673  0834               	movf	??___ftmul,w
  8702  0674  05BD               	andwf	___ftmul@sign,f
  8703  0675  17AF               	bsf	___ftmul@f1+1,7
  8704  0676  17B2               	bsf	___ftmul@f2+1,7
  8705  0677  30FF               	movlw	255
  8706  0678  05B1               	andwf	___ftmul@f2,f
  8707  0679  30FF               	movlw	255
  8708  067A  05B2               	andwf	___ftmul@f2+1,f
  8709  067B  3000               	movlw	0
  8710  067C  05B3               	andwf	___ftmul@f2+2,f
  8711  067D  3000               	movlw	0
  8712  067E  00B9               	movwf	___ftmul@f3_as_product
  8713  067F  3000               	movlw	0
  8714  0680  00BA               	movwf	___ftmul@f3_as_product+1
  8715  0681  3000               	movlw	0
  8716  0682  00BB               	movwf	___ftmul@f3_as_product+2
  8717  0683  3007               	movlw	7
  8718  0684  00B4               	movwf	??___ftmul
  8719  0685  0834               	movf	??___ftmul,w
  8720  0686  00BC               	movwf	___ftmul@cntr
  8721  0687                     l2894:	
  8722  0687  1C2E               	btfss	___ftmul@f1,0
  8723  0688  2E8F               	goto	l2898
  8724  0689  0831               	movf	___ftmul@f2,w
  8725  068A  07B9               	addwf	___ftmul@f3_as_product,f
  8726  068B  0832               	movf	___ftmul@f2+1,w
  8727  068C  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8728  068D  0833               	movf	___ftmul@f2+2,w
  8729  068E  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8730  068F                     l2898:	
  8731  068F  3001               	movlw	1
  8732  0690                     u2225:	
  8733  0690  36B0               	lsrf	___ftmul@f1+2,f
  8734  0691  0CAF               	rrf	___ftmul@f1+1,f
  8735  0692  0CAE               	rrf	___ftmul@f1,f
  8736  0693  0B89               	decfsz	9,f
  8737  0694  2E90               	goto	u2225
  8738  0695  3001               	movlw	1
  8739  0696                     u2235:	
  8740  0696  35B1               	lslf	___ftmul@f2,f
  8741  0697  0DB2               	rlf	___ftmul@f2+1,f
  8742  0698  0DB3               	rlf	___ftmul@f2+2,f
  8743  0699  0B89               	decfsz	9,f
  8744  069A  2E96               	goto	u2235
  8745  069B  3001               	movlw	1
  8746  069C  02BC               	subwf	___ftmul@cntr,f
  8747  069D  1D03               	btfss	3,2
  8748  069E  2E87               	goto	l2894
  8749  069F  3009               	movlw	9
  8750  06A0  00B4               	movwf	??___ftmul
  8751  06A1  0834               	movf	??___ftmul,w
  8752  06A2  00BC               	movwf	___ftmul@cntr
  8753  06A3                     l2906:	
  8754  06A3  1C2E               	btfss	___ftmul@f1,0
  8755  06A4  2EAB               	goto	l2910
  8756  06A5  0831               	movf	___ftmul@f2,w
  8757  06A6  07B9               	addwf	___ftmul@f3_as_product,f
  8758  06A7  0832               	movf	___ftmul@f2+1,w
  8759  06A8  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8760  06A9  0833               	movf	___ftmul@f2+2,w
  8761  06AA  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8762  06AB                     l2910:	
  8763  06AB  3001               	movlw	1
  8764  06AC                     u2265:	
  8765  06AC  36B0               	lsrf	___ftmul@f1+2,f
  8766  06AD  0CAF               	rrf	___ftmul@f1+1,f
  8767  06AE  0CAE               	rrf	___ftmul@f1,f
  8768  06AF  0B89               	decfsz	9,f
  8769  06B0  2EAC               	goto	u2265
  8770  06B1  3001               	movlw	1
  8771  06B2                     u2275:	
  8772  06B2  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8773  06B3  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8774  06B4  0CB9               	rrf	___ftmul@f3_as_product,f
  8775  06B5  0B89               	decfsz	9,f
  8776  06B6  2EB2               	goto	u2275
  8777  06B7  3001               	movlw	1
  8778  06B8  02BC               	subwf	___ftmul@cntr,f
  8779  06B9  1D03               	btfss	3,2
  8780  06BA  2EA3               	goto	l2906
  8781  06BB  0839               	movf	___ftmul@f3_as_product,w
  8782  06BC  00A0               	movwf	___ftpack@arg
  8783  06BD  083A               	movf	___ftmul@f3_as_product+1,w
  8784  06BE  00A1               	movwf	___ftpack@arg+1
  8785  06BF  083B               	movf	___ftmul@f3_as_product+2,w
  8786  06C0  00A2               	movwf	___ftpack@arg+2
  8787  06C1  0838               	movf	___ftmul@exp,w
  8788  06C2  00B4               	movwf	??___ftmul
  8789  06C3  0834               	movf	??___ftmul,w
  8790  06C4  00A3               	movwf	___ftpack@exp
  8791  06C5  083D               	movf	___ftmul@sign,w
  8792  06C6  00B5               	movwf	??___ftmul+1
  8793  06C7  0835               	movf	??___ftmul+1,w
  8794  06C8  00A4               	movwf	___ftpack@sign
  8795  06C9  318D  2562         	fcall	___ftpack
  8796  06CB  0020               	movlb	0	; select bank0
  8797  06CC  0820               	movf	?___ftpack,w
  8798  06CD  00AE               	movwf	?___ftmul
  8799  06CE  0821               	movf	?___ftpack+1,w
  8800  06CF  00AF               	movwf	?___ftmul+1
  8801  06D0  0822               	movf	?___ftpack+2,w
  8802  06D1  00B0               	movwf	?___ftmul+2
  8803  06D2  0008               	return
  8804  06D3                     __end_of___ftmul:	
  8805                           
  8806                           	psect	text11
  8807  0B48                     __ptext11:	
  8808 ;; *************** function ___awtoft *****************
  8809 ;; Defined at:
  8810 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  c               2    8[BANK0 ] int 
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;  sign            1   13[BANK0 ] unsigned char 
  8815 ;; Return value:  Size  Location     Type
  8816 ;;                  3    8[BANK0 ] float 
  8817 ;; Registers used:
  8818 ;;		wreg, status,2, status,0, pclath, cstack
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8824 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;Total ram usage:        6 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    4
  8831 ;; This function calls:
  8832 ;;		___ftpack
  8833 ;; This function is called by:
  8834 ;;		_main
  8835 ;;		_putByte
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           
  8840                           ;psect for function ___awtoft
  8841  0B48                     ___awtoft:	
  8842                           
  8843                           ;incstack = 0
  8844                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8845  0B48  0020               	movlb	0	; select bank0
  8846  0B49  01AD               	clrf	___awtoft@sign
  8847  0B4A  1FA9               	btfss	___awtoft@c+1,7
  8848  0B4B  2B53               	goto	l2866
  8849  0B4C  09A8               	comf	___awtoft@c,f
  8850  0B4D  09A9               	comf	___awtoft@c+1,f
  8851  0B4E  0AA8               	incf	___awtoft@c,f
  8852  0B4F  1903               	skipnz
  8853  0B50  0AA9               	incf	___awtoft@c+1,f
  8854  0B51  01AD               	clrf	___awtoft@sign
  8855  0B52  0AAD               	incf	___awtoft@sign,f
  8856  0B53                     l2866:	
  8857  0B53  0828               	movf	___awtoft@c,w
  8858  0B54  00A0               	movwf	___ftpack@arg
  8859  0B55  0829               	movf	___awtoft@c+1,w
  8860  0B56  00A1               	movwf	___ftpack@arg+1
  8861  0B57  01A2               	clrf	___ftpack@arg+2
  8862  0B58  308E               	movlw	142
  8863  0B59  00AB               	movwf	??___awtoft
  8864  0B5A  082B               	movf	??___awtoft,w
  8865  0B5B  00A3               	movwf	___ftpack@exp
  8866  0B5C  082D               	movf	___awtoft@sign,w
  8867  0B5D  00AC               	movwf	??___awtoft+1
  8868  0B5E  082C               	movf	??___awtoft+1,w
  8869  0B5F  00A4               	movwf	___ftpack@sign
  8870  0B60  318D  2562         	fcall	___ftpack
  8871  0B62  0020               	movlb	0	; select bank0
  8872  0B63  0820               	movf	?___ftpack,w
  8873  0B64  00A8               	movwf	?___awtoft
  8874  0B65  0821               	movf	?___ftpack+1,w
  8875  0B66  00A9               	movwf	?___awtoft+1
  8876  0B67  0822               	movf	?___ftpack+2,w
  8877  0B68  00AA               	movwf	?___awtoft+2
  8878  0B69  0008               	return
  8879  0B6A                     __end_of___awtoft:	
  8880                           
  8881                           	psect	text12
  8882  077C                     __ptext12:	
  8883 ;; *************** function _blinkyLoop *****************
  8884 ;; Defined at:
  8885 ;;		line 217 in file "main.c"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;  maxLoops        2   32[BANK0 ] int 
  8888 ;; Auto vars:     Size  Location     Type
  8889 ;;  loopCount       2   38[BANK0 ] int 
  8890 ;;  delayTime       2   36[BANK0 ] int 
  8891 ;; Return value:  Size  Location     Type
  8892 ;;                  1    wreg      void 
  8893 ;; Registers used:
  8894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8895 ;; Tracked objects:
  8896 ;;		On entry : 0/0
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8900 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;Total ram usage:        8 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:    6
  8907 ;; This function calls:
  8908 ;;		_MYI2C_Write2LEDBytes
  8909 ;;		___wmul
  8910 ;;		_delay
  8911 ;; This function is called by:
  8912 ;;		_main
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           
  8917                           ;psect for function _blinkyLoop
  8918  077C                     _blinkyLoop:	
  8919                           
  8920                           ;main.c: 218: int loopCount=maxLoops;
  8921                           
  8922                           ;incstack = 0
  8923                           ; Regs used in _blinkyLoop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8924  077C  0020               	movlb	0	; select bank0
  8925  077D  0841               	movf	blinkyLoop@maxLoops+1,w
  8926  077E  00C7               	movwf	blinkyLoop@loopCount+1
  8927  077F  0840               	movf	blinkyLoop@maxLoops,w
  8928  0780  00C6               	movwf	blinkyLoop@loopCount
  8929                           
  8930                           ;main.c: 219: int delayTime;
  8931                           ;main.c: 221: ODCONB &= 0xF0;
  8932  0781  30F0               	movlw	240
  8933  0782  00C2               	movwf	??_blinkyLoop
  8934  0783  0842               	movf	??_blinkyLoop,w
  8935  0784  003E               	movlb	30	; select bank30
  8936  0785  05C5               	andwf	69,f	;volatile
  8937                           
  8938                           ;main.c: 222: ODCONC &= 0x1F;
  8939  0786  301F               	movlw	31
  8940  0787  0020               	movlb	0	; select bank0
  8941  0788  00C2               	movwf	??_blinkyLoop
  8942  0789  0842               	movf	??_blinkyLoop,w
  8943  078A  003E               	movlb	30	; select bank30
  8944  078B  05D0               	andwf	80,f	;volatile
  8945  078C                     l4348:	
  8946                           ;main.c: 224: while(loopCount>0){
  8947                           
  8948  078C  0020               	movlb	0	; select bank0
  8949  078D  0847               	movf	blinkyLoop@loopCount+1,w
  8950  078E  3A80               	xorlw	128
  8951  078F  00C2               	movwf	??_blinkyLoop
  8952  0790  3080               	movlw	128
  8953  0791  0242               	subwf	??_blinkyLoop,w
  8954  0792  1D03               	skipz
  8955  0793  2F96               	goto	u4115
  8956  0794  3001               	movlw	1
  8957  0795  0246               	subwf	blinkyLoop@loopCount,w
  8958  0796                     u4115:	
  8959  0796  1C03               	btfss	3,0
  8960  0797  2FE2               	goto	l4350
  8961                           
  8962                           ;main.c: 225: delayTime=loopCount*400;
  8963  0798  0020               	movlb	0	; select bank0
  8964  0799  0847               	movf	blinkyLoop@loopCount+1,w
  8965  079A  00A1               	movwf	___wmul@multiplier+1
  8966  079B  0846               	movf	blinkyLoop@loopCount,w
  8967  079C  00A0               	movwf	___wmul@multiplier
  8968  079D  3090               	movlw	144
  8969  079E  00A2               	movwf	___wmul@multiplicand
  8970  079F  3001               	movlw	1
  8971  07A0  00A3               	movwf	___wmul@multiplicand+1
  8972  07A1  318A  22D2  3187   	fcall	___wmul
  8973  07A4  0020               	movlb	0	; select bank0
  8974  07A5  0821               	movf	?___wmul+1,w
  8975  07A6  00C5               	movwf	blinkyLoop@delayTime+1
  8976  07A7  0820               	movf	?___wmul,w
  8977  07A8  00C4               	movwf	blinkyLoop@delayTime
  8978                           
  8979                           ;main.c: 228: LATB |= 0x0F;
  8980  07A9  300F               	movlw	15
  8981  07AA  00C2               	movwf	??_blinkyLoop
  8982  07AB  0842               	movf	??_blinkyLoop,w
  8983  07AC  0497               	iorwf	23,f	;volatile
  8984                           
  8985                           ;main.c: 230: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0xFF,0xFF);
  8986  07AD  30FF               	movlw	255
  8987  07AE  00C2               	movwf	??_blinkyLoop
  8988  07AF  0842               	movf	??_blinkyLoop,w
  8989  07B0  00AE               	movwf	MYI2C_Write2LEDBytes@MSBWriteByte
  8990  07B1  30FF               	movlw	255
  8991  07B2  00C3               	movwf	??_blinkyLoop+1
  8992  07B3  0843               	movf	??_blinkyLoop+1,w
  8993  07B4  00AF               	movwf	MYI2C_Write2LEDBytes@LSBWriteByte
  8994  07B5  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  8995  07B6  0084               	movwf	4
  8996  07B7  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  8997  07B8  0085               	movwf	5
  8998  07B9  0800               	movf	0,w	;code access
  8999  07BA  318D  2508  3187   	fcall	_MYI2C_Write2LEDBytes
  9000                           
  9001                           ;main.c: 231: delay(delayTime);
  9002  07BD  0020               	movlb	0	; select bank0
  9003  07BE  0845               	movf	blinkyLoop@delayTime+1,w
  9004  07BF  00A7               	movwf	delay@delaytime+1
  9005  07C0  0844               	movf	blinkyLoop@delayTime,w
  9006  07C1  00A6               	movwf	delay@delaytime
  9007  07C2  318C  24B5  3187   	fcall	_delay
  9008                           
  9009                           ;main.c: 233: LATB &= 0xF0;
  9010  07C5  30F0               	movlw	240
  9011  07C6  0020               	movlb	0	; select bank0
  9012  07C7  00C2               	movwf	??_blinkyLoop
  9013  07C8  0842               	movf	??_blinkyLoop,w
  9014  07C9  0597               	andwf	23,f	;volatile
  9015                           
  9016                           ;main.c: 235: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0x0,0x0);
  9017  07CA  01AE               	clrf	MYI2C_Write2LEDBytes@MSBWriteByte
  9018  07CB  01AF               	clrf	MYI2C_Write2LEDBytes@LSBWriteByte
  9019  07CC  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9020  07CD  0084               	movwf	4
  9021  07CE  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9022  07CF  0085               	movwf	5
  9023  07D0  0800               	movf	0,w	;code access
  9024  07D1  318D  2508  3187   	fcall	_MYI2C_Write2LEDBytes
  9025                           
  9026                           ;main.c: 236: delay(delayTime);
  9027  07D4  0020               	movlb	0	; select bank0
  9028  07D5  0845               	movf	blinkyLoop@delayTime+1,w
  9029  07D6  00A7               	movwf	delay@delaytime+1
  9030  07D7  0844               	movf	blinkyLoop@delayTime,w
  9031  07D8  00A6               	movwf	delay@delaytime
  9032  07D9  318C  24B5  3187   	fcall	_delay
  9033                           
  9034                           ;main.c: 238: loopCount--;
  9035  07DC  30FF               	movlw	255
  9036  07DD  0020               	movlb	0	; select bank0
  9037  07DE  07C6               	addwf	blinkyLoop@loopCount,f
  9038  07DF  30FF               	movlw	255
  9039  07E0  3DC7               	addwfc	blinkyLoop@loopCount+1,f
  9040  07E1  2F8C               	goto	l4348
  9041  07E2                     l4350:	
  9042                           
  9043                           ;main.c: 239: }
  9044                           ;main.c: 240: LATB |= 0x0F;
  9045  07E2  300F               	movlw	15
  9046  07E3  0020               	movlb	0	; select bank0
  9047  07E4  00C2               	movwf	??_blinkyLoop
  9048  07E5  0842               	movf	??_blinkyLoop,w
  9049  07E6  0497               	iorwf	23,f	;volatile
  9050                           
  9051                           ;main.c: 242: delay(5000);
  9052  07E7  3088               	movlw	136
  9053  07E8  00A6               	movwf	delay@delaytime
  9054  07E9  3013               	movlw	19
  9055  07EA  00A7               	movwf	delay@delaytime+1
  9056  07EB  318C  24B5  3187   	fcall	_delay
  9057                           
  9058                           ;main.c: 243: MYI2C_Write2LEDBytes(i2c_addr_dualADSR0,0xFF,0xFF);
  9059  07EE  30FF               	movlw	255
  9060  07EF  0020               	movlb	0	; select bank0
  9061  07F0  00C2               	movwf	??_blinkyLoop
  9062  07F1  0842               	movf	??_blinkyLoop,w
  9063  07F2  00AE               	movwf	MYI2C_Write2LEDBytes@MSBWriteByte
  9064  07F3  30FF               	movlw	255
  9065  07F4  00C3               	movwf	??_blinkyLoop+1
  9066  07F5  0843               	movf	??_blinkyLoop+1,w
  9067  07F6  00AF               	movwf	MYI2C_Write2LEDBytes@LSBWriteByte
  9068  07F7  302D               	movlw	low (_i2c_addr_dualADSR0| (0+32768))
  9069  07F8  0084               	movwf	4
  9070  07F9  3090               	movlw	high (_i2c_addr_dualADSR0| (0+32768))
  9071  07FA  0085               	movwf	5
  9072  07FB  0800               	movf	0,w	;code access
  9073  07FC  318D  2508         	fcall	_MYI2C_Write2LEDBytes
  9074  07FE  0008               	return
  9075  07FF                     __end_of_blinkyLoop:	
  9076                           ;main.c: 244: return;
  9077                           
  9078                           
  9079                           	psect	text13
  9080  0D08                     __ptext13:	
  9081 ;; *************** function _MYI2C_Write2LEDBytes *****************
  9082 ;; Defined at:
  9083 ;;		line 746 in file "main.c"
  9084 ;; Parameters:    Size  Location     Type
  9085 ;;  slaveDeviceA    1    wreg     unsigned char 
  9086 ;;  MSBWriteByte    1   14[BANK0 ] unsigned char 
  9087 ;;  LSBWriteByte    1   15[BANK0 ] unsigned char 
  9088 ;; Auto vars:     Size  Location     Type
  9089 ;;  slaveDeviceA    1   22[BANK0 ] unsigned char 
  9090 ;;  writeBuffer     3   28[BANK0 ] unsigned char [3]
  9091 ;;  timeOut         2   25[BANK0 ] unsigned int 
  9092 ;;  counter         2   23[BANK0 ] unsigned int 
  9093 ;;  nCount          2   20[BANK0 ] unsigned int 
  9094 ;;  pData           2    0        PTR unsigned char 
  9095 ;;  status          1   31[BANK0 ] enum E14335
  9096 ;;  pointerByte     1   27[BANK0 ] unsigned char 
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  1    wreg      void 
  9099 ;; Registers used:
  9100 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;Total ram usage:       18 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    5
  9113 ;; This function calls:
  9114 ;;		_I2C1_MasterWrite
  9115 ;; This function is called by:
  9116 ;;		_blinkyLoop
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           
  9121                           ;psect for function _MYI2C_Write2LEDBytes
  9122  0D08                     _MYI2C_Write2LEDBytes:	
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _MYI2C_Write2LEDBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9126                           ;MYI2C_Write2LEDBytes@slaveDeviceAddress stored from wreg
  9127  0D08  0020               	movlb	0	; select bank0
  9128  0D09  00B6               	movwf	MYI2C_Write2LEDBytes@slaveDeviceAddress
  9129                           
  9130                           ;main.c: 750: uint8_t *pData;
  9131                           ;main.c: 751: uint16_t nCount;
  9132                           ;main.c: 753: uint8_t writeBuffer[3];
  9133                           ;main.c: 755: uint16_t counter, timeOut;
  9134                           ;main.c: 756: uint8_t pointerByte = cPointerByteWriteLED;
  9135  0D0A  302E               	movlw	low (_cPointerByteWriteLED| (0+32768))
  9136  0D0B  0084               	movwf	4
  9137  0D0C  3090               	movlw	high (_cPointerByteWriteLED| (0+32768))
  9138  0D0D  0085               	movwf	5
  9139  0D0E  0800               	movf	0,w	;code access
  9140  0D0F  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9141  0D10  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9142  0D11  00BB               	movwf	MYI2C_Write2LEDBytes@pointerByte
  9143                           
  9144                           ;main.c: 758: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
  9145  0D12  3002               	movlw	2
  9146  0D13  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9147  0D14  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9148  0D15  00BF               	movwf	MYI2C_Write2LEDBytes@status
  9149                           
  9150                           ;main.c: 762: nCount = 1;
  9151  0D16  3001               	movlw	1
  9152  0D17  00B4               	movwf	MYI2C_Write2LEDBytes@nCount
  9153  0D18  3000               	movlw	0
  9154  0D19  00B5               	movwf	MYI2C_Write2LEDBytes@nCount+1
  9155                           
  9156                           ;main.c: 764: for (counter = 0; counter < nCount; counter++)
  9157  0D1A  01B7               	clrf	MYI2C_Write2LEDBytes@counter
  9158  0D1B  01B8               	clrf	MYI2C_Write2LEDBytes@counter+1
  9159  0D1C                     l621:	
  9160  0D1C  0835               	movf	MYI2C_Write2LEDBytes@nCount+1,w
  9161  0D1D  0238               	subwf	MYI2C_Write2LEDBytes@counter+1,w
  9162  0D1E  1D03               	skipz
  9163  0D1F  2D22               	goto	u2535
  9164  0D20  0834               	movf	MYI2C_Write2LEDBytes@nCount,w
  9165  0D21  0237               	subwf	MYI2C_Write2LEDBytes@counter,w
  9166  0D22                     u2535:	
  9167  0D22  1803               	btfsc	3,0
  9168  0D23  0008               	return
  9169                           
  9170                           ;main.c: 765: {
  9171                           ;main.c: 768: writeBuffer[0] = pointerByte;
  9172  0D24  083B               	movf	MYI2C_Write2LEDBytes@pointerByte,w
  9173  0D25  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9174  0D26  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9175  0D27  00BC               	movwf	MYI2C_Write2LEDBytes@writeBuffer
  9176                           
  9177                           ;main.c: 770: writeBuffer[1] = (MSBWriteByte);
  9178  0D28  082E               	movf	MYI2C_Write2LEDBytes@MSBWriteByte,w
  9179  0D29  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9180  0D2A  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9181  0D2B  00BD               	movwf	MYI2C_Write2LEDBytes@writeBuffer+1
  9182                           
  9183                           ;main.c: 771: writeBuffer[2] = (LSBWriteByte);
  9184  0D2C  082F               	movf	MYI2C_Write2LEDBytes@LSBWriteByte,w
  9185  0D2D  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9186  0D2E  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9187  0D2F  00BE               	movwf	MYI2C_Write2LEDBytes@writeBuffer+2
  9188                           
  9189                           ;main.c: 776: timeOut = 0;
  9190  0D30  01B9               	clrf	MYI2C_Write2LEDBytes@timeOut
  9191  0D31  01BA               	clrf	MYI2C_Write2LEDBytes@timeOut+1
  9192  0D32                     l3136:	
  9193                           ;main.c: 777: while(status != I2C1_MESSAGE_FAIL)
  9194                           
  9195  0D32  033F               	decf	MYI2C_Write2LEDBytes@status,w
  9196  0D33  1903               	btfsc	3,2
  9197  0D34  2D5A               	goto	l3138
  9198                           
  9199                           ;main.c: 778: {
  9200                           ;main.c: 780: I2C1_MasterWrite( writeBuffer,
  9201                           ;main.c: 781: 3,
  9202                           ;main.c: 782: slaveDeviceAddress,
  9203                           ;main.c: 783: &status);
  9204  0D35  3003               	movlw	3
  9205  0D36  00B0               	movwf	??_MYI2C_Write2LEDBytes
  9206  0D37  0830               	movf	??_MYI2C_Write2LEDBytes,w
  9207  0D38  00A7               	movwf	I2C1_MasterWrite@length
  9208  0D39  0836               	movf	MYI2C_Write2LEDBytes@slaveDeviceAddress,w
  9209  0D3A  00B1               	movwf	??_MYI2C_Write2LEDBytes+1
  9210  0D3B  01B2               	clrf	??_MYI2C_Write2LEDBytes+2
  9211  0D3C  0831               	movf	??_MYI2C_Write2LEDBytes+1,w
  9212  0D3D  00A8               	movwf	I2C1_MasterWrite@address
  9213  0D3E  0832               	movf	??_MYI2C_Write2LEDBytes+2,w
  9214  0D3F  00A9               	movwf	I2C1_MasterWrite@address+1
  9215  0D40  303F               	movlw	(low (MYI2C_Write2LEDBytes@status| 0))& (0+255)
  9216  0D41  00B3               	movwf	??_MYI2C_Write2LEDBytes+3
  9217  0D42  0833               	movf	??_MYI2C_Write2LEDBytes+3,w
  9218  0D43  00AA               	movwf	I2C1_MasterWrite@pflag
  9219  0D44  303C               	movlw	(low (MYI2C_Write2LEDBytes@writeBuffer| 0))& (0+255)
  9220  0D45  318B  238F  318D   	fcall	_I2C1_MasterWrite
  9221  0D48                     l3122:	
  9222                           ;main.c: 786: while(status == I2C1_MESSAGE_PENDING);
  9223                           
  9224  0D48  3002               	movlw	2
  9225  0D49  0020               	movlb	0	; select bank0
  9226  0D4A  063F               	xorwf	MYI2C_Write2LEDBytes@status,w
  9227  0D4B  1903               	btfsc	3,2
  9228  0D4C  2D48               	goto	l3122
  9229                           
  9230                           ;main.c: 788: if (status == I2C1_MESSAGE_COMPLETE)
  9231  0D4D  083F               	movf	MYI2C_Write2LEDBytes@status,w
  9232  0D4E  1903               	btfsc	3,2
  9233  0D4F  2D5A               	goto	l3138
  9234                           
  9235                           ;main.c: 798: if (timeOut == 100)
  9236                           
  9237                           ;main.c: 789: break;
  9238  0D50  3064               	movlw	100
  9239  0D51  0639               	xorwf	MYI2C_Write2LEDBytes@timeOut,w
  9240  0D52  043A               	iorwf	MYI2C_Write2LEDBytes@timeOut+1,w
  9241  0D53  1903               	btfsc	3,2
  9242  0D54  2D5A               	goto	l3138
  9243                           
  9244                           ;main.c: 800: else
  9245                           ;main.c: 801: timeOut++;
  9246                           
  9247                           ;main.c: 799: break;
  9248  0D55  3001               	movlw	1
  9249  0D56  07B9               	addwf	MYI2C_Write2LEDBytes@timeOut,f
  9250  0D57  3000               	movlw	0
  9251  0D58  3DBA               	addwfc	MYI2C_Write2LEDBytes@timeOut+1,f
  9252  0D59  2D32               	goto	l3136
  9253  0D5A                     l3138:	
  9254                           
  9255                           ;main.c: 802: }
  9256                           ;main.c: 804: if (status == I2C1_MESSAGE_FAIL)
  9257  0D5A  033F               	decf	MYI2C_Write2LEDBytes@status,w
  9258  0D5B  1903               	btfsc	3,2
  9259  0D5C  0008               	return
  9260                           
  9261                           ;main.c: 805: {
  9262                           ;main.c: 806: break;
  9263  0D5D  3001               	movlw	1
  9264  0D5E  07B7               	addwf	MYI2C_Write2LEDBytes@counter,f
  9265  0D5F  3000               	movlw	0
  9266  0D60  3DB8               	addwfc	MYI2C_Write2LEDBytes@counter+1,f
  9267  0D61  2D1C               	goto	l621
  9268  0D62                     __end_of_MYI2C_Write2LEDBytes:	
  9269                           
  9270                           	psect	text14
  9271  0B8F                     __ptext14:	
  9272 ;; *************** function _I2C1_MasterWrite *****************
  9273 ;; Defined at:
  9274 ;;		line 598 in file "mcc_generated_files/i2c1.c"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;  pdata           1    wreg     PTR unsigned char 
  9277 ;;		 -> MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), MYI2C_WriteFaders@writeBuffer(9),
      + 
  9278 ;;  length          1    7[BANK0 ] unsigned char 
  9279 ;;  address         2    8[BANK0 ] unsigned int 
  9280 ;;  pflag           1   10[BANK0 ] PTR enum E14260
  9281 ;;		 -> MYI2C_Write16EEPROMBytes@status(1), MYI2C_Write2LEDBytes@status(1), MYI2C_WriteFaders@status(1), 
  9282 ;; Auto vars:     Size  Location     Type
  9283 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  9284 ;;		 -> MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), MYI2C_WriteFaders@writeBuffer(9),
      + 
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9294 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;Total ram usage:        7 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    4
  9301 ;; This function calls:
  9302 ;;		_I2C1_MasterTRBInsert
  9303 ;;		_I2C1_MasterWriteTRBBuild
  9304 ;; This function is called by:
  9305 ;;		_MYI2C_Write2LEDBytes
  9306 ;;		_MYI2C_Write16EEPROMBytes
  9307 ;;		_MYI2C_WriteFaders
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           
  9312                           ;psect for function _I2C1_MasterWrite
  9313  0B8F                     _I2C1_MasterWrite:	
  9314                           
  9315                           ;incstack = 0
  9316                           ; Regs used in _I2C1_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9317                           ;I2C1_MasterWrite@pdata stored from wreg
  9318  0B8F  0020               	movlb	0	; select bank0
  9319  0B90  00AD               	movwf	I2C1_MasterWrite@pdata
  9320                           
  9321                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9322                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
  9323  0B91  1869               	btfsc	_i2c1_object+2,0
  9324  0B92  2BB0               	goto	l2966
  9325                           
  9326                           ;i2c1.c: 608: {
  9327                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  9328  0B93  082D               	movf	I2C1_MasterWrite@pdata,w
  9329  0B94  00AB               	movwf	??_I2C1_MasterWrite
  9330  0B95  082B               	movf	??_I2C1_MasterWrite,w
  9331  0B96  00A0               	movwf	I2C1_MasterWriteTRBBuild@pdata
  9332  0B97  0827               	movf	I2C1_MasterWrite@length,w
  9333  0B98  00AC               	movwf	??_I2C1_MasterWrite+1
  9334  0B99  082C               	movf	??_I2C1_MasterWrite+1,w
  9335  0B9A  00A1               	movwf	I2C1_MasterWriteTRBBuild@length
  9336  0B9B  0829               	movf	I2C1_MasterWrite@address+1,w
  9337  0B9C  00A3               	movwf	I2C1_MasterWriteTRBBuild@address+1
  9338  0B9D  0828               	movf	I2C1_MasterWrite@address,w
  9339  0B9E  00A2               	movwf	I2C1_MasterWriteTRBBuild@address
  9340  0B9F  30D1               	movlw	(low (I2C1_MasterWrite@trBlock| 0))& (0+255)
  9341  0BA0  318B  2328  318B   	fcall	_I2C1_MasterWriteTRBBuild
  9342                           
  9343                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9344  0BA3  30D1               	movlw	(low (I2C1_MasterWrite@trBlock| 0))& (0+255)
  9345  0BA4  0020               	movlb	0	; select bank0
  9346  0BA5  00AB               	movwf	??_I2C1_MasterWrite
  9347  0BA6  082B               	movf	??_I2C1_MasterWrite,w
  9348  0BA7  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9349  0BA8  082A               	movf	I2C1_MasterWrite@pflag,w
  9350  0BA9  00AC               	movwf	??_I2C1_MasterWrite+1
  9351  0BAA  082C               	movf	??_I2C1_MasterWrite+1,w
  9352  0BAB  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9353  0BAC  3001               	movlw	1
  9354  0BAD  318C  246F         	fcall	_I2C1_MasterTRBInsert
  9355                           
  9356                           ;i2c1.c: 611: }
  9357  0BAF  0008               	return
  9358  0BB0                     l2966:	
  9359                           
  9360                           ;i2c1.c: 612: else
  9361                           ;i2c1.c: 613: {
  9362                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
  9363  0BB0  0020               	movlb	0	; select bank0
  9364  0BB1  082A               	movf	I2C1_MasterWrite@pflag,w
  9365  0BB2  0086               	movwf	6
  9366  0BB3  0187               	clrf	7
  9367  0BB4  0181               	clrf	1
  9368  0BB5  0A81               	incf	1,f
  9369  0BB6  0008               	return
  9370  0BB7                     __end_of_I2C1_MasterWrite:	
  9371                           
  9372                           	psect	text15
  9373  0B28                     __ptext15:	
  9374 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  9375 ;; Defined at:
  9376 ;;		line 707 in file "mcc_generated_files/i2c1.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  ptrb            1    wreg     PTR struct .
  9379 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterWrite@trBlock(4), 
  9380 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  9381 ;;		 -> MYI2C_ReadPatch@pointerByte(1), MYI2C_Write16EEPROMBytes@writeBuffer(17), MYI2C_Write2LEDBytes@writeBuffer(3), M
      +YI2C_WriteFaders@writeBuffer(9), 
  9382 ;;		 -> MYI2C_ReadFaders@pointerByte(1), 
  9383 ;;  length          1    1[BANK0 ] unsigned char 
  9384 ;;  address         2    2[BANK0 ] unsigned int 
  9385 ;; Auto vars:     Size  Location     Type
  9386 ;;  ptrb            1    6[BANK0 ] PTR struct .
  9387 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterWrite@trBlock(4), 
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  1    wreg      void 
  9390 ;; Registers used:
  9391 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9397 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;Total ram usage:        7 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:    3
  9404 ;; This function calls:
  9405 ;;		Nothing
  9406 ;; This function is called by:
  9407 ;;		_I2C1_MasterWrite
  9408 ;;		_MYI2C_ReadFaders
  9409 ;;		_MYI2C_ReadPatch
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413                           
  9414                           ;psect for function _I2C1_MasterWriteTRBBuild
  9415  0B28                     _I2C1_MasterWriteTRBBuild:	
  9416                           
  9417                           ;incstack = 0
  9418                           ; Regs used in _I2C1_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9419                           ;I2C1_MasterWriteTRBBuild@ptrb stored from wreg
  9420  0B28  0020               	movlb	0	; select bank0
  9421  0B29  00A6               	movwf	I2C1_MasterWriteTRBBuild@ptrb
  9422                           
  9423                           ;i2c1.c: 713: ptrb->address = address << 1;
  9424  0B2A  0823               	movf	I2C1_MasterWriteTRBBuild@address+1,w
  9425  0B2B  00A5               	movwf	??_I2C1_MasterWriteTRBBuild+1
  9426  0B2C  0822               	movf	I2C1_MasterWriteTRBBuild@address,w
  9427  0B2D  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9428  0B2E  35A4               	lslf	??_I2C1_MasterWriteTRBBuild,f
  9429  0B2F  0DA5               	rlf	??_I2C1_MasterWriteTRBBuild+1,f
  9430  0B30  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9431  0B31  0086               	movwf	6
  9432  0B32  0187               	clrf	7
  9433  0B33  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9434  0B34  3FC0               	movwi [0]fsr1
  9435  0B35  0825               	movf	??_I2C1_MasterWriteTRBBuild+1,w
  9436  0B36  3FC1               	movwi [1]fsr1
  9437                           
  9438                           ;i2c1.c: 714: ptrb->length = length;
  9439  0B37  0821               	movf	I2C1_MasterWriteTRBBuild@length,w
  9440  0B38  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9441  0B39  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9442  0B3A  3E02               	addlw	2
  9443  0B3B  0086               	movwf	6
  9444  0B3C  0187               	clrf	7
  9445  0B3D  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9446  0B3E  0081               	movwf	1
  9447                           
  9448                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
  9449  0B3F  0820               	movf	I2C1_MasterWriteTRBBuild@pdata,w
  9450  0B40  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9451  0B41  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9452  0B42  3E03               	addlw	3
  9453  0B43  0086               	movwf	6
  9454  0B44  0187               	clrf	7
  9455  0B45  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9456  0B46  0081               	movwf	1
  9457  0B47  0008               	return
  9458  0B48                     __end_of_I2C1_MasterWriteTRBBuild:	
  9459                           
  9460                           	psect	text16
  9461  0C6F                     __ptext16:	
  9462 ;; *************** function _I2C1_MasterTRBInsert *****************
  9463 ;; Defined at:
  9464 ;;		line 641 in file "mcc_generated_files/i2c1.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  count           1    wreg     unsigned char 
  9467 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  9468 ;;		 -> MYI2C_ReadPatch@readTRB(8), MYI2C_ReadFaders@readTRB(8), I2C1_MasterRead@trBlock(4), I2C1_MasterWrite@trBlock(4)
      +, 
  9469 ;;  pflag           1    1[BANK0 ] PTR enum E14260
  9470 ;;		 -> MYI2C_ReadPatch@status(1), MYI2C_Write16EEPROMBytes@status(1), MYI2C_Write2LEDBytes@status(1), MYI2C_WriteFaders
      +@status(1), 
  9471 ;;		 -> MYI2C_ReadFaders@status(1), 
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;  count           1    3[BANK0 ] unsigned char 
  9474 ;; Return value:  Size  Location     Type
  9475 ;;                  1    wreg      void 
  9476 ;; Registers used:
  9477 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9478 ;; Tracked objects:
  9479 ;;		On entry : 0/0
  9480 ;;		On exit  : 0/0
  9481 ;;		Unchanged: 0/0
  9482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9483 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;Total ram usage:        4 bytes
  9488 ;; Hardware stack levels used:    1
  9489 ;; Hardware stack levels required when called:    3
  9490 ;; This function calls:
  9491 ;;		Nothing
  9492 ;; This function is called by:
  9493 ;;		_I2C1_MasterWrite
  9494 ;;		_I2C1_MasterRead
  9495 ;;		_MYI2C_ReadFaders
  9496 ;;		_MYI2C_ReadPatch
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _I2C1_MasterTRBInsert
  9502  0C6F                     _I2C1_MasterTRBInsert:	
  9503                           
  9504                           ;incstack = 0
  9505                           ; Regs used in _I2C1_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9506                           ;I2C1_MasterTRBInsert@count stored from wreg
  9507  0C6F  0020               	movlb	0	; select bank0
  9508  0C70  00A3               	movwf	I2C1_MasterTRBInsert@count
  9509                           
  9510                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
  9511  0C71  1869               	btfsc	_i2c1_object+2,0
  9512  0C72  2CA3               	goto	l2840
  9513                           
  9514                           ;i2c1.c: 649: {
  9515                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
  9516  0C73  3002               	movlw	2
  9517  0C74  00A2               	movwf	??_I2C1_MasterTRBInsert
  9518  0C75  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9519  0C76  0086               	movwf	6
  9520  0C77  0187               	clrf	7
  9521  0C78  0822               	movf	??_I2C1_MasterTRBInsert,w
  9522  0C79  0081               	movwf	1
  9523                           
  9524                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  9525  0C7A  0820               	movf	I2C1_MasterTRBInsert@ptrb_list,w
  9526  0C7B  00A2               	movwf	??_I2C1_MasterTRBInsert
  9527  0C7C  0A67               	incf	_i2c1_object,w
  9528  0C7D  0086               	movwf	6
  9529  0C7E  0187               	clrf	7
  9530  0C7F  0822               	movf	??_I2C1_MasterTRBInsert,w
  9531  0C80  0081               	movwf	1
  9532                           
  9533                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
  9534  0C81  0823               	movf	I2C1_MasterTRBInsert@count,w
  9535  0C82  00A2               	movwf	??_I2C1_MasterTRBInsert
  9536  0C83  0867               	movf	_i2c1_object,w
  9537  0C84  0086               	movwf	6
  9538  0C85  0187               	clrf	7
  9539  0C86  0822               	movf	??_I2C1_MasterTRBInsert,w
  9540  0C87  0081               	movwf	1
  9541                           
  9542                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
  9543  0C88  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9544  0C89  00A2               	movwf	??_I2C1_MasterTRBInsert
  9545  0C8A  0867               	movf	_i2c1_object,w
  9546  0C8B  3E02               	addlw	2
  9547  0C8C  0086               	movwf	6
  9548  0C8D  0187               	clrf	7
  9549  0C8E  0822               	movf	??_I2C1_MasterTRBInsert,w
  9550  0C8F  0081               	movwf	1
  9551                           
  9552                           ;i2c1.c: 655: i2c1_object.pTrTail++;
  9553  0C90  3003               	movlw	3
  9554  0C91  00A2               	movwf	??_I2C1_MasterTRBInsert
  9555  0C92  0822               	movf	??_I2C1_MasterTRBInsert,w
  9556  0C93  07E7               	addwf	_i2c1_object,f
  9557                           
  9558                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  9559  0C94  0867               	movf	_i2c1_object,w
  9560  0C95  3AD8               	xorlw	(low ((_i2c1_tr_queue| 0+3)))& (0+255)
  9561  0C96  1D03               	skipz
  9562  0C97  2C9C               	goto	l2836
  9563                           
  9564                           ;i2c1.c: 659: {
  9565                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
  9566  0C98  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
  9567  0C99  00A2               	movwf	??_I2C1_MasterTRBInsert
  9568  0C9A  0822               	movf	??_I2C1_MasterTRBInsert,w
  9569  0C9B  00E7               	movwf	_i2c1_object
  9570  0C9C                     l2836:	
  9571                           
  9572                           ;i2c1.c: 662: }
  9573                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
  9574  0C9C  10E9               	bcf	_i2c1_object+2,1
  9575                           
  9576                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  9577  0C9D  0868               	movf	low ((_i2c1_object| 0+1)),w
  9578  0C9E  0667               	xorwf	_i2c1_object,w
  9579  0C9F  1D03               	skipz
  9580  0CA0  2CA8               	goto	l2842
  9581                           
  9582                           ;i2c1.c: 670: {
  9583                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
  9584  0CA1  1469               	bsf	_i2c1_object+2,0
  9585                           
  9586                           ;i2c1.c: 673: }
  9587                           ;i2c1.c: 675: }
  9588  0CA2  2CA8               	goto	l2842
  9589  0CA3                     l2840:	
  9590                           
  9591                           ;i2c1.c: 676: else
  9592                           ;i2c1.c: 677: {
  9593                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
  9594  0CA3  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9595  0CA4  0086               	movwf	6
  9596  0CA5  0187               	clrf	7
  9597  0CA6  0181               	clrf	1
  9598  0CA7  0A81               	incf	1,f
  9599  0CA8                     l2842:	
  9600                           
  9601                           ;i2c1.c: 679: }
  9602                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
  9603  0CA8  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9604  0CA9  0086               	movwf	6
  9605  0CAA  0187               	clrf	7
  9606  0CAB  3002               	movlw	2
  9607  0CAC  0601               	xorwf	1,w
  9608  0CAD  1D03               	btfss	3,2
  9609  0CAE  0008               	return
  9610  0CAF                     l2846:	
  9611                           ;i2c1.c: 683: {
  9612                           ;i2c1.c: 684: while(i2c1_state != S_MASTER_IDLE);
  9613                           
  9614  0CAF  086F               	movf	_i2c1_state,w
  9615  0CB0  1D03               	btfss	3,2
  9616  0CB1  2CAF               	goto	l2846
  9617                           
  9618                           ;i2c1.c: 685: {
  9619                           ;i2c1.c: 688: PIR3bits.SSP1IF = 1;
  9620  0CB2  002E               	movlb	14	; select bank14
  9621  0CB3  140F               	bsf	15,0	;volatile
  9622  0CB4  0008               	return
  9623  0CB5                     __end_of_I2C1_MasterTRBInsert:	
  9624                           
  9625                           	psect	text17
  9626  06D3                     __ptext17:	
  9627 ;; *************** function ___ftdiv *****************
  9628 ;; Defined at:
  9629 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;  f2              3   14[BANK0 ] float 
  9632 ;;  f1              3   17[BANK0 ] float 
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;  f3              3   25[BANK0 ] float 
  9635 ;;  sign            1   29[BANK0 ] unsigned char 
  9636 ;;  exp             1   28[BANK0 ] unsigned char 
  9637 ;;  cntr            1   24[BANK0 ] unsigned char 
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  3   14[BANK0 ] float 
  9640 ;; Registers used:
  9641 ;;		wreg, status,2, status,0, pclath, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9647 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;Total ram usage:       16 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    4
  9654 ;; This function calls:
  9655 ;;		___ftpack
  9656 ;; This function is called by:
  9657 ;;		_main
  9658 ;; This function uses a non-reentrant model
  9659 ;;
  9660                           
  9661                           
  9662                           ;psect for function ___ftdiv
  9663  06D3                     ___ftdiv:	
  9664                           
  9665                           ;incstack = 0
  9666                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9667  06D3  0020               	movlb	0	; select bank0
  9668  06D4  0831               	movf	___ftdiv@f1,w
  9669  06D5  00B4               	movwf	??___ftdiv
  9670  06D6  0832               	movf	___ftdiv@f1+1,w
  9671  06D7  00B5               	movwf	??___ftdiv+1
  9672  06D8  0833               	movf	___ftdiv@f1+2,w
  9673  06D9  00B6               	movwf	??___ftdiv+2
  9674  06DA  1003               	clrc
  9675  06DB  0D35               	rlf	??___ftdiv+1,w
  9676  06DC  0D36               	rlf	??___ftdiv+2,w
  9677  06DD  00B7               	movwf	??___ftdiv+3
  9678  06DE  0837               	movf	??___ftdiv+3,w
  9679  06DF  00BC               	movwf	___ftdiv@exp
  9680  06E0  083C               	movf	___ftdiv@exp,w
  9681  06E1  1D03               	btfss	3,2
  9682  06E2  2EEA               	goto	l3688
  9683  06E3  3000               	movlw	0
  9684  06E4  00AE               	movwf	?___ftdiv
  9685  06E5  3000               	movlw	0
  9686  06E6  00AF               	movwf	?___ftdiv+1
  9687  06E7  3000               	movlw	0
  9688  06E8  00B0               	movwf	?___ftdiv+2
  9689  06E9  0008               	return
  9690  06EA                     l3688:	
  9691  06EA  082E               	movf	___ftdiv@f2,w
  9692  06EB  00B4               	movwf	??___ftdiv
  9693  06EC  082F               	movf	___ftdiv@f2+1,w
  9694  06ED  00B5               	movwf	??___ftdiv+1
  9695  06EE  0830               	movf	___ftdiv@f2+2,w
  9696  06EF  00B6               	movwf	??___ftdiv+2
  9697  06F0  1003               	clrc
  9698  06F1  0D35               	rlf	??___ftdiv+1,w
  9699  06F2  0D36               	rlf	??___ftdiv+2,w
  9700  06F3  00B7               	movwf	??___ftdiv+3
  9701  06F4  0837               	movf	??___ftdiv+3,w
  9702  06F5  00BD               	movwf	___ftdiv@sign
  9703  06F6  083D               	movf	___ftdiv@sign,w
  9704  06F7  1D03               	btfss	3,2
  9705  06F8  2F00               	goto	l3694
  9706  06F9  3000               	movlw	0
  9707  06FA  00AE               	movwf	?___ftdiv
  9708  06FB  3000               	movlw	0
  9709  06FC  00AF               	movwf	?___ftdiv+1
  9710  06FD  3000               	movlw	0
  9711  06FE  00B0               	movwf	?___ftdiv+2
  9712  06FF  0008               	return
  9713  0700                     l3694:	
  9714  0700  3000               	movlw	0
  9715  0701  00B9               	movwf	___ftdiv@f3
  9716  0702  3000               	movlw	0
  9717  0703  00BA               	movwf	___ftdiv@f3+1
  9718  0704  3000               	movlw	0
  9719  0705  00BB               	movwf	___ftdiv@f3+2
  9720  0706  3089               	movlw	137
  9721  0707  073D               	addwf	___ftdiv@sign,w
  9722  0708  00B4               	movwf	??___ftdiv
  9723  0709  0834               	movf	??___ftdiv,w
  9724  070A  02BC               	subwf	___ftdiv@exp,f
  9725  070B  0831               	movf	___ftdiv@f1,w
  9726  070C  00B4               	movwf	??___ftdiv
  9727  070D  0832               	movf	___ftdiv@f1+1,w
  9728  070E  00B5               	movwf	??___ftdiv+1
  9729  070F  0833               	movf	___ftdiv@f1+2,w
  9730  0710  00B6               	movwf	??___ftdiv+2
  9731  0711  3010               	movlw	16
  9732  0712                     u3225:	
  9733  0712  36B6               	lsrf	??___ftdiv+2,f
  9734  0713  0CB5               	rrf	??___ftdiv+1,f
  9735  0714  0CB4               	rrf	??___ftdiv,f
  9736  0715  0B89               	decfsz	9,f
  9737  0716  2F12               	goto	u3225
  9738  0717  0834               	movf	??___ftdiv,w
  9739  0718  00B7               	movwf	??___ftdiv+3
  9740  0719  0837               	movf	??___ftdiv+3,w
  9741  071A  00BD               	movwf	___ftdiv@sign
  9742  071B  082E               	movf	___ftdiv@f2,w
  9743  071C  00B4               	movwf	??___ftdiv
  9744  071D  082F               	movf	___ftdiv@f2+1,w
  9745  071E  00B5               	movwf	??___ftdiv+1
  9746  071F  0830               	movf	___ftdiv@f2+2,w
  9747  0720  00B6               	movwf	??___ftdiv+2
  9748  0721  3010               	movlw	16
  9749  0722                     u3235:	
  9750  0722  36B6               	lsrf	??___ftdiv+2,f
  9751  0723  0CB5               	rrf	??___ftdiv+1,f
  9752  0724  0CB4               	rrf	??___ftdiv,f
  9753  0725  0B89               	decfsz	9,f
  9754  0726  2F22               	goto	u3235
  9755  0727  0834               	movf	??___ftdiv,w
  9756  0728  00B7               	movwf	??___ftdiv+3
  9757  0729  0837               	movf	??___ftdiv+3,w
  9758  072A  06BD               	xorwf	___ftdiv@sign,f
  9759  072B  3080               	movlw	128
  9760  072C  00B4               	movwf	??___ftdiv
  9761  072D  0834               	movf	??___ftdiv,w
  9762  072E  05BD               	andwf	___ftdiv@sign,f
  9763  072F  17B2               	bsf	___ftdiv@f1+1,7
  9764  0730  30FF               	movlw	255
  9765  0731  05B1               	andwf	___ftdiv@f1,f
  9766  0732  30FF               	movlw	255
  9767  0733  05B2               	andwf	___ftdiv@f1+1,f
  9768  0734  3000               	movlw	0
  9769  0735  05B3               	andwf	___ftdiv@f1+2,f
  9770  0736  17AF               	bsf	___ftdiv@f2+1,7
  9771  0737  30FF               	movlw	255
  9772  0738  05AE               	andwf	___ftdiv@f2,f
  9773  0739  30FF               	movlw	255
  9774  073A  05AF               	andwf	___ftdiv@f2+1,f
  9775  073B  3000               	movlw	0
  9776  073C  05B0               	andwf	___ftdiv@f2+2,f
  9777  073D  3018               	movlw	24
  9778  073E  00B4               	movwf	??___ftdiv
  9779  073F  0834               	movf	??___ftdiv,w
  9780  0740  00B8               	movwf	___ftdiv@cntr
  9781  0741                     l3708:	
  9782  0741  3001               	movlw	1
  9783  0742                     u3245:	
  9784  0742  35B9               	lslf	___ftdiv@f3,f
  9785  0743  0DBA               	rlf	___ftdiv@f3+1,f
  9786  0744  0DBB               	rlf	___ftdiv@f3+2,f
  9787  0745  0B89               	decfsz	9,f
  9788  0746  2F42               	goto	u3245
  9789  0747  0830               	movf	___ftdiv@f2+2,w
  9790  0748  0233               	subwf	___ftdiv@f1+2,w
  9791  0749  1D03               	skipz
  9792  074A  2F51               	goto	u3255
  9793  074B  082F               	movf	___ftdiv@f2+1,w
  9794  074C  0232               	subwf	___ftdiv@f1+1,w
  9795  074D  1D03               	skipz
  9796  074E  2F51               	goto	u3255
  9797  074F  082E               	movf	___ftdiv@f2,w
  9798  0750  0231               	subwf	___ftdiv@f1,w
  9799  0751                     u3255:	
  9800  0751  1C03               	skipc
  9801  0752  2F5A               	goto	l3716
  9802  0753  082E               	movf	___ftdiv@f2,w
  9803  0754  02B1               	subwf	___ftdiv@f1,f
  9804  0755  082F               	movf	___ftdiv@f2+1,w
  9805  0756  3BB2               	subwfb	___ftdiv@f1+1,f
  9806  0757  0830               	movf	___ftdiv@f2+2,w
  9807  0758  3BB3               	subwfb	___ftdiv@f1+2,f
  9808  0759  1439               	bsf	___ftdiv@f3,0
  9809  075A                     l3716:	
  9810  075A  3001               	movlw	1
  9811  075B                     u3265:	
  9812  075B  35B1               	lslf	___ftdiv@f1,f
  9813  075C  0DB2               	rlf	___ftdiv@f1+1,f
  9814  075D  0DB3               	rlf	___ftdiv@f1+2,f
  9815  075E  0B89               	decfsz	9,f
  9816  075F  2F5B               	goto	u3265
  9817  0760  3001               	movlw	1
  9818  0761  02B8               	subwf	___ftdiv@cntr,f
  9819  0762  1D03               	btfss	3,2
  9820  0763  2F41               	goto	l3708
  9821  0764  0839               	movf	___ftdiv@f3,w
  9822  0765  00A0               	movwf	___ftpack@arg
  9823  0766  083A               	movf	___ftdiv@f3+1,w
  9824  0767  00A1               	movwf	___ftpack@arg+1
  9825  0768  083B               	movf	___ftdiv@f3+2,w
  9826  0769  00A2               	movwf	___ftpack@arg+2
  9827  076A  083C               	movf	___ftdiv@exp,w
  9828  076B  00B4               	movwf	??___ftdiv
  9829  076C  0834               	movf	??___ftdiv,w
  9830  076D  00A3               	movwf	___ftpack@exp
  9831  076E  083D               	movf	___ftdiv@sign,w
  9832  076F  00B5               	movwf	??___ftdiv+1
  9833  0770  0835               	movf	??___ftdiv+1,w
  9834  0771  00A4               	movwf	___ftpack@sign
  9835  0772  318D  2562         	fcall	___ftpack
  9836  0774  0020               	movlb	0	; select bank0
  9837  0775  0820               	movf	?___ftpack,w
  9838  0776  00AE               	movwf	?___ftdiv
  9839  0777  0821               	movf	?___ftpack+1,w
  9840  0778  00AF               	movwf	?___ftdiv+1
  9841  0779  0822               	movf	?___ftpack+2,w
  9842  077A  00B0               	movwf	?___ftdiv+2
  9843  077B  0008               	return
  9844  077C                     __end_of___ftdiv:	
  9845                           
  9846                           	psect	text18
  9847  0D62                     __ptext18:	
  9848 ;; *************** function ___ftpack *****************
  9849 ;; Defined at:
  9850 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;  arg             3    0[BANK0 ] unsigned um
  9853 ;;  exp             1    3[BANK0 ] unsigned char 
  9854 ;;  sign            1    4[BANK0 ] unsigned char 
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;		None
  9857 ;; Return value:  Size  Location     Type
  9858 ;;                  3    0[BANK0 ] float 
  9859 ;; Registers used:
  9860 ;;		wreg, status,2, status,0
  9861 ;; Tracked objects:
  9862 ;;		On entry : 0/0
  9863 ;;		On exit  : 0/0
  9864 ;;		Unchanged: 0/0
  9865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9866 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9869 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;Total ram usage:        8 bytes
  9871 ;; Hardware stack levels used:    1
  9872 ;; Hardware stack levels required when called:    3
  9873 ;; This function calls:
  9874 ;;		Nothing
  9875 ;; This function is called by:
  9876 ;;		___awtoft
  9877 ;;		___ftdiv
  9878 ;;		___ftmul
  9879 ;;		___lwtoft
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           
  9884                           ;psect for function ___ftpack
  9885  0D62                     ___ftpack:	
  9886                           
  9887                           ;incstack = 0
  9888                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9889  0D62  0020               	movlb	0	; select bank0
  9890  0D63  0823               	movf	___ftpack@exp,w
  9891  0D64  1903               	btfsc	3,2
  9892  0D65  2D6B               	goto	l2796
  9893  0D66  0822               	movf	___ftpack@arg+2,w
  9894  0D67  0421               	iorwf	___ftpack@arg+1,w
  9895  0D68  0420               	iorwf	___ftpack@arg,w
  9896  0D69  1D03               	skipz
  9897  0D6A  2D7C               	goto	l2802
  9898  0D6B                     l2796:	
  9899  0D6B  3000               	movlw	0
  9900  0D6C  00A0               	movwf	?___ftpack
  9901  0D6D  3000               	movlw	0
  9902  0D6E  00A1               	movwf	?___ftpack+1
  9903  0D6F  3000               	movlw	0
  9904  0D70  00A2               	movwf	?___ftpack+2
  9905  0D71  0008               	return
  9906  0D72                     l2800:	
  9907  0D72  3001               	movlw	1
  9908  0D73  00A5               	movwf	??___ftpack
  9909  0D74  0825               	movf	??___ftpack,w
  9910  0D75  07A3               	addwf	___ftpack@exp,f
  9911  0D76  3001               	movlw	1
  9912  0D77                     u1995:	
  9913  0D77  36A2               	lsrf	___ftpack@arg+2,f
  9914  0D78  0CA1               	rrf	___ftpack@arg+1,f
  9915  0D79  0CA0               	rrf	___ftpack@arg,f
  9916  0D7A  0B89               	decfsz	9,f
  9917  0D7B  2D77               	goto	u1995
  9918  0D7C                     l2802:	
  9919  0D7C  30FE               	movlw	254
  9920  0D7D  0522               	andwf	___ftpack@arg+2,w
  9921  0D7E  1903               	btfsc	3,2
  9922  0D7F  2D95               	goto	l1111
  9923  0D80  2D72               	goto	l2800
  9924  0D81                     l2804:	
  9925  0D81  3001               	movlw	1
  9926  0D82  00A5               	movwf	??___ftpack
  9927  0D83  0825               	movf	??___ftpack,w
  9928  0D84  07A3               	addwf	___ftpack@exp,f
  9929  0D85  3001               	movlw	1
  9930  0D86  07A0               	addwf	___ftpack@arg,f
  9931  0D87  3000               	movlw	0
  9932  0D88  1803               	skipnc
  9933  0D89  3001               	movlw	1
  9934  0D8A  07A1               	addwf	___ftpack@arg+1,f
  9935  0D8B  3000               	movlw	0
  9936  0D8C  1803               	skipnc
  9937  0D8D  3001               	movlw	1
  9938  0D8E  07A2               	addwf	___ftpack@arg+2,f
  9939  0D8F  3001               	movlw	1
  9940  0D90                     u2015:	
  9941  0D90  36A2               	lsrf	___ftpack@arg+2,f
  9942  0D91  0CA1               	rrf	___ftpack@arg+1,f
  9943  0D92  0CA0               	rrf	___ftpack@arg,f
  9944  0D93  0B89               	decfsz	9,f
  9945  0D94  2D90               	goto	u2015
  9946  0D95                     l1111:	
  9947  0D95  30FF               	movlw	255
  9948  0D96  0522               	andwf	___ftpack@arg+2,w
  9949  0D97  1903               	btfsc	3,2
  9950  0D98  2DA2               	goto	l2812
  9951  0D99  2D81               	goto	l2804
  9952  0D9A                     l2810:	
  9953  0D9A  3001               	movlw	1
  9954  0D9B  02A3               	subwf	___ftpack@exp,f
  9955  0D9C  3001               	movlw	1
  9956  0D9D                     u2035:	
  9957  0D9D  35A0               	lslf	___ftpack@arg,f
  9958  0D9E  0DA1               	rlf	___ftpack@arg+1,f
  9959  0D9F  0DA2               	rlf	___ftpack@arg+2,f
  9960  0DA0  0B89               	decfsz	9,f
  9961  0DA1  2D9D               	goto	u2035
  9962  0DA2                     l2812:	
  9963  0DA2  1BA1               	btfsc	___ftpack@arg+1,7
  9964  0DA3  2DA8               	goto	l1118
  9965  0DA4  3002               	movlw	2
  9966  0DA5  0223               	subwf	___ftpack@exp,w
  9967  0DA6  1803               	skipnc
  9968  0DA7  2D9A               	goto	l2810
  9969  0DA8                     l1118:	
  9970  0DA8  1823               	btfsc	___ftpack@exp,0
  9971  0DA9  2DB0               	goto	l1119
  9972  0DAA  30FF               	movlw	255
  9973  0DAB  05A0               	andwf	___ftpack@arg,f
  9974  0DAC  307F               	movlw	127
  9975  0DAD  05A1               	andwf	___ftpack@arg+1,f
  9976  0DAE  30FF               	movlw	255
  9977  0DAF  05A2               	andwf	___ftpack@arg+2,f
  9978  0DB0                     l1119:	
  9979  0DB0  1003               	clrc
  9980  0DB1  0CA3               	rrf	___ftpack@exp,f
  9981  0DB2  0823               	movf	___ftpack@exp,w
  9982  0DB3  00A5               	movwf	??___ftpack
  9983  0DB4  01A6               	clrf	??___ftpack+1
  9984  0DB5  01A7               	clrf	??___ftpack+2
  9985  0DB6  3010               	movlw	16
  9986  0DB7                     u2075:	
  9987  0DB7  35A5               	lslf	??___ftpack,f
  9988  0DB8  0DA6               	rlf	??___ftpack+1,f
  9989  0DB9  0DA7               	rlf	??___ftpack+2,f
  9990  0DBA  0B89               	decfsz	9,f
  9991  0DBB  2DB7               	goto	u2075
  9992  0DBC  0825               	movf	??___ftpack,w
  9993  0DBD  04A0               	iorwf	___ftpack@arg,f
  9994  0DBE  0826               	movf	??___ftpack+1,w
  9995  0DBF  04A1               	iorwf	___ftpack@arg+1,f
  9996  0DC0  0827               	movf	??___ftpack+2,w
  9997  0DC1  04A2               	iorwf	___ftpack@arg+2,f
  9998  0DC2  0824               	movf	___ftpack@sign,w
  9999  0DC3  1903               	btfsc	3,2
 10000  0DC4  0008               	return
 10001  0DC5  17A2               	bsf	___ftpack@arg+2,7
 10002  0DC6  0008               	return
 10003  0DC7                     __end_of___ftpack:	
 10004                           
 10005                           	psect	text19
 10006  09EF                     __ptext19:	
 10007 ;; *************** function _SYSTEM_Initialize *****************
 10008 ;; Defined at:
 10009 ;;		line 83 in file "mcc_generated_files/mcc.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;		None
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;		None
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      void 
 10016 ;; Registers used:
 10017 ;;		wreg, status,2, status,0, pclath, cstack
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;Total ram usage:        0 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    4
 10030 ;; This function calls:
 10031 ;;		_ADCC_Initialize
 10032 ;;		_I2C1_Initialize
 10033 ;;		_OSCILLATOR_Initialize
 10034 ;;		_PIN_MANAGER_Initialize
 10035 ;; This function is called by:
 10036 ;;		_main
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           
 10041                           ;psect for function _SYSTEM_Initialize
 10042  09EF                     _SYSTEM_Initialize:	
 10043                           
 10044                           ;mcc.c: 86: PIN_MANAGER_Initialize();
 10045                           
 10046                           ;incstack = 0
 10047                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10048  09EF  318B  23F0  3189   	fcall	_PIN_MANAGER_Initialize
 10049                           
 10050                           ;mcc.c: 87: OSCILLATOR_Initialize();
 10051  09F2  3189  21DB  3189   	fcall	_OSCILLATOR_Initialize
 10052                           
 10053                           ;mcc.c: 88: I2C1_Initialize();
 10054  09F5  318A  2270  3189   	fcall	_I2C1_Initialize
 10055                           
 10056                           ;mcc.c: 89: ADCC_Initialize();
 10057  09F8  318A  22B8         	fcall	_ADCC_Initialize
 10058  09FA  0008               	return
 10059  09FB                     __end_of_SYSTEM_Initialize:	
 10060                           
 10061                           	psect	text20
 10062  0BF0                     __ptext20:	
 10063 ;; *************** function _PIN_MANAGER_Initialize *****************
 10064 ;; Defined at:
 10065 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;  state           1    0[BANK0 ] unsigned char 
 10070 ;; Return value:  Size  Location     Type
 10071 ;;                  1    wreg      void 
 10072 ;; Registers used:
 10073 ;;		wreg, status,2, status,0
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;Total ram usage:        1 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    3
 10086 ;; This function calls:
 10087 ;;		Nothing
 10088 ;; This function is called by:
 10089 ;;		_SYSTEM_Initialize
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           
 10094                           ;psect for function _PIN_MANAGER_Initialize
 10095  0BF0                     _PIN_MANAGER_Initialize:	
 10096                           
 10097                           ;pin_manager.c: 57: LATA = 0x00;
 10098                           
 10099                           ;incstack = 0
 10100                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 10101  0BF0  0020               	movlb	0	; select bank0
 10102  0BF1  0196               	clrf	22	;volatile
 10103                           
 10104                           ;pin_manager.c: 58: LATB = 0x00;
 10105  0BF2  0197               	clrf	23	;volatile
 10106                           
 10107                           ;pin_manager.c: 59: LATC = 0x00;
 10108  0BF3  0198               	clrf	24	;volatile
 10109                           
 10110                           ;pin_manager.c: 64: TRISA = 0x7F;
 10111  0BF4  307F               	movlw	127
 10112  0BF5  0091               	movwf	17	;volatile
 10113                           
 10114                           ;pin_manager.c: 65: TRISB = 0x30;
 10115  0BF6  3030               	movlw	48
 10116  0BF7  0092               	movwf	18	;volatile
 10117                           
 10118                           ;pin_manager.c: 66: TRISC = 0x1D;
 10119  0BF8  301D               	movlw	29
 10120  0BF9  0093               	movwf	19	;volatile
 10121                           
 10122                           ;pin_manager.c: 71: ANSELC = 0xE7;
 10123  0BFA  30E7               	movlw	231
 10124  0BFB  003E               	movlb	30	; select bank30
 10125  0BFC  00CE               	movwf	78	;volatile
 10126                           
 10127                           ;pin_manager.c: 72: ANSELB = 0xCF;
 10128  0BFD  30CF               	movlw	207
 10129  0BFE  00C3               	movwf	67	;volatile
 10130                           
 10131                           ;pin_manager.c: 73: ANSELA = 0xFF;
 10132  0BFF  30FF               	movlw	255
 10133  0C00  00B8               	movwf	56	;volatile
 10134                           
 10135                           ;pin_manager.c: 78: WPUE = 0x00;
 10136  0C01  01E5               	clrf	101	;volatile
 10137                           
 10138                           ;pin_manager.c: 79: WPUB = 0x30;
 10139  0C02  3030               	movlw	48
 10140  0C03  00C4               	movwf	68	;volatile
 10141                           
 10142                           ;pin_manager.c: 80: WPUA = 0x00;
 10143  0C04  01B9               	clrf	57	;volatile
 10144                           
 10145                           ;pin_manager.c: 81: WPUC = 0x00;
 10146  0C05  01CF               	clrf	79	;volatile
 10147                           
 10148                           ;pin_manager.c: 86: ODCONA = 0x00;
 10149  0C06  01BA               	clrf	58	;volatile
 10150                           
 10151                           ;pin_manager.c: 87: ODCONB = 0x00;
 10152  0C07  01C5               	clrf	69	;volatile
 10153                           
 10154                           ;pin_manager.c: 88: ODCONC = 0x00;
 10155  0C08  01D0               	clrf	80	;volatile
 10156                           
 10157                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
 10158  0C09  3000               	movlw	0
 10159  0C0A  1B8B               	btfsc	11,7	;volatile
 10160  0C0B  3001               	movlw	1
 10161  0C0C  0020               	movlb	0	; select bank0
 10162  0C0D  00A0               	movwf	PIN_MANAGER_Initialize@state
 10163                           
 10164                           ;pin_manager.c: 96: GIE = 0;
 10165  0C0E  138B               	bcf	11,7	;volatile
 10166                           
 10167                           ;pin_manager.c: 97: PPSLOCK = 0x55;
 10168  0C0F  3055               	movlw	85
 10169  0C10  003D               	movlb	29	; select bank29
 10170  0C11  008F               	movwf	15	;volsfr
 10171                           
 10172                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
 10173  0C12  30AA               	movlw	170
 10174  0C13  008F               	movwf	15	;volsfr
 10175                           
 10176                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
 10177  0C14  100F               	bcf	15,0	;volsfr
 10178                           
 10179                           ;pin_manager.c: 101: SSP1DATPPSbits.SSP1DATPPS = 0x13;
 10180  0C15  0846               	movf	70,w	;volatile
 10181  0C16  39E0               	andlw	-32
 10182  0C17  3813               	iorlw	19
 10183  0C18  00C6               	movwf	70	;volatile
 10184                           
 10185                           ;pin_manager.c: 102: SSP1CLKPPSbits.SSP1CLKPPS = 0x14;
 10186  0C19  0845               	movf	69,w	;volatile
 10187  0C1A  39E0               	andlw	-32
 10188  0C1B  3814               	iorlw	20
 10189  0C1C  00C5               	movwf	69	;volatile
 10190                           
 10191                           ;pin_manager.c: 103: RC3PPS = 0x15;
 10192  0C1D  3015               	movlw	21
 10193  0C1E  003E               	movlb	30	; select bank30
 10194  0C1F  00A3               	movwf	35	;volatile
 10195                           
 10196                           ;pin_manager.c: 104: RC4PPS = 0x14;
 10197  0C20  3014               	movlw	20
 10198  0C21  00A4               	movwf	36	;volatile
 10199                           
 10200                           ;pin_manager.c: 106: PPSLOCK = 0x55;
 10201  0C22  3055               	movlw	85
 10202  0C23  003D               	movlb	29	; select bank29
 10203  0C24  008F               	movwf	15	;volsfr
 10204                           
 10205                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
 10206  0C25  30AA               	movlw	170
 10207  0C26  008F               	movwf	15	;volsfr
 10208                           
 10209                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x01;
 10210  0C27  140F               	bsf	15,0	;volsfr
 10211                           
 10212                           ;pin_manager.c: 110: GIE = state;
 10213  0C28  0020               	movlb	0	; select bank0
 10214  0C29  1C20               	btfss	PIN_MANAGER_Initialize@state,0
 10215  0C2A  2C2D               	goto	u4050
 10216  0C2B  178B               	bsf	11,7	;volatile
 10217  0C2C  0008               	return
 10218  0C2D                     u4050:	
 10219  0C2D  138B               	bcf	11,7	;volatile
 10220  0C2E  0008               	return
 10221  0C2F                     __end_of_PIN_MANAGER_Initialize:	
 10222                           
 10223                           	psect	text21
 10224  09DB                     __ptext21:	
 10225 ;; *************** function _OSCILLATOR_Initialize *****************
 10226 ;; Defined at:
 10227 ;;		line 92 in file "mcc_generated_files/mcc.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;		None
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;		None
 10232 ;; Return value:  Size  Location     Type
 10233 ;;                  1    wreg      void 
 10234 ;; Registers used:
 10235 ;;		wreg, status,2
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;Total ram usage:        0 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; Hardware stack levels required when called:    3
 10248 ;; This function calls:
 10249 ;;		Nothing
 10250 ;; This function is called by:
 10251 ;;		_SYSTEM_Initialize
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           
 10256                           ;psect for function _OSCILLATOR_Initialize
 10257  09DB                     _OSCILLATOR_Initialize:	
 10258                           
 10259                           ;mcc.c: 95: OSCCON1 = 0x60;
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10263  09DB  3060               	movlw	96
 10264  09DC  0031               	movlb	17	; select bank17
 10265  09DD  008D               	movwf	13	;volatile
 10266                           
 10267                           ;mcc.c: 97: OSCCON3 = 0x00;
 10268  09DE  018F               	clrf	15	;volatile
 10269                           
 10270                           ;mcc.c: 99: OSCEN = 0x00;
 10271  09DF  0191               	clrf	17	;volatile
 10272                           
 10273                           ;mcc.c: 101: OSCFRQ = 0x06;
 10274  09E0  3006               	movlw	6
 10275  09E1  0093               	movwf	19	;volatile
 10276                           
 10277                           ;mcc.c: 103: OSCTUNE = 0x00;
 10278  09E2  0192               	clrf	18	;volatile
 10279  09E3  0008               	return
 10280  09E4                     __end_of_OSCILLATOR_Initialize:	
 10281                           
 10282                           	psect	text22
 10283  0A70                     __ptext22:	
 10284 ;; *************** function _I2C1_Initialize *****************
 10285 ;; Defined at:
 10286 ;;		line 198 in file "mcc_generated_files/i2c1.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;		None
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;		None
 10291 ;; Return value:  Size  Location     Type
 10292 ;;                  1    wreg      void 
 10293 ;; Registers used:
 10294 ;;		wreg, status,2
 10295 ;; Tracked objects:
 10296 ;;		On entry : 0/0
 10297 ;;		On exit  : 0/0
 10298 ;;		Unchanged: 0/0
 10299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;Total ram usage:        1 bytes
 10305 ;; Hardware stack levels used:    1
 10306 ;; Hardware stack levels required when called:    3
 10307 ;; This function calls:
 10308 ;;		Nothing
 10309 ;; This function is called by:
 10310 ;;		_SYSTEM_Initialize
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           
 10315                           ;psect for function _I2C1_Initialize
 10316  0A70                     _I2C1_Initialize:	
 10317                           
 10318                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
 10319                           
 10320                           ;incstack = 0
 10321                           ; Regs used in _I2C1_Initialize: [wreg+status,2]
 10322  0A70  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 10323  0A71  0020               	movlb	0	; select bank0
 10324  0A72  00A0               	movwf	??_I2C1_Initialize
 10325  0A73  0820               	movf	??_I2C1_Initialize,w
 10326  0A74  00E8               	movwf	low ((_i2c1_object| 0+1))
 10327                           
 10328                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
 10329  0A75  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 10330  0A76  00A0               	movwf	??_I2C1_Initialize
 10331  0A77  0820               	movf	??_I2C1_Initialize,w
 10332  0A78  00E7               	movwf	_i2c1_object
 10333                           
 10334                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
 10335  0A79  14E9               	bsf	_i2c1_object+2,1
 10336                           
 10337                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
 10338  0A7A  1069               	bcf	_i2c1_object+2,0
 10339                           
 10340                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
 10341  0A7B  01EB               	clrf	_i2c1_object+4
 10342                           
 10343                           ;i2c1.c: 208: SSP1STAT = 0x00;
 10344  0A7C  0023               	movlb	3	; select bank3
 10345  0A7D  018F               	clrf	15	;volatile
 10346                           
 10347                           ;i2c1.c: 210: SSP1CON1 = 0x28;
 10348  0A7E  3028               	movlw	40
 10349  0A7F  0090               	movwf	16	;volatile
 10350                           
 10351                           ;i2c1.c: 212: SSP1CON3 = 0x00;
 10352  0A80  0192               	clrf	18	;volatile
 10353                           
 10354                           ;i2c1.c: 214: SSP1ADD = 0x13;
 10355  0A81  3013               	movlw	19
 10356  0A82  008D               	movwf	13	;volatile
 10357                           
 10358                           ;i2c1.c: 218: PIR3bits.SSP1IF = 0;
 10359  0A83  002E               	movlb	14	; select bank14
 10360  0A84  100F               	bcf	15,0	;volatile
 10361                           
 10362                           ;i2c1.c: 220: PIE3bits.SSP1IE = 1;
 10363  0A85  1419               	bsf	25,0	;volatile
 10364  0A86  0008               	return
 10365  0A87                     __end_of_I2C1_Initialize:	
 10366                           
 10367                           	psect	text23
 10368  0AB8                     __ptext23:	
 10369 ;; *************** function _ADCC_Initialize *****************
 10370 ;; Defined at:
 10371 ;;		line 62 in file "mcc_generated_files/adcc.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;		None
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;		None
 10376 ;; Return value:  Size  Location     Type
 10377 ;;                  1    wreg      void 
 10378 ;; Registers used:
 10379 ;;		wreg, status,2
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;Total ram usage:        0 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    3
 10392 ;; This function calls:
 10393 ;;		Nothing
 10394 ;; This function is called by:
 10395 ;;		_SYSTEM_Initialize
 10396 ;; This function uses a non-reentrant model
 10397 ;;
 10398                           
 10399                           
 10400                           ;psect for function _ADCC_Initialize
 10401  0AB8                     _ADCC_Initialize:	
 10402                           
 10403                           ;adcc.c: 66: ADCON1 = 0x00;
 10404                           
 10405                           ;incstack = 0
 10406                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 10407  0AB8  0021               	movlb	1	; select bank1
 10408  0AB9  0194               	clrf	20	;volatile
 10409                           
 10410                           ;adcc.c: 68: ADCON2 = 0x00;
 10411  0ABA  0195               	clrf	21	;volatile
 10412                           
 10413                           ;adcc.c: 70: ADCON3 = 0x00;
 10414  0ABB  0196               	clrf	22	;volatile
 10415                           
 10416                           ;adcc.c: 72: ADACT = 0x00;
 10417  0ABC  0199               	clrf	25	;volatile
 10418                           
 10419                           ;adcc.c: 74: ADSTAT = 0x00;
 10420  0ABD  0197               	clrf	23	;volatile
 10421                           
 10422                           ;adcc.c: 76: ADCLK = 0x03;
 10423  0ABE  3003               	movlw	3
 10424  0ABF  0098               	movwf	24	;volatile
 10425                           
 10426                           ;adcc.c: 78: ADREF = 0x00;
 10427  0AC0  019A               	clrf	26	;volatile
 10428                           
 10429                           ;adcc.c: 80: ADCAP = 0x00;
 10430  0AC1  019B               	clrf	27	;volatile
 10431                           
 10432                           ;adcc.c: 82: ADPRE = 0x00;
 10433  0AC2  019C               	clrf	28	;volatile
 10434                           
 10435                           ;adcc.c: 84: ADACQ = 0x32;
 10436  0AC3  3032               	movlw	50
 10437  0AC4  009D               	movwf	29	;volatile
 10438                           
 10439                           ;adcc.c: 86: ADPCH = 0x00;
 10440  0AC5  019E               	clrf	30	;volatile
 10441                           
 10442                           ;adcc.c: 88: ADRPT = 0x00;
 10443  0AC6  0022               	movlb	2	; select bank2
 10444  0AC7  018D               	clrf	13	;volatile
 10445                           
 10446                           ;adcc.c: 90: ADLTHL = 0x00;
 10447  0AC8  018E               	clrf	14	;volatile
 10448                           
 10449                           ;adcc.c: 92: ADLTHH = 0x00;
 10450  0AC9  018F               	clrf	15	;volatile
 10451                           
 10452                           ;adcc.c: 94: ADUTHL = 0x00;
 10453  0ACA  0190               	clrf	16	;volatile
 10454                           
 10455                           ;adcc.c: 96: ADUTHH = 0x00;
 10456  0ACB  0191               	clrf	17	;volatile
 10457                           
 10458                           ;adcc.c: 98: ADSTPTL = 0x00;
 10459  0ACC  0192               	clrf	18	;volatile
 10460                           
 10461                           ;adcc.c: 100: ADSTPTH = 0x00;
 10462  0ACD  0193               	clrf	19	;volatile
 10463                           
 10464                           ;adcc.c: 103: ADCON0 = 0x84;
 10465  0ACE  3084               	movlw	132
 10466  0ACF  0021               	movlb	1	; select bank1
 10467  0AD0  0093               	movwf	19	;volatile
 10468  0AD1  0008               	return
 10469  0AD2                     __end_of_ADCC_Initialize:	
 10470                           
 10471                           	psect	text24
 10472  0A13                     __ptext24:	
 10473 ;; *************** function _LED7SegSetup *****************
 10474 ;; Defined at:
 10475 ;;		line 31 in file "LED7Seg.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;		None
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;		None
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      void 
 10482 ;; Registers used:
 10483 ;;		None
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;Total ram usage:        0 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    3
 10496 ;; This function calls:
 10497 ;;		Nothing
 10498 ;; This function is called by:
 10499 ;;		_main
 10500 ;; This function uses a non-reentrant model
 10501 ;;
 10502                           
 10503                           
 10504                           ;psect for function _LED7SegSetup
 10505  0A13                     _LED7SegSetup:	
 10506                           
 10507                           ;incstack = 0
 10508                           ; Regs used in _LED7SegSetup: []
 10509                           ;LED7Seg.c: 34: do { ANSELCbits.ANSC5 = 0; } while(0);
 10510  0A13  003E               	movlb	30	; select bank30
 10511  0A14  12CE               	bcf	78,5	;volatile
 10512                           
 10513                           ;LED7Seg.c: 35: do { TRISCbits.TRISC5 = 0; } while(0);
 10514  0A15  0020               	movlb	0	; select bank0
 10515  0A16  1293               	bcf	19,5	;volatile
 10516                           
 10517                           ;LED7Seg.c: 38: do { ANSELCbits.ANSC6 = 0; } while(0);
 10518  0A17  003E               	movlb	30	; select bank30
 10519  0A18  134E               	bcf	78,6	;volatile
 10520                           
 10521                           ;LED7Seg.c: 39: do { TRISCbits.TRISC6 = 0; } while(0);
 10522  0A19  0020               	movlb	0	; select bank0
 10523  0A1A  1313               	bcf	19,6	;volatile
 10524                           
 10525                           ;LED7Seg.c: 42: do { ANSELCbits.ANSC7 = 0; } while(0);
 10526  0A1B  003E               	movlb	30	; select bank30
 10527  0A1C  13CE               	bcf	78,7	;volatile
 10528                           
 10529                           ;LED7Seg.c: 43: do { TRISCbits.TRISC7 = 0; } while(0);
 10530  0A1D  0020               	movlb	0	; select bank0
 10531  0A1E  1393               	bcf	19,7	;volatile
 10532  0A1F  0008               	return
 10533  0A20                     __end_of_LED7SegSetup:	
 10534                           
 10535                           	psect	text25
 10536  0BB7                     __ptext25:	
 10537 ;; *************** function _LED7SegDisplayValueByDigit *****************
 10538 ;; Defined at:
 10539 ;;		line 95 in file "LED7Seg.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;  iTensDigit      2   20[BANK0 ] unsigned int 
 10542 ;;  iUnitsDigit     2   22[BANK0 ] unsigned int 
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;  iTensCode       2   24[BANK0 ] unsigned int 
 10545 ;; Return value:  Size  Location     Type
 10546 ;;                  1    wreg      void 
 10547 ;; Registers used:
 10548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10549 ;; Tracked objects:
 10550 ;;		On entry : 0/0
 10551 ;;		On exit  : 0/0
 10552 ;;		Unchanged: 0/0
 10553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10554 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;Total ram usage:        6 bytes
 10559 ;; Hardware stack levels used:    1
 10560 ;; Hardware stack levels required when called:    7
 10561 ;; This function calls:
 10562 ;;		_LED7SegShiftOutPulseClock
 10563 ;; This function is called by:
 10564 ;;		_main
 10565 ;;		_LED7SegDisplayValue
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           
 10570                           ;psect for function _LED7SegDisplayValueByDigit
 10571  0BB7                     _LED7SegDisplayValueByDigit:	
 10572                           
 10573                           ;LED7Seg.c: 99: if(iUnitsDigit>9) iUnitsDigit=9;
 10574                           
 10575                           ;LED7Seg.c: 96: unsigned int iTensCode;
 10576                           ;LED7Seg.c: 98: if(0>iUnitsDigit) iUnitsDigit=0;
 10577                           
 10578                           ;incstack = 0
 10579                           ; Regs used in _LED7SegDisplayValueByDigit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10580  0BB7  3000               	movlw	0
 10581  0BB8  0020               	movlb	0	; select bank0
 10582  0BB9  0237               	subwf	LED7SegDisplayValueByDigit@iUnitsDigit+1,w
 10583  0BBA  300A               	movlw	10
 10584  0BBB  1903               	skipnz
 10585  0BBC  0236               	subwf	LED7SegDisplayValueByDigit@iUnitsDigit,w
 10586  0BBD  1C03               	skipc
 10587  0BBE  2BC3               	goto	l4368
 10588  0BBF  3009               	movlw	9
 10589  0BC0  00B6               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit
 10590  0BC1  3000               	movlw	0
 10591  0BC2  00B7               	movwf	LED7SegDisplayValueByDigit@iUnitsDigit+1
 10592  0BC3                     l4368:	
 10593                           ;LED7Seg.c: 101: if(0>iTensDigit) iTensDigit=0;
 10594                           
 10595                           
 10596                           ;LED7Seg.c: 102: if(iTensDigit>9) iTensDigit=9;
 10597  0BC3  3000               	movlw	0
 10598  0BC4  0235               	subwf	LED7SegDisplayValueByDigit@iTensDigit+1,w
 10599  0BC5  300A               	movlw	10
 10600  0BC6  1903               	skipnz
 10601  0BC7  0234               	subwf	LED7SegDisplayValueByDigit@iTensDigit,w
 10602  0BC8  1C03               	skipc
 10603  0BC9  2BCE               	goto	l4372
 10604  0BCA  3009               	movlw	9
 10605  0BCB  00B4               	movwf	LED7SegDisplayValueByDigit@iTensDigit
 10606  0BCC  3000               	movlw	0
 10607  0BCD  00B5               	movwf	LED7SegDisplayValueByDigit@iTensDigit+1
 10608  0BCE                     l4372:	
 10609                           
 10610                           ;LED7Seg.c: 104: iTensCode=segdisp[iTensDigit];
 10611  0BCE  3534               	lslf	LED7SegDisplayValueByDigit@iTensDigit,w
 10612  0BCF  3E20               	addlw	(low (_segdisp| (0+256)))& (0+255)
 10613  0BD0  0086               	movwf	6
 10614  0BD1  3001               	movlw	1	; select bank2/3
 10615  0BD2  0087               	movwf	7
 10616  0BD3  3F40               	moviw [0]fsr1
 10617  0BD4  00B8               	movwf	LED7SegDisplayValueByDigit@iTensCode
 10618  0BD5  3F41               	moviw [1]fsr1
 10619  0BD6  00B9               	movwf	LED7SegDisplayValueByDigit@iTensCode+1
 10620                           
 10621                           ;LED7Seg.c: 105: if(0==iTensDigit) iTensCode=255;
 10622  0BD7  0834               	movf	LED7SegDisplayValueByDigit@iTensDigit,w
 10623  0BD8  0435               	iorwf	LED7SegDisplayValueByDigit@iTensDigit+1,w
 10624  0BD9  1D03               	btfss	3,2
 10625  0BDA  2BDF               	goto	l4378
 10626  0BDB  30FF               	movlw	255
 10627  0BDC  00B8               	movwf	LED7SegDisplayValueByDigit@iTensCode
 10628  0BDD  3000               	movlw	0
 10629  0BDE  00B9               	movwf	LED7SegDisplayValueByDigit@iTensCode+1
 10630  0BDF                     l4378:	
 10631                           
 10632                           ;LED7Seg.c: 107: LED7SegShiftOutPulseClock( segdisp[iUnitsDigit]);
 10633  0BDF  3536               	lslf	LED7SegDisplayValueByDigit@iUnitsDigit,w
 10634  0BE0  3E20               	addlw	(low (_segdisp| (0+256)))& (0+255)
 10635  0BE1  0086               	movwf	6
 10636  0BE2  3001               	movlw	1	; select bank2/3
 10637  0BE3  0087               	movwf	7
 10638  0BE4  0801               	movf	1,w
 10639  0BE5  318A  22EE  318B   	fcall	_LED7SegShiftOutPulseClock
 10640                           
 10641                           ;LED7Seg.c: 108: LED7SegShiftOutPulseClock( iTensCode );
 10642  0BE8  0020               	movlb	0	; select bank0
 10643  0BE9  0838               	movf	LED7SegDisplayValueByDigit@iTensCode,w
 10644  0BEA  318A  22EE         	fcall	_LED7SegShiftOutPulseClock
 10645                           
 10646                           ;LED7Seg.c: 110: do { LATCbits.LATC5 = 1; } while(0);
 10647  0BEC  0020               	movlb	0	; select bank0
 10648  0BED  1698               	bsf	24,5	;volatile
 10649                           
 10650                           ;LED7Seg.c: 111: do { LATCbits.LATC5 = 0; } while(0);
 10651  0BEE  1298               	bcf	24,5	;volatile
 10652  0BEF  0008               	return
 10653  0BF0                     __end_of_LED7SegDisplayValueByDigit:	
 10654                           
 10655                           	psect	text26
 10656  0AEE                     __ptext26:	
 10657 ;; *************** function _LED7SegShiftOutPulseClock *****************
 10658 ;; Defined at:
 10659 ;;		line 69 in file "LED7Seg.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;  val             1    wreg     unsigned char 
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;  val             1   18[BANK0 ] unsigned char 
 10664 ;;  i               1   19[BANK0 ] unsigned char 
 10665 ;; Return value:  Size  Location     Type
 10666 ;;                  1    wreg      void 
 10667 ;; Registers used:
 10668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;Total ram usage:        3 bytes
 10679 ;; Hardware stack levels used:    1
 10680 ;; Hardware stack levels required when called:    6
 10681 ;; This function calls:
 10682 ;;		_LED7SegPinWrite
 10683 ;;		_LED7SegPulseClock
 10684 ;; This function is called by:
 10685 ;;		_LED7SegDisplayValueByDigit
 10686 ;;		_LED7SegBlankDisplay
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           
 10691                           ;psect for function _LED7SegShiftOutPulseClock
 10692  0AEE                     _LED7SegShiftOutPulseClock:	
 10693                           
 10694                           ;incstack = 0
 10695                           ; Regs used in _LED7SegShiftOutPulseClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10696                           ;LED7SegShiftOutPulseClock@val stored from wreg
 10697  0AEE  0020               	movlb	0	; select bank0
 10698  0AEF  00B2               	movwf	LED7SegShiftOutPulseClock@val
 10699                           
 10700                           ;LED7Seg.c: 71: char i;
 10701                           ;LED7Seg.c: 75: for (i = 0; i < 8; i++) {
 10702  0AF0  01B3               	clrf	LED7SegShiftOutPulseClock@i
 10703  0AF1                     L5:	
 10704  0AF1  3008               	movlw	8
 10705  0AF2  0233               	subwf	LED7SegShiftOutPulseClock@i,w
 10706  0AF3  1803               	btfsc	3,0
 10707  0AF4  0008               	return
 10708                           
 10709                           ;LED7Seg.c: 76: LED7SegPinWrite((val & (1 << i)));
 10710  0AF5  3001               	movlw	1
 10711  0AF6  00B1               	movwf	??_LED7SegShiftOutPulseClock
 10712  0AF7  0A33               	incf	LED7SegShiftOutPulseClock@i,w
 10713  0AF8  2AFA               	goto	u4084
 10714  0AF9                     u4085:	
 10715  0AF9  35B1               	lslf	??_LED7SegShiftOutPulseClock,f
 10716  0AFA                     u4084:	
 10717  0AFA  0B89               	decfsz	9,f
 10718  0AFB  2AF9               	goto	u4085
 10719  0AFC  0831               	movf	??_LED7SegShiftOutPulseClock,w
 10720  0AFD  0532               	andwf	LED7SegShiftOutPulseClock@val,w
 10721  0AFE  3189  21D2  318A   	fcall	_LED7SegPinWrite
 10722                           
 10723                           ;LED7Seg.c: 77: LED7SegPulseClock();
 10724  0B01  3189  21E4  318A   	fcall	_LED7SegPulseClock
 10725  0B04  3001               	movlw	1
 10726  0B05  0020               	movlb	0	; select bank0
 10727  0B06  00B1               	movwf	??_LED7SegShiftOutPulseClock
 10728  0B07  0831               	movf	??_LED7SegShiftOutPulseClock,w
 10729  0B08  07B3               	addwf	LED7SegShiftOutPulseClock@i,f
 10730  0B09  2AF1               	goto	L5
 10731  0B0A                     __end_of_LED7SegShiftOutPulseClock:	
 10732                           
 10733                           	psect	text27
 10734  09E4                     __ptext27:	
 10735 ;; *************** function _LED7SegPulseClock *****************
 10736 ;; Defined at:
 10737 ;;		line 60 in file "LED7Seg.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;		None
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;		None
 10742 ;; Return value:  Size  Location     Type
 10743 ;;                  1    wreg      void 
 10744 ;; Registers used:
 10745 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;Total ram usage:        0 bytes
 10756 ;; Hardware stack levels used:    1
 10757 ;; Hardware stack levels required when called:    5
 10758 ;; This function calls:
 10759 ;;		_delay
 10760 ;; This function is called by:
 10761 ;;		_LED7SegShiftOutPulseClock
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           
 10766                           ;psect for function _LED7SegPulseClock
 10767  09E4                     _LED7SegPulseClock:	
 10768                           
 10769                           ;incstack = 0
 10770                           ; Regs used in _LED7SegPulseClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10771                           ;LED7Seg.c: 63: do { LATCbits.LATC6 = 1; } while(0);
 10772  09E4  0020               	movlb	0	; select bank0
 10773  09E5  1718               	bsf	24,6	;volatile
 10774                           
 10775                           ;LED7Seg.c: 64: delay(1);
 10776  09E6  3001               	movlw	1
 10777  09E7  00A6               	movwf	delay@delaytime
 10778  09E8  3000               	movlw	0
 10779  09E9  00A7               	movwf	delay@delaytime+1
 10780  09EA  318C  24B5         	fcall	_delay
 10781                           
 10782                           ;LED7Seg.c: 66: do { LATCbits.LATC6 = 0; } while(0);
 10783  09EC  0020               	movlb	0	; select bank0
 10784  09ED  1318               	bcf	24,6	;volatile
 10785  09EE  0008               	return
 10786  09EF                     __end_of_LED7SegPulseClock:	
 10787                           
 10788                           	psect	text28
 10789  0CB5                     __ptext28:	
 10790 ;; *************** function _delay *****************
 10791 ;; Defined at:
 10792 ;;		line 194 in file "main.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;  delaytime       2    6[BANK0 ] int 
 10795 ;; Auto vars:     Size  Location     Type
 10796 ;;  counter         4   13[BANK0 ] long 
 10797 ;;  adjustedDela    4    9[BANK0 ] long 
 10798 ;; Return value:  Size  Location     Type
 10799 ;;                  1    wreg      void 
 10800 ;; Registers used:
 10801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10802 ;; Tracked objects:
 10803 ;;		On entry : 0/0
 10804 ;;		On exit  : 0/0
 10805 ;;		Unchanged: 0/0
 10806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10807 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;Total ram usage:       11 bytes
 10812 ;; Hardware stack levels used:    1
 10813 ;; Hardware stack levels required when called:    4
 10814 ;; This function calls:
 10815 ;;		___wmul
 10816 ;; This function is called by:
 10817 ;;		_blinkyLoop
 10818 ;;		_main
 10819 ;;		_LED7SegPulseClock
 10820 ;;		_LED7SegLoop
 10821 ;; This function uses a non-reentrant model
 10822 ;;
 10823                           
 10824                           
 10825                           ;psect for function _delay
 10826  0CB5                     _delay:	
 10827                           
 10828                           ;main.c: 195: long counter = 0;
 10829                           
 10830                           ;incstack = 0
 10831                           ; Regs used in _delay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10832  0CB5  3000               	movlw	0
 10833  0CB6  0020               	movlb	0	; select bank0
 10834  0CB7  00B0               	movwf	delay@counter+3
 10835  0CB8  3000               	movlw	0
 10836  0CB9  00AF               	movwf	delay@counter+2
 10837  0CBA  3000               	movlw	0
 10838  0CBB  00AE               	movwf	delay@counter+1
 10839  0CBC  3000               	movlw	0
 10840  0CBD  00AD               	movwf	delay@counter
 10841                           
 10842                           ;main.c: 196: long adjustedDelaytime=delaytime*cMstrClkAdjust;
 10843  0CBE  0827               	movf	delay@delaytime+1,w
 10844  0CBF  00A1               	movwf	___wmul@multiplier+1
 10845  0CC0  0826               	movf	delay@delaytime,w
 10846  0CC1  00A0               	movwf	___wmul@multiplier
 10847  0CC2  302A               	movlw	low (_cMstrClkAdjust| (0+32768))
 10848  0CC3  0084               	movwf	4
 10849  0CC4  3090               	movlw	high (_cMstrClkAdjust| (0+32768))
 10850  0CC5  0085               	movwf	5
 10851  0CC6  3F00               	moviw [0]fsr0
 10852  0CC7  00A2               	movwf	___wmul@multiplicand
 10853  0CC8  3F01               	moviw [1]fsr0
 10854  0CC9  00A3               	movwf	___wmul@multiplicand+1
 10855  0CCA  318A  22D2  318C   	fcall	___wmul
 10856  0CCD  0020               	movlb	0	; select bank0
 10857  0CCE  0820               	movf	?___wmul,w
 10858  0CCF  00A9               	movwf	delay@adjustedDelaytime
 10859  0CD0  0821               	movf	?___wmul+1,w
 10860  0CD1  00AA               	movwf	delay@adjustedDelaytime+1
 10861  0CD2  0D89               	rlf	9,f
 10862  0CD3  3B89               	subwfb	9,f
 10863  0CD4  0989               	comf	9,f
 10864  0CD5  00AB               	movwf	delay@adjustedDelaytime+2
 10865  0CD6  00AC               	movwf	delay@adjustedDelaytime+3
 10866                           
 10867                           ;main.c: 198: if (0<delaytime)
 10868  0CD7  0827               	movf	delay@delaytime+1,w
 10869  0CD8  3A80               	xorlw	128
 10870  0CD9  00A8               	movwf	??_delay
 10871  0CDA  3080               	movlw	128
 10872  0CDB  0228               	subwf	??_delay,w
 10873  0CDC  1D03               	skipz
 10874  0CDD  2CE0               	goto	u4025
 10875  0CDE  3001               	movlw	1
 10876  0CDF  0226               	subwf	delay@delaytime,w
 10877  0CE0                     u4025:	
 10878  0CE0  1C03               	skipc
 10879  0CE1  0008               	return
 10880                           
 10881                           ;main.c: 199: for (counter = 0; counter<adjustedDelaytime; counter++);
 10882  0CE2  3000               	movlw	0
 10883  0CE3  0020               	movlb	0	; select bank0
 10884  0CE4  00B0               	movwf	delay@counter+3
 10885  0CE5  3000               	movlw	0
 10886  0CE6  00AF               	movwf	delay@counter+2
 10887  0CE7  3000               	movlw	0
 10888  0CE8  00AE               	movwf	delay@counter+1
 10889  0CE9  3000               	movlw	0
 10890  0CEA  00AD               	movwf	delay@counter
 10891  0CEB                     l504:	
 10892  0CEB  0830               	movf	delay@counter+3,w
 10893  0CEC  3A80               	xorlw	128
 10894  0CED  00A8               	movwf	??_delay
 10895  0CEE  082C               	movf	delay@adjustedDelaytime+3,w
 10896  0CEF  3A80               	xorlw	128
 10897  0CF0  0228               	subwf	??_delay,w
 10898  0CF1  1D03               	skipz
 10899  0CF2  2CFD               	goto	u4033
 10900  0CF3  082B               	movf	delay@adjustedDelaytime+2,w
 10901  0CF4  022F               	subwf	delay@counter+2,w
 10902  0CF5  1D03               	skipz
 10903  0CF6  2CFD               	goto	u4033
 10904  0CF7  082A               	movf	delay@adjustedDelaytime+1,w
 10905  0CF8  022E               	subwf	delay@counter+1,w
 10906  0CF9  1D03               	skipz
 10907  0CFA  2CFD               	goto	u4033
 10908  0CFB  0829               	movf	delay@adjustedDelaytime,w
 10909  0CFC  022D               	subwf	delay@counter,w
 10910  0CFD                     u4033:	
 10911  0CFD  1803               	btfsc	3,0
 10912  0CFE  0008               	return
 10913  0CFF  3001               	movlw	1
 10914  0D00  07AD               	addwf	delay@counter,f
 10915  0D01  3000               	movlw	0
 10916  0D02  3DAE               	addwfc	delay@counter+1,f
 10917  0D03  3000               	movlw	0
 10918  0D04  3DAF               	addwfc	delay@counter+2,f
 10919  0D05  3000               	movlw	0
 10920  0D06  3DB0               	addwfc	delay@counter+3,f
 10921  0D07  2CEB               	goto	l504
 10922  0D08                     __end_of_delay:	
 10923                           
 10924                           	psect	text29
 10925  0AD2                     __ptext29:	
 10926 ;; *************** function ___wmul *****************
 10927 ;; Defined at:
 10928 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 10929 ;; Parameters:    Size  Location     Type
 10930 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10931 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10932 ;; Auto vars:     Size  Location     Type
 10933 ;;  product         2    4[BANK0 ] unsigned int 
 10934 ;; Return value:  Size  Location     Type
 10935 ;;                  2    0[BANK0 ] unsigned int 
 10936 ;; Registers used:
 10937 ;;		wreg, status,2, status,0
 10938 ;; Tracked objects:
 10939 ;;		On entry : 0/0
 10940 ;;		On exit  : 0/0
 10941 ;;		Unchanged: 0/0
 10942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;Total ram usage:        6 bytes
 10948 ;; Hardware stack levels used:    1
 10949 ;; Hardware stack levels required when called:    3
 10950 ;; This function calls:
 10951 ;;		Nothing
 10952 ;; This function is called by:
 10953 ;;		_delay
 10954 ;;		_blinkyLoop
 10955 ;;		_main
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function ___wmul
 10961  0AD2                     ___wmul:	
 10962                           
 10963                           ;incstack = 0
 10964                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10965  0AD2  0020               	movlb	0	; select bank0
 10966  0AD3  01A4               	clrf	___wmul@product
 10967  0AD4  01A5               	clrf	___wmul@product+1
 10968  0AD5                     l4182:	
 10969  0AD5  1C20               	btfss	___wmul@multiplier,0
 10970  0AD6  2ADB               	goto	l950
 10971  0AD7  0822               	movf	___wmul@multiplicand,w
 10972  0AD8  07A4               	addwf	___wmul@product,f
 10973  0AD9  0823               	movf	___wmul@multiplicand+1,w
 10974  0ADA  3DA5               	addwfc	___wmul@product+1,f
 10975  0ADB                     l950:	
 10976  0ADB  3001               	movlw	1
 10977  0ADC                     u3995:	
 10978  0ADC  35A2               	lslf	___wmul@multiplicand,f
 10979  0ADD  0DA3               	rlf	___wmul@multiplicand+1,f
 10980  0ADE  0B89               	decfsz	9,f
 10981  0ADF  2ADC               	goto	u3995
 10982  0AE0  3001               	movlw	1
 10983  0AE1                     u4005:	
 10984  0AE1  36A1               	lsrf	___wmul@multiplier+1,f
 10985  0AE2  0CA0               	rrf	___wmul@multiplier,f
 10986  0AE3  0B89               	decfsz	9,f
 10987  0AE4  2AE1               	goto	u4005
 10988  0AE5  0820               	movf	___wmul@multiplier,w
 10989  0AE6  0421               	iorwf	___wmul@multiplier+1,w
 10990  0AE7  1D03               	btfss	3,2
 10991  0AE8  2AD5               	goto	l4182
 10992  0AE9  0825               	movf	___wmul@product+1,w
 10993  0AEA  00A1               	movwf	?___wmul+1
 10994  0AEB  0824               	movf	___wmul@product,w
 10995  0AEC  00A0               	movwf	?___wmul
 10996  0AED  0008               	return
 10997  0AEE                     __end_of___wmul:	
 10998                           
 10999                           	psect	text30
 11000  09D2                     __ptext30:	
 11001 ;; *************** function _LED7SegPinWrite *****************
 11002 ;; Defined at:
 11003 ;;		line 48 in file "LED7Seg.c"
 11004 ;; Parameters:    Size  Location     Type
 11005 ;;  val             1    wreg     unsigned char 
 11006 ;; Auto vars:     Size  Location     Type
 11007 ;;  val             1    0[BANK0 ] unsigned char 
 11008 ;; Return value:  Size  Location     Type
 11009 ;;                  1    wreg      void 
 11010 ;; Registers used:
 11011 ;;		wreg, status,2, status,0
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;Total ram usage:        1 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; Hardware stack levels required when called:    3
 11024 ;; This function calls:
 11025 ;;		Nothing
 11026 ;; This function is called by:
 11027 ;;		_LED7SegShiftOutPulseClock
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           
 11032                           ;psect for function _LED7SegPinWrite
 11033  09D2                     _LED7SegPinWrite:	
 11034                           
 11035                           ;incstack = 0
 11036                           ; Regs used in _LED7SegPinWrite: [wreg+status,2+status,0]
 11037                           ;LED7SegPinWrite@val stored from wreg
 11038  09D2  0020               	movlb	0	; select bank0
 11039  09D3  00A0               	movwf	LED7SegPinWrite@val
 11040                           
 11041                           ;LED7Seg.c: 50: if (val){
 11042  09D4  0820               	movf	LED7SegPinWrite@val,w
 11043  09D5  1903               	btfsc	3,2
 11044  09D6  29D9               	goto	l711
 11045                           
 11046                           ;LED7Seg.c: 52: do { LATCbits.LATC7 = 1; } while(0);
 11047  09D7  1798               	bsf	24,7	;volatile
 11048                           
 11049                           ;LED7Seg.c: 53: } else {
 11050  09D8  0008               	return
 11051  09D9                     l711:	
 11052                           ;LED7Seg.c: 55: do { LATCbits.LATC7 = 0; } while(0);
 11053                           
 11054  09D9  1398               	bcf	24,7	;volatile
 11055  09DA  0008               	return
 11056  09DB                     __end_of_LED7SegPinWrite:	
 11057                           
 11058                           	psect	text31
 11059  0A9F                     __ptext31:	
 11060 ;; *************** function _InitmvcChannels *****************
 11061 ;; Defined at:
 11062 ;;		line 182 in file "main.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;		None
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;  i               2    1[BANK0 ] int 
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  1    wreg      void 
 11069 ;; Registers used:
 11070 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;Total ram usage:        3 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; Hardware stack levels required when called:    3
 11083 ;; This function calls:
 11084 ;;		Nothing
 11085 ;; This function is called by:
 11086 ;;		_main
 11087 ;; This function uses a non-reentrant model
 11088 ;;
 11089                           
 11090                           
 11091                           ;psect for function _InitmvcChannels
 11092  0A9F                     _InitmvcChannels:	
 11093                           
 11094                           ;main.c: 183: for(int i=0; i<cMixFaderCount;i++) {
 11095                           
 11096                           ;incstack = 0
 11097                           ; Regs used in _InitmvcChannels: [wreg+fsr1l+fsr1h+status,2+status,0]
 11098  0A9F  0020               	movlb	0	; select bank0
 11099  0AA0  01A1               	clrf	InitmvcChannels@i
 11100  0AA1  01A2               	clrf	InitmvcChannels@i+1
 11101  0AA2                     L6:	
 11102  0AA2  0822               	movf	InitmvcChannels@i+1,w
 11103  0AA3  3A80               	xorlw	128
 11104  0AA4  00A0               	movwf	??_InitmvcChannels
 11105  0AA5  3080               	movlw	128
 11106  0AA6  0220               	subwf	??_InitmvcChannels,w
 11107  0AA7  1D03               	skipz
 11108  0AA8  2AAB               	goto	u3005
 11109  0AA9  3004               	movlw	4
 11110  0AAA  0221               	subwf	InitmvcChannels@i,w
 11111  0AAB                     u3005:	
 11112  0AAB  1803               	btfsc	3,0
 11113  0AAC  0008               	return
 11114                           
 11115                           ;main.c: 184: mvcChannels[i]=0;
 11116  0AAD  0020               	movlb	0	; select bank0
 11117  0AAE  0821               	movf	InitmvcChannels@i,w
 11118  0AAF  3EC9               	addlw	(low (_mvcChannels| 0))& (0+255)
 11119  0AB0  0086               	movwf	6
 11120  0AB1  0187               	clrf	7
 11121  0AB2  0181               	clrf	1
 11122  0AB3  3001               	movlw	1
 11123  0AB4  07A1               	addwf	InitmvcChannels@i,f
 11124  0AB5  3000               	movlw	0
 11125  0AB6  3DA2               	addwfc	InitmvcChannels@i+1,f
 11126  0AB7  2AA2               	goto	L6
 11127  0AB8                     __end_of_InitmvcChannels:	
 11128                           
 11129                           	psect	text32
 11130  0B0A                     __ptext32:	
 11131 ;; *************** function _InitPanelInChannels *****************
 11132 ;; Defined at:
 11133 ;;		line 176 in file "main.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;		None
 11136 ;; Auto vars:     Size  Location     Type
 11137 ;;  i               2    1[BANK0 ] int 
 11138 ;; Return value:  Size  Location     Type
 11139 ;;                  1    wreg      void 
 11140 ;; Registers used:
 11141 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11142 ;; Tracked objects:
 11143 ;;		On entry : 0/0
 11144 ;;		On exit  : 0/0
 11145 ;;		Unchanged: 0/0
 11146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11151 ;;Total ram usage:        3 bytes
 11152 ;; Hardware stack levels used:    1
 11153 ;; Hardware stack levels required when called:    3
 11154 ;; This function calls:
 11155 ;;		Nothing
 11156 ;; This function is called by:
 11157 ;;		_main
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           
 11162                           ;psect for function _InitPanelInChannels
 11163  0B0A                     _InitPanelInChannels:	
 11164                           
 11165                           ;main.c: 177: for(int i=0; i<cMixFaderCount;i++) {
 11166                           
 11167                           ;incstack = 0
 11168                           ; Regs used in _InitPanelInChannels: [wreg+fsr1l+fsr1h+status,2+status,0]
 11169  0B0A  0020               	movlb	0	; select bank0
 11170  0B0B  01A1               	clrf	InitPanelInChannels@i
 11171  0B0C  01A2               	clrf	InitPanelInChannels@i+1
 11172  0B0D                     L7:	
 11173  0B0D  0822               	movf	InitPanelInChannels@i+1,w
 11174  0B0E  3A80               	xorlw	128
 11175  0B0F  00A0               	movwf	??_InitPanelInChannels
 11176  0B10  3080               	movlw	128
 11177  0B11  0220               	subwf	??_InitPanelInChannels,w
 11178  0B12  1D03               	skipz
 11179  0B13  2B16               	goto	u2985
 11180  0B14  3004               	movlw	4
 11181  0B15  0221               	subwf	InitPanelInChannels@i,w
 11182  0B16                     u2985:	
 11183  0B16  1803               	btfsc	3,0
 11184  0B17  0008               	return
 11185                           
 11186                           ;main.c: 178: PanelInChannels[i]=0;
 11187  0B18  0020               	movlb	0	; select bank0
 11188  0B19  0821               	movf	InitPanelInChannels@i,w
 11189  0B1A  3EA4               	addlw	(low (_PanelInChannels| 0))& (0+255)
 11190  0B1B  0086               	movwf	6
 11191  0B1C  0187               	clrf	7
 11192  0B1D  0181               	clrf	1
 11193                           
 11194                           ;main.c: 179: faderActiveFlag[i]=0;
 11195  0B1E  0821               	movf	InitPanelInChannels@i,w
 11196  0B1F  3EA8               	addlw	(low (_faderActiveFlag| 0))& (0+255)
 11197  0B20  0086               	movwf	6
 11198  0B21  0187               	clrf	7
 11199  0B22  0181               	clrf	1
 11200  0B23  3001               	movlw	1
 11201  0B24  07A1               	addwf	InitPanelInChannels@i,f
 11202  0B25  3000               	movlw	0
 11203  0B26  3DA2               	addwfc	InitPanelInChannels@i+1,f
 11204  0B27  2B0D               	goto	L7
 11205  0B28                     __end_of_InitPanelInChannels:	
 11206                           
 11207                           	psect	text33
 11208  0A32                     __ptext33:	
 11209 ;; *************** function _ADCC_GetSingleConversion *****************
 11210 ;; Defined at:
 11211 ;;		line 132 in file "mcc_generated_files/adcc.c"
 11212 ;; Parameters:    Size  Location     Type
 11213 ;;  channel         1    wreg     enum E14259
 11214 ;; Auto vars:     Size  Location     Type
 11215 ;;  channel         1    3[BANK0 ] enum E14259
 11216 ;; Return value:  Size  Location     Type
 11217 ;;                  2    0[BANK0 ] unsigned int 
 11218 ;; Registers used:
 11219 ;;		wreg
 11220 ;; Tracked objects:
 11221 ;;		On entry : 0/0
 11222 ;;		On exit  : 0/0
 11223 ;;		Unchanged: 0/0
 11224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11225 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;Total ram usage:        4 bytes
 11230 ;; Hardware stack levels used:    1
 11231 ;; Hardware stack levels required when called:    3
 11232 ;; This function calls:
 11233 ;;		Nothing
 11234 ;; This function is called by:
 11235 ;;		_main
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           
 11240                           ;psect for function _ADCC_GetSingleConversion
 11241  0A32                     _ADCC_GetSingleConversion:	
 11242                           
 11243                           ;incstack = 0
 11244                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 11245                           ;ADCC_GetSingleConversion@channel stored from wreg
 11246  0A32  0020               	movlb	0	; select bank0
 11247  0A33  00A3               	movwf	ADCC_GetSingleConversion@channel
 11248                           
 11249                           ;adcc.c: 135: ADPCH = channel;
 11250  0A34  0823               	movf	ADCC_GetSingleConversion@channel,w
 11251  0A35  0021               	movlb	1	; select bank1
 11252  0A36  009E               	movwf	30	;volatile
 11253                           
 11254                           ;adcc.c: 138: ADCON0bits.ADON = 1;
 11255  0A37  1793               	bsf	19,7	;volatile
 11256                           
 11257                           ;adcc.c: 141: ADCON0bits.ADCONT = 0;
 11258  0A38  1313               	bcf	19,6	;volatile
 11259                           
 11260                           ;adcc.c: 144: ADCON0bits.ADGO = 1;
 11261  0A39  1413               	bsf	19,0	;volatile
 11262                           
 11263                           ;adcc.c: 147: __nop();
 11264  0A3A  0000               	nop
 11265  0A3B                     l163:	
 11266                           ;adcc.c: 151: {
 11267                           
 11268                           ;adcc.c: 150: while (ADCON0bits.ADGO)
 11269                           
 11270  0A3B  0021               	movlb	1	; select bank1
 11271  0A3C  1813               	btfsc	19,0	;volatile
 11272  0A3D  2A3B               	goto	l163
 11273                           
 11274                           ;adcc.c: 152: }
 11275                           ;adcc.c: 155: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 11276  0A3E  080D               	movf	13,w	;volatile
 11277  0A3F  0020               	movlb	0	; select bank0
 11278  0A40  00A1               	movwf	?_ADCC_GetSingleConversion+1
 11279  0A41  0021               	movlb	1	; select bank1
 11280  0A42  080C               	movf	12,w	;volatile
 11281  0A43  0020               	movlb	0	; select bank0
 11282  0A44  00A0               	movwf	?_ADCC_GetSingleConversion
 11283  0A45  0008               	return
 11284  0A46                     __end_of_ADCC_GetSingleConversion:	
 11285                           
 11286                           	psect	intentry
 11287  0004                     __pintentry:	
 11288 ;; *************** function _INTERRUPT_InterruptManager *****************
 11289 ;; Defined at:
 11290 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;		None
 11293 ;; Auto vars:     Size  Location     Type
 11294 ;;		None
 11295 ;; Return value:  Size  Location     Type
 11296 ;;                  1    wreg      void 
 11297 ;; Registers used:
 11298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11299 ;; Tracked objects:
 11300 ;;		On entry : 0/0
 11301 ;;		On exit  : 0/0
 11302 ;;		Unchanged: 0/0
 11303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11308 ;;Total ram usage:        1 bytes
 11309 ;; Hardware stack levels used:    1
 11310 ;; Hardware stack levels required when called:    2
 11311 ;; This function calls:
 11312 ;;		_I2C1_BusCollisionISR
 11313 ;;		_I2C1_ISR
 11314 ;; This function is called by:
 11315 ;;		Interrupt level 1
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319  0004                     _INTERRUPT_InterruptManager:	
 11320                           
 11321                           ;incstack = 0
 11322  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11323                           
 11324                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11325  0005  3180               	pagesel	$
 11326  0006  0020               	movlb	0	; select bank0
 11327  0007  087F               	movf	127,w
 11328  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 11329                           
 11330                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.BCL1IE == 1 && PIR3bits.BC
      +                          L1IF == 1)
 11331  0009  1F0B               	btfss	11,6	;volatile
 11332  000A  2813               	goto	i1l394
 11333  000B  002E               	movlb	14	; select bank14
 11334  000C  1899               	btfsc	25,1	;volatile
 11335  000D  1C8F               	btfss	15,1	;volatile
 11336  000E  2813               	goto	i1l394
 11337                           
 11338                           ;interrupt_manager.c: 55: {
 11339                           ;interrupt_manager.c: 56: I2C1_BusCollisionISR();
 11340  000F  3187  27FF  3180   	fcall	_I2C1_BusCollisionISR
 11341                           
 11342                           ;interrupt_manager.c: 57: }
 11343  0012  281B               	goto	i1l398
 11344  0013                     i1l394:	
 11345                           
 11346                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE3bits.SSP1IE == 1 && PIR3bi
      +                          ts.SSP1IF == 1)
 11347  0013  1F0B               	btfss	11,6	;volatile
 11348  0014  281B               	goto	i1l398
 11349  0015  002E               	movlb	14	; select bank14
 11350  0016  1819               	btfsc	25,0	;volatile
 11351  0017  1C0F               	btfss	15,0	;volatile
 11352  0018  281B               	goto	i1l398
 11353                           
 11354                           ;interrupt_manager.c: 59: {
 11355                           ;interrupt_manager.c: 60: I2C1_ISR();
 11356  0019  3183  2363         	fcall	_I2C1_ISR
 11357  001B                     i1l398:	
 11358                           ;interrupt_manager.c: 62: else
 11359                           ;interrupt_manager.c: 63: {
 11360                           
 11361                           ;interrupt_manager.c: 61: }
 11362                           
 11363  001B  087D               	movf	??_INTERRUPT_InterruptManager,w
 11364  001C  0020               	movlb	0	; select bank0
 11365  001D  00FF               	movwf	127
 11366  001E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11367  001F  0009               	retfie
 11368  0020                     __end_of_INTERRUPT_InterruptManager:	
 11369                           
 11370                           	psect	text35
 11371  0363                     __ptext35:	
 11372 ;; *************** function _I2C1_ISR *****************
 11373 ;; Defined at:
 11374 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 11375 ;; Parameters:    Size  Location     Type
 11376 ;;		None
 11377 ;; Auto vars:     Size  Location     Type
 11378 ;;		None
 11379 ;; Return value:  Size  Location     Type
 11380 ;;                  1    wreg      void 
 11381 ;; Registers used:
 11382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11383 ;; Tracked objects:
 11384 ;;		On entry : 0/0
 11385 ;;		On exit  : 0/0
 11386 ;;		Unchanged: 0/0
 11387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;Total ram usage:        4 bytes
 11393 ;; Hardware stack levels used:    1
 11394 ;; Hardware stack levels required when called:    1
 11395 ;; This function calls:
 11396 ;;		_I2C1_FunctionComplete
 11397 ;;		_I2C1_Stop
 11398 ;; This function is called by:
 11399 ;;		_INTERRUPT_InterruptManager
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           
 11404                           ;psect for function _I2C1_ISR
 11405  0363                     _I2C1_ISR:	
 11406                           
 11407                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 11408                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 11409                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 11410                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 11411                           ;i2c1.c: 241: PIR3bits.SSP1IF = 0;
 11412                           
 11413                           ;incstack = 0
 11414                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11415  0363  002E               	movlb	14	; select bank14
 11416  0364  100F               	bcf	15,0	;volatile
 11417                           
 11418                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 11419  0365  0023               	movlb	3	; select bank3
 11420  0366  1F90               	btfss	16,7	;volatile
 11421  0367  2C92               	goto	i1l3474
 11422                           
 11423                           ;i2c1.c: 246: {
 11424                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 11425  0368  1390               	bcf	16,7	;volatile
 11426                           
 11427                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
 11428  0369  0020               	movlb	0	; select bank0
 11429  036A  01EF               	clrf	_i2c1_state
 11430                           
 11431                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 11432  036B  0872               	movf	_p_i2c1_current,w
 11433  036C  3E02               	addlw	2
 11434  036D  0086               	movwf	6
 11435  036E  0187               	clrf	7
 11436  036F  0801               	movf	1,w
 11437  0370  0086               	movwf	6
 11438  0371  0187               	clrf	7
 11439  0372  0181               	clrf	1
 11440  0373  0A81               	incf	1,f
 11441                           
 11442                           ;i2c1.c: 253: p_i2c1_current = (0);
 11443  0374  01F2               	clrf	_p_i2c1_current
 11444                           
 11445                           ;i2c1.c: 255: return;
 11446  0375  0008               	return
 11447  0376                     i1l292:	
 11448                           ;i2c1.c: 260: {
 11449                           ;i2c1.c: 261: case S_MASTER_IDLE:
 11450                           
 11451                           ;i2c1.c: 256: }
 11452                           ;i2c1.c: 259: switch(i2c1_state)
 11453                           
 11454                           
 11455                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 11456  0376  18E9               	btfsc	_i2c1_object+2,1
 11457  0377  0008               	return
 11458                           
 11459                           ;i2c1.c: 264: {
 11460                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 11461  0378  0868               	movf	low ((_i2c1_object| 0+1)),w
 11462  0379  00F9               	movwf	??_I2C1_ISR
 11463  037A  0879               	movf	??_I2C1_ISR,w
 11464  037B  00F2               	movwf	_p_i2c1_current
 11465                           
 11466                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 11467  037C  0868               	movf	low ((_i2c1_object| 0+1)),w
 11468  037D  0086               	movwf	6
 11469  037E  0187               	clrf	7
 11470  037F  0801               	movf	1,w
 11471  0380  00F9               	movwf	??_I2C1_ISR
 11472  0381  0879               	movf	??_I2C1_ISR,w
 11473  0382  00F4               	movwf	_i2c1_trb_count
 11474                           
 11475                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 11476  0383  0868               	movf	low ((_i2c1_object| 0+1)),w
 11477  0384  0086               	movwf	6
 11478  0385  0187               	clrf	7
 11479  0386  3F41               	moviw [1]fsr1
 11480  0387  00F3               	movwf	_p_i2c1_trb_current
 11481                           
 11482                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 11483  0388  3003               	movlw	3
 11484  0389  00F9               	movwf	??_I2C1_ISR
 11485  038A  0879               	movf	??_I2C1_ISR,w
 11486  038B  07E8               	addwf	low ((_i2c1_object| 0+1)),f
 11487                           
 11488                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 11489  038C  0868               	movf	low ((_i2c1_object| 0+1)),w
 11490  038D  3AD8               	xorlw	(low ((_i2c1_tr_queue| 0+3)))& (0+255)
 11491  038E  1D03               	skipz
 11492  038F  2B94               	goto	i1l3362
 11493                           
 11494                           ;i2c1.c: 274: {
 11495                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 11496  0390  30D5               	movlw	(low (_i2c1_tr_queue| 0))& (0+255)
 11497  0391  00F9               	movwf	??_I2C1_ISR
 11498  0392  0879               	movf	??_I2C1_ISR,w
 11499  0393  00E8               	movwf	low ((_i2c1_object| 0+1))
 11500  0394                     i1l3362:	
 11501                           
 11502                           ;i2c1.c: 277: }
 11503                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 11504  0394  1069               	bcf	_i2c1_object+2,0
 11505                           
 11506                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 11507  0395  0868               	movf	low ((_i2c1_object| 0+1)),w
 11508  0396  0667               	xorwf	_i2c1_object,w
 11509  0397  1903               	btfsc	3,2
 11510                           
 11511                           ;i2c1.c: 285: {
 11512                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 11513  0398  14E9               	bsf	_i2c1_object+2,1
 11514                           
 11515                           ;i2c1.c: 288: }
 11516                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 11517  0399  0023               	movlb	3	; select bank3
 11518  039A  1411               	bsf	17,0	;volatile
 11519                           
 11520                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 11521  039B  3002               	movlw	2
 11522  039C  00F9               	movwf	??_I2C1_ISR
 11523  039D  0879               	movf	??_I2C1_ISR,w
 11524  039E  0020               	movlb	0	; select bank0
 11525  039F  00EF               	movwf	_i2c1_state
 11526                           
 11527                           ;i2c1.c: 295: }
 11528                           ;i2c1.c: 297: break;
 11529  03A0  0008               	return
 11530  03A1                     i1l297:	
 11531                           ;i2c1.c: 299: case S_MASTER_RESTART:
 11532                           
 11533                           
 11534                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 11535  03A1  0023               	movlb	3	; select bank3
 11536  03A2  1491               	bsf	17,1	;volatile
 11537                           
 11538                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 11539  03A3  3002               	movlw	2
 11540  03A4  00F9               	movwf	??_I2C1_ISR
 11541  03A5  0879               	movf	??_I2C1_ISR,w
 11542  03A6  0020               	movlb	0	; select bank0
 11543  03A7  00EF               	movwf	_i2c1_state
 11544                           
 11545                           ;i2c1.c: 309: break;
 11546  03A8  0008               	return
 11547  03A9                     i1l298:	
 11548                           ;i2c1.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 11549                           
 11550                           
 11551                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 11552  03A9  0023               	movlb	3	; select bank3
 11553  03AA  1F11               	btfss	17,6	;volatile
 11554  03AB  2BB5               	goto	i1l3374
 11555                           
 11556                           ;i2c1.c: 314: {
 11557                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 11558  03AC  3001               	movlw	1
 11559  03AD  00F9               	movwf	??_I2C1_ISR
 11560  03AE  0879               	movf	??_I2C1_ISR,w
 11561  03AF  0020               	movlb	0	; select bank0
 11562  03B0  07EB               	addwf	_i2c1_object+4,f
 11563                           
 11564                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11565  03B1  3004               	movlw	4
 11566  03B2  318A  2287         	fcall	_I2C1_Stop
 11567                           
 11568                           ;i2c1.c: 317: }
 11569  03B4  0008               	return
 11570  03B5                     i1l3374:	
 11571                           
 11572                           ;i2c1.c: 318: else
 11573                           ;i2c1.c: 319: {
 11574                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 11575  03B5  0876               	movf	I2C1_ISR@i2c_address+1,w
 11576  03B6  00FA               	movwf	??_I2C1_ISR+1
 11577  03B7  0875               	movf	I2C1_ISR@i2c_address,w
 11578  03B8  00F9               	movwf	??_I2C1_ISR
 11579  03B9  36FA               	lsrf	??_I2C1_ISR+1,f
 11580  03BA  0CF9               	rrf	??_I2C1_ISR,f
 11581  03BB  0879               	movf	??_I2C1_ISR,w
 11582  03BC  0023               	movlb	3	; select bank3
 11583  03BD  008C               	movwf	12	;volatile
 11584                           
 11585                           ;i2c1.c: 324: if(i2c_address & 0x01)
 11586  03BE  1C75               	btfss	I2C1_ISR@i2c_address,0
 11587  03BF  2BC6               	goto	i1l3380
 11588                           
 11589                           ;i2c1.c: 325: {
 11590                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 11591  03C0  300B               	movlw	11
 11592  03C1  00F9               	movwf	??_I2C1_ISR
 11593  03C2  0879               	movf	??_I2C1_ISR,w
 11594  03C3  0020               	movlb	0	; select bank0
 11595  03C4  00EF               	movwf	_i2c1_state
 11596                           
 11597                           ;i2c1.c: 329: }
 11598  03C5  0008               	return
 11599  03C6                     i1l3380:	
 11600                           
 11601                           ;i2c1.c: 330: else
 11602                           ;i2c1.c: 331: {
 11603                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 11604  03C6  3003               	movlw	3
 11605  03C7  00F9               	movwf	??_I2C1_ISR
 11606  03C8  0879               	movf	??_I2C1_ISR,w
 11607  03C9  0020               	movlb	0	; select bank0
 11608  03CA  00EF               	movwf	_i2c1_state
 11609                           
 11610                           ;i2c1.c: 334: }
 11611                           ;i2c1.c: 335: }
 11612                           ;i2c1.c: 337: break;
 11613  03CB  0008               	return
 11614  03CC                     i1l303:	
 11615                           ;i2c1.c: 339: case S_MASTER_10BIT_RESTART:
 11616                           
 11617                           
 11618                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 11619  03CC  0023               	movlb	3	; select bank3
 11620  03CD  1F11               	btfss	17,6	;volatile
 11621  03CE  2BD8               	goto	i1l304
 11622                           
 11623                           ;i2c1.c: 342: {
 11624                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 11625  03CF  3001               	movlw	1
 11626  03D0  00F9               	movwf	??_I2C1_ISR
 11627  03D1  0879               	movf	??_I2C1_ISR,w
 11628  03D2  0020               	movlb	0	; select bank0
 11629  03D3  07EB               	addwf	_i2c1_object+4,f
 11630                           
 11631                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11632  03D4  3004               	movlw	4
 11633  03D5  318A  2287         	fcall	_I2C1_Stop
 11634                           
 11635                           ;i2c1.c: 345: }
 11636  03D7  0008               	return
 11637  03D8                     i1l304:	
 11638                           
 11639                           ;i2c1.c: 346: else
 11640                           ;i2c1.c: 347: {
 11641                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 11642  03D8  1491               	bsf	17,1	;volatile
 11643                           
 11644                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 11645  03D9  0876               	movf	I2C1_ISR@i2c_address+1,w
 11646  03DA  00FA               	movwf	??_I2C1_ISR+1
 11647  03DB  0875               	movf	I2C1_ISR@i2c_address,w
 11648  03DC  00F9               	movwf	??_I2C1_ISR
 11649  03DD  087A               	movf	??_I2C1_ISR+1,w
 11650  03DE  00F9               	movwf	??_I2C1_ISR
 11651  03DF  01FA               	clrf	??_I2C1_ISR+1
 11652  03E0  3006               	movlw	6
 11653  03E1  0579               	andwf	??_I2C1_ISR,w
 11654  03E2  00FB               	movwf	??_I2C1_ISR+2
 11655  03E3  3000               	movlw	0
 11656  03E4  057A               	andwf	??_I2C1_ISR+1,w
 11657  03E5  00FC               	movwf	??_I2C1_ISR+3
 11658  03E6  30F0               	movlw	240
 11659  03E7  047B               	iorwf	??_I2C1_ISR+2,w
 11660  03E8  00F5               	movwf	I2C1_ISR@i2c_address
 11661  03E9  3000               	movlw	0
 11662  03EA  047C               	iorwf	??_I2C1_ISR+3,w
 11663  03EB  00F6               	movwf	I2C1_ISR@i2c_address+1
 11664                           
 11665                           ;i2c1.c: 357: i2c_address |= 0x0001;
 11666  03EC  1475               	bsf	I2C1_ISR@i2c_address,0
 11667                           
 11668                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 11669  03ED  0020               	movlb	0	; select bank0
 11670  03EE  01EE               	clrf	I2C1_ISR@i2c_10bit_address_restart
 11671  03EF  0AEE               	incf	I2C1_ISR@i2c_10bit_address_restart,f
 11672                           
 11673                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 11674  03F0  3002               	movlw	2
 11675  03F1  00F9               	movwf	??_I2C1_ISR
 11676  03F2  0879               	movf	??_I2C1_ISR,w
 11677  03F3  00EF               	movwf	_i2c1_state
 11678                           
 11679                           ;i2c1.c: 364: }
 11680                           ;i2c1.c: 366: break;
 11681  03F4  0008               	return
 11682  03F5                     i1l3394:	
 11683                           ;i2c1.c: 368: case S_MASTER_SEND_ADDR:
 11684                           
 11685                           
 11686                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 11687  03F5  036E               	decf	I2C1_ISR@i2c_10bit_address_restart,w
 11688  03F6  1903               	btfsc	3,2
 11689  03F7  2C09               	goto	i1l3414
 11690                           
 11691                           ;i2c1.c: 382: {
 11692                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 11693  03F8  0873               	movf	_p_i2c1_trb_current,w
 11694  03F9  0086               	movwf	6
 11695  03FA  0187               	clrf	7
 11696  03FB  3F40               	moviw [0]fsr1
 11697  03FC  00F5               	movwf	I2C1_ISR@i2c_address
 11698  03FD  3F41               	moviw [1]fsr1
 11699  03FE  00F6               	movwf	I2C1_ISR@i2c_address+1
 11700                           
 11701                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 11702  03FF  0873               	movf	_p_i2c1_trb_current,w
 11703  0400  0086               	movwf	6
 11704  0401  0187               	clrf	7
 11705  0402  3F43               	moviw [3]fsr1
 11706  0403  00F1               	movwf	I2C1_ISR@pi2c_buf_ptr
 11707                           
 11708                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 11709  0404  0873               	movf	_p_i2c1_trb_current,w
 11710  0405  0086               	movwf	6
 11711  0406  0187               	clrf	7
 11712  0407  3F42               	moviw [2]fsr1
 11713  0408  00F0               	movwf	I2C1_ISR@i2c_bytes_left
 11714  0409                     i1l3414:	
 11715                           ;i2c1.c: 407: }
 11716                           ;i2c1.c: 408: }
 11717                           
 11718                           ;i2c1.c: 406: i2c_10bit_address_restart = 0;
 11719                           
 11720                           ;i2c1.c: 404: i2c1_state = S_MASTER_ACK_ADDR;
 11721                           
 11722                           ;i2c1.c: 400: else
 11723                           ;i2c1.c: 401: {
 11724                           ;i2c1.c: 403: SSP1BUF = i2c_address;
 11725                           
 11726                           ;i2c1.c: 399: }
 11727                           
 11728                           ;i2c1.c: 398: i2c1_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 11729                           
 11730                           ;i2c1.c: 393: {
 11731                           ;i2c1.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 11732                           
 11733                           ;i2c1.c: 391: {
 11734                           ;i2c1.c: 392: if (0 == i2c_10bit_address_restart)
 11735                           
 11736                           ;i2c1.c: 387: }
 11737                           ;i2c1.c: 390: if(!1 && (0x0 != i2c_address))
 11738                           
 11739                           
 11740                           ;i2c1.c: 409: else
 11741                           ;i2c1.c: 410: {
 11742                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 11743  0409  0875               	movf	I2C1_ISR@i2c_address,w
 11744  040A  0023               	movlb	3	; select bank3
 11745  040B  008C               	movwf	12	;volatile
 11746                           
 11747                           ;i2c1.c: 413: if(i2c_address & 0x01)
 11748  040C  1C75               	btfss	I2C1_ISR@i2c_address,0
 11749  040D  2C14               	goto	i1l3420
 11750                           
 11751                           ;i2c1.c: 414: {
 11752                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 11753  040E  3005               	movlw	5
 11754  040F  00F9               	movwf	??_I2C1_ISR
 11755  0410  0879               	movf	??_I2C1_ISR,w
 11756  0411  0020               	movlb	0	; select bank0
 11757  0412  00EF               	movwf	_i2c1_state
 11758                           
 11759                           ;i2c1.c: 417: }
 11760  0413  0008               	return
 11761  0414                     i1l3420:	
 11762                           
 11763                           ;i2c1.c: 418: else
 11764                           ;i2c1.c: 419: {
 11765                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 11766  0414  3003               	movlw	3
 11767  0415  00F9               	movwf	??_I2C1_ISR
 11768  0416  0879               	movf	??_I2C1_ISR,w
 11769  0417  0020               	movlb	0	; select bank0
 11770  0418  00EF               	movwf	_i2c1_state
 11771                           
 11772                           ;i2c1.c: 422: }
 11773                           ;i2c1.c: 423: }
 11774                           ;i2c1.c: 424: break;
 11775  0419  0008               	return
 11776  041A                     i1l314:	
 11777                           ;i2c1.c: 426: case S_MASTER_SEND_DATA:
 11778                           
 11779                           
 11780                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 11781  041A  0023               	movlb	3	; select bank3
 11782  041B  1F11               	btfss	17,6	;volatile
 11783  041C  2C28               	goto	i1l3428
 11784                           
 11785                           ;i2c1.c: 430: {
 11786                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 11787  041D  3001               	movlw	1
 11788  041E  00F9               	movwf	??_I2C1_ISR
 11789  041F  0879               	movf	??_I2C1_ISR,w
 11790  0420  0020               	movlb	0	; select bank0
 11791  0421  07EB               	addwf	_i2c1_object+4,f
 11792                           
 11793                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 11794  0422  0023               	movlb	3	; select bank3
 11795  0423  1311               	bcf	17,6	;volatile
 11796                           
 11797                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 11798  0424  3005               	movlw	5
 11799  0425  318A  2287         	fcall	_I2C1_Stop
 11800                           
 11801                           ;i2c1.c: 440: }
 11802  0427  0008               	return
 11803  0428                     i1l3428:	
 11804                           
 11805                           ;i2c1.c: 441: else
 11806                           ;i2c1.c: 442: {
 11807                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 11808  0428  3001               	movlw	1
 11809  0429  02F0               	subwf	I2C1_ISR@i2c_bytes_left,f
 11810  042A  0A70               	incf	I2C1_ISR@i2c_bytes_left,w
 11811  042B  1D03               	btfss	3,2
 11812  042C  2C41               	goto	i1l3436
 11813                           
 11814                           ;i2c1.c: 445: {
 11815                           ;i2c1.c: 449: p_i2c1_trb_current++;
 11816  042D  3004               	movlw	4
 11817  042E  00F9               	movwf	??_I2C1_ISR
 11818  042F  0879               	movf	??_I2C1_ISR,w
 11819  0430  07F3               	addwf	_p_i2c1_trb_current,f
 11820                           
 11821                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 11822  0431  3001               	movlw	1
 11823  0432  02F4               	subwf	_i2c1_trb_count,f
 11824  0433  1D03               	btfss	3,2
 11825  0434  2C39               	goto	i1l318
 11826                           
 11827                           ;i2c1.c: 453: {
 11828                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 11829  0435  3000               	movlw	0
 11830  0436  318A  2287         	fcall	_I2C1_Stop
 11831                           
 11832                           ;i2c1.c: 455: }
 11833  0438  0008               	return
 11834  0439                     i1l318:	
 11835                           
 11836                           ;i2c1.c: 456: else
 11837                           ;i2c1.c: 457: {
 11838                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 11839  0439  0023               	movlb	3	; select bank3
 11840  043A  1491               	bsf	17,1	;volatile
 11841                           
 11842                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 11843  043B  3002               	movlw	2
 11844  043C  00F9               	movwf	??_I2C1_ISR
 11845  043D  0879               	movf	??_I2C1_ISR,w
 11846  043E  0020               	movlb	0	; select bank0
 11847  043F  00EF               	movwf	_i2c1_state
 11848                           
 11849                           ;i2c1.c: 469: }
 11850                           ;i2c1.c: 470: }
 11851  0440  0008               	return
 11852  0441                     i1l3436:	
 11853                           
 11854                           ;i2c1.c: 471: else
 11855                           ;i2c1.c: 472: {
 11856                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 11857  0441  0871               	movf	I2C1_ISR@pi2c_buf_ptr,w
 11858  0442  0086               	movwf	6
 11859  0443  0187               	clrf	7
 11860  0444  0801               	movf	1,w
 11861  0445  0023               	movlb	3	; select bank3
 11862  0446  008C               	movwf	12	;volatile
 11863  0447  3001               	movlw	1
 11864  0448  00F9               	movwf	??_I2C1_ISR
 11865  0449  0879               	movf	??_I2C1_ISR,w
 11866  044A  07F1               	addwf	I2C1_ISR@pi2c_buf_ptr,f
 11867                           
 11868                           ;i2c1.c: 475: }
 11869                           ;i2c1.c: 476: }
 11870                           ;i2c1.c: 477: break;
 11871  044B  0008               	return
 11872  044C                     i1l321:	
 11873                           ;i2c1.c: 479: case S_MASTER_ACK_ADDR:
 11874                           
 11875                           
 11876                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 11877  044C  0023               	movlb	3	; select bank3
 11878  044D  1F11               	btfss	17,6	;volatile
 11879  044E  2C5A               	goto	i1l322
 11880                           
 11881                           ;i2c1.c: 483: {
 11882                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 11883  044F  3001               	movlw	1
 11884  0450  00F9               	movwf	??_I2C1_ISR
 11885  0451  0879               	movf	??_I2C1_ISR,w
 11886  0452  0020               	movlb	0	; select bank0
 11887  0453  07EB               	addwf	_i2c1_object+4,f
 11888                           
 11889                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11890  0454  3004               	movlw	4
 11891  0455  318A  2287         	fcall	_I2C1_Stop
 11892                           
 11893                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 11894  0457  0023               	movlb	3	; select bank3
 11895  0458  1311               	bcf	17,6	;volatile
 11896                           
 11897                           ;i2c1.c: 493: }
 11898  0459  0008               	return
 11899  045A                     i1l322:	
 11900                           
 11901                           ;i2c1.c: 494: else
 11902                           ;i2c1.c: 495: {
 11903                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 11904  045A  1591               	bsf	17,3	;volatile
 11905                           
 11906                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11907  045B  3008               	movlw	8
 11908  045C  00F9               	movwf	??_I2C1_ISR
 11909  045D  0879               	movf	??_I2C1_ISR,w
 11910  045E  0020               	movlb	0	; select bank0
 11911  045F  00EF               	movwf	_i2c1_state
 11912                           
 11913                           ;i2c1.c: 498: }
 11914                           ;i2c1.c: 499: break;
 11915  0460  0008               	return
 11916  0461                     i1l3448:	
 11917                           ;i2c1.c: 501: case S_MASTER_RCV_DATA:
 11918                           
 11919                           
 11920                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11921  0461  3008               	movlw	8
 11922  0462  00F9               	movwf	??_I2C1_ISR
 11923  0463  0879               	movf	??_I2C1_ISR,w
 11924  0464  00EF               	movwf	_i2c1_state
 11925                           
 11926                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 11927  0465  0023               	movlb	3	; select bank3
 11928  0466  1591               	bsf	17,3	;volatile
 11929                           
 11930                           ;i2c1.c: 511: break;
 11931  0467  0008               	return
 11932  0468                     i1l3452:	
 11933                           ;i2c1.c: 513: case S_MASTER_ACK_RCV_DATA:
 11934                           
 11935                           
 11936                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 11937  0468  0023               	movlb	3	; select bank3
 11938  0469  080C               	movf	12,w	;volatile
 11939  046A  00F9               	movwf	??_I2C1_ISR
 11940  046B  0871               	movf	I2C1_ISR@pi2c_buf_ptr,w
 11941  046C  0086               	movwf	6
 11942  046D  0187               	clrf	7
 11943  046E  0879               	movf	??_I2C1_ISR,w
 11944  046F  0081               	movwf	1
 11945  0470  3001               	movlw	1
 11946  0471  00F9               	movwf	??_I2C1_ISR
 11947  0472  0879               	movf	??_I2C1_ISR,w
 11948  0473  07F1               	addwf	I2C1_ISR@pi2c_buf_ptr,f
 11949                           
 11950                           ;i2c1.c: 519: if(--i2c_bytes_left)
 11951  0474  3001               	movlw	1
 11952  0475  02F0               	subwf	I2C1_ISR@i2c_bytes_left,f
 11953  0476  1903               	btfsc	3,2
 11954  0477  2C7F               	goto	i1l326
 11955                           
 11956                           ;i2c1.c: 520: {
 11957                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 11958  0478  1291               	bcf	17,5	;volatile
 11959                           
 11960                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 11961  0479  3006               	movlw	6
 11962  047A  00F9               	movwf	??_I2C1_ISR
 11963  047B  0879               	movf	??_I2C1_ISR,w
 11964  047C  0020               	movlb	0	; select bank0
 11965  047D  00EF               	movwf	_i2c1_state
 11966                           
 11967                           ;i2c1.c: 530: }
 11968  047E  2C82               	goto	i1l3464
 11969  047F                     i1l326:	
 11970                           
 11971                           ;i2c1.c: 531: else
 11972                           ;i2c1.c: 532: {
 11973                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 11974  047F  1691               	bsf	17,5	;volatile
 11975                           
 11976                           ;i2c1.c: 538: I2C1_FunctionComplete();
 11977  0480  318A  2220         	fcall	_I2C1_FunctionComplete
 11978  0482                     i1l3464:	
 11979                           
 11980                           ;i2c1.c: 539: }
 11981                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 11982  0482  0023               	movlb	3	; select bank3
 11983  0483  1611               	bsf	17,4	;volatile
 11984                           
 11985                           ;i2c1.c: 543: break;
 11986  0484  0008               	return
 11987  0485                     i1l3466:	
 11988                           ;i2c1.c: 545: case S_MASTER_RCV_STOP:
 11989                           
 11990                           
 11991                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 11992                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 11993  0485  3000               	movlw	0
 11994  0486  318A  2287         	fcall	_I2C1_Stop
 11995                           
 11996                           ;i2c1.c: 550: break;
 11997  0488  0008               	return
 11998  0489                     i1l3468:	
 11999                           ;i2c1.c: 552: default:
 12000                           
 12001                           
 12002                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 12003  0489  3001               	movlw	1
 12004  048A  00F9               	movwf	??_I2C1_ISR
 12005  048B  0879               	movf	??_I2C1_ISR,w
 12006  048C  0020               	movlb	0	; select bank0
 12007  048D  07EB               	addwf	_i2c1_object+4,f
 12008                           
 12009                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 12010  048E  3006               	movlw	6
 12011  048F  318A  2287         	fcall	_I2C1_Stop
 12012                           
 12013                           ;i2c1.c: 560: }
 12014                           
 12015                           ;i2c1.c: 558: break;
 12016  0491  0008               	return
 12017  0492                     i1l3474:	
 12018  0492  0020               	movlb	0	; select bank0
 12019  0493  086F               	movf	_i2c1_state,w
 12020                           
 12021                           ; Switch size 1, requested type "space"
 12022                           ; Number of cases is 11, Range of values is 0 to 11
 12023                           ; switch strategies available:
 12024                           ; Name         Instructions Cycles
 12025                           ; direct_byte           30     6 (fixed)
 12026                           ; simple_byte           34    18 (average)
 12027                           ; jumptable            260     6 (fixed)
 12028                           ;	Chosen strategy is direct_byte
 12029  0494  0084               	movwf	4
 12030  0495  300C               	movlw	12
 12031  0496  0204               	subwf	4,w
 12032  0497  1803               	skipnc
 12033  0498  2C89               	goto	i1l3468
 12034  0499  3188               	movlp	high i1S4618
 12035  049A  3504               	lslf	4,w
 12036  049B  3E00               	addlw	low i1S4618
 12037  049C  0082               	movwf	2
 12038  049D  0008               	return
 12039  049E                     __end_of_I2C1_ISR:	
 12040                           
 12041                           	psect	swtext1
 12042  0800                     __pswtext1:	
 12043  0800                     i1S4618:	
 12044  0800  3183  2B76         	ljmp	i1l292
 12045  0802  3183  2BA1         	ljmp	i1l297
 12046  0804  3183  2BF5         	ljmp	i1l3394
 12047  0806  3184  2C1A         	ljmp	i1l314
 12048  0808  3184  2C85         	ljmp	i1l3466
 12049  080A  3184  2C4C         	ljmp	i1l321
 12050  080C  3184  2C61         	ljmp	i1l3448
 12051  080E  3184  2C85         	ljmp	i1l3466
 12052  0810  3184  2C68         	ljmp	i1l3452
 12053  0812  3184  2C89         	ljmp	i1l3468
 12054  0814  3183  2BA9         	ljmp	i1l298
 12055  0816  3183  2BCC         	ljmp	i1l303
 12056                           
 12057                           	psect	text36
 12058  0A87                     __ptext36:	
 12059 ;; *************** function _I2C1_Stop *****************
 12060 ;; Defined at:
 12061 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;  completion_c    1    wreg     enum E14260
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;  completion_c    1    1[COMMON] enum E14260
 12066 ;; Return value:  Size  Location     Type
 12067 ;;                  1    wreg      void 
 12068 ;; Registers used:
 12069 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/0
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;Total ram usage:        2 bytes
 12080 ;; Hardware stack levels used:    1
 12081 ;; This function calls:
 12082 ;;		Nothing
 12083 ;; This function is called by:
 12084 ;;		_I2C1_ISR
 12085 ;; This function uses a non-reentrant model
 12086 ;;
 12087                           
 12088                           
 12089                           ;psect for function _I2C1_Stop
 12090  0A87                     _I2C1_Stop:	
 12091                           
 12092                           ;incstack = 0
 12093                           ; Regs used in _I2C1_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 12094                           ;I2C1_Stop@completion_code stored from wreg
 12095  0A87  00F8               	movwf	I2C1_Stop@completion_code
 12096                           
 12097                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 12098  0A88  0023               	movlb	3	; select bank3
 12099  0A89  1511               	bsf	17,2	;volatile
 12100                           
 12101                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
 12102  0A8A  0872               	movf	_p_i2c1_current,w
 12103  0A8B  3E02               	addlw	2
 12104  0A8C  0086               	movwf	6
 12105  0A8D  0187               	clrf	7
 12106  0A8E  0801               	movf	1,w
 12107  0A8F  1903               	btfsc	3,2
 12108  0A90  2A9C               	goto	i1l3102
 12109                           
 12110                           ;i2c1.c: 588: {
 12111                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
 12112  0A91  0878               	movf	I2C1_Stop@completion_code,w
 12113  0A92  00F7               	movwf	??_I2C1_Stop
 12114  0A93  0872               	movf	_p_i2c1_current,w
 12115  0A94  3E02               	addlw	2
 12116  0A95  0086               	movwf	6
 12117  0A96  0187               	clrf	7
 12118  0A97  0801               	movf	1,w
 12119  0A98  0086               	movwf	6
 12120  0A99  0187               	clrf	7
 12121  0A9A  0877               	movf	??_I2C1_Stop,w
 12122  0A9B  0081               	movwf	1
 12123  0A9C                     i1l3102:	
 12124                           
 12125                           ;i2c1.c: 591: }
 12126                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 12127  0A9C  0020               	movlb	0	; select bank0
 12128  0A9D  01EF               	clrf	_i2c1_state
 12129  0A9E  0008               	return
 12130  0A9F                     __end_of_I2C1_Stop:	
 12131                           
 12132                           	psect	text37
 12133  0A20                     __ptext37:	
 12134 ;; *************** function _I2C1_FunctionComplete *****************
 12135 ;; Defined at:
 12136 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 12137 ;; Parameters:    Size  Location     Type
 12138 ;;		None
 12139 ;; Auto vars:     Size  Location     Type
 12140 ;;		None
 12141 ;; Return value:  Size  Location     Type
 12142 ;;                  1    wreg      void 
 12143 ;; Registers used:
 12144 ;;		wreg, status,2, status,0
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;Total ram usage:        1 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; This function calls:
 12157 ;;		Nothing
 12158 ;; This function is called by:
 12159 ;;		_I2C1_ISR
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           
 12164                           ;psect for function _I2C1_FunctionComplete
 12165  0A20                     _I2C1_FunctionComplete:	
 12166                           
 12167                           ;i2c1.c: 567: p_i2c1_trb_current++;
 12168                           
 12169                           ;incstack = 0
 12170                           ; Regs used in _I2C1_FunctionComplete: [wreg+status,2+status,0]
 12171  0A20  3004               	movlw	4
 12172  0A21  00F7               	movwf	??_I2C1_FunctionComplete
 12173  0A22  0877               	movf	??_I2C1_FunctionComplete,w
 12174  0A23  07F3               	addwf	_p_i2c1_trb_current,f
 12175                           
 12176                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 12177  0A24  3001               	movlw	1
 12178  0A25  02F4               	subwf	_i2c1_trb_count,f
 12179  0A26  1D03               	btfss	3,2
 12180  0A27  2A2E               	goto	i1l333
 12181                           
 12182                           ;i2c1.c: 571: {
 12183                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 12184  0A28  3004               	movlw	4
 12185  0A29  00F7               	movwf	??_I2C1_FunctionComplete
 12186  0A2A  0877               	movf	??_I2C1_FunctionComplete,w
 12187  0A2B  0020               	movlb	0	; select bank0
 12188  0A2C  00EF               	movwf	_i2c1_state
 12189                           
 12190                           ;i2c1.c: 573: }
 12191  0A2D  0008               	return
 12192  0A2E                     i1l333:	
 12193                           
 12194                           ;i2c1.c: 574: else
 12195                           ;i2c1.c: 575: {
 12196                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 12197  0A2E  0020               	movlb	0	; select bank0
 12198  0A2F  01EF               	clrf	_i2c1_state
 12199  0A30  0AEF               	incf	_i2c1_state,f
 12200  0A31  0008               	return
 12201  0A32                     __end_of_I2C1_FunctionComplete:	
 12202                           
 12203                           	psect	text38
 12204  07FF                     __ptext38:	
 12205 ;; *************** function _I2C1_BusCollisionISR *****************
 12206 ;; Defined at:
 12207 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;		None
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;		None
 12212 ;; Return value:  Size  Location     Type
 12213 ;;                  1    wreg      void 
 12214 ;; Registers used:
 12215 ;;		None
 12216 ;; Tracked objects:
 12217 ;;		On entry : 0/0
 12218 ;;		On exit  : 0/0
 12219 ;;		Unchanged: 0/0
 12220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;Total ram usage:        0 bytes
 12226 ;; Hardware stack levels used:    1
 12227 ;; This function calls:
 12228 ;;		Nothing
 12229 ;; This function is called by:
 12230 ;;		_INTERRUPT_InterruptManager
 12231 ;; This function uses a non-reentrant model
 12232 ;;
 12233                           
 12234                           
 12235                           ;psect for function _I2C1_BusCollisionISR
 12236  07FF                     _I2C1_BusCollisionISR:	
 12237                           
 12238                           ;incstack = 0
 12239                           ; Regs used in _I2C1_BusCollisionISR: []
 12240  07FF  0008               	return
 12241  0800                     __end_of_I2C1_BusCollisionISR:	
 12242  007E                     btemp	set	126	;btemp
 12243  007E                     int$flags	set	126
 12244  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    49
    Data        20
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     71      80
    BANK1            80     20      76
    BANK2            80      0      36
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    MYI2C_ReadFaders@readTRB.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    MYI2C_ReadPatch@readTRB.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    MYI2C_Write16EEPROMBytes@pData	PTR unsigned char  size(2) Largest target is 128
		 -> aPatchMemory(BIGRAM[128]), 

    updateModelFromPatchMemory@dualADSRdata1	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata1(BANK2[8]), 

    updateModelFromPatchMemory@dualADSRdata0	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata0(BANK2[8]), 

    updateModelFromPatchMemory@mvcChannels	PTR unsigned char  size(1) Largest target is 4
		 -> mvcChannels(BANK1[4]), 

    marshallPatchMemory@dualADSRdata1	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata1(BANK2[8]), 

    marshallPatchMemory@dualADSRdata0	PTR unsigned char  size(1) Largest target is 8
		 -> dualADSRdata0(BANK2[8]), 

    marshallPatchMemory@mvcChannels	PTR unsigned char  size(1) Largest target is 4
		 -> mvcChannels(BANK1[4]), 

    savePatch@pData	PTR unsigned char  size(2) Largest target is 128
		 -> aPatchMemory(BIGRAM[128]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), 
		 -> MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E14260 size(1) Largest target is 1
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> MYI2C_ReadFaders@status(COMMON[1]), 

    F14372.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_MasterWrite@pflag	PTR enum E14260 size(1) Largest target is 1
		 -> MYI2C_Write16EEPROMBytes@status(BANK0[1]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@status(COMMON[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), 

    F14367.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_trb_current	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 
		 -> NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    S374$pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_current.pbuffer	PTR unsigned char  size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    S386$pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    p_i2c1_current.pTrFlag	PTR enum E14260 size(1) Largest target is 17
		 -> MYI2C_ReadPatch@status(COMMON[1]), MYI2C_ReadPatch@pointerByte(COMMON[1]), MYI2C_Write16EEPROMBytes@writeBuffer(BANK0[17]), MYI2C_Write16EEPROMBytes@status(BANK0[1]), 
		 -> MYI2C_Write2LEDBytes@writeBuffer(BANK0[3]), MYI2C_Write2LEDBytes@status(BANK0[1]), MYI2C_WriteFaders@writeBuffer(COMMON[9]), MYI2C_WriteFaders@status(COMMON[1]), 
		 -> iI2CFaderValue(BANK1[8]), MYI2C_ReadFaders@status(COMMON[1]), MYI2C_ReadFaders@pointerByte(COMMON[1]), 

    S386$ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    p_i2c1_current.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> MYI2C_ReadPatch@readTRB(COMMON[8]), MYI2C_ReadFaders@readTRB(COMMON[8]), I2C1_MasterRead@trBlock(BANK1[4]), I2C1_MasterWrite@trBlock(BANK1[4]), 

    p_i2c1_current	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S397$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    i2c1_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    S397$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 

    i2c1_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK1[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_savePatch
    _savePatch->_MYI2C_Write16EEPROMBytes
    _MYI2C_Write16EEPROMBytes->_I2C1_MasterWrite
    _loadPatch->_writeDAC528
    _writeDAC528->_putByte
    _initDAC528->_putByte
    _putByte->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _blinkyLoop->_MYI2C_Write2LEDBytes
    _MYI2C_Write2LEDBytes->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_I2C1_Initialize
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _LED7SegDisplayValueByDigit->_LED7SegShiftOutPulseClock
    _LED7SegPulseClock->_delay
    _delay->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   35334
                                             67 BANK0      4     4      0
                                              0 BANK1     20    20      0
           _ADCC_GetSingleConversion
                _InitPanelInChannels
                    _InitmvcChannels
         _LED7SegDisplayValueByDigit
                       _LED7SegSetup
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                             ___wmul
                         _blinkyLoop
                              _delay
                         _initDAC528
                          _loadPatch
                          _savePatch
                        _writeDAC528
 ---------------------------------------------------------------------------------
 (1) _savePatch                                           15    13      2    3617
                                             52 BANK0     15    13      2
           _MYI2C_Write16EEPROMBytes
                _marshallPatchMemory
 ---------------------------------------------------------------------------------
 (2) _marshallPatchMemory                                 17    15      2     540
                                              0 BANK0     17    15      2
 ---------------------------------------------------------------------------------
 (2) _MYI2C_Write16EEPROMBytes                            38    34      4    2840
                                             14 BANK0     38    34      4
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (1) _loadPatch                                           12    10      2    6209
                                             58 BANK0      8     6      2
         _updateModelFromPatchMemory
                        _writeDAC528
 ---------------------------------------------------------------------------------
 (1) _writeDAC528                                          5     2      3    5548
                                             53 BANK0      5     2      3
                            _putByte
 ---------------------------------------------------------------------------------
 (2) _updateModelFromPatchMemory                          15    13      2     495
                                              0 BANK0     15    13      2
 ---------------------------------------------------------------------------------
 (1) _initDAC528                                           1     1      0    5268
                                             53 BANK0      1     1      0
                            _putByte
 ---------------------------------------------------------------------------------
 (2) _putByte                                              9     7      2    5268
                                             44 BANK0      9     7      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     623
                                             30 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2027
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _blinkyLoop                                           8     6      2    4718
                                             32 BANK0      8     6      2
               _MYI2C_Write2LEDBytes
                             ___wmul
                              _delay
 ---------------------------------------------------------------------------------
 (2) _MYI2C_Write2LEDBytes                                20    18      2    2781
                                             14 BANK0     18    16      2
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterWrite                                     7     3      4    2100
                                              7 BANK0      7     3      4
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterWriteTRBBuild                             7     3      4     690
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterTRBInsert                                 4     2      2     556
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2163
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1671
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      34
                    _ADCC_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED7SegSetup                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED7SegDisplayValueByDigit                           6     2      4    1807
                                             20 BANK0      6     2      4
          _LED7SegShiftOutPulseClock
 ---------------------------------------------------------------------------------
 (2) _LED7SegShiftOutPulseClock                            3     3      0    1343
                                             17 BANK0      3     3      0
                    _LED7SegPinWrite
                  _LED7SegPulseClock
 ---------------------------------------------------------------------------------
 (3) _LED7SegPulseClock                                    0     0      0    1182
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                               11     9      2    1182
                                              6 BANK0     11     9      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     526
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _LED7SegPinWrite                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitmvcChannels                                      3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitPanelInChannels                                  3     3      0      90
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADCC_GetSingleConversion                             4     1      3      31
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      22
                                              6 COMMON     1     1      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (7) _I2C1_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C1_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _I2C1_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCC_GetSingleConversion
   _InitPanelInChannels
   _InitmvcChannels
   _LED7SegDisplayValueByDigit
     _LED7SegShiftOutPulseClock
       _LED7SegPinWrite
       _LED7SegPulseClock
         _delay
           ___wmul
   _LED7SegSetup
   _SYSTEM_Initialize
     _ADCC_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___wmul
   _blinkyLoop
     _MYI2C_Write2LEDBytes
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     ___wmul
     _delay
       ___wmul
   _delay
     ___wmul
   _initDAC528
     _putByte
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _loadPatch
     _updateModelFromPatchMemory
     _writeDAC528
       _putByte
         ___awtoft
           ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _savePatch
     _MYI2C_Write16EEPROMBytes
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     _marshallPatchMemory
   _writeDAC528
     _putByte
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     14      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      24       9       45.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      CE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      CE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Aug 29 20:22:08 2018

                                         _b 00AF                                           _c 00B7  
                                         _d 00AC                                           _e 00B5  
                                         pc 0002                                 __CFG_CP$OFF 0000  
              __end_of_cPointerByteWriteLED 102F                  __size_of_LED7SegPulseClock 000B  
                       ___wmul@multiplicand 0022                                         l163 0A3B  
                                       l504 0CEB                                         l523 0110  
                                       l621 0D1C                                         l526 0191  
                                       l711 09D9                                         l833 0EDF  
                                       l950 0ADB                                         l775 0570  
                                       _GIE 005F                                __CFG_CPD$OFF 0000  
                       _marshallPatchMemory 049E                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_LVP$OFF 0000  
                          ?_InitmvcChannels 0077                                __CFG_ZCD$OFF 0000  
                              ___ftdiv@cntr 0038                            __end_of_I2C1_ISR 049E  
                              ___ftdiv@sign 003D                                        l1111 0D95  
                                      l1202 0EAD                                        l1118 0DA8  
                                      l1119 0DB0                                        l3122 0D48  
                                      l3230 0F07                                        l3136 0D32  
                                      l3138 0D5A                                        l3226 0EF8  
                                      l3170 04DB                                        l3162 04AF  
                                      l3244 0F33                                        l3260 0F2A  
                                      l3262 0F59                                        l3246 0F47  
                                      l3238 0F27                                        l3190 0521  
                                      l2800 0D72                                        l3280 0F9F  
                                      l3184 0514                                        l3176 04E8  
                                      l2810 0D9A                                        l2802 0D7C  
                                      l3274 0F72                                        l2812 0DA2  
                                      l2804 0D81                                        l3612 0DEC  
                                      l4500 0279                                        l4182 0AD5  
                                      l4350 07E2                                        l2910 06AB  
                                      l3294 0FD4                                        l3286 0FAC  
                                      l3198 054D                                        l2840 0CA3  
                                      l4432 0090                                        l2842 0CA8  
                                      l2906 06A3                                        l4530 0317  
                                      l4442 00D9                                        l4372 0BCE  
                                      l3716 075A                                        l3708 0741  
                                      l2836 0C9C                                        l4348 078C  
                                      l4524 0304                                        l4508 0299  
                                      l4452 00F5                                        l2846 0CAF  
                                      l2926 0E59                                        l4542 034F  
                                      l4462 011F                                        l4368 0BC3  
                                      l2952 0EA4                                        l2944 0E89  
                                      l4480 01BB                                        l4378 0BDF  
                                      l2866 0B53                                        l2882 064C  
                                      l2954 0EB0                                        l2946 0E97  
                                      l2796 0D6B                                        l2876 0636  
                                      l3694 0700                                        l2966 0BB0  
                                      l2894 0687                                        l2958 0EBE  
                                      l4486 01DD                                        l3688 06EA  
                                      l2984 05B9                                        l2898 068F  
                                      l2986 05BD               __size_of_MYI2C_Write2LEDBytes 005A  
                                      u2015 0D90                                        u2035 0D9D  
                                      u3005 0AAB                                        u2205 0668  
                                      _LATA 0016                                        _LATB 0017  
                                      _LATC 0018                                        u2225 0690  
                                      u2305 0E60                                        u3105 0E02  
                                      u2075 0DB7                                        u2235 0696  
                                      u4005 0AE1                                        u2414 057A  
                                      u2335 0E8A                                        u2415 0579  
                                      u4033 0CFD                                        u4025 0CE0  
                                      u3225 0712                                        u2265 06AC  
                                      u3065 0C35                                        u4050 0C2D  
                                      u3235 0722                                        u4115 0796  
                                      u2275 06B2                                        u2195 0658  
                                      u3075 0C55                                        u3245 0742  
                                      u2365 0EA5                                        u2605 0557  
                                      u4205 016A                                        u3255 0751  
                                      u2535 0D22                                        u3095 0DCD  
                                      u4215 0186                                        u3265 075B  
                                      u2545 04AD                                        u4305 032A  
                                      u2715 0EE5                                        u2635 0F05  
                                      u2555 04D9                                        u4315 035B  
                                      u4235 01DB                                        u4084 0AFA  
                                      u4085 0AF9                                        u2725 0F70  
                                      u2645 0F25                                        u4165 008E  
                                      u2735 0F9D                                        u4407 02FC  
                                      u4175 00D7                                        u4417 0347  
                                      u4185 010C                                        u4427 0E35  
                                      u4275 02DF                                        u4195 011D  
                                      u4285 0310                                        u1995 0D77  
                                      u2985 0B16                                        u3995 0ADC  
                                      _WPUA 0F39                                        _WPUB 0F44  
                                      _WPUC 0F4F                                        _WPUE 0F65  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      _main 0064                                ___ftpack@arg 0020  
                              ___ftpack@exp 0023                  MYI2C_Write2LEDBytes@nCount 0034  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      _twoK 101E                      ??_I2C1_MasterTRBInsert 0022  
                                      btemp 007E                                main@iCounter 00D9  
      LED7SegDisplayValueByDigit@iTensDigit 0034                               __CFG_BOREN$ON 0000  
                   __end_of_LED7SegPinWrite 09DB                                        start 0020  
                      ?_marshallPatchMemory 0020                                 _writeDAC528 0B6A  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                              ___ftmul@cntr 003C                  MYI2C_Write2LEDBytes@status 003F  
                              ___ftmul@sign 003D              I2C1_MasterWriteTRBBuild@length 0021  
                              ___fttol@exp1 004B                                ___fttol@lval 0047  
        __end_of_updateModelFromPatchMemory 1000                  _updateModelFromPatchMemory 0F61  
    MYI2C_Write2LEDBytes@slaveDeviceAddress 0036                                  _i2c1_state 006F  
            __size_of_OSCILLATOR_Initialize 0009                   I2C1_MasterTRBInsert@count 0023  
             __end_of_OSCILLATOR_Initialize 09E4                   I2C1_MasterTRBInsert@pflag 0021  
                                     _ADACQ 009D                                       _ADACT 0099  
                                     _ADCAP 009B                                       ?_main 0077  
                                     _ADCLK 0098                                       _ADCNT 010C  
                                     _ADPCH 009E                                       _ADREF 009A  
                         __end_of_I2C1_Stop 0A9F                                       _ADPRE 009C  
                             __CFG_WDTE$OFF 0000                                       _ADRPT 010D  
                           __end_of___ftdiv 077C                             __end_of___ftmul 06D3  
                           __end_of___fttol 0EC7                              __CFG_DEBUG$OFF 0000  
                                     i1l303 03CC                                       i1l304 03D8  
                                     i1l321 044C                                       i1l322 045A  
                                     i1l314 041A                                       i1l333 0A2E  
                                     i1l326 047F                                       i1l318 0439  
                                     i1l292 0376                                       i1l297 03A1  
                                     i1l298 03A9                                       i1l394 0013  
                                     i1l398 001B                                       _OSCEN 0891  
                                     _PORTB 000D                                       _PORTC 000E  
                                     _TRISA 0011                                       _TRISB 0012  
                                     _TRISC 0013                             __end_of_datapin 1024  
              __end_of_I2C1_BusCollisionISR 0800                           ??_I2C1_Initialize 0020  
           __end_of_cPointerByteWriteFaders 1031                               ___awtoft@sign 002D  
                                     _delay 0CB5                               ___ftpack@sign 0024  
                                     _speed 1020                           savePatch@batchNum 005F  
                           __end_of_putByte 061F                                       status 0003  
                                     wtemp0 007E                 MYI2C_Write2LEDBytes@counter 0037  
                     ??_marshallPatchMemory 0022             I2C1_MasterWriteTRBBuild@address 0022  
               MYI2C_Write2LEDBytes@timeOut 0039                                  _iLEDs0_LSB 00C0  
                                _iLEDs0_MSB 006C                                  _iLEDs1_LSB 00BE  
                                _iLEDs1_MSB 00BF                        __end_of_LED7SegSetup 0A20  
                           __initialization 0022                       I2C1_MasterWrite@pdata 002D  
                     I2C1_MasterWrite@pflag 002A                                __end_of_main 0363  
                              __end_of_twoK 1020            __end_of_MYI2C_Write16EEPROMBytes 0F61  
               ?_INTERRUPT_InterruptManager 0077                         _lineSettleMicroTime 101A  
                            _iI2CFaderValue 00C1                                 _i2c1_object 0067  
                                    ??_main 0063                               ___fttol@sign1 0046  
               ??_LED7SegShiftOutPulseClock 0031                             putByte@clockPin 004C  
     LED7SegDisplayValueByDigit@iUnitsDigit 0036                   savePatch@iPatchAddressLow 005A  
                                    ?_delay 0026                                      _ADACCH 0091  
                                    _ADACCL 0090                                      _ADCON0 0093  
                                    _ADCON1 0094                                      _ADCON2 0095  
                                    _ADCON3 0096                                      _ADERRH 0117  
                                    _ADERRL 0116                                      i1S4618 0800  
                                    _ADLTHH 010F                                      _ADLTHL 010E  
                                    _ADRESH 008D                                      _ADRESL 008C  
                                    _ADSTAT 0097                                      _ADUTHH 0111  
                                    _ADUTHL 0110                            __end_of___awtoft 0B6A  
                                    _ANSELA 0F38                                      _ANSELB 0F43  
                                    _ANSELC 0F4E                            __end_of___ftpack 0DC7  
                                    _RC3PPS 0F23                                      _RC4PPS 0F24  
                                    i1l3102 0A9C                                      _ODCONA 0F3A  
                                    _ODCONB 0F45                                      _ODCONC 0F50  
                                    i1l3420 0414                                      i1l3414 0409  
                                    i1l3362 0394                                      i1l3452 0468  
                                    i1l3436 0441                                      i1l3428 0428  
                                    i1l3380 03C6                                      i1l3374 03B5  
                                    i1l3464 0482                                      i1l3448 0461  
                                    i1l3466 0485                                      i1l3394 03F5  
                                    i1l3474 0492                                      i1l3468 0489  
                            __CFG_WDTCCS$SC 0000         MYI2C_Write16EEPROMBytes@pointerByte 004C  
                      _cPointerByteWriteLED 102E                                      _OSCFRQ 0893  
                         ?_I2C1_MasterWrite 0027                       main@SaveDebounceCount 00E3  
                          ?_LED7SegPinWrite 0077                              __CFG_PWRTE$OFF 0000  
      MYI2C_Write16EEPROMBytes@writeAddress 002E                         __end_of_MvcMaxValue 1016  
                          __end_of_clockpin 1026                          ??_I2C1_MasterWrite 002B  
                       __end_of_MvcMinValue 1018                              _p_i2c1_current 0072  
                          __end_of_maxBanks 1012                                      ___wmul 0AD2  
                            __CFG_STVREN$ON 0000                                   ??___ftdiv 0034  
                                 ??___ftmul 0034                                   ??___fttol 0042  
                          __end_of_latchpin 1028                  ??_I2C1_MasterWriteTRBBuild 0024  
                                 ?_I2C1_ISR 0077                                      _wkByte 00BB  
                                    main@fx 00E6                       ___ftmul@f3_as_product 0039  
                           _ADCC_Initialize 0AB8                                   ??_putByte 004E  
         __size_of_ADCC_GetSingleConversion 0014                   ?_ADCC_GetSingleConversion 0020  
             I2C1_MasterWriteTRBBuild@pdata 0020                           _SYSTEM_Initialize 09EF  
                 _LED7SegShiftOutPulseClock 0AEE                     __end_of__initialization 0060  
                        ?_SYSTEM_Initialize 0077                                  ___ftdiv@f1 0031  
                                ___ftdiv@f2 002E                                  ___ftdiv@f3 0039  
                            _i2c1_trb_count 0074                                  ___awtoft@c 0028  
                                ___ftmul@f1 002E                                  ___ftmul@f2 0031  
                     _I2C1_FunctionComplete 0A20                        _I2C1_BusCollisionISR 07FF  
                                ___fttol@f1 003E                              __pcstackCOMMON 0077  
                    I2C1_MasterWrite@length 0027                                __pidataBANK2 0A46  
                       ??_SYSTEM_Initialize 0021                               __end_of_delay 0D08  
                            main@faderValue 00E8                               __end_of_speed 1022  
                                ??_I2C1_ISR 0079       updateModelFromPatchMemory@mvcChannels 0026  
                  _MYI2C_Write16EEPROMBytes 0EC7                          main@fader8bitValue 00E5  
                                   ??_delay 0028                   __end_of_SYSTEM_Initialize 09FB  
       MYI2C_Write16EEPROMBytes@writeBuffer 0036                            InitmvcChannels@i 0021  
                __end_of_i2c_addr_dualADSR0 102E                  __end_of_i2c_addr_dualADSR1 102D  
                                __pbssBANK0 0067                                  __pbssBANK1 00A0  
                                __pbssBANK2 0134                                 _MvcMaxValue 1014  
                        __size_of_loadPatch 0040                                 _MvcMinValue 1016  
                     __size_of_LED7SegSetup 000D                      savePatch@iPatchAddress 0061  
                LED7SegShiftOutPulseClock@i 0033                                ?_writeDAC528 0055  
                     ?_I2C1_BusCollisionISR 0077                              _SSP1DATPPSbits 0EC6  
                                __pmaintext 0064                __size_of_InitPanelInChannels 001E  
                                   ?___wmul 0020                __end_of_MYI2C_Write2LEDBytes 0D62  
                           __CFG_PPS1WAY$ON 0000                     __end_of_ADCC_Initialize 0AD2  
                        __size_of_savePatch 0079                                  __pintentry 0004  
                           _I2C1_Initialize 0A70                                     _ADFLTRH 0115  
               ?_updateModelFromPatchMemory 0020                                     _ADFLTRL 0114  
                                _blinkyLoop 077C                                     _ADPREVH 008F  
                                   _ADPREVL 008E                                   ?___awtoft 0028  
                                 ?___ftpack 0020                                     _ADSTPTH 0113  
                                   _ADSTPTL 0112                              _SSP1CLKPPSbits 0EC5  
                       __CFG_RSTOSC$HFINT32 0000                                     _OSCCON1 088D  
                                   _OSCCON3 088F                                   _I2C1_Stop 0A87  
                                   _OSCTUNE 0892                                _LED7SegSetup 0A13  
                     main@LoadDebounceCount 00E1                                     _SSP1ADD 018D  
                                   _PPSLOCK 0E8F                                     _SSP1BUF 018C  
            marshallPatchMemory@mvcChannels 0028             MYI2C_Write2LEDBytes@pointerByte 003B  
                                _initDAC528 0A5A                              main@readStatus 00D8  
             I2C1_MasterTRBInsert@ptrb_list 0020                         __end_of_cPowerOfTwo 1010  
                                _maxPatches 1012                    __size_of_InitmvcChannels 0019  
                    ?_I2C1_FunctionComplete 0077               __size_of_I2C1_MasterTRBInsert 0046  
                        _p_i2c1_trb_current 0073                             _PanelInChannels 00A4  
                      __CFG_SCANE$available 0000                                     ___ftdiv 06D3  
                           __size_of___wmul 001C                                     ___ftmul 061F  
                                   ___fttol 0E40                          writeDAC528@dacData 0057  
        marshallPatchMemory@iPatchMemoryNDX 002F                                  ??___awtoft 002B  
                                ??___ftpack 0025                                     _datapin 1022  
                                   __ptext1 0DC7                                     __ptext2 049E  
                                   __ptext3 0EC7                                     __ptext4 0C2F  
                                   __ptext5 0B6A                                     __ptext6 0F61  
                                   __ptext7 0A5A                                     __ptext8 056A  
                                   __ptext9 0E40                           __end_of_loadPatch 0C6F  
                     _OSCILLATOR_Initialize 09DB                                     _wkFloat 00B2  
                                   _segdisp 0120                    ??_PIN_MANAGER_Initialize 0020  
                      loadPatch@PatchNumber 005A                                  ?_I2C1_Stop 0077  
                                   _putByte 056A                  __size_of_SYSTEM_Initialize 000C  
                      I2C1_ISR@pi2c_buf_ptr 0071                                     clrloop0 09FC  
                         __end_of_savePatch 0E40                 __end_of_marshallPatchMemory 056A  
                      end_of_initialization 0060                ??_LED7SegDisplayValueByDigit 0038  
                                   init_ram 0A07                                     initloop 0A08  
 updateModelFromPatchMemory@iPatchMemoryNDX 002B                      ??_I2C1_BusCollisionISR 0077  
                   __end_of_I2C1_Initialize 0A87                           __end_of_toggleDly 101E  
                   _cPointerByteWriteFaders 1030            marshallPatchMemory@dualADSRdata0 0020  
          marshallPatchMemory@dualADSRdata1 0021                            ?_ADCC_Initialize 0077  
          __end_of_ADCC_GetSingleConversion 0A46   MYI2C_Write16EEPROMBytes@iPatchAddressHigh 004E  
                               ?_blinkyLoop 0040                       __CFG_WDTCPS$WDTCPS_31 0000  
                                 _PORTBbits 000D                   __size_of_I2C1_MasterWrite 0028  
                         __size_of_I2C1_ISR 013B         __size_of_LED7SegDisplayValueByDigit 0039  
                                 _MY_CONSTS 006D                                   _TRISCbits 0013  
           MYI2C_Write2LEDBytes@writeBuffer 003C                                 _cPowerOfTwo 1000  
                          __CFG_FEXTOSC$OFF 0000                                 putByte@data 0052  
                           main@iResetValue 1028                                 ?_initDAC528 0077  
                               putByte@mask 0053                        _MYI2C_Write2LEDBytes 0D08  
         I2C1_ISR@i2c_10bit_address_restart 006E                   marshallPatchMemory@i_1221 002B  
                 marshallPatchMemory@i_1222 002D                                  main@fx_978 00EA  
                               ___ftdiv@exp 003C                     I2C1_MasterWrite@address 0028  
                               ___ftmul@exp 0038                  ??_MYI2C_Write16EEPROMBytes 0032  
                      __size_of_writeDAC528 0025     updateModelFromPatchMemory@dualADSRdata0 0020  
   updateModelFromPatchMemory@dualADSRdata1 0021                      delay@adjustedDelaytime 0029  
                         ??_InitmvcChannels 0020                    __size_of_LED7SegPinWrite 0009  
                            __end_of___wmul 0AEE                     I2C1_MasterWrite@trBlock 00D1  
                  I2C1_Stop@completion_code 0078                      ?_OSCILLATOR_Initialize 0077  
                            _clockMicroTime 1018                 __end_of_lineSettleMicroTime 101C  
                       start_initialization 0022                                 ??_I2C1_Stop 0077  
           __size_of_PIN_MANAGER_Initialize 003F                         _InitPanelInChannels 0B0A  
                     ?_MYI2C_Write2LEDBytes 002E           __size_of_I2C1_MasterWriteTRBBuild 0020  
                 ?_I2C1_MasterWriteTRBBuild 0020                                  loadPatch@i 0060  
                       __size_of_blinkyLoop 0083                      _cPointerByteReadFaders 102F  
                          ?_I2C1_Initialize 0077                            __CFG_LPBOREN$OFF 0000  
                      savePatch@PatchNumber 0054                        ?_InitPanelInChannels 0077  
                        _i2c_addr_dualADSR0 102D                          _i2c_addr_dualADSR1 102C  
                                  ??___wmul 0024                                 __pdataBANK2 0120  
                    __end_of_clockMicroTime 101A                         __size_of_initDAC528 0016  
              I2C1_MasterWriteTRBBuild@ptrb 0026                           __size_of___awtoft 0022  
                  _ADCC_GetSingleConversion 0A32                           __size_of___ftpack 0065  
                               __pbssBIGRAM 2370                     __end_ofmain@iResetValue 102A  
                               __pbssCOMMON 0070                                   ___latbits 0002  
                             __pcstackBANK0 0020                               __pcstackBANK1 00D8  
          MYI2C_Write2LEDBytes@LSBWriteByte 002F                               _i2c1_tr_queue 00D5  
                       blinkyLoop@delayTime 0044          __end_of_LED7SegDisplayValueByDigit 0BF0  
                _LED7SegDisplayValueByDigit 0BB7                      loadPatch@iPatchAddress 005E  
                      writeDAC528@dacNumber 0055                     ??_I2C1_FunctionComplete 0077  
             MYI2C_Write16EEPROMBytes@pData 0030                      _PIN_MANAGER_Initialize 0BF0  
          MYI2C_Write2LEDBytes@MSBWriteByte 002E                       ??_InitPanelInChannels 0020  
           ADCC_GetSingleConversion@channel 0023                                    ?___ftdiv 002E  
                                  ?___ftmul 002E                                    ?___fttol 003E  
                                  _I2C1_ISR 0363                ??_INTERRUPT_InterruptManager 007D  
                      marshallPatchMemory@i 0029                                   __pswtext1 0800  
                          _I2C1_MasterWrite 0B8F                          LED7SegPinWrite@val 0020  
                              savePatch@idx 005D                __end_of_I2C1_MasterTRBInsert 0CB5  
                    main@prevFader8bitValue 00DC                           ??_LED7SegPinWrite 0020  
                       blinkyLoop@loopCount 0046                                   _loadPatch 0C2F  
                                  ?_putByte 004C                      ??_MYI2C_Write2LEDBytes 0030  
                              _wkFaderValue 00BD                              __size_of_delay 0053  
                              delay@counter 002D                      I2C1_MasterRead@trBlock 00CD  
                            ___wmul@product 0024                            main@iChangeCount 00DB  
                                  _LATCbits 0018                                   _savePatch 0DC7  
                                 clear_ram0 09FB                                    _PIE3bits 0719  
       __size_of_INTERRUPT_InterruptManager 001C                                    _PIR3bits 070F  
       LED7SegDisplayValueByDigit@iTensCode 0038                                    _SSP1CON1 0190  
                                  _SSP1CON3 0192    MYI2C_Write16EEPROMBytes@iPatchAddressLow 0047  
                                  _SSP1STAT 018F                                ??_blinkyLoop 0042  
                                 _toggleDly 101C                                  _ADCON0bits 0093  
                                _ADCON1bits 0094                                  _ADCON2bits 0095  
                                _ADCON3bits 0096                           ___wmul@multiplier 0020  
                             _dualADSRdata0 013C                               _dualADSRdata1 0134  
                            savePatch@pData 005B                                  ?_loadPatch 005A  
               updateModelFromPatchMemory@i 002D                                ??_initDAC528 0055  
                           _faderActiveFlag 00A8  MYI2C_Write16EEPROMBytes@slaveDeviceAddress 004D  
                        __end_of_blinkyLoop 07FF                             _InitmvcChannels 0A9F  
                                ?_savePatch 0054                                  _ADSTATbits 0097  
              __size_of_marshallPatchMemory 00CC                                _aPatchMemory 2370  
             __size_of_I2C1_BusCollisionISR 0001                      I2C1_ISR@i2c_bytes_left 0070  
                   ??_OSCILLATOR_Initialize 0020                              delay@delaytime 0026  
                          __size_of___ftdiv 00A9                            __size_of___ftmul 00B4  
                          __size_of___fttol 0087                                    ___awtoft 0B48  
                                  ___ftpack 0D62            __end_of_I2C1_MasterWriteTRBBuild 0B48  
                        __end_of_initDAC528 0A70                           _LED7SegPulseClock 09E4  
                                _ANSELCbits 0F4E                          ?_LED7SegPulseClock 0077  
                  __size_of_ADCC_Initialize 001A                          __end_of_maxPatches 1014  
                       I2C1_ISR@i2c_address 0075                                    __ptext10 061F  
                                  __ptext11 0B48                                    __ptext20 0BF0  
                                  __ptext12 077C                                    __ptext21 09DB  
                                  __ptext13 0D08                                    __ptext30 09D2  
                                  __ptext22 0A70                                    __ptext14 0B8F  
                                  __ptext31 0A9F                                    __ptext23 0AB8  
                                  __ptext15 0B28                                    __ptext32 0B0A  
                                  __ptext24 0A13                                    __ptext16 0C6F  
                                  __ptext33 0A32                                    __ptext25 0BB7  
                                  __ptext17 06D3                                    __ptext26 0AEE  
                                  __ptext18 0D62                                    __ptext35 0363  
                                  __ptext27 09E4                                    __ptext19 09EF  
                                  __ptext36 0A87                                    __ptext28 0CB5  
                                  __ptext37 0A20                                    __ptext29 0AD2  
                                  __ptext38 07FF                          blinkyLoop@maxLoops 0040  
                              _SSP1CON1bits 0190                                _SSP1CON2bits 0191  
           MYI2C_Write16EEPROMBytes@counter 004F                                    _clockpin 1024  
                               _mvcChannels 00C9                            __size_of_putByte 00B5  
                                  _maxBanks 1010                         ??_LED7SegPulseClock 0031  
                                  _wkMIDICC 00BC             MYI2C_Write16EEPROMBytes@timeOut 004A  
                                  _latchpin 1026                               __size_of_main 02FF  
                      InitPanelInChannels@i 0021                               ??_writeDAC528 0058  
                      __CFG_WDTCWS$WDTCWS_7 0000                        _I2C1_MasterTRBInsert 0C6F  
                    writeDAC528@wkDacNumber 0059                  ??_ADCC_GetSingleConversion 0023  
                                  int$flags 007E          __end_of_INTERRUPT_InterruptManager 0020  
                _INTERRUPT_InterruptManager 0004                   __end_of_LED7SegPulseClock 09EF  
        __size_of_LED7SegShiftOutPulseClock 001C                ??_updateModelFromPatchMemory 0022  
                ?_LED7SegShiftOutPulseClock 0077                 PIN_MANAGER_Initialize@state 0020  
              LED7SegShiftOutPulseClock@val 0032                              _cMstrClkAdjust 102A  
                                _INTCONbits 000B           __size_of_MYI2C_Write16EEPROMBytes 009A  
                               ??_loadPatch 005C                   ?_MYI2C_Write16EEPROMBytes 002E  
                             ?_LED7SegSetup 0077                              __pstringtext10 1020  
                            __pstringtext11 1022                              __pstringtext20 1030  
                            __pstringtext12 1024                              __pstringtext13 1026  
                            __pstringtext14 1028                              __pstringtext15 102A  
                            __pstringtext16 102C                              __pstringtext17 102D  
                            __pstringtext18 102E                              __pstringtext19 102F  
                   __end_of_InitmvcChannels 0AB8              __end_of_cPointerByteReadFaders 1030  
                                  intlevel1 0000                 ?_LED7SegDisplayValueByDigit 0034  
            MYI2C_Write16EEPROMBytes@nCount 0048                              _mvcPatchNumber 00B9  
                   ?_PIN_MANAGER_Initialize 0077                    __end_of_I2C1_MasterWrite 0BB7  
                               ??_savePatch 0056                           __CFG_CLKOUTEN$OFF 0000  
            __size_of_I2C1_FunctionComplete 0012               __end_of_I2C1_FunctionComplete 0A32  
          updateModelFromPatchMemory@i_1230 0029            updateModelFromPatchMemory@i_1229 0027  
                               _PPSLOCKbits 0E8F              MYI2C_Write16EEPROMBytes@status 0053  
                     ?_I2C1_MasterTRBInsert 0020                  savePatch@iPatchAddressHigh 0059  
       __size_of_updateModelFromPatchMemory 009F                                    putByte@i 0054  
                           _LED7SegPinWrite 09D2                         __end_of_writeDAC528 0B8F  
                    __end_of_cMstrClkAdjust 102C                    __size_of_I2C1_Initialize 0017  
                             __pstringtext1 1000                               __pstringtext2 1010  
                             __pstringtext3 1012                               __pstringtext4 1014  
                             __pstringtext5 1016                               __pstringtext6 1018  
                             __pstringtext7 101A                               __pstringtext8 101C  
                             __pstringtext9 101E           __end_of_LED7SegShiftOutPulseClock 0B0A  
                             main@POT0Value 00DF                               main@POT1Value 00E0  
                            ??_LED7SegSetup 0020                    _I2C1_MasterWriteTRBBuild 0B28  
                          main@iLoopCounter 00DD              __end_of_PIN_MANAGER_Initialize 0C2F  
                         ??_ADCC_Initialize 0020                          __size_of_I2C1_Stop 0018  
               __end_of_InitPanelInChannels 0B28                   MYI2C_Write16EEPROMBytes@i 0051  
                       _prevPanelInChannels 00A0  
